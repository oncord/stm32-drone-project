
LPS22HH setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08007cf0  08007cf0  00008cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008224  08008224  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008224  08008224  00009224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800822c  0800822c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800822c  0800822c  0000922c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008230  08008230  00009230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008234  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          0000020c  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e0  200003e0  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5d2  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e2  00000000  00000000  000147d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00016bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d5  00000000  00000000  000178f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002372a  00000000  00000000  000182cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c1dc  00000000  00000000  0003b9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cabaf  00000000  00000000  00047bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112782  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047bc  00000000  00000000  001127c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  00116f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cd8 	.word	0x08007cd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007cd8 	.word	0x08007cd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f023 0210 	bic.w	r2, r3, #16
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d101      	bne.n	8000f58 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	330c      	adds	r3, #12
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	330c      	adds	r3, #12
 8000f92:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	619a      	str	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001018:	4907      	ldr	r1, [pc, #28]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800

0800103c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4013      	ands	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40023800 	.word	0x40023800

0800106c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b090      	sub	sp, #64	@ 0x40
 8001070:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2228      	movs	r2, #40	@ 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fbd4 	bl	8005828 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001090:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001094:	f7ff ffd2 	bl	800103c <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001098:	2002      	movs	r0, #2
 800109a:	f7ff ffb7 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800109e:	2004      	movs	r0, #4
 80010a0:	f7ff ffb4 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ffb1 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80010aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80010ae:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010b0:	2302      	movs	r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80010c0:	2305      	movs	r3, #5
 80010c2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4841      	ldr	r0, [pc, #260]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010ca:	f002 fd42 	bl	8003b52 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010d2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80010d6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010dc:	2302      	movs	r3, #2
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ea:	2318      	movs	r3, #24
 80010ec:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010f6:	230a      	movs	r3, #10
 80010f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	4619      	mov	r1, r3
 8001100:	4834      	ldr	r0, [pc, #208]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001102:	f002 ff04 	bl	8003f0e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001106:	2100      	movs	r1, #0
 8001108:	4832      	ldr	r0, [pc, #200]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 800110a:	f7ff fef3 	bl	8000ef4 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800110e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001112:	4831      	ldr	r0, [pc, #196]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001114:	f7ff ff6a 	bl	8000fec <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800111c:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800111e:	f7ff ff65 	bl	8000fec <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001126:	482d      	ldr	r0, [pc, #180]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 8001128:	f7ff ff60 	bl	8000fec <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001132:	2301      	movs	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4822      	ldr	r0, [pc, #136]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001148:	f002 fd03 	bl	8003b52 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800114c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001150:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001152:	2301      	movs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	481c      	ldr	r0, [pc, #112]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001168:	f002 fcf3 	bl	8003b52 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800116c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001170:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4815      	ldr	r0, [pc, #84]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 8001188:	f002 fce3 	bl	8003b52 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800118c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001190:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001196:	2301      	movs	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011a0:	f002 fcd7 	bl	8003b52 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80011a4:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80011a6:	f7ff fe95 	bl	8000ed4 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80011aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ae:	4808      	ldr	r0, [pc, #32]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80011b0:	f7ff ff0e 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80011b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 80011ba:	f7ff ff09 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80011be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011c4:	f7ff ff04 	bl	8000fd0 <LL_GPIO_SetOutputPin>
}
 80011c8:	bf00      	nop
 80011ca:	3740      	adds	r7, #64	@ 0x40
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40003800 	.word	0x40003800
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020000 	.word	0x40020000

080011e0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	BNO080_GPIO_SPI_Initialization();
 80011e4:	f7ff ff42 	bl	800106c <BNO080_GPIO_SPI_Initialization>

	printf("Checking BNO080...\n");
 80011e8:	4825      	ldr	r0, [pc, #148]	@ (8001280 <BNO080_Initialization+0xa0>)
 80011ea:	f004 fa3d 	bl	8005668 <puts>

	CHIP_DESELECT(BNO080);
 80011ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011f2:	4824      	ldr	r0, [pc, #144]	@ (8001284 <BNO080_Initialization+0xa4>)
 80011f4:	f7ff feec 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011fc:	4822      	ldr	r0, [pc, #136]	@ (8001288 <BNO080_Initialization+0xa8>)
 80011fe:	f7ff fee7 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001202:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001206:	4821      	ldr	r0, [pc, #132]	@ (800128c <BNO080_Initialization+0xac>)
 8001208:	f7ff fef0 	bl	8000fec <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800120c:	20c8      	movs	r0, #200	@ 0xc8
 800120e:	f001 fde7 	bl	8002de0 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001212:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001216:	481d      	ldr	r0, [pc, #116]	@ (800128c <BNO080_Initialization+0xac>)
 8001218:	f7ff feda 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800121c:	f000 f8c2 	bl	80013a4 <BNO080_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001220:	f000 f8c0 	bl	80013a4 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001224:	f000 f8e2 	bl	80013ec <BNO080_receivePacket>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001228:	f000 f8bc 	bl	80013a4 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800122c:	f000 f8de 	bl	80013ec <BNO080_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <BNO080_Initialization+0xb0>)
 8001232:	22f9      	movs	r2, #249	@ 0xf9
 8001234:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <BNO080_Initialization+0xb0>)
 8001238:	2200      	movs	r2, #0
 800123a:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800123c:	2102      	movs	r1, #2
 800123e:	2002      	movs	r0, #2
 8001240:	f000 f946 	bl	80014d0 <BNO080_sendPacket>

	//Now we wait for response
	BNO080_waitForSPI();
 8001244:	f000 f8ae 	bl	80013a4 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001248:	f000 f8d0 	bl	80013ec <BNO080_receivePacket>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10b      	bne.n	800126a <BNO080_Initialization+0x8a>
	{
		//printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <BNO080_Initialization+0xb0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2bf8      	cmp	r3, #248	@ 0xf8
 8001258:	d107      	bne.n	800126a <BNO080_Initialization+0x8a>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <BNO080_Initialization+0xb0>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <BNO080_Initialization+0xb4>)
 8001262:	f004 f999 	bl	8005598 <iprintf>
			return (0);
 8001266:	2300      	movs	r3, #0
 8001268:	e007      	b.n	800127a <BNO080_Initialization+0x9a>
		}// Sensor OK
	}

	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <BNO080_Initialization+0xb0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	22f8      	movs	r2, #248	@ 0xf8
 8001270:	4619      	mov	r1, r3
 8001272:	4809      	ldr	r0, [pc, #36]	@ (8001298 <BNO080_Initialization+0xb8>)
 8001274:	f004 f990 	bl	8005598 <iprintf>
	return (1); //Something went wrong
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	08007cf0 	.word	0x08007cf0
 8001284:	40020400 	.word	0x40020400
 8001288:	40020000 	.word	0x40020000
 800128c:	40020800 	.word	0x40020800
 8001290:	200001f4 	.word	0x200001f4
 8001294:	08007d04 	.word	0x08007d04
 8001298:	08007d24 	.word	0x08007d24

0800129c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012a6:	bf00      	nop
 80012a8:	480c      	ldr	r0, [pc, #48]	@ (80012dc <SPI2_SendByte+0x40>)
 80012aa:	f7ff fe49 	bl	8000f40 <LL_SPI_IsActiveFlag_TXE>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f9      	beq.n	80012a8 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4619      	mov	r1, r3
 80012b8:	4808      	ldr	r0, [pc, #32]	@ (80012dc <SPI2_SendByte+0x40>)
 80012ba:	f7ff fe62 	bl	8000f82 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012be:	bf00      	nop
 80012c0:	4806      	ldr	r0, [pc, #24]	@ (80012dc <SPI2_SendByte+0x40>)
 80012c2:	f7ff fe2a 	bl	8000f1a <LL_SPI_IsActiveFlag_RXNE>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f9      	beq.n	80012c0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012cc:	4803      	ldr	r0, [pc, #12]	@ (80012dc <SPI2_SendByte+0x40>)
 80012ce:	f7ff fe4a 	bl	8000f66 <LL_SPI_ReceiveData8>
 80012d2:	4603      	mov	r3, r0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40003800 	.word	0x40003800

080012e0 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2200      	movs	r2, #0
 80012ee:	4619      	mov	r1, r3
 80012f0:	2005      	movs	r0, #5
 80012f2:	f000 f805 	bl	8001300 <BNO080_setFeatureCommand>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800130e:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001310:	22fd      	movs	r2, #253	@ 0xfd
 8001312:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001314:	4a22      	ldr	r2, [pc, #136]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800131a:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 800131c:	2200      	movs	r2, #0
 800131e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001322:	2200      	movs	r2, #0
 8001324:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001328:	2200      	movs	r2, #0
 800132a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001332:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 800133c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001346:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	0e1b      	lsrs	r3, r3, #24
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001350:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001354:	2200      	movs	r2, #0
 8001356:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 800135a:	2200      	movs	r2, #0
 800135c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001366:	2200      	movs	r2, #0
 8001368:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001370:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 800137a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001384:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0e1b      	lsrs	r3, r3, #24
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 800138e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001390:	2111      	movs	r1, #17
 8001392:	2002      	movs	r0, #2
 8001394:	f000 f89c 	bl	80014d0 <BNO080_sendPacket>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001f4 	.word	0x200001f4

080013a4 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	e00c      	b.n	80013ca <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013b4:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <BNO080_waitForSPI+0x40>)
 80013b6:	f7ff fdf6 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80013c0:	2301      	movs	r3, #1
 80013c2:	e00a      	b.n	80013da <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d1ee      	bne.n	80013b0 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <BNO080_waitForSPI+0x44>)
 80013d4:	f004 f948 	bl	8005668 <puts>
	return (0);
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020800 	.word	0x40020800
 80013e8:	08007d70 	.word	0x08007d70

080013ec <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80013f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f6:	4832      	ldr	r0, [pc, #200]	@ (80014c0 <BNO080_receivePacket+0xd4>)
 80013f8:	f7ff fdd5 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001402:	2300      	movs	r3, #0
 8001404:	e057      	b.n	80014b6 <BNO080_receivePacket+0xca>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001406:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800140a:	482e      	ldr	r0, [pc, #184]	@ (80014c4 <BNO080_receivePacket+0xd8>)
 800140c:	f7ff fdee 	bl	8000fec <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff ff43 	bl	800129c <SPI2_SendByte>
 8001416:	4603      	mov	r3, r0
 8001418:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff ff3e 	bl	800129c <SPI2_SendByte>
 8001420:	4603      	mov	r3, r0
 8001422:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff ff39 	bl	800129c <SPI2_SendByte>
 800142a:	4603      	mov	r3, r0
 800142c:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff ff34 	bl	800129c <SPI2_SendByte>
 8001434:	4603      	mov	r3, r0
 8001436:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001438:	4a23      	ldr	r2, [pc, #140]	@ (80014c8 <BNO080_receivePacket+0xdc>)
 800143a:	7b7b      	ldrb	r3, [r7, #13]
 800143c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800143e:	4a22      	ldr	r2, [pc, #136]	@ (80014c8 <BNO080_receivePacket+0xdc>)
 8001440:	7b3b      	ldrb	r3, [r7, #12]
 8001442:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001444:	4a20      	ldr	r2, [pc, #128]	@ (80014c8 <BNO080_receivePacket+0xdc>)
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800144a:	4a1f      	ldr	r2, [pc, #124]	@ (80014c8 <BNO080_receivePacket+0xdc>)
 800144c:	7abb      	ldrb	r3, [r7, #10]
 800144e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001450:	7b3b      	ldrb	r3, [r7, #12]
 8001452:	b21b      	sxth	r3, r3
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	7b7b      	ldrb	r3, [r7, #13]
 800145a:	b21b      	sxth	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001460:	893b      	ldrh	r3, [r7, #8]
 8001462:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001466:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001468:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <BNO080_receivePacket+0x88>
	{
		//Packet is empty
		return (0); //All done
 8001470:	2300      	movs	r3, #0
 8001472:	e020      	b.n	80014b6 <BNO080_receivePacket+0xca>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001474:	893b      	ldrh	r3, [r7, #8]
 8001476:	3b04      	subs	r3, #4
 8001478:	b29b      	uxth	r3, r3
 800147a:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800147c:	2300      	movs	r3, #0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	e00e      	b.n	80014a0 <BNO080_receivePacket+0xb4>
	{
		incoming = SPI2_SendByte(0xFF);
 8001482:	20ff      	movs	r0, #255	@ 0xff
 8001484:	f7ff ff0a 	bl	800129c <SPI2_SendByte>
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001490:	d803      	bhi.n	800149a <BNO080_receivePacket+0xae>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	490d      	ldr	r1, [pc, #52]	@ (80014cc <BNO080_receivePacket+0xe0>)
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	3301      	adds	r3, #1
 800149e:	81fb      	strh	r3, [r7, #14]
 80014a0:	89fa      	ldrh	r2, [r7, #14]
 80014a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbeb      	blt.n	8001482 <BNO080_receivePacket+0x96>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80014aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <BNO080_receivePacket+0xd8>)
 80014b0:	f7ff fd8e 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020400 	.word	0x40020400
 80014c8:	200001f0 	.word	0x200001f0
 80014cc:	200001f4 	.word	0x200001f4

080014d0 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	4613      	mov	r3, r2
 80014de:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	3304      	adds	r3, #4
 80014e4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80014e6:	f7ff ff5d 	bl	80013a4 <BNO080_waitForSPI>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80014f0:	2300      	movs	r3, #0
 80014f2:	e032      	b.n	800155a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80014f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f8:	481a      	ldr	r0, [pc, #104]	@ (8001564 <BNO080_sendPacket+0x94>)
 80014fa:	f7ff fd77 	bl	8000fec <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fecb 	bl	800129c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	121b      	asrs	r3, r3, #8
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fec5 	bl	800129c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fec1 	bl	800129c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <BNO080_sendPacket+0x98>)
 800151e:	5cd2      	ldrb	r2, [r2, r3]
 8001520:	1c51      	adds	r1, r2, #1
 8001522:	b2c8      	uxtb	r0, r1
 8001524:	4910      	ldr	r1, [pc, #64]	@ (8001568 <BNO080_sendPacket+0x98>)
 8001526:	54c8      	strb	r0, [r1, r3]
 8001528:	4610      	mov	r0, r2
 800152a:	f7ff feb7 	bl	800129c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e008      	b.n	8001546 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <BNO080_sendPacket+0x9c>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff feae 	bl	800129c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	429a      	cmp	r2, r3
 800154c:	d3f2      	bcc.n	8001534 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800154e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001552:	4804      	ldr	r0, [pc, #16]	@ (8001564 <BNO080_sendPacket+0x94>)
 8001554:	f7ff fd3c 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	return (1);
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40020400 	.word	0x40020400
 8001568:	20000274 	.word	0x20000274
 800156c:	200001f4 	.word	0x200001f4

08001570 <LL_SPI_Enable>:
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_SPI_SetStandard>:
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f023 0210 	bic.w	r2, r3, #16
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	605a      	str	r2, [r3, #4]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <LL_SPI_IsActiveFlag_RXNE>:
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <LL_SPI_IsActiveFlag_RXNE+0x18>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_SPI_IsActiveFlag_TXE>:
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d101      	bne.n	80015f4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_SPI_ReceiveData8>:
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	330c      	adds	r3, #12
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_SPI_TransmitData8>:
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	330c      	adds	r3, #12
 800162e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	78fa      	ldrb	r2, [r7, #3]
 8001634:	701a      	strb	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_GPIO_SetOutputPin>:
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_GPIO_ResetOutputPin>:
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	041a      	lsls	r2, r3, #16
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_AHB1_GRP1_EnableClock>:
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001686:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001688:	4907      	ldr	r1, [pc, #28]	@ (80016a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4013      	ands	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40023800 	.word	0x40023800

080016ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016b8:	4907      	ldr	r1, [pc, #28]	@ (80016d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4313      	orrs	r3, r2
 80016be:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40023800 	.word	0x40023800

080016dc <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b090      	sub	sp, #64	@ 0x40
 80016e0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80016e2:	f107 0318 	add.w	r3, r7, #24
 80016e6:	2228      	movs	r2, #40	@ 0x28
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 f89c 	bl	8005828 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	463b      	mov	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001700:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001704:	f7ff ffd2 	bl	80016ac <LL_APB2_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff ffb7 	bl	800167c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800170e:	2004      	movs	r0, #4
 8001710:	f7ff ffb4 	bl	800167c <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001714:	23e0      	movs	r3, #224	@ 0xe0
 8001716:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001718:	2302      	movs	r3, #2
 800171a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001728:	2305      	movs	r3, #5
 800172a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	463b      	mov	r3, r7
 800172e:	4619      	mov	r1, r3
 8001730:	4825      	ldr	r0, [pc, #148]	@ (80017c8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001732:	f002 fa0e 	bl	8003b52 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800173a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800173e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001744:	2302      	movs	r3, #2
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001748:	2301      	movs	r3, #1
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800174c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001752:	2310      	movs	r3, #16
 8001754:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001756:	2300      	movs	r3, #0
 8001758:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800175e:	230a      	movs	r3, #10
 8001760:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	4619      	mov	r1, r3
 8001768:	4818      	ldr	r0, [pc, #96]	@ (80017cc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800176a:	f002 fbd0 	bl	8003f0e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800176e:	2100      	movs	r1, #0
 8001770:	4816      	ldr	r0, [pc, #88]	@ (80017cc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001772:	f7ff ff0d 	bl	8001590 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001776:	2110      	movs	r1, #16
 8001778:	4815      	ldr	r0, [pc, #84]	@ (80017d0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800177a:	f7ff ff70 	bl	800165e <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800177e:	2310      	movs	r3, #16
 8001780:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001792:	463b      	mov	r3, r7
 8001794:	4619      	mov	r1, r3
 8001796:	480e      	ldr	r0, [pc, #56]	@ (80017d0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001798:	f002 f9db 	bl	8003b52 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 800179c:	2320      	movs	r3, #32
 800179e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017ae:	f002 f9d0 	bl	8003b52 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80017b2:	4806      	ldr	r0, [pc, #24]	@ (80017cc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80017b4:	f7ff fedc 	bl	8001570 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80017b8:	2110      	movs	r1, #16
 80017ba:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80017bc:	f7ff ff41 	bl	8001642 <LL_GPIO_SetOutputPin>
}
 80017c0:	bf00      	nop
 80017c2:	3740      	adds	r7, #64	@ 0x40
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40013000 	.word	0x40013000
 80017d0:	40020800 	.word	0x40020800

080017d4 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80017de:	bf00      	nop
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <SPI1_SendByte+0x40>)
 80017e2:	f7ff fefb 	bl	80015dc <LL_SPI_IsActiveFlag_TXE>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f9      	beq.n	80017e0 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4808      	ldr	r0, [pc, #32]	@ (8001814 <SPI1_SendByte+0x40>)
 80017f2:	f7ff ff14 	bl	800161e <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80017f6:	bf00      	nop
 80017f8:	4806      	ldr	r0, [pc, #24]	@ (8001814 <SPI1_SendByte+0x40>)
 80017fa:	f7ff fedc 	bl	80015b6 <LL_SPI_IsActiveFlag_RXNE>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f9      	beq.n	80017f8 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001804:	4803      	ldr	r0, [pc, #12]	@ (8001814 <SPI1_SendByte+0x40>)
 8001806:	f7ff fefc 	bl	8001602 <LL_SPI_ReceiveData8>
 800180a:	4603      	mov	r3, r0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40013000 	.word	0x40013000

08001818 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001822:	2110      	movs	r1, #16
 8001824:	480b      	ldr	r0, [pc, #44]	@ (8001854 <ICM20602_Readbyte+0x3c>)
 8001826:	f7ff ff1a 	bl	800165e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ffce 	bl	80017d4 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff ffcb 	bl	80017d4 <SPI1_SendByte>
 800183e:	4603      	mov	r3, r0
 8001840:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001842:	2110      	movs	r1, #16
 8001844:	4803      	ldr	r0, [pc, #12]	@ (8001854 <ICM20602_Readbyte+0x3c>)
 8001846:	f7ff fefc 	bl	8001642 <LL_GPIO_SetOutputPin>

	return val;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40020800 	.word	0x40020800

08001858 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	460a      	mov	r2, r1
 8001862:	71fb      	strb	r3, [r7, #7]
 8001864:	4613      	mov	r3, r2
 8001866:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001868:	2110      	movs	r1, #16
 800186a:	480b      	ldr	r0, [pc, #44]	@ (8001898 <ICM20602_Writebyte+0x40>)
 800186c:	f7ff fef7 	bl	800165e <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ffab 	bl	80017d4 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800187e:	79bb      	ldrb	r3, [r7, #6]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ffa7 	bl	80017d4 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001886:	2110      	movs	r1, #16
 8001888:	4803      	ldr	r0, [pc, #12]	@ (8001898 <ICM20602_Writebyte+0x40>)
 800188a:	f7ff feda 	bl	8001642 <LL_GPIO_SetOutputPin>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40020800 	.word	0x40020800

0800189c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	809a      	strh	r2, [r3, #4]

	ICM20602_GPIO_SPI_Initialization();
 80018b8:	f7ff ff10 	bl	80016dc <ICM20602_GPIO_SPI_Initialization>

	printf("Checking ICM20602...");
 80018bc:	4833      	ldr	r0, [pc, #204]	@ (800198c <ICM20602_Initialization+0xf0>)
 80018be:	f003 fe6b 	bl	8005598 <iprintf>

	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I);
 80018c2:	2075      	movs	r0, #117	@ 0x75
 80018c4:	f7ff ffa8 	bl	8001818 <ICM20602_Readbyte>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d105      	bne.n	80018de <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	4619      	mov	r1, r3
 80018d6:	482e      	ldr	r0, [pc, #184]	@ (8001990 <ICM20602_Initialization+0xf4>)
 80018d8:	f003 fe5e 	bl	8005598 <iprintf>
 80018dc:	e012      	b.n	8001904 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	2b12      	cmp	r3, #18
 80018e2:	d00f      	beq.n	8001904 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80018e4:	2075      	movs	r0, #117	@ 0x75
 80018e6:	f7ff ff97 	bl	8001818 <ICM20602_Readbyte>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	2b12      	cmp	r3, #18
 80018f2:	d007      	beq.n	8001904 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	2212      	movs	r2, #18
 80018f8:	4619      	mov	r1, r3
 80018fa:	4826      	ldr	r0, [pc, #152]	@ (8001994 <ICM20602_Initialization+0xf8>)
 80018fc:	f003 fe4c 	bl	8005598 <iprintf>
			return 1; //ERROR
 8001900:	2301      	movs	r3, #1
 8001902:	e03f      	b.n	8001984 <ICM20602_Initialization+0xe8>
		}
	}

	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001904:	2180      	movs	r1, #128	@ 0x80
 8001906:	206b      	movs	r0, #107	@ 0x6b
 8001908:	f7ff ffa6 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 800190c:	2032      	movs	r0, #50	@ 0x32
 800190e:	f001 fa67 	bl	8002de0 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001912:	2101      	movs	r1, #1
 8001914:	206b      	movs	r0, #107	@ 0x6b
 8001916:	f7ff ff9f 	bl	8001858 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 800191a:	2032      	movs	r0, #50	@ 0x32
 800191c:	f001 fa60 	bl	8002de0 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001920:	2138      	movs	r1, #56	@ 0x38
 8001922:	206c      	movs	r0, #108	@ 0x6c
 8001924:	f7ff ff98 	bl	8001858 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001928:	2032      	movs	r0, #50	@ 0x32
 800192a:	f001 fa59 	bl	8002de0 <HAL_Delay>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800192e:	2100      	movs	r1, #0
 8001930:	2019      	movs	r0, #25
 8001932:	f7ff ff91 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001936:	2032      	movs	r0, #50	@ 0x32
 8001938:	f001 fa52 	bl	8002de0 <HAL_Delay>

	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 800193c:	2105      	movs	r1, #5
 800193e:	201a      	movs	r0, #26
 8001940:	f7ff ff8a 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001944:	2032      	movs	r0, #50	@ 0x32
 8001946:	f001 fa4b 	bl	8002de0 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 800194a:	2118      	movs	r1, #24
 800194c:	201b      	movs	r0, #27
 800194e:	f7ff ff83 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001952:	2032      	movs	r0, #50	@ 0x32
 8001954:	f001 fa44 	bl	8002de0 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001958:	2118      	movs	r1, #24
 800195a:	201c      	movs	r0, #28
 800195c:	f7ff ff7c 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001960:	2032      	movs	r0, #50	@ 0x32
 8001962:	f001 fa3d 	bl	8002de0 <HAL_Delay>

	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001966:	2103      	movs	r1, #3
 8001968:	201d      	movs	r0, #29
 800196a:	f7ff ff75 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 800196e:	2032      	movs	r0, #50	@ 0x32
 8001970:	f001 fa36 	bl	8002de0 <HAL_Delay>

	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001974:	2101      	movs	r1, #1
 8001976:	2038      	movs	r0, #56	@ 0x38
 8001978:	f7ff ff6e 	bl	8001858 <ICM20602_Writebyte>
	HAL_Delay(50);
 800197c:	2032      	movs	r0, #50	@ 0x32
 800197e:	f001 fa2f 	bl	8002de0 <HAL_Delay>
//
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	08007d84 	.word	0x08007d84
 8001990:	08007d9c 	.word	0x08007d9c
 8001994:	08007dc0 	.word	0x08007dc0

08001998 <LL_SPI_Enable>:
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_SPI_SetStandard>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f023 0210 	bic.w	r2, r3, #16
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	605a      	str	r2, [r3, #4]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_SPI_IsActiveFlag_RXNE>:
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_SPI_IsActiveFlag_TXE>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d101      	bne.n	8001a1c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_SPI_ReceiveData8>:
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	330c      	adds	r3, #12
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_SPI_TransmitData8>:
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	330c      	adds	r3, #12
 8001a56:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	701a      	strb	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_GPIO_IsInputPinSet>:
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	bf0c      	ite	eq
 8001a82:	2301      	moveq	r3, #1
 8001a84:	2300      	movne	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_GPIO_SetOutputPin>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	619a      	str	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_GPIO_ResetOutputPin>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	041a      	lsls	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	619a      	str	r2, [r3, #24]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <LL_AHB1_GRP1_EnableClock>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001adc:	4907      	ldr	r1, [pc, #28]	@ (8001afc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ae6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40023800 	.word	0x40023800

08001b00 <LL_APB1_GRP1_EnableClock>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b08:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b0c:	4907      	ldr	r1, [pc, #28]	@ (8001b2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40023800 	.word	0x40023800

08001b30 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b090      	sub	sp, #64	@ 0x40
 8001b34:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001b36:	f107 0318 	add.w	r3, r7, #24
 8001b3a:	2228      	movs	r2, #40	@ 0x28
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fe72 	bl	8005828 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]
 8001b52:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001b54:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b58:	f7ff ffd2 	bl	8001b00 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f7ff ffb7 	bl	8001ad0 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001b62:	2338      	movs	r3, #56	@ 0x38
 8001b64:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b66:	2302      	movs	r3, #2
 8001b68:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001b76:	2306      	movs	r3, #6
 8001b78:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4826      	ldr	r0, [pc, #152]	@ (8001c18 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001b80:	f001 ffe7 	bl	8003b52 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b88:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001b8c:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001b92:	2302      	movs	r3, #2
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001bac:	230a      	movs	r3, #10
 8001bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001bb0:	f107 0318 	add.w	r3, r7, #24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4819      	ldr	r0, [pc, #100]	@ (8001c1c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001bb8:	f002 f9a9 	bl	8003f0e <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4817      	ldr	r0, [pc, #92]	@ (8001c1c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001bc0:	f7ff fefa 	bl	80019b8 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001bc4:	2140      	movs	r1, #64	@ 0x40
 8001bc6:	4814      	ldr	r0, [pc, #80]	@ (8001c18 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bc8:	f7ff ff72 	bl	8001ab0 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001bcc:	2340      	movs	r3, #64	@ 0x40
 8001bce:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001be0:	463b      	mov	r3, r7
 8001be2:	4619      	mov	r1, r3
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001be6:	f001 ffb4 	bl	8003b52 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001bfc:	f001 ffa9 	bl	8003b52 <LL_GPIO_Init>

	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001c00:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001c02:	f7ff fec9 	bl	8001998 <LL_SPI_Enable>

	CHIP_DESELECT(LPS22HH);
 8001c06:	2140      	movs	r1, #64	@ 0x40
 8001c08:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001c0a:	f7ff ff43 	bl	8001a94 <LL_GPIO_SetOutputPin>
}
 8001c0e:	bf00      	nop
 8001c10:	3740      	adds	r7, #64	@ 0x40
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40003c00 	.word	0x40003c00

08001c20 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001c2a:	bf00      	nop
 8001c2c:	480c      	ldr	r0, [pc, #48]	@ (8001c60 <SPI3_SendByte+0x40>)
 8001c2e:	f7ff fee9 	bl	8001a04 <LL_SPI_IsActiveFlag_TXE>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f9      	beq.n	8001c2c <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4808      	ldr	r0, [pc, #32]	@ (8001c60 <SPI3_SendByte+0x40>)
 8001c3e:	f7ff ff02 	bl	8001a46 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001c42:	bf00      	nop
 8001c44:	4806      	ldr	r0, [pc, #24]	@ (8001c60 <SPI3_SendByte+0x40>)
 8001c46:	f7ff feca 	bl	80019de <LL_SPI_IsActiveFlag_RXNE>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f9      	beq.n	8001c44 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001c50:	4803      	ldr	r0, [pc, #12]	@ (8001c60 <SPI3_SendByte+0x40>)
 8001c52:	f7ff feea 	bl	8001a2a <LL_SPI_ReceiveData8>
 8001c56:	4603      	mov	r3, r0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40003c00 	.word	0x40003c00

08001c64 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001c6e:	2140      	movs	r1, #64	@ 0x40
 8001c70:	480b      	ldr	r0, [pc, #44]	@ (8001ca0 <LPS22HH_Readbyte+0x3c>)
 8001c72:	f7ff ff1d 	bl	8001ab0 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ffce 	bl	8001c20 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff ffcb 	bl	8001c20 <SPI3_SendByte>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001c8e:	2140      	movs	r1, #64	@ 0x40
 8001c90:	4803      	ldr	r0, [pc, #12]	@ (8001ca0 <LPS22HH_Readbyte+0x3c>)
 8001c92:	f7ff feff 	bl	8001a94 <LL_GPIO_SetOutputPin>

	return val;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40020400 	.word	0x40020400

08001ca4 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	603a      	str	r2, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 8001cb8:	2140      	movs	r1, #64	@ 0x40
 8001cba:	4810      	ldr	r0, [pc, #64]	@ (8001cfc <LPS22HH_Readbytes+0x58>)
 8001cbc:	f7ff fef8 	bl	8001ab0 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ffa9 	bl	8001c20 <SPI3_SendByte>
	while(i < len)
 8001cce:	e009      	b.n	8001ce4 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60fa      	str	r2, [r7, #12]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	18d4      	adds	r4, r2, r3
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f7ff ffa0 	bl	8001c20 <SPI3_SendByte>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d3f1      	bcc.n	8001cd0 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8001cec:	2140      	movs	r1, #64	@ 0x40
 8001cee:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <LPS22HH_Readbytes+0x58>)
 8001cf0:	f7ff fed0 	bl	8001a94 <LL_GPIO_SetOutputPin>
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}
 8001cfc:	40020400 	.word	0x40020400

08001d00 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	460a      	mov	r2, r1
 8001d0a:	71fb      	strb	r3, [r7, #7]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001d10:	2140      	movs	r1, #64	@ 0x40
 8001d12:	480b      	ldr	r0, [pc, #44]	@ (8001d40 <LPS22HH_Writebyte+0x40>)
 8001d14:	f7ff fecc 	bl	8001ab0 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff7d 	bl	8001c20 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff79 	bl	8001c20 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001d2e:	2140      	movs	r1, #64	@ 0x40
 8001d30:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <LPS22HH_Writebyte+0x40>)
 8001d32:	f7ff feaf 	bl	8001a94 <LL_GPIO_SetOutputPin>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40020400 	.word	0x40020400

08001d44 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71fb      	strb	r3, [r7, #7]

	LPS22HH_GPIO_SPI_Initialization();
 8001d4e:	f7ff feef 	bl	8001b30 <LPS22HH_GPIO_SPI_Initialization>

	printf("Checking LPS22HH...\n");
 8001d52:	4841      	ldr	r0, [pc, #260]	@ (8001e58 <LPS22HH_Initialization+0x114>)
 8001d54:	f003 fc88 	bl	8005668 <puts>

	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F);
 8001d58:	200f      	movs	r0, #15
 8001d5a:	f7ff ff83 	bl	8001c64 <LPS22HH_Readbyte>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2bb3      	cmp	r3, #179	@ 0xb3
 8001d66:	d105      	bne.n	8001d74 <LPS22HH_Initialization+0x30>
	{
		printf("LPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	483b      	ldr	r0, [pc, #236]	@ (8001e5c <LPS22HH_Initialization+0x118>)
 8001d6e:	f003 fc13 	bl	8005598 <iprintf>
 8001d72:	e012      	b.n	8001d9a <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2bb3      	cmp	r3, #179	@ 0xb3
 8001d78:	d00f      	beq.n	8001d9a <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001d7a:	200f      	movs	r0, #15
 8001d7c:	f7ff ff72 	bl	8001c64 <LPS22HH_Readbyte>
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	2bb3      	cmp	r3, #179	@ 0xb3
 8001d88:	d007      	beq.n	8001d9a <LPS22HH_Initialization+0x56>
			printf( "LPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	22b3      	movs	r2, #179	@ 0xb3
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4833      	ldr	r0, [pc, #204]	@ (8001e60 <LPS22HH_Initialization+0x11c>)
 8001d92:	f003 fc01 	bl	8005598 <iprintf>
			return 1; //ERROR
 8001d96:	2301      	movs	r3, #1
 8001d98:	e059      	b.n	8001e4e <LPS22HH_Initialization+0x10a>
		}
	}

	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	2011      	movs	r0, #17
 8001d9e:	f7ff ffaf 	bl	8001d00 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001da2:	2011      	movs	r0, #17
 8001da4:	f7ff ff5e 	bl	8001c64 <LPS22HH_Readbyte>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f7      	bne.n	8001da2 <LPS22HH_Initialization+0x5e>

	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001db2:	2010      	movs	r0, #16
 8001db4:	f7ff ff56 	bl	8001c64 <LPS22HH_Readbyte>
 8001db8:	4603      	mov	r3, r0
 8001dba:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
 8001dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dc2:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001dc4:	79bb      	ldrb	r3, [r7, #6]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	2010      	movs	r0, #16
 8001dca:	f7ff ff99 	bl	8001d00 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001dd2:	2010      	movs	r0, #16
 8001dd4:	f7ff ff46 	bl	8001c64 <LPS22HH_Readbyte>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);

	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001ddc:	2010      	movs	r0, #16
 8001dde:	f7ff ff41 	bl	8001c64 <LPS22HH_Readbyte>
 8001de2:	4603      	mov	r3, r0
 8001de4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	f043 030c 	orr.w	r3, r3, #12
 8001dec:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	4619      	mov	r1, r3
 8001df2:	2010      	movs	r0, #16
 8001df4:	f7ff ff84 	bl	8001d00 <LPS22HH_Writebyte>

	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001df8:	2010      	movs	r0, #16
 8001dfa:	f7ff ff33 	bl	8001c64 <LPS22HH_Readbyte>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001e02:	79bb      	ldrb	r3, [r7, #6]
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001e0a:	79bb      	ldrb	r3, [r7, #6]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	2010      	movs	r0, #16
 8001e10:	f7ff ff76 	bl	8001d00 <LPS22HH_Writebyte>

	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001e14:	2011      	movs	r0, #17
 8001e16:	f7ff ff25 	bl	8001c64 <LPS22HH_Readbyte>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001e1e:	79bb      	ldrb	r3, [r7, #6]
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001e26:	79bb      	ldrb	r3, [r7, #6]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	2011      	movs	r0, #17
 8001e2c:	f7ff ff68 	bl	8001d00 <LPS22HH_Writebyte>

	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001e30:	2012      	movs	r0, #18
 8001e32:	f7ff ff17 	bl	8001c64 <LPS22HH_Readbyte>
 8001e36:	4603      	mov	r3, r0
 8001e38:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001e3a:	79bb      	ldrb	r3, [r7, #6]
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001e42:	79bb      	ldrb	r3, [r7, #6]
 8001e44:	4619      	mov	r1, r3
 8001e46:	2012      	movs	r0, #18
 8001e48:	f7ff ff5a 	bl	8001d00 <LPS22HH_Writebyte>

	return 0; //OK
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	08007dec 	.word	0x08007dec
 8001e5c:	08007e00 	.word	0x08007e00
 8001e60:	08007e24 	.word	0x08007e24

08001e64 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8001e68:	2180      	movs	r1, #128	@ 0x80
 8001e6a:	4803      	ldr	r0, [pc, #12]	@ (8001e78 <LPS22HH_DataReady+0x14>)
 8001e6c:	f7ff fdfd 	bl	8001a6a <LL_GPIO_IsInputPinSet>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40020400 	.word	0x40020400

08001e7c <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	2103      	movs	r1, #3
 8001e88:	2028      	movs	r0, #40	@ 0x28
 8001e8a:	f7ff ff0b 	bl	8001ca4 <LPS22HH_Readbytes>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	202b      	movs	r0, #43	@ 0x2b
 8001ea4:	f7ff fefe 	bl	8001ca4 <LPS22HH_Readbytes>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <getAltitude2>:
{
	return (powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001eba:	edc7 0a00 	vstr	s1, [r7]
	return ((powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0f) * (temperature + 273.15f)) / 0.0065f;
 8001ebe:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001f08 <getAltitude2+0x58>
 8001ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eca:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8001f0c <getAltitude2+0x5c>
 8001ece:	eeb0 0a47 	vmov.f32	s0, s14
 8001ed2:	f005 fb3b 	bl	800754c <powf>
 8001ed6:	eef0 7a40 	vmov.f32	s15, s0
 8001eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ede:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ee2:	edd7 7a00 	vldr	s15, [r7]
 8001ee6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001f10 <getAltitude2+0x60>
 8001eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001f14 <getAltitude2+0x64>
 8001ef6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001efa:	eef0 7a66 	vmov.f32	s15, s13
}
 8001efe:	eeb0 0a67 	vmov.f32	s0, s15
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	447d5000 	.word	0x447d5000
 8001f0c:	3e42c9b7 	.word	0x3e42c9b7
 8001f10:	43889333 	.word	0x43889333
 8001f14:	3bd4fdf4 	.word	0x3bd4fdf4

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	@ (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	@ (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	@ (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	@ 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	@ 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_SPI_SetStandard>:
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 0210 	bic.w	r2, r3, #16
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	605a      	str	r2, [r3, #4]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	601a      	str	r2, [r3, #0]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	621a      	str	r2, [r3, #32]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	401a      	ands	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	621a      	str	r2, [r3, #32]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d01c      	beq.n	8002122 <LL_TIM_OC_EnableFast+0x4a>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d017      	beq.n	800211e <LL_TIM_OC_EnableFast+0x46>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d012      	beq.n	800211a <LL_TIM_OC_EnableFast+0x42>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b40      	cmp	r3, #64	@ 0x40
 80020f8:	d00d      	beq.n	8002116 <LL_TIM_OC_EnableFast+0x3e>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002100:	d007      	beq.n	8002112 <LL_TIM_OC_EnableFast+0x3a>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002108:	d101      	bne.n	800210e <LL_TIM_OC_EnableFast+0x36>
 800210a:	2305      	movs	r3, #5
 800210c:	e00a      	b.n	8002124 <LL_TIM_OC_EnableFast+0x4c>
 800210e:	2306      	movs	r3, #6
 8002110:	e008      	b.n	8002124 <LL_TIM_OC_EnableFast+0x4c>
 8002112:	2304      	movs	r3, #4
 8002114:	e006      	b.n	8002124 <LL_TIM_OC_EnableFast+0x4c>
 8002116:	2303      	movs	r3, #3
 8002118:	e004      	b.n	8002124 <LL_TIM_OC_EnableFast+0x4c>
 800211a:	2302      	movs	r3, #2
 800211c:	e002      	b.n	8002124 <LL_TIM_OC_EnableFast+0x4c>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <LL_TIM_OC_EnableFast+0x4c>
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3318      	adds	r3, #24
 800212a:	4619      	mov	r1, r3
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <LL_TIM_OC_EnableFast+0x80>)
 8002130:	5cd3      	ldrb	r3, [r2, r3]
 8002132:	440b      	add	r3, r1
 8002134:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	4907      	ldr	r1, [pc, #28]	@ (800215c <LL_TIM_OC_EnableFast+0x84>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	4619      	mov	r1, r3
 8002142:	2304      	movs	r3, #4
 8002144:	408b      	lsls	r3, r1
 8002146:	431a      	orrs	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	601a      	str	r2, [r3, #0]

}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	08007e6c 	.word	0x08007e6c
 800215c:	08007e74 	.word	0x08007e74

08002160 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d01c      	beq.n	80021aa <LL_TIM_OC_EnablePreload+0x4a>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b04      	cmp	r3, #4
 8002174:	d017      	beq.n	80021a6 <LL_TIM_OC_EnablePreload+0x46>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b10      	cmp	r3, #16
 800217a:	d012      	beq.n	80021a2 <LL_TIM_OC_EnablePreload+0x42>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2b40      	cmp	r3, #64	@ 0x40
 8002180:	d00d      	beq.n	800219e <LL_TIM_OC_EnablePreload+0x3e>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002188:	d007      	beq.n	800219a <LL_TIM_OC_EnablePreload+0x3a>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002190:	d101      	bne.n	8002196 <LL_TIM_OC_EnablePreload+0x36>
 8002192:	2305      	movs	r3, #5
 8002194:	e00a      	b.n	80021ac <LL_TIM_OC_EnablePreload+0x4c>
 8002196:	2306      	movs	r3, #6
 8002198:	e008      	b.n	80021ac <LL_TIM_OC_EnablePreload+0x4c>
 800219a:	2304      	movs	r3, #4
 800219c:	e006      	b.n	80021ac <LL_TIM_OC_EnablePreload+0x4c>
 800219e:	2303      	movs	r3, #3
 80021a0:	e004      	b.n	80021ac <LL_TIM_OC_EnablePreload+0x4c>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e002      	b.n	80021ac <LL_TIM_OC_EnablePreload+0x4c>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <LL_TIM_OC_EnablePreload+0x4c>
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3318      	adds	r3, #24
 80021b2:	4619      	mov	r1, r3
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <LL_TIM_OC_EnablePreload+0x80>)
 80021b8:	5cd3      	ldrb	r3, [r2, r3]
 80021ba:	440b      	add	r3, r1
 80021bc:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	4907      	ldr	r1, [pc, #28]	@ (80021e4 <LL_TIM_OC_EnablePreload+0x84>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	4619      	mov	r1, r3
 80021ca:	2308      	movs	r3, #8
 80021cc:	408b      	lsls	r3, r1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	08007e6c 	.word	0x08007e6c
 80021e4:	08007e74 	.word	0x08007e74

080021e8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021fa:	f023 0307 	bic.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	609a      	str	r2, [r3, #8]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	605a      	str	r2, [r3, #4]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	60da      	str	r2, [r3, #12]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	615a      	str	r2, [r3, #20]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	330c      	adds	r3, #12
 80022b0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	e853 3f00 	ldrex	r3, [r3]
 80022b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f043 0320 	orr.w	r3, r3, #32
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	330c      	adds	r3, #12
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	61ba      	str	r2, [r7, #24]
 80022ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022cc:	6979      	ldr	r1, [r7, #20]
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	e841 2300 	strex	r3, r2, [r1]
 80022d4:	613b      	str	r3, [r7, #16]
   return(result);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e7      	bne.n	80022ac <LL_USART_EnableIT_RXNE+0x8>
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3724      	adds	r7, #36	@ 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	605a      	str	r2, [r3, #4]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_GPIO_ResetOutputPin>:
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <LL_AHB1_GRP1_EnableClock>:
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002330:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002334:	4907      	ldr	r1, [pc, #28]	@ (8002354 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4313      	orrs	r3, r2
 800233a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800233e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40023800 	.word	0x40023800

08002358 <LL_APB1_GRP1_EnableClock>:
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002364:	4907      	ldr	r1, [pc, #28]	@ (8002384 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4313      	orrs	r3, r2
 800236a:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <LL_APB1_GRP1_EnableClock+0x2c>)
 800236e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4013      	ands	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40023800 	.word	0x40023800

08002388 <LL_APB2_GRP1_EnableClock>:
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002390:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002392:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002394:	4907      	ldr	r1, [pc, #28]	@ (80023b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4313      	orrs	r3, r2
 800239a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800239e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4013      	ands	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40023800 	.word	0x40023800

080023b8 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i ++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e00d      	b.n	80023e6 <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p + i));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	4808      	ldr	r0, [pc, #32]	@ (80023f8 <_write+0x40>)
 80023d6:	f7ff ff88 	bl	80022ea <LL_USART_TransmitData8>
		HAL_Delay(1);
 80023da:	2001      	movs	r0, #1
 80023dc:	f000 fd00 	bl	8002de0 <HAL_Delay>
	for (int i = 0; i < len; i ++)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3301      	adds	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	dbed      	blt.n	80023ca <_write+0x12>
	}
	return len;
 80023ee:	687b      	ldr	r3, [r7, #4]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40011400 	.word	0x40011400

080023fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002402:	f000 fc7b 	bl	8002cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002406:	f000 f883 	bl	8002510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800240a:	f000 fab5 	bl	8002978 <MX_GPIO_Init>
  MX_TIM3_Init();
 800240e:	f000 f9e1 	bl	80027d4 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002412:	f000 fa51 	bl	80028b8 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002416:	f000 f937 	bl	8002688 <MX_SPI2_Init>
  MX_SPI1_Init();
 800241a:	f000 f8e3 	bl	80025e4 <MX_SPI1_Init>
  MX_SPI3_Init();
 800241e:	f000 f987 	bl	8002730 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002422:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002426:	4833      	ldr	r0, [pc, #204]	@ (80024f4 <main+0xf8>)
 8002428:	f7ff fe32 	bl	8002090 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 800242c:	4831      	ldr	r0, [pc, #196]	@ (80024f4 <main+0xf8>)
 800242e:	f7ff fe0f 	bl	8002050 <LL_TIM_EnableCounter>

  TIM3->PSC = 2000;
 8002432:	4b30      	ldr	r3, [pc, #192]	@ (80024f4 <main+0xf8>)
 8002434:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002438:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 800243a:	2064      	movs	r0, #100	@ 0x64
 800243c:	f000 fcd0 	bl	8002de0 <HAL_Delay>
  TIM3->PSC = 1500;
 8002440:	4b2c      	ldr	r3, [pc, #176]	@ (80024f4 <main+0xf8>)
 8002442:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002446:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8002448:	2064      	movs	r0, #100	@ 0x64
 800244a:	f000 fcc9 	bl	8002de0 <HAL_Delay>
  TIM3->PSC = 1000;
 800244e:	4b29      	ldr	r3, [pc, #164]	@ (80024f4 <main+0xf8>)
 8002450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8002456:	2064      	movs	r0, #100	@ 0x64
 8002458:	f000 fcc2 	bl	8002de0 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800245c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002460:	4824      	ldr	r0, [pc, #144]	@ (80024f4 <main+0xf8>)
 8002462:	f7ff fe26 	bl	80020b2 <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 8002466:	4824      	ldr	r0, [pc, #144]	@ (80024f8 <main+0xfc>)
 8002468:	f7ff ff1c 	bl	80022a4 <LL_USART_EnableIT_RXNE>

  // initialize 9-axis sensor for rotation vector
  BNO080_Initialization();
 800246c:	f7fe feb8 	bl	80011e0 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 8002470:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002474:	f7fe ff34 	bl	80012e0 <BNO080_enableRotationVector>

  // initialize 6-axis sensor for angular velocity
  ICM20602_Initialization();
 8002478:	f7ff fa10 	bl	800189c <ICM20602_Initialization>

  // initialize barometric sensor for altitude
  LPS22HH_Initialization();
 800247c:	f7ff fc62 	bl	8001d44 <LPS22HH_Initialization>

		printf("%d %d %d\n", ICM20602->gyro_x_raw, ICM20602->gyro_y_raw, ICM20602->gyro_z_raw);
		printf("%d %d %d\n", (int)(ICM20602->gyro_x*100), (int)(ICM20602->gyro_y*100), (int)(ICM20602->gyro_z*100));
	}
	*/
	if (LPS22HH_DataReady())
 8002480:	f7ff fcf0 	bl	8001e64 <LPS22HH_DataReady>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0fa      	beq.n	8002480 <main+0x84>
	{
		LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 800248a:	481c      	ldr	r0, [pc, #112]	@ (80024fc <main+0x100>)
 800248c:	f7ff fcf6 	bl	8001e7c <LPS22HH_GetPressure>
		LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 8002490:	481b      	ldr	r0, [pc, #108]	@ (8002500 <main+0x104>)
 8002492:	f7ff fd00 	bl	8001e96 <LPS22HH_GetTemperature>

		LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f); // altitude in cms
 8002496:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <main+0x100>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a2:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002504 <main+0x108>
 80024a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024aa:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <main+0x100>)
 80024ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8002508 <main+0x10c>
 80024bc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80024c0:	eef0 0a66 	vmov.f32	s1, s13
 80024c4:	eeb0 0a47 	vmov.f32	s0, s14
 80024c8:	f7ff fcf2 	bl	8001eb0 <getAltitude2>
 80024cc:	eef0 7a40 	vmov.f32	s15, s0
 80024d0:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <main+0x100>)
 80024d2:	edc3 7a02 	vstr	s15, [r3, #8]

		printf("barometric pressure: %d\n", (int) (LPS22HH.baroAlt*100));
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <main+0x100>)
 80024d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80024dc:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002508 <main+0x10c>
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e8:	ee17 1a90 	vmov	r1, s15
 80024ec:	4807      	ldr	r0, [pc, #28]	@ (800250c <main+0x110>)
 80024ee:	f003 f853 	bl	8005598 <iprintf>
	if (LPS22HH_DataReady())
 80024f2:	e7c5      	b.n	8002480 <main+0x84>
 80024f4:	40000400 	.word	0x40000400
 80024f8:	40011400 	.word	0x40011400
 80024fc:	2000027c 	.word	0x2000027c
 8002500:	20000280 	.word	0x20000280
 8002504:	45800000 	.word	0x45800000
 8002508:	42c80000 	.word	0x42c80000
 800250c:	08007e50 	.word	0x08007e50

08002510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b094      	sub	sp, #80	@ 0x50
 8002514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002516:	f107 0320 	add.w	r3, r7, #32
 800251a:	2230      	movs	r2, #48	@ 0x30
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f003 f982 	bl	8005828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <SystemClock_Config+0xcc>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	4a27      	ldr	r2, [pc, #156]	@ (80025dc <SystemClock_Config+0xcc>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002542:	6413      	str	r3, [r2, #64]	@ 0x40
 8002544:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <SystemClock_Config+0xcc>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002550:	2300      	movs	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	4b22      	ldr	r3, [pc, #136]	@ (80025e0 <SystemClock_Config+0xd0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a21      	ldr	r2, [pc, #132]	@ (80025e0 <SystemClock_Config+0xd0>)
 800255a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b1f      	ldr	r3, [pc, #124]	@ (80025e0 <SystemClock_Config+0xd0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800256c:	2301      	movs	r3, #1
 800256e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002576:	2302      	movs	r3, #2
 8002578:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800257a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002580:	2304      	movs	r3, #4
 8002582:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002584:	23a8      	movs	r3, #168	@ 0xa8
 8002586:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002588:	2302      	movs	r3, #2
 800258a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800258c:	2304      	movs	r3, #4
 800258e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002590:	f107 0320 	add.w	r3, r7, #32
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fd2d 	bl	8002ff4 <HAL_RCC_OscConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025a0:	f000 fa62 	bl	8002a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a4:	230f      	movs	r3, #15
 80025a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a8:	2302      	movs	r3, #2
 80025aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	2105      	movs	r1, #5
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 ff8e 	bl	80034e4 <HAL_RCC_ClockConfig>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80025ce:	f000 fa4b 	bl	8002a68 <Error_Handler>
  }
}
 80025d2:	bf00      	nop
 80025d4:	3750      	adds	r7, #80	@ 0x50
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40007000 	.word	0x40007000

080025e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b090      	sub	sp, #64	@ 0x40
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80025ea:	f107 0318 	add.w	r3, r7, #24
 80025ee:	2228      	movs	r2, #40	@ 0x28
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 f918 	bl	8005828 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	463b      	mov	r3, r7
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	611a      	str	r2, [r3, #16]
 8002606:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002608:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800260c:	f7ff febc 	bl	8002388 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002610:	2001      	movs	r0, #1
 8002612:	f7ff fe89 	bl	8002328 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002616:	23e0      	movs	r3, #224	@ 0xe0
 8002618:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800261a:	2302      	movs	r3, #2
 800261c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800262a:	2305      	movs	r3, #5
 800262c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	463b      	mov	r3, r7
 8002630:	4619      	mov	r1, r3
 8002632:	4813      	ldr	r0, [pc, #76]	@ (8002680 <MX_SPI1_Init+0x9c>)
 8002634:	f001 fa8d 	bl	8003b52 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800263c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002640:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002646:	2302      	movs	r3, #2
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800264a:	2301      	movs	r3, #1
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800264e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002654:	2310      	movs	r3, #16
 8002656:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002658:	2300      	movs	r3, #0
 800265a:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002660:	230a      	movs	r3, #10
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002664:	f107 0318 	add.w	r3, r7, #24
 8002668:	4619      	mov	r1, r3
 800266a:	4806      	ldr	r0, [pc, #24]	@ (8002684 <MX_SPI1_Init+0xa0>)
 800266c:	f001 fc4f 	bl	8003f0e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002670:	2100      	movs	r1, #0
 8002672:	4804      	ldr	r0, [pc, #16]	@ (8002684 <MX_SPI1_Init+0xa0>)
 8002674:	f7ff fcd9 	bl	800202a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	3740      	adds	r7, #64	@ 0x40
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40020000 	.word	0x40020000
 8002684:	40013000 	.word	0x40013000

08002688 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b090      	sub	sp, #64	@ 0x40
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800268e:	f107 0318 	add.w	r3, r7, #24
 8002692:	2228      	movs	r2, #40	@ 0x28
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f003 f8c6 	bl	8005828 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	463b      	mov	r3, r7
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
 80026a8:	611a      	str	r2, [r3, #16]
 80026aa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80026ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80026b0:	f7ff fe52 	bl	8002358 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80026b4:	2002      	movs	r0, #2
 80026b6:	f7ff fe37 	bl	8002328 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80026ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80026be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026c0:	2302      	movs	r3, #2
 80026c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80026d0:	2305      	movs	r3, #5
 80026d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d4:	463b      	mov	r3, r7
 80026d6:	4619      	mov	r1, r3
 80026d8:	4813      	ldr	r0, [pc, #76]	@ (8002728 <MX_SPI2_Init+0xa0>)
 80026da:	f001 fa3a 	bl	8003b52 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80026e2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80026e6:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80026e8:	2300      	movs	r3, #0
 80026ea:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80026ec:	2302      	movs	r3, #2
 80026ee:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80026f0:	2301      	movs	r3, #1
 80026f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80026f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80026fa:	2318      	movs	r3, #24
 80026fc:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80026fe:	2300      	movs	r3, #0
 8002700:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002706:	230a      	movs	r3, #10
 8002708:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800270a:	f107 0318 	add.w	r3, r7, #24
 800270e:	4619      	mov	r1, r3
 8002710:	4806      	ldr	r0, [pc, #24]	@ (800272c <MX_SPI2_Init+0xa4>)
 8002712:	f001 fbfc 	bl	8003f0e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002716:	2100      	movs	r1, #0
 8002718:	4804      	ldr	r0, [pc, #16]	@ (800272c <MX_SPI2_Init+0xa4>)
 800271a:	f7ff fc86 	bl	800202a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	3740      	adds	r7, #64	@ 0x40
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40020400 	.word	0x40020400
 800272c:	40003800 	.word	0x40003800

08002730 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b090      	sub	sp, #64	@ 0x40
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002736:	f107 0318 	add.w	r3, r7, #24
 800273a:	2228      	movs	r2, #40	@ 0x28
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f003 f872 	bl	8005828 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	463b      	mov	r3, r7
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	611a      	str	r2, [r3, #16]
 8002752:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002754:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002758:	f7ff fdfe 	bl	8002358 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800275c:	2002      	movs	r0, #2
 800275e:	f7ff fde3 	bl	8002328 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002762:	2338      	movs	r3, #56	@ 0x38
 8002764:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002766:	2302      	movs	r3, #2
 8002768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002776:	2306      	movs	r3, #6
 8002778:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	463b      	mov	r3, r7
 800277c:	4619      	mov	r1, r3
 800277e:	4813      	ldr	r0, [pc, #76]	@ (80027cc <MX_SPI3_Init+0x9c>)
 8002780:	f001 f9e7 	bl	8003b52 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002788:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800278c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002792:	2302      	movs	r3, #2
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002796:	2301      	movs	r3, #1
 8002798:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800279a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800279e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80027a0:	2308      	movs	r3, #8
 80027a2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80027a4:	2300      	movs	r3, #0
 80027a6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80027ac:	230a      	movs	r3, #10
 80027ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80027b0:	f107 0318 	add.w	r3, r7, #24
 80027b4:	4619      	mov	r1, r3
 80027b6:	4806      	ldr	r0, [pc, #24]	@ (80027d0 <MX_SPI3_Init+0xa0>)
 80027b8:	f001 fba9 	bl	8003f0e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80027bc:	2100      	movs	r1, #0
 80027be:	4804      	ldr	r0, [pc, #16]	@ (80027d0 <MX_SPI3_Init+0xa0>)
 80027c0:	f7ff fc33 	bl	800202a <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80027c4:	bf00      	nop
 80027c6:	3740      	adds	r7, #64	@ 0x40
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40003c00 	.word	0x40003c00

080027d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b094      	sub	sp, #80	@ 0x50
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	2220      	movs	r2, #32
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 f818 	bl	8005828 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002808:	2002      	movs	r0, #2
 800280a:	f7ff fda5 	bl	8002358 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800280e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002812:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002814:	2300      	movs	r3, #0
 8002816:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20;
 8002818:	2314      	movs	r3, #20
 800281a:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800281c:	2300      	movs	r3, #0
 800281e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002820:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002824:	4619      	mov	r1, r3
 8002826:	4822      	ldr	r0, [pc, #136]	@ (80028b0 <MX_TIM3_Init+0xdc>)
 8002828:	f001 fc36 	bl	8004098 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800282c:	4820      	ldr	r0, [pc, #128]	@ (80028b0 <MX_TIM3_Init+0xdc>)
 800282e:	f7ff fc1f 	bl	8002070 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002832:	2100      	movs	r1, #0
 8002834:	481e      	ldr	r0, [pc, #120]	@ (80028b0 <MX_TIM3_Init+0xdc>)
 8002836:	f7ff fcd7 	bl	80021e8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800283a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800283e:	481c      	ldr	r0, [pc, #112]	@ (80028b0 <MX_TIM3_Init+0xdc>)
 8002840:	f7ff fc8e 	bl	8002160 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002844:	2360      	movs	r3, #96	@ 0x60
 8002846:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8002850:	230a      	movs	r3, #10
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	461a      	mov	r2, r3
 800285e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002862:	4813      	ldr	r0, [pc, #76]	@ (80028b0 <MX_TIM3_Init+0xdc>)
 8002864:	f001 fcb2 	bl	80041cc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002868:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800286c:	4810      	ldr	r0, [pc, #64]	@ (80028b0 <MX_TIM3_Init+0xdc>)
 800286e:	f7ff fc33 	bl	80020d8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002872:	2100      	movs	r1, #0
 8002874:	480e      	ldr	r0, [pc, #56]	@ (80028b0 <MX_TIM3_Init+0xdc>)
 8002876:	f7ff fccc 	bl	8002212 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800287a:	480d      	ldr	r0, [pc, #52]	@ (80028b0 <MX_TIM3_Init+0xdc>)
 800287c:	f7ff fcdc 	bl	8002238 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002880:	2002      	movs	r0, #2
 8002882:	f7ff fd51 	bl	8002328 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB1   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002886:	2302      	movs	r3, #2
 8002888:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800288a:	2302      	movs	r3, #2
 800288c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800289a:	2302      	movs	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4804      	ldr	r0, [pc, #16]	@ (80028b4 <MX_TIM3_Init+0xe0>)
 80028a4:	f001 f955 	bl	8003b52 <LL_GPIO_Init>

}
 80028a8:	bf00      	nop
 80028aa:	3750      	adds	r7, #80	@ 0x50
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40020400 	.word	0x40020400

080028b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08e      	sub	sp, #56	@ 0x38
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80028be:	f107 031c 	add.w	r3, r7, #28
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	611a      	str	r2, [r3, #16]
 80028ce:	615a      	str	r2, [r3, #20]
 80028d0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
 80028e0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80028e2:	2020      	movs	r0, #32
 80028e4:	f7ff fd50 	bl	8002388 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80028e8:	2004      	movs	r0, #4
 80028ea:	f7ff fd1d 	bl	8002328 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80028ee:	23c0      	movs	r3, #192	@ 0xc0
 80028f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028f2:	2302      	movs	r3, #2
 80028f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002902:	2308      	movs	r3, #8
 8002904:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4819      	ldr	r0, [pc, #100]	@ (8002970 <MX_USART6_UART_Init+0xb8>)
 800290c:	f001 f921 	bl	8003b52 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002910:	f7ff fb02 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002914:	4603      	mov	r3, r0
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fb52 	bl	8001fc4 <NVIC_EncodePriority>
 8002920:	4603      	mov	r3, r0
 8002922:	4619      	mov	r1, r3
 8002924:	2047      	movs	r0, #71	@ 0x47
 8002926:	f7ff fb23 	bl	8001f70 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800292a:	2047      	movs	r0, #71	@ 0x47
 800292c:	f7ff fb02 	bl	8001f34 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002930:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002934:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800293e:	2300      	movs	r3, #0
 8002940:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002942:	230c      	movs	r3, #12
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800294a:	2300      	movs	r3, #0
 800294c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	4807      	ldr	r0, [pc, #28]	@ (8002974 <MX_USART6_UART_Init+0xbc>)
 8002956:	f002 f887 	bl	8004a68 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800295a:	4806      	ldr	r0, [pc, #24]	@ (8002974 <MX_USART6_UART_Init+0xbc>)
 800295c:	f7ff fc8c 	bl	8002278 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002960:	4804      	ldr	r0, [pc, #16]	@ (8002974 <MX_USART6_UART_Init+0xbc>)
 8002962:	f7ff fc79 	bl	8002258 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	3738      	adds	r7, #56	@ 0x38
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40020800 	.word	0x40020800
 8002974:	40011400 	.word	0x40011400

08002978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297e:	463b      	mov	r3, r7
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
 800298c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800298e:	2080      	movs	r0, #128	@ 0x80
 8002990:	f7ff fcca 	bl	8002328 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002994:	2004      	movs	r0, #4
 8002996:	f7ff fcc7 	bl	8002328 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800299a:	2001      	movs	r0, #1
 800299c:	f7ff fcc4 	bl	8002328 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80029a0:	2002      	movs	r0, #2
 80029a2:	f7ff fcc1 	bl	8002328 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 80029a6:	f240 2117 	movw	r1, #535	@ 0x217
 80029aa:	482c      	ldr	r0, [pc, #176]	@ (8002a5c <MX_GPIO_Init+0xe4>)
 80029ac:	f7ff fcac 	bl	8002308 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 80029b0:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 80029b4:	482a      	ldr	r0, [pc, #168]	@ (8002a60 <MX_GPIO_Init+0xe8>)
 80029b6:	f7ff fca7 	bl	8002308 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80029ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029be:	4829      	ldr	r0, [pc, #164]	@ (8002a64 <MX_GPIO_Init+0xec>)
 80029c0:	f7ff fca2 	bl	8002308 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 80029c4:	f240 2317 	movw	r3, #535	@ 0x217
 80029c8:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80029ca:	2301      	movs	r3, #1
 80029cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029da:	463b      	mov	r3, r7
 80029dc:	4619      	mov	r1, r3
 80029de:	481f      	ldr	r0, [pc, #124]	@ (8002a5c <MX_GPIO_Init+0xe4>)
 80029e0:	f001 f8b7 	bl	8003b52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80029e4:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80029e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f2:	463b      	mov	r3, r7
 80029f4:	4619      	mov	r1, r3
 80029f6:	4819      	ldr	r0, [pc, #100]	@ (8002a5c <MX_GPIO_Init+0xe4>)
 80029f8:	f001 f8ab 	bl	8003b52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80029fc:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8002a00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a02:	2301      	movs	r3, #1
 8002a04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a12:	463b      	mov	r3, r7
 8002a14:	4619      	mov	r1, r3
 8002a16:	4812      	ldr	r0, [pc, #72]	@ (8002a60 <MX_GPIO_Init+0xe8>)
 8002a18:	f001 f89b 	bl	8003b52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a20:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a22:	2301      	movs	r3, #1
 8002a24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a32:	463b      	mov	r3, r7
 8002a34:	4619      	mov	r1, r3
 8002a36:	480b      	ldr	r0, [pc, #44]	@ (8002a64 <MX_GPIO_Init+0xec>)
 8002a38:	f001 f88b 	bl	8003b52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002a3c:	2380      	movs	r3, #128	@ 0x80
 8002a3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002a40:	2300      	movs	r3, #0
 8002a42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a48:	463b      	mov	r3, r7
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4804      	ldr	r0, [pc, #16]	@ (8002a60 <MX_GPIO_Init+0xe8>)
 8002a4e:	f001 f880 	bl	8003b52 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020400 	.word	0x40020400
 8002a64:	40020000 	.word	0x40020000

08002a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6c:	b672      	cpsid	i
}
 8002a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <Error_Handler+0x8>

08002a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ac0 <HAL_MspInit+0x4c>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac0 <HAL_MspInit+0x4c>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac0 <HAL_MspInit+0x4c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <HAL_MspInit+0x4c>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	4a08      	ldr	r2, [pc, #32]	@ (8002ac0 <HAL_MspInit+0x4c>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_MspInit+0x4c>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <NMI_Handler+0x4>

08002acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <HardFault_Handler+0x4>

08002ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <MemManage_Handler+0x4>

08002adc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <BusFault_Handler+0x4>

08002ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <UsageFault_Handler+0x4>

08002aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b1a:	f000 f941 	bl	8002da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return 1;
 8002b34:	2301      	movs	r3, #1
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <_kill>:

int _kill(int pid, int sig)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b4a:	f002 febf 	bl	80058cc <__errno>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2216      	movs	r2, #22
 8002b52:	601a      	str	r2, [r3, #0]
  return -1;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_exit>:

void _exit (int status)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ffe7 	bl	8002b40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b72:	bf00      	nop
 8002b74:	e7fd      	b.n	8002b72 <_exit+0x12>

08002b76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e00a      	b.n	8002b9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b88:	f3af 8000 	nop.w
 8002b8c:	4601      	mov	r1, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	60ba      	str	r2, [r7, #8]
 8002b94:	b2ca      	uxtb	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dbf0      	blt.n	8002b88 <_read+0x12>
  }

  return len;
 8002ba6:	687b      	ldr	r3, [r7, #4]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bd8:	605a      	str	r2, [r3, #4]
  return 0;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_isatty>:

int _isatty(int file)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c20:	4a14      	ldr	r2, [pc, #80]	@ (8002c74 <_sbrk+0x5c>)
 8002c22:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <_sbrk+0x60>)
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c2c:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <_sbrk+0x64>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	@ (8002c80 <_sbrk+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c48:	f002 fe40 	bl	80058cc <__errno>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	220c      	movs	r2, #12
 8002c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	e009      	b.n	8002c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c58:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a05      	ldr	r2, [pc, #20]	@ (8002c7c <_sbrk+0x64>)
 8002c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20020000 	.word	0x20020000
 8002c78:	00000400 	.word	0x00000400
 8002c7c:	2000028c 	.word	0x2000028c
 8002c80:	200003e0 	.word	0x200003e0

08002c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c88:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <SystemInit+0x20>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <SystemInit+0x20>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ce0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002cac:	f7ff ffea 	bl	8002c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb0:	480c      	ldr	r0, [pc, #48]	@ (8002ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cb2:	490d      	ldr	r1, [pc, #52]	@ (8002ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f002 fdff 	bl	80058d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cda:	f7ff fb8f 	bl	80023fc <main>
  bx  lr    
 8002cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002cec:	08008234 	.word	0x08008234
  ldr r2, =_sbss
 8002cf0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002cf4:	200003e0 	.word	0x200003e0

08002cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC_IRQHandler>
	...

08002cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d00:	4b0e      	ldr	r3, [pc, #56]	@ (8002d3c <HAL_Init+0x40>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	@ (8002d3c <HAL_Init+0x40>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <HAL_Init+0x40>)
 8002d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d18:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a07      	ldr	r2, [pc, #28]	@ (8002d3c <HAL_Init+0x40>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d24:	2003      	movs	r0, #3
 8002d26:	f000 f931 	bl	8002f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2a:	200f      	movs	r0, #15
 8002d2c:	f000 f808 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d30:	f7ff fea0 	bl	8002a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023c00 	.word	0x40023c00

08002d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d48:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <HAL_InitTick+0x54>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_InitTick+0x58>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f93b 	bl	8002fda <HAL_SYSTICK_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00e      	b.n	8002d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d80a      	bhi.n	8002d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d74:	2200      	movs	r2, #0
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f000 f911 	bl	8002fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d80:	4a06      	ldr	r2, [pc, #24]	@ (8002d9c <HAL_InitTick+0x5c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000008 	.word	0x20000008
 8002d9c:	20000004 	.word	0x20000004

08002da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da4:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <HAL_IncTick+0x20>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_IncTick+0x24>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a04      	ldr	r2, [pc, #16]	@ (8002dc4 <HAL_IncTick+0x24>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000008 	.word	0x20000008
 8002dc4:	20000290 	.word	0x20000290

08002dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return uwTick;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	@ (8002ddc <HAL_GetTick+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000290 	.word	0x20000290

08002de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff ffee 	bl	8002dc8 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d005      	beq.n	8002e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <HAL_Delay+0x44>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e06:	bf00      	nop
 8002e08:	f7ff ffde 	bl	8002dc8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d8f7      	bhi.n	8002e08 <HAL_Delay+0x28>
  {
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000008 	.word	0x20000008

08002e28 <__NVIC_SetPriorityGrouping>:
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0c      	ldr	r3, [pc, #48]	@ (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5a:	4a04      	ldr	r2, [pc, #16]	@ (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	60d3      	str	r3, [r2, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_GetPriorityGrouping>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_SetPriority>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	6039      	str	r1, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	db0a      	blt.n	8002eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	490c      	ldr	r1, [pc, #48]	@ (8002ed8 <__NVIC_SetPriority+0x4c>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	0112      	lsls	r2, r2, #4
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002eb4:	e00a      	b.n	8002ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4908      	ldr	r1, [pc, #32]	@ (8002edc <__NVIC_SetPriority+0x50>)
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	3b04      	subs	r3, #4
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	440b      	add	r3, r1
 8002eca:	761a      	strb	r2, [r3, #24]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000e100 	.word	0xe000e100
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <NVIC_EncodePriority>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	@ 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f1c3 0307 	rsb	r3, r3, #7
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	bf28      	it	cs
 8002efe:	2304      	movcs	r3, #4
 8002f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d902      	bls.n	8002f10 <NVIC_EncodePriority+0x30>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3b03      	subs	r3, #3
 8002f0e:	e000      	b.n	8002f12 <NVIC_EncodePriority+0x32>
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	f04f 32ff 	mov.w	r2, #4294967295
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	401a      	ands	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f28:	f04f 31ff 	mov.w	r1, #4294967295
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	43d9      	mvns	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	4313      	orrs	r3, r2
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3724      	adds	r7, #36	@ 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f58:	d301      	bcc.n	8002f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e00f      	b.n	8002f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <SysTick_Config+0x40>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f66:	210f      	movs	r1, #15
 8002f68:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6c:	f7ff ff8e 	bl	8002e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f70:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <SysTick_Config+0x40>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f76:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <SysTick_Config+0x40>)
 8002f78:	2207      	movs	r2, #7
 8002f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	e000e010 	.word	0xe000e010

08002f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff47 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb4:	f7ff ff5c 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8002fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	6978      	ldr	r0, [r7, #20]
 8002fc0:	f7ff ff8e 	bl	8002ee0 <NVIC_EncodePriority>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff5d 	bl	8002e8c <__NVIC_SetPriority>
}
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ffb0 	bl	8002f48 <SysTick_Config>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e267      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d075      	beq.n	80030fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003012:	4b88      	ldr	r3, [pc, #544]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d00c      	beq.n	8003038 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301e:	4b85      	ldr	r3, [pc, #532]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003026:	2b08      	cmp	r3, #8
 8003028:	d112      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b82      	ldr	r3, [pc, #520]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4b7e      	ldr	r3, [pc, #504]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05b      	beq.n	80030fc <HAL_RCC_OscConfig+0x108>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d157      	bne.n	80030fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e242      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x74>
 800305a:	4b76      	ldr	r3, [pc, #472]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a75      	ldr	r2, [pc, #468]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x98>
 8003072:	4b70      	ldr	r3, [pc, #448]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6f      	ldr	r2, [pc, #444]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b6d      	ldr	r3, [pc, #436]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a6c      	ldr	r2, [pc, #432]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 800308c:	4b69      	ldr	r3, [pc, #420]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a68      	ldr	r2, [pc, #416]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b66      	ldr	r3, [pc, #408]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a65      	ldr	r2, [pc, #404]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7ff fe8c 	bl	8002dc8 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7ff fe88 	bl	8002dc8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	@ 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e207      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xc0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7ff fe78 	bl	8002dc8 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7ff fe74 	bl	8002dc8 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	@ 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1f3      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b51      	ldr	r3, [pc, #324]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0xe8>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d063      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800310a:	4b4a      	ldr	r3, [pc, #296]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b44      	ldr	r3, [pc, #272]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b41      	ldr	r3, [pc, #260]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1c7      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4937      	ldr	r1, [pc, #220]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e03a      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <HAL_RCC_OscConfig+0x244>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7ff fe2d 	bl	8002dc8 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7ff fe29 	bl	8002dc8 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e1a8      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b28      	ldr	r3, [pc, #160]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4925      	ldr	r1, [pc, #148]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e015      	b.n	80031d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_RCC_OscConfig+0x244>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7ff fe0c 	bl	8002dc8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b4:	f7ff fe08 	bl	8002dc8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e187      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d036      	beq.n	800324c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e6:	4b15      	ldr	r3, [pc, #84]	@ (800323c <HAL_RCC_OscConfig+0x248>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7ff fdec 	bl	8002dc8 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7ff fde8 	bl	8002dc8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e167      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <HAL_RCC_OscConfig+0x240>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x200>
 8003212:	e01b      	b.n	800324c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b09      	ldr	r3, [pc, #36]	@ (800323c <HAL_RCC_OscConfig+0x248>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7ff fdd5 	bl	8002dc8 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	e00e      	b.n	8003240 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7ff fdd1 	bl	8002dc8 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d907      	bls.n	8003240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e150      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
 8003234:	40023800 	.word	0x40023800
 8003238:	42470000 	.word	0x42470000
 800323c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	4b88      	ldr	r3, [pc, #544]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ea      	bne.n	8003222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8097 	beq.w	8003388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b81      	ldr	r3, [pc, #516]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b7d      	ldr	r3, [pc, #500]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	4a7c      	ldr	r2, [pc, #496]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	@ 0x40
 800327a:	4b7a      	ldr	r3, [pc, #488]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b77      	ldr	r3, [pc, #476]	@ (8003468 <HAL_RCC_OscConfig+0x474>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b74      	ldr	r3, [pc, #464]	@ (8003468 <HAL_RCC_OscConfig+0x474>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a73      	ldr	r2, [pc, #460]	@ (8003468 <HAL_RCC_OscConfig+0x474>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7ff fd91 	bl	8002dc8 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7ff fd8d 	bl	8002dc8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e10c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003468 <HAL_RCC_OscConfig+0x474>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x2ea>
 80032d0:	4b64      	ldr	r3, [pc, #400]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d4:	4a63      	ldr	r2, [pc, #396]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	6713      	str	r3, [r2, #112]	@ 0x70
 80032dc:	e01c      	b.n	8003318 <HAL_RCC_OscConfig+0x324>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x30c>
 80032e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0x324>
 8003300:	4b58      	ldr	r3, [pc, #352]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	4a57      	ldr	r2, [pc, #348]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	6713      	str	r3, [r2, #112]	@ 0x70
 800330c:	4b55      	ldr	r3, [pc, #340]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	4a54      	ldr	r2, [pc, #336]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7ff fd52 	bl	8002dc8 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7ff fd4e 	bl	8002dc8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0cb      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	4b49      	ldr	r3, [pc, #292]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ee      	beq.n	8003328 <HAL_RCC_OscConfig+0x334>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7ff fd3c 	bl	8002dc8 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7ff fd38 	bl	8002dc8 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0b5      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	4b3e      	ldr	r3, [pc, #248]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ee      	bne.n	8003354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d105      	bne.n	8003388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4b39      	ldr	r3, [pc, #228]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	4a38      	ldr	r2, [pc, #224]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a1 	beq.w	80034d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003392:	4b34      	ldr	r3, [pc, #208]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b08      	cmp	r3, #8
 800339c:	d05c      	beq.n	8003458 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d141      	bne.n	800342a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b31      	ldr	r3, [pc, #196]	@ (800346c <HAL_RCC_OscConfig+0x478>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7ff fd0c 	bl	8002dc8 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7ff fd08 	bl	8002dc8 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e087      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b27      	ldr	r3, [pc, #156]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	491b      	ldr	r1, [pc, #108]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033fc:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x478>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7ff fce1 	bl	8002dc8 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7ff fcdd 	bl	8002dc8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e05c      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x416>
 8003428:	e054      	b.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b10      	ldr	r3, [pc, #64]	@ (800346c <HAL_RCC_OscConfig+0x478>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7ff fcca 	bl	8002dc8 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7ff fcc6 	bl	8002dc8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e045      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_RCC_OscConfig+0x470>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x444>
 8003456:	e03d      	b.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e038      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000
 800346c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_RCC_OscConfig+0x4ec>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d028      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003488:	429a      	cmp	r2, r3
 800348a:	d121      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d11a      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d111      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	3b01      	subs	r3, #1
 80034ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800

080034e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0cc      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b68      	ldr	r3, [pc, #416]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d90c      	bls.n	8003520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b65      	ldr	r3, [pc, #404]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b63      	ldr	r3, [pc, #396]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b8      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003538:	4b59      	ldr	r3, [pc, #356]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a58      	ldr	r2, [pc, #352]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003542:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003550:	4b53      	ldr	r3, [pc, #332]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a52      	ldr	r2, [pc, #328]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800355a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355c:	4b50      	ldr	r3, [pc, #320]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	494d      	ldr	r1, [pc, #308]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d044      	beq.n	8003604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b47      	ldr	r3, [pc, #284]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d119      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	4b3f      	ldr	r3, [pc, #252]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e06f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b3b      	ldr	r3, [pc, #236]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e067      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	4b37      	ldr	r3, [pc, #220]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4934      	ldr	r1, [pc, #208]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7ff fbf8 	bl	8002dc8 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7ff fbf4 	bl	8002dc8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e04f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 020c 	and.w	r2, r3, #12
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	429a      	cmp	r2, r3
 8003602:	d1eb      	bne.n	80035dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b25      	ldr	r3, [pc, #148]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d20c      	bcs.n	800362c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b22      	ldr	r3, [pc, #136]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b20      	ldr	r3, [pc, #128]	@ (800369c <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e032      	b.n	8003692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4916      	ldr	r1, [pc, #88]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003656:	4b12      	ldr	r3, [pc, #72]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	490e      	ldr	r1, [pc, #56]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800366a:	f000 f821 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800366e:	4602      	mov	r2, r0
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	490a      	ldr	r1, [pc, #40]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	5ccb      	ldrb	r3, [r1, r3]
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	4a09      	ldr	r2, [pc, #36]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003686:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fb58 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023c00 	.word	0x40023c00
 80036a0:	40023800 	.word	0x40023800
 80036a4:	08007e7c 	.word	0x08007e7c
 80036a8:	20000000 	.word	0x20000000
 80036ac:	20000004 	.word	0x20000004

080036b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b4:	b094      	sub	sp, #80	@ 0x50
 80036b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c8:	4b79      	ldr	r3, [pc, #484]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x40>
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	f200 80e1 	bhi.w	800389c <HAL_RCC_GetSysClockFreq+0x1ec>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x34>
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x3a>
 80036e2:	e0db      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b73      	ldr	r3, [pc, #460]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036e8:	e0db      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ea:	4b73      	ldr	r3, [pc, #460]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80036ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036ee:	e0d8      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f0:	4b6f      	ldr	r3, [pc, #444]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036fa:	4b6d      	ldr	r3, [pc, #436]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d063      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b6a      	ldr	r3, [pc, #424]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	2200      	movs	r2, #0
 800370e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003710:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003718:	633b      	str	r3, [r7, #48]	@ 0x30
 800371a:	2300      	movs	r3, #0
 800371c:	637b      	str	r3, [r7, #52]	@ 0x34
 800371e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003722:	4622      	mov	r2, r4
 8003724:	462b      	mov	r3, r5
 8003726:	f04f 0000 	mov.w	r0, #0
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	0159      	lsls	r1, r3, #5
 8003730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003734:	0150      	lsls	r0, r2, #5
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4621      	mov	r1, r4
 800373c:	1a51      	subs	r1, r2, r1
 800373e:	6139      	str	r1, [r7, #16]
 8003740:	4629      	mov	r1, r5
 8003742:	eb63 0301 	sbc.w	r3, r3, r1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003754:	4659      	mov	r1, fp
 8003756:	018b      	lsls	r3, r1, #6
 8003758:	4651      	mov	r1, sl
 800375a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800375e:	4651      	mov	r1, sl
 8003760:	018a      	lsls	r2, r1, #6
 8003762:	4651      	mov	r1, sl
 8003764:	ebb2 0801 	subs.w	r8, r2, r1
 8003768:	4659      	mov	r1, fp
 800376a:	eb63 0901 	sbc.w	r9, r3, r1
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800377a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800377e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003782:	4690      	mov	r8, r2
 8003784:	4699      	mov	r9, r3
 8003786:	4623      	mov	r3, r4
 8003788:	eb18 0303 	adds.w	r3, r8, r3
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	462b      	mov	r3, r5
 8003790:	eb49 0303 	adc.w	r3, r9, r3
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037a2:	4629      	mov	r1, r5
 80037a4:	024b      	lsls	r3, r1, #9
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037ac:	4621      	mov	r1, r4
 80037ae:	024a      	lsls	r2, r1, #9
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b6:	2200      	movs	r2, #0
 80037b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037c0:	f7fd f9f2 	bl	8000ba8 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037cc:	e058      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ce:	4b38      	ldr	r3, [pc, #224]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	2200      	movs	r2, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	4611      	mov	r1, r2
 80037da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037de:	623b      	str	r3, [r7, #32]
 80037e0:	2300      	movs	r3, #0
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037e8:	4642      	mov	r2, r8
 80037ea:	464b      	mov	r3, r9
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	0159      	lsls	r1, r3, #5
 80037f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037fa:	0150      	lsls	r0, r2, #5
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4641      	mov	r1, r8
 8003802:	ebb2 0a01 	subs.w	sl, r2, r1
 8003806:	4649      	mov	r1, r9
 8003808:	eb63 0b01 	sbc.w	fp, r3, r1
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800381c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003820:	ebb2 040a 	subs.w	r4, r2, sl
 8003824:	eb63 050b 	sbc.w	r5, r3, fp
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	00eb      	lsls	r3, r5, #3
 8003832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003836:	00e2      	lsls	r2, r4, #3
 8003838:	4614      	mov	r4, r2
 800383a:	461d      	mov	r5, r3
 800383c:	4643      	mov	r3, r8
 800383e:	18e3      	adds	r3, r4, r3
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	464b      	mov	r3, r9
 8003844:	eb45 0303 	adc.w	r3, r5, r3
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003856:	4629      	mov	r1, r5
 8003858:	028b      	lsls	r3, r1, #10
 800385a:	4621      	mov	r1, r4
 800385c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003860:	4621      	mov	r1, r4
 8003862:	028a      	lsls	r2, r1, #10
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800386a:	2200      	movs	r2, #0
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	61fa      	str	r2, [r7, #28]
 8003870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003874:	f7fd f998 	bl	8000ba8 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4613      	mov	r3, r2
 800387e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003880:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	3301      	adds	r3, #1
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800389a:	e002      	b.n	80038a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800389c:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800389e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3750      	adds	r7, #80	@ 0x50
 80038a8:	46bd      	mov	sp, r7
 80038aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	007a1200 	.word	0x007a1200

080038bc <LL_GPIO_SetPinMode>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b08b      	sub	sp, #44	@ 0x2c
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	613b      	str	r3, [r7, #16]
  return result;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80038e2:	2320      	movs	r3, #32
 80038e4:	e003      	b.n	80038ee <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	2103      	movs	r1, #3
 80038f2:	fa01 f303 	lsl.w	r3, r1, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	401a      	ands	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	61fb      	str	r3, [r7, #28]
  return result;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003910:	2320      	movs	r3, #32
 8003912:	e003      	b.n	800391c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	fa01 f303 	lsl.w	r3, r1, r3
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	372c      	adds	r7, #44	@ 0x2c
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <LL_GPIO_SetPinOutputType>:
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	43db      	mvns	r3, r3
 800394a:	401a      	ands	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	605a      	str	r2, [r3, #4]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <LL_GPIO_SetPinSpeed>:
{
 8003966:	b480      	push	{r7}
 8003968:	b08b      	sub	sp, #44	@ 0x2c
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	613b      	str	r3, [r7, #16]
  return result;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800398c:	2320      	movs	r3, #32
 800398e:	e003      	b.n	8003998 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2103      	movs	r1, #3
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	401a      	ands	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	fa93 f3a3 	rbit	r3, r3
 80039ae:	61fb      	str	r3, [r7, #28]
  return result;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80039ba:	2320      	movs	r3, #32
 80039bc:	e003      	b.n	80039c6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	431a      	orrs	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	609a      	str	r2, [r3, #8]
}
 80039d4:	bf00      	nop
 80039d6:	372c      	adds	r7, #44	@ 0x2c
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <LL_GPIO_SetPinPull>:
{
 80039e0:	b480      	push	{r7}
 80039e2:	b08b      	sub	sp, #44	@ 0x2c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	613b      	str	r3, [r7, #16]
  return result;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003a06:	2320      	movs	r3, #32
 8003a08:	e003      	b.n	8003a12 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2103      	movs	r1, #3
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	61fb      	str	r3, [r7, #28]
  return result;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003a34:	2320      	movs	r3, #32
 8003a36:	e003      	b.n	8003a40 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	fa01 f303 	lsl.w	r3, r1, r3
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	60da      	str	r2, [r3, #12]
}
 8003a4e:	bf00      	nop
 8003a50:	372c      	adds	r7, #44	@ 0x2c
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <LL_GPIO_SetAFPin_0_7>:
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b08b      	sub	sp, #44	@ 0x2c
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1a      	ldr	r2, [r3, #32]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	613b      	str	r3, [r7, #16]
  return result;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003a80:	2320      	movs	r3, #32
 8003a82:	e003      	b.n	8003a8c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	210f      	movs	r1, #15
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	61fb      	str	r3, [r7, #28]
  return result;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003aae:	2320      	movs	r3, #32
 8003ab0:	e003      	b.n	8003aba <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	621a      	str	r2, [r3, #32]
}
 8003ac8:	bf00      	nop
 8003aca:	372c      	adds	r7, #44	@ 0x2c
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_GPIO_SetAFPin_8_15>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b08b      	sub	sp, #44	@ 0x2c
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	613b      	str	r3, [r7, #16]
  return result;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003afc:	2320      	movs	r3, #32
 8003afe:	e003      	b.n	8003b08 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	210f      	movs	r1, #15
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	401a      	ands	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	61fb      	str	r3, [r7, #28]
  return result;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	e003      	b.n	8003b38 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	fab3 f383 	clz	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	431a      	orrs	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003b46:	bf00      	nop
 8003b48:	372c      	adds	r7, #44	@ 0x2c
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b08a      	sub	sp, #40	@ 0x28
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	617b      	str	r3, [r7, #20]
  return result;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <LL_GPIO_Init+0x2e>
    return 32U;
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	e003      	b.n	8003b88 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003b8a:	e057      	b.n	8003c3c <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	2101      	movs	r1, #1
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	fa01 f303 	lsl.w	r3, r1, r3
 8003b98:	4013      	ands	r3, r2
 8003b9a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d049      	beq.n	8003c36 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d003      	beq.n	8003bb2 <LL_GPIO_Init+0x60>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d10d      	bne.n	8003bce <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6a39      	ldr	r1, [r7, #32]
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff fed3 	bl	8003966 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6a39      	ldr	r1, [r7, #32]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff feb4 	bl	8003936 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ff02 	bl	80039e0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d121      	bne.n	8003c28 <LL_GPIO_Init+0xd6>
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	60bb      	str	r3, [r7, #8]
  return result;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <LL_GPIO_Init+0xac>
    return 32U;
 8003bfa:	2320      	movs	r3, #32
 8003bfc:	e003      	b.n	8003c06 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	fab3 f383 	clz	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003c06:	2b07      	cmp	r3, #7
 8003c08:	d807      	bhi.n	8003c1a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6a39      	ldr	r1, [r7, #32]
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff ff21 	bl	8003a5a <LL_GPIO_SetAFPin_0_7>
 8003c18:	e006      	b.n	8003c28 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6a39      	ldr	r1, [r7, #32]
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ff56 	bl	8003ad4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6a39      	ldr	r1, [r7, #32]
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fe43 	bl	80038bc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	3301      	adds	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1a0      	bne.n	8003b8c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3728      	adds	r7, #40	@ 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c58:	4b04      	ldr	r3, [pc, #16]	@ (8003c6c <LL_RCC_GetSysClkSource+0x18>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800

08003c70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c74:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <LL_RCC_GetAHBPrescaler+0x18>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800

08003c8c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003c90:	4b04      	ldr	r3, [pc, #16]	@ (8003ca4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800

08003ca8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003cac:	4b04      	ldr	r3, [pc, #16]	@ (8003cc0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <LL_RCC_PLL_GetMainSource+0x18>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ce4:	4b04      	ldr	r3, [pc, #16]	@ (8003cf8 <LL_RCC_PLL_GetN+0x18>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40023800 	.word	0x40023800

08003cfc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003d00:	4b04      	ldr	r3, [pc, #16]	@ (8003d14 <LL_RCC_PLL_GetP+0x18>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800

08003d18 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003d1c:	4b04      	ldr	r3, [pc, #16]	@ (8003d30 <LL_RCC_PLL_GetDivider+0x18>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800

08003d34 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003d3c:	f000 f820 	bl	8003d80 <RCC_GetSystemClockFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f840 	bl	8003dd0 <RCC_GetHCLKClockFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f84e 	bl	8003dfc <RCC_GetPCLK1ClockFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f85a 	bl	8003e24 <RCC_GetPCLK2ClockFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60da      	str	r2, [r3, #12]
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003d8a:	f7ff ff63 	bl	8003c54 <LL_RCC_GetSysClkSource>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d00c      	beq.n	8003dae <RCC_GetSystemClockFreq+0x2e>
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d80f      	bhi.n	8003db8 <RCC_GetSystemClockFreq+0x38>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <RCC_GetSystemClockFreq+0x22>
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d003      	beq.n	8003da8 <RCC_GetSystemClockFreq+0x28>
 8003da0:	e00a      	b.n	8003db8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003da2:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <RCC_GetSystemClockFreq+0x48>)
 8003da4:	607b      	str	r3, [r7, #4]
      break;
 8003da6:	e00a      	b.n	8003dbe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003da8:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <RCC_GetSystemClockFreq+0x4c>)
 8003daa:	607b      	str	r3, [r7, #4]
      break;
 8003dac:	e007      	b.n	8003dbe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003dae:	2008      	movs	r0, #8
 8003db0:	f000 f84c 	bl	8003e4c <RCC_PLL_GetFreqDomain_SYS>
 8003db4:	6078      	str	r0, [r7, #4]
      break;
 8003db6:	e002      	b.n	8003dbe <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003db8:	4b03      	ldr	r3, [pc, #12]	@ (8003dc8 <RCC_GetSystemClockFreq+0x48>)
 8003dba:	607b      	str	r3, [r7, #4]
      break;
 8003dbc:	bf00      	nop
  }

  return frequency;
 8003dbe:	687b      	ldr	r3, [r7, #4]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	007a1200 	.word	0x007a1200

08003dd0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003dd8:	f7ff ff4a 	bl	8003c70 <LL_RCC_GetAHBPrescaler>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	4a04      	ldr	r2, [pc, #16]	@ (8003df8 <RCC_GetHCLKClockFreq+0x28>)
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	461a      	mov	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	40d3      	lsrs	r3, r2
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	08007e7c 	.word	0x08007e7c

08003dfc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003e04:	f7ff ff42 	bl	8003c8c <LL_RCC_GetAPB1Prescaler>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	0a9b      	lsrs	r3, r3, #10
 8003e0c:	4a04      	ldr	r2, [pc, #16]	@ (8003e20 <RCC_GetPCLK1ClockFreq+0x24>)
 8003e0e:	5cd3      	ldrb	r3, [r2, r3]
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	40d3      	lsrs	r3, r2
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	08007e8c 	.word	0x08007e8c

08003e24 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003e2c:	f7ff ff3c 	bl	8003ca8 <LL_RCC_GetAPB2Prescaler>
 8003e30:	4603      	mov	r3, r0
 8003e32:	0b5b      	lsrs	r3, r3, #13
 8003e34:	4a04      	ldr	r2, [pc, #16]	@ (8003e48 <RCC_GetPCLK2ClockFreq+0x24>)
 8003e36:	5cd3      	ldrb	r3, [r2, r3]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	40d3      	lsrs	r3, r2
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	08007e8c 	.word	0x08007e8c

08003e4c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003e60:	f7ff ff30 	bl	8003cc4 <LL_RCC_PLL_GetMainSource>
 8003e64:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e72:	d003      	beq.n	8003e7c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003e74:	e005      	b.n	8003e82 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003e76:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003e78:	617b      	str	r3, [r7, #20]
      break;
 8003e7a:	e005      	b.n	8003e88 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003e7e:	617b      	str	r3, [r7, #20]
      break;
 8003e80:	e002      	b.n	8003e88 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003e82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003e84:	617b      	str	r3, [r7, #20]
      break;
 8003e86:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d113      	bne.n	8003eb6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003e8e:	f7ff ff43 	bl	8003d18 <LL_RCC_PLL_GetDivider>
 8003e92:	4602      	mov	r2, r0
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fbb3 f4f2 	udiv	r4, r3, r2
 8003e9a:	f7ff ff21 	bl	8003ce0 <LL_RCC_PLL_GetN>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	fb03 f404 	mul.w	r4, r3, r4
 8003ea4:	f7ff ff2a 	bl	8003cfc <LL_RCC_PLL_GetP>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	0c1b      	lsrs	r3, r3, #16
 8003eac:	3301      	adds	r3, #1
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fbb4 f3f3 	udiv	r3, r4, r3
 8003eb4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003eb6:	693b      	ldr	r3, [r7, #16]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd90      	pop	{r4, r7, pc}
 8003ec0:	00f42400 	.word	0x00f42400
 8003ec4:	007a1200 	.word	0x007a1200

08003ec8 <LL_SPI_IsEnabled>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed8:	2b40      	cmp	r3, #64	@ 0x40
 8003eda:	d101      	bne.n	8003ee0 <LL_SPI_IsEnabled+0x18>
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <LL_SPI_IsEnabled+0x1a>
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_SPI_SetCRCPolynomial>:
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	611a      	str	r2, [r3, #16]
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ffd3 	bl	8003ec8 <LL_SPI_IsEnabled>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d139      	bne.n	8003f9c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f30:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	6811      	ldr	r1, [r2, #0]
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	6852      	ldr	r2, [r2, #4]
 8003f3c:	4311      	orrs	r1, r2
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	6892      	ldr	r2, [r2, #8]
 8003f42:	4311      	orrs	r1, r2
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	68d2      	ldr	r2, [r2, #12]
 8003f48:	4311      	orrs	r1, r2
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	6912      	ldr	r2, [r2, #16]
 8003f4e:	4311      	orrs	r1, r2
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	6952      	ldr	r2, [r2, #20]
 8003f54:	4311      	orrs	r1, r2
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	6992      	ldr	r2, [r2, #24]
 8003f5a:	4311      	orrs	r1, r2
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	69d2      	ldr	r2, [r2, #28]
 8003f60:	4311      	orrs	r1, r2
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	6a12      	ldr	r2, [r2, #32]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f023 0204 	bic.w	r2, r3, #4
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	0c1b      	lsrs	r3, r3, #16
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f8a:	d105      	bne.n	8003f98 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff ffab 	bl	8003eee <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	61da      	str	r2, [r3, #28]
  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <LL_TIM_SetPrescaler>:
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_TIM_SetAutoReload>:
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_TIM_SetRepetitionCounter>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_TIM_OC_SetCompareCH1>:
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <LL_TIM_OC_SetCompareCH2>:
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <LL_TIM_OC_SetCompareCH3>:
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_TIM_OC_SetCompareCH4>:
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	615a      	str	r2, [r3, #20]
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3d      	ldr	r2, [pc, #244]	@ (80041a0 <LL_TIM_Init+0x108>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <LL_TIM_Init+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b6:	d00f      	beq.n	80040d8 <LL_TIM_Init+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3a      	ldr	r2, [pc, #232]	@ (80041a4 <LL_TIM_Init+0x10c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00b      	beq.n	80040d8 <LL_TIM_Init+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a39      	ldr	r2, [pc, #228]	@ (80041a8 <LL_TIM_Init+0x110>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d007      	beq.n	80040d8 <LL_TIM_Init+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a38      	ldr	r2, [pc, #224]	@ (80041ac <LL_TIM_Init+0x114>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <LL_TIM_Init+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a37      	ldr	r2, [pc, #220]	@ (80041b0 <LL_TIM_Init+0x118>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d106      	bne.n	80040e6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2d      	ldr	r2, [pc, #180]	@ (80041a0 <LL_TIM_Init+0x108>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d02b      	beq.n	8004146 <LL_TIM_Init+0xae>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f4:	d027      	beq.n	8004146 <LL_TIM_Init+0xae>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a2a      	ldr	r2, [pc, #168]	@ (80041a4 <LL_TIM_Init+0x10c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d023      	beq.n	8004146 <LL_TIM_Init+0xae>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a29      	ldr	r2, [pc, #164]	@ (80041a8 <LL_TIM_Init+0x110>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01f      	beq.n	8004146 <LL_TIM_Init+0xae>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a28      	ldr	r2, [pc, #160]	@ (80041ac <LL_TIM_Init+0x114>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01b      	beq.n	8004146 <LL_TIM_Init+0xae>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a27      	ldr	r2, [pc, #156]	@ (80041b0 <LL_TIM_Init+0x118>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d017      	beq.n	8004146 <LL_TIM_Init+0xae>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a26      	ldr	r2, [pc, #152]	@ (80041b4 <LL_TIM_Init+0x11c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <LL_TIM_Init+0xae>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a25      	ldr	r2, [pc, #148]	@ (80041b8 <LL_TIM_Init+0x120>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00f      	beq.n	8004146 <LL_TIM_Init+0xae>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a24      	ldr	r2, [pc, #144]	@ (80041bc <LL_TIM_Init+0x124>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00b      	beq.n	8004146 <LL_TIM_Init+0xae>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a23      	ldr	r2, [pc, #140]	@ (80041c0 <LL_TIM_Init+0x128>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <LL_TIM_Init+0xae>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a22      	ldr	r2, [pc, #136]	@ (80041c4 <LL_TIM_Init+0x12c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <LL_TIM_Init+0xae>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a21      	ldr	r2, [pc, #132]	@ (80041c8 <LL_TIM_Init+0x130>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d106      	bne.n	8004154 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff34 	bl	8003fce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ff20 	bl	8003fb2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a0a      	ldr	r2, [pc, #40]	@ (80041a0 <LL_TIM_Init+0x108>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <LL_TIM_Init+0xea>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a0c      	ldr	r2, [pc, #48]	@ (80041b0 <LL_TIM_Init+0x118>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d105      	bne.n	800418e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff2e 	bl	8003fea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ff71 	bl	8004076 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40010400 	.word	0x40010400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40014400 	.word	0x40014400
 80041bc:	40014800 	.word	0x40014800
 80041c0:	40001800 	.word	0x40001800
 80041c4:	40001c00 	.word	0x40001c00
 80041c8:	40002000 	.word	0x40002000

080041cc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e2:	d027      	beq.n	8004234 <LL_TIM_OC_Init+0x68>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ea:	d82a      	bhi.n	8004242 <LL_TIM_OC_Init+0x76>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f2:	d018      	beq.n	8004226 <LL_TIM_OC_Init+0x5a>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fa:	d822      	bhi.n	8004242 <LL_TIM_OC_Init+0x76>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d003      	beq.n	800420a <LL_TIM_OC_Init+0x3e>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b10      	cmp	r3, #16
 8004206:	d007      	beq.n	8004218 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004208:	e01b      	b.n	8004242 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f81f 	bl	8004250 <OC1Config>
 8004212:	4603      	mov	r3, r0
 8004214:	75fb      	strb	r3, [r7, #23]
      break;
 8004216:	e015      	b.n	8004244 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f884 	bl	8004328 <OC2Config>
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]
      break;
 8004224:	e00e      	b.n	8004244 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f8ed 	bl	8004408 <OC3Config>
 800422e:	4603      	mov	r3, r0
 8004230:	75fb      	strb	r3, [r7, #23]
      break;
 8004232:	e007      	b.n	8004244 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f956 	bl	80044e8 <OC4Config>
 800423c:	4603      	mov	r3, r0
 800423e:	75fb      	strb	r3, [r7, #23]
      break;
 8004240:	e000      	b.n	8004244 <LL_TIM_OC_Init+0x78>
      break;
 8004242:	bf00      	nop
  }

  return result;
 8004244:	7dfb      	ldrb	r3, [r7, #23]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f023 0202 	bic.w	r2, r3, #2
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0201 	bic.w	r2, r3, #1
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004320 <OC1Config+0xd0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <OC1Config+0x6a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004324 <OC1Config+0xd4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d11e      	bne.n	80042f8 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f023 0208 	bic.w	r2, r3, #8
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f023 0204 	bic.w	r2, r3, #4
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff fe7b 	bl	8004006 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40010000 	.word	0x40010000
 8004324:	40010400 	.word	0x40010400

08004328 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0210 	bic.w	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0220 	bic.w	r2, r3, #32
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0210 	bic.w	r2, r3, #16
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a1d      	ldr	r2, [pc, #116]	@ (8004400 <OC2Config+0xd8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <OC2Config+0x70>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a1c      	ldr	r2, [pc, #112]	@ (8004404 <OC2Config+0xdc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d11f      	bne.n	80043d8 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	019b      	lsls	r3, r3, #6
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	019b      	lsls	r3, r3, #6
 80043b4:	4313      	orrs	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fe19 	bl	8004022 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40010000 	.word	0x40010000
 8004404:	40010400 	.word	0x40010400

08004408 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0303 	bic.w	r3, r3, #3
 8004436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1d      	ldr	r2, [pc, #116]	@ (80044e0 <OC3Config+0xd8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <OC3Config+0x6e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1c      	ldr	r2, [pc, #112]	@ (80044e4 <OC3Config+0xdc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d11f      	bne.n	80044b6 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	029b      	lsls	r3, r3, #10
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	029b      	lsls	r3, r3, #10
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	015b      	lsls	r3, r3, #5
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff fdb8 	bl	800403e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40010000 	.word	0x40010000
 80044e4:	40010400 	.word	0x40010400

080044e8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	031b      	lsls	r3, r3, #12
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	031b      	lsls	r3, r3, #12
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a11      	ldr	r2, [pc, #68]	@ (8004590 <OC4Config+0xa8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <OC4Config+0x70>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a10      	ldr	r2, [pc, #64]	@ (8004594 <OC4Config+0xac>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d107      	bne.n	8004568 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	019b      	lsls	r3, r3, #6
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff fd6d 	bl	800405a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400

08004598 <LL_USART_IsEnabled>:
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LL_USART_SetStopBitsLength>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	611a      	str	r2, [r3, #16]
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <LL_USART_SetHWFlowCtrl>:
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	615a      	str	r2, [r3, #20]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <LL_USART_SetBaudRate>:
{
 800460c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004610:	b0c0      	sub	sp, #256	@ 0x100
 8004612:	af00      	add	r7, sp, #0
 8004614:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004618:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800461c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004620:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800462c:	f040 810c 	bne.w	8004848 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004630:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004634:	2200      	movs	r2, #0
 8004636:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800463a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800463e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004642:	4622      	mov	r2, r4
 8004644:	462b      	mov	r3, r5
 8004646:	1891      	adds	r1, r2, r2
 8004648:	6639      	str	r1, [r7, #96]	@ 0x60
 800464a:	415b      	adcs	r3, r3
 800464c:	667b      	str	r3, [r7, #100]	@ 0x64
 800464e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004652:	4621      	mov	r1, r4
 8004654:	eb12 0801 	adds.w	r8, r2, r1
 8004658:	4629      	mov	r1, r5
 800465a:	eb43 0901 	adc.w	r9, r3, r1
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800466a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800466e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004672:	4690      	mov	r8, r2
 8004674:	4699      	mov	r9, r3
 8004676:	4623      	mov	r3, r4
 8004678:	eb18 0303 	adds.w	r3, r8, r3
 800467c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004680:	462b      	mov	r3, r5
 8004682:	eb49 0303 	adc.w	r3, r9, r3
 8004686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800468a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800468e:	2200      	movs	r2, #0
 8004690:	469a      	mov	sl, r3
 8004692:	4693      	mov	fp, r2
 8004694:	eb1a 030a 	adds.w	r3, sl, sl
 8004698:	65bb      	str	r3, [r7, #88]	@ 0x58
 800469a:	eb4b 030b 	adc.w	r3, fp, fp
 800469e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046a8:	f7fc fa7e 	bl	8000ba8 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4b64      	ldr	r3, [pc, #400]	@ (8004844 <LL_USART_SetBaudRate+0x238>)
 80046b2:	fba3 2302 	umull	r2, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	b29c      	uxth	r4, r3
 80046be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046c8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046cc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	1891      	adds	r1, r2, r2
 80046d6:	6539      	str	r1, [r7, #80]	@ 0x50
 80046d8:	415b      	adcs	r3, r3
 80046da:	657b      	str	r3, [r7, #84]	@ 0x54
 80046dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046e0:	4641      	mov	r1, r8
 80046e2:	1851      	adds	r1, r2, r1
 80046e4:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046e6:	4649      	mov	r1, r9
 80046e8:	414b      	adcs	r3, r1
 80046ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80046f8:	4659      	mov	r1, fp
 80046fa:	00cb      	lsls	r3, r1, #3
 80046fc:	4651      	mov	r1, sl
 80046fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004702:	4651      	mov	r1, sl
 8004704:	00ca      	lsls	r2, r1, #3
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	4603      	mov	r3, r0
 800470c:	4642      	mov	r2, r8
 800470e:	189b      	adds	r3, r3, r2
 8004710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004714:	464b      	mov	r3, r9
 8004716:	460a      	mov	r2, r1
 8004718:	eb42 0303 	adc.w	r3, r2, r3
 800471c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004720:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004724:	2200      	movs	r2, #0
 8004726:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800472a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800472e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004732:	460b      	mov	r3, r1
 8004734:	18db      	adds	r3, r3, r3
 8004736:	643b      	str	r3, [r7, #64]	@ 0x40
 8004738:	4613      	mov	r3, r2
 800473a:	eb42 0303 	adc.w	r3, r2, r3
 800473e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004740:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004744:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004748:	f7fc fa2e 	bl	8000ba8 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4611      	mov	r1, r2
 8004752:	4b3c      	ldr	r3, [pc, #240]	@ (8004844 <LL_USART_SetBaudRate+0x238>)
 8004754:	fba3 2301 	umull	r2, r3, r3, r1
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	2264      	movs	r2, #100	@ 0x64
 800475c:	fb02 f303 	mul.w	r3, r2, r3
 8004760:	1acb      	subs	r3, r1, r3
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004768:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <LL_USART_SetBaudRate+0x238>)
 800476a:	fba3 2302 	umull	r2, r3, r3, r2
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	b29b      	uxth	r3, r3
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	b29b      	uxth	r3, r3
 8004776:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800477a:	b29b      	uxth	r3, r3
 800477c:	4423      	add	r3, r4
 800477e:	b29c      	uxth	r4, r3
 8004780:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004784:	2200      	movs	r2, #0
 8004786:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800478a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800478e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8004792:	4642      	mov	r2, r8
 8004794:	464b      	mov	r3, r9
 8004796:	1891      	adds	r1, r2, r2
 8004798:	63b9      	str	r1, [r7, #56]	@ 0x38
 800479a:	415b      	adcs	r3, r3
 800479c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800479e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047a2:	4641      	mov	r1, r8
 80047a4:	1851      	adds	r1, r2, r1
 80047a6:	6339      	str	r1, [r7, #48]	@ 0x30
 80047a8:	4649      	mov	r1, r9
 80047aa:	414b      	adcs	r3, r1
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047ba:	4659      	mov	r1, fp
 80047bc:	00cb      	lsls	r3, r1, #3
 80047be:	4651      	mov	r1, sl
 80047c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c4:	4651      	mov	r1, sl
 80047c6:	00ca      	lsls	r2, r1, #3
 80047c8:	4610      	mov	r0, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	4603      	mov	r3, r0
 80047ce:	4642      	mov	r2, r8
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047d6:	464b      	mov	r3, r9
 80047d8:	460a      	mov	r2, r1
 80047da:	eb42 0303 	adc.w	r3, r2, r3
 80047de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80047e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047ec:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80047f0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80047f4:	460b      	mov	r3, r1
 80047f6:	18db      	adds	r3, r3, r3
 80047f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fa:	4613      	mov	r3, r2
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004806:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800480a:	f7fc f9cd 	bl	8000ba8 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <LL_USART_SetBaudRate+0x238>)
 8004814:	fba3 1302 	umull	r1, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	2164      	movs	r1, #100	@ 0x64
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	3332      	adds	r3, #50	@ 0x32
 8004826:	4a07      	ldr	r2, [pc, #28]	@ (8004844 <LL_USART_SetBaudRate+0x238>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	b29b      	uxth	r3, r3
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	b29b      	uxth	r3, r3
 8004836:	4423      	add	r3, r4
 8004838:	b29b      	uxth	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004840:	609a      	str	r2, [r3, #8]
}
 8004842:	e108      	b.n	8004a56 <LL_USART_SetBaudRate+0x44a>
 8004844:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004848:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800484c:	2200      	movs	r2, #0
 800484e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004852:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004856:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800485a:	4642      	mov	r2, r8
 800485c:	464b      	mov	r3, r9
 800485e:	1891      	adds	r1, r2, r2
 8004860:	6239      	str	r1, [r7, #32]
 8004862:	415b      	adcs	r3, r3
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
 8004866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800486a:	4641      	mov	r1, r8
 800486c:	1854      	adds	r4, r2, r1
 800486e:	4649      	mov	r1, r9
 8004870:	eb43 0501 	adc.w	r5, r3, r1
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	00eb      	lsls	r3, r5, #3
 800487e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004882:	00e2      	lsls	r2, r4, #3
 8004884:	4614      	mov	r4, r2
 8004886:	461d      	mov	r5, r3
 8004888:	4643      	mov	r3, r8
 800488a:	18e3      	adds	r3, r4, r3
 800488c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004890:	464b      	mov	r3, r9
 8004892:	eb45 0303 	adc.w	r3, r5, r3
 8004896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800489a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80048b4:	4629      	mov	r1, r5
 80048b6:	008b      	lsls	r3, r1, #2
 80048b8:	4621      	mov	r1, r4
 80048ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048be:	4621      	mov	r1, r4
 80048c0:	008a      	lsls	r2, r1, #2
 80048c2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80048c6:	f7fc f96f 	bl	8000ba8 <__aeabi_uldivmod>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4b65      	ldr	r3, [pc, #404]	@ (8004a64 <LL_USART_SetBaudRate+0x458>)
 80048d0:	fba3 2302 	umull	r2, r3, r3, r2
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	b29c      	uxth	r4, r3
 80048dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048ea:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80048ee:	4642      	mov	r2, r8
 80048f0:	464b      	mov	r3, r9
 80048f2:	1891      	adds	r1, r2, r2
 80048f4:	61b9      	str	r1, [r7, #24]
 80048f6:	415b      	adcs	r3, r3
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048fe:	4641      	mov	r1, r8
 8004900:	1851      	adds	r1, r2, r1
 8004902:	6139      	str	r1, [r7, #16]
 8004904:	4649      	mov	r1, r9
 8004906:	414b      	adcs	r3, r1
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004916:	4659      	mov	r1, fp
 8004918:	00cb      	lsls	r3, r1, #3
 800491a:	4651      	mov	r1, sl
 800491c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004920:	4651      	mov	r1, sl
 8004922:	00ca      	lsls	r2, r1, #3
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	4603      	mov	r3, r0
 800492a:	4642      	mov	r2, r8
 800492c:	189b      	adds	r3, r3, r2
 800492e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004932:	464b      	mov	r3, r9
 8004934:	460a      	mov	r2, r1
 8004936:	eb42 0303 	adc.w	r3, r2, r3
 800493a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800493e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004948:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004958:	4649      	mov	r1, r9
 800495a:	008b      	lsls	r3, r1, #2
 800495c:	4641      	mov	r1, r8
 800495e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004962:	4641      	mov	r1, r8
 8004964:	008a      	lsls	r2, r1, #2
 8004966:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800496a:	f7fc f91d 	bl	8000ba8 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4611      	mov	r1, r2
 8004974:	4b3b      	ldr	r3, [pc, #236]	@ (8004a64 <LL_USART_SetBaudRate+0x458>)
 8004976:	fba3 2301 	umull	r2, r3, r3, r1
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	2264      	movs	r2, #100	@ 0x64
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	1acb      	subs	r3, r1, r3
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	3332      	adds	r3, #50	@ 0x32
 8004988:	4a36      	ldr	r2, [pc, #216]	@ (8004a64 <LL_USART_SetBaudRate+0x458>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	b29b      	uxth	r3, r3
 8004992:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004996:	b29b      	uxth	r3, r3
 8004998:	4423      	add	r3, r4
 800499a:	b29c      	uxth	r4, r3
 800499c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049a0:	2200      	movs	r2, #0
 80049a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049a4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049a6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049aa:	4642      	mov	r2, r8
 80049ac:	464b      	mov	r3, r9
 80049ae:	1891      	adds	r1, r2, r2
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	415b      	adcs	r3, r3
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049ba:	4641      	mov	r1, r8
 80049bc:	1851      	adds	r1, r2, r1
 80049be:	6039      	str	r1, [r7, #0]
 80049c0:	4649      	mov	r1, r9
 80049c2:	414b      	adcs	r3, r1
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049d2:	4659      	mov	r1, fp
 80049d4:	00cb      	lsls	r3, r1, #3
 80049d6:	4651      	mov	r1, sl
 80049d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049dc:	4651      	mov	r1, sl
 80049de:	00ca      	lsls	r2, r1, #3
 80049e0:	4610      	mov	r0, r2
 80049e2:	4619      	mov	r1, r3
 80049e4:	4603      	mov	r3, r0
 80049e6:	4642      	mov	r2, r8
 80049e8:	189b      	adds	r3, r3, r2
 80049ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80049ec:	464b      	mov	r3, r9
 80049ee:	460a      	mov	r2, r1
 80049f0:	eb42 0303 	adc.w	r3, r2, r3
 80049f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80049f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80049fa:	2200      	movs	r2, #0
 80049fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	008b      	lsls	r3, r1, #2
 8004a10:	4641      	mov	r1, r8
 8004a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a16:	4641      	mov	r1, r8
 8004a18:	008a      	lsls	r2, r1, #2
 8004a1a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004a1e:	f7fc f8c3 	bl	8000ba8 <__aeabi_uldivmod>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4b0f      	ldr	r3, [pc, #60]	@ (8004a64 <LL_USART_SetBaudRate+0x458>)
 8004a28:	fba3 1302 	umull	r1, r3, r3, r2
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	2164      	movs	r1, #100	@ 0x64
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	3332      	adds	r3, #50	@ 0x32
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a64 <LL_USART_SetBaudRate+0x458>)
 8004a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	4423      	add	r3, r4
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a54:	609a      	str	r2, [r3, #8]
}
 8004a56:	bf00      	nop
 8004a58:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a62:	bf00      	nop
 8004a64:	51eb851f 	.word	0x51eb851f

08004a68 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff fd8c 	bl	8004598 <LL_USART_IsEnabled>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d15e      	bne.n	8004b44 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004a8e:	f023 030c 	bic.w	r3, r3, #12
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	6851      	ldr	r1, [r2, #4]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	68d2      	ldr	r2, [r2, #12]
 8004a9a:	4311      	orrs	r1, r2
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	6912      	ldr	r2, [r2, #16]
 8004aa0:	4311      	orrs	r1, r2
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	6992      	ldr	r2, [r2, #24]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff fd83 	bl	80045c0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff fd90 	bl	80045e6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004ac6:	f107 0308 	add.w	r3, r7, #8
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff f932 	bl	8003d34 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b50 <LL_USART_Init+0xe8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d102      	bne.n	8004ade <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	e021      	b.n	8004b22 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b54 <LL_USART_Init+0xec>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d102      	bne.n	8004aec <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	e01a      	b.n	8004b22 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a1a      	ldr	r2, [pc, #104]	@ (8004b58 <LL_USART_Init+0xf0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d102      	bne.n	8004afa <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	61bb      	str	r3, [r7, #24]
 8004af8:	e013      	b.n	8004b22 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a17      	ldr	r2, [pc, #92]	@ (8004b5c <LL_USART_Init+0xf4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d102      	bne.n	8004b08 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e00c      	b.n	8004b22 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a15      	ldr	r2, [pc, #84]	@ (8004b60 <LL_USART_Init+0xf8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d102      	bne.n	8004b16 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	e005      	b.n	8004b22 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a12      	ldr	r2, [pc, #72]	@ (8004b64 <LL_USART_Init+0xfc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d009      	beq.n	8004b44 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004b30:	2300      	movs	r3, #0
 8004b32:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fd64 	bl	800460c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004b44:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40011000 	.word	0x40011000
 8004b54:	40004400 	.word	0x40004400
 8004b58:	40004800 	.word	0x40004800
 8004b5c:	40011400 	.word	0x40011400
 8004b60:	40004c00 	.word	0x40004c00
 8004b64:	40005000 	.word	0x40005000

08004b68 <__cvt>:
 8004b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6c:	ec57 6b10 	vmov	r6, r7, d0
 8004b70:	2f00      	cmp	r7, #0
 8004b72:	460c      	mov	r4, r1
 8004b74:	4619      	mov	r1, r3
 8004b76:	463b      	mov	r3, r7
 8004b78:	bfbb      	ittet	lt
 8004b7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004b7e:	461f      	movlt	r7, r3
 8004b80:	2300      	movge	r3, #0
 8004b82:	232d      	movlt	r3, #45	@ 0x2d
 8004b84:	700b      	strb	r3, [r1, #0]
 8004b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004b8c:	4691      	mov	r9, r2
 8004b8e:	f023 0820 	bic.w	r8, r3, #32
 8004b92:	bfbc      	itt	lt
 8004b94:	4632      	movlt	r2, r6
 8004b96:	4616      	movlt	r6, r2
 8004b98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b9c:	d005      	beq.n	8004baa <__cvt+0x42>
 8004b9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ba2:	d100      	bne.n	8004ba6 <__cvt+0x3e>
 8004ba4:	3401      	adds	r4, #1
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	e000      	b.n	8004bac <__cvt+0x44>
 8004baa:	2103      	movs	r1, #3
 8004bac:	ab03      	add	r3, sp, #12
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	ab02      	add	r3, sp, #8
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	ec47 6b10 	vmov	d0, r6, r7
 8004bb8:	4653      	mov	r3, sl
 8004bba:	4622      	mov	r2, r4
 8004bbc:	f000 ff3c 	bl	8005a38 <_dtoa_r>
 8004bc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	d119      	bne.n	8004bfc <__cvt+0x94>
 8004bc8:	f019 0f01 	tst.w	r9, #1
 8004bcc:	d00e      	beq.n	8004bec <__cvt+0x84>
 8004bce:	eb00 0904 	add.w	r9, r0, r4
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	4639      	mov	r1, r7
 8004bda:	f7fb ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bde:	b108      	cbz	r0, 8004be4 <__cvt+0x7c>
 8004be0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004be4:	2230      	movs	r2, #48	@ 0x30
 8004be6:	9b03      	ldr	r3, [sp, #12]
 8004be8:	454b      	cmp	r3, r9
 8004bea:	d31e      	bcc.n	8004c2a <__cvt+0xc2>
 8004bec:	9b03      	ldr	r3, [sp, #12]
 8004bee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004bf0:	1b5b      	subs	r3, r3, r5
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	b004      	add	sp, #16
 8004bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c00:	eb00 0904 	add.w	r9, r0, r4
 8004c04:	d1e5      	bne.n	8004bd2 <__cvt+0x6a>
 8004c06:	7803      	ldrb	r3, [r0, #0]
 8004c08:	2b30      	cmp	r3, #48	@ 0x30
 8004c0a:	d10a      	bne.n	8004c22 <__cvt+0xba>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2300      	movs	r3, #0
 8004c10:	4630      	mov	r0, r6
 8004c12:	4639      	mov	r1, r7
 8004c14:	f7fb ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c18:	b918      	cbnz	r0, 8004c22 <__cvt+0xba>
 8004c1a:	f1c4 0401 	rsb	r4, r4, #1
 8004c1e:	f8ca 4000 	str.w	r4, [sl]
 8004c22:	f8da 3000 	ldr.w	r3, [sl]
 8004c26:	4499      	add	r9, r3
 8004c28:	e7d3      	b.n	8004bd2 <__cvt+0x6a>
 8004c2a:	1c59      	adds	r1, r3, #1
 8004c2c:	9103      	str	r1, [sp, #12]
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e7d9      	b.n	8004be6 <__cvt+0x7e>

08004c32 <__exponent>:
 8004c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c34:	2900      	cmp	r1, #0
 8004c36:	bfba      	itte	lt
 8004c38:	4249      	neglt	r1, r1
 8004c3a:	232d      	movlt	r3, #45	@ 0x2d
 8004c3c:	232b      	movge	r3, #43	@ 0x2b
 8004c3e:	2909      	cmp	r1, #9
 8004c40:	7002      	strb	r2, [r0, #0]
 8004c42:	7043      	strb	r3, [r0, #1]
 8004c44:	dd29      	ble.n	8004c9a <__exponent+0x68>
 8004c46:	f10d 0307 	add.w	r3, sp, #7
 8004c4a:	461d      	mov	r5, r3
 8004c4c:	270a      	movs	r7, #10
 8004c4e:	461a      	mov	r2, r3
 8004c50:	fbb1 f6f7 	udiv	r6, r1, r7
 8004c54:	fb07 1416 	mls	r4, r7, r6, r1
 8004c58:	3430      	adds	r4, #48	@ 0x30
 8004c5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004c5e:	460c      	mov	r4, r1
 8004c60:	2c63      	cmp	r4, #99	@ 0x63
 8004c62:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c66:	4631      	mov	r1, r6
 8004c68:	dcf1      	bgt.n	8004c4e <__exponent+0x1c>
 8004c6a:	3130      	adds	r1, #48	@ 0x30
 8004c6c:	1e94      	subs	r4, r2, #2
 8004c6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c72:	1c41      	adds	r1, r0, #1
 8004c74:	4623      	mov	r3, r4
 8004c76:	42ab      	cmp	r3, r5
 8004c78:	d30a      	bcc.n	8004c90 <__exponent+0x5e>
 8004c7a:	f10d 0309 	add.w	r3, sp, #9
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	42ac      	cmp	r4, r5
 8004c82:	bf88      	it	hi
 8004c84:	2300      	movhi	r3, #0
 8004c86:	3302      	adds	r3, #2
 8004c88:	4403      	add	r3, r0
 8004c8a:	1a18      	subs	r0, r3, r0
 8004c8c:	b003      	add	sp, #12
 8004c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c98:	e7ed      	b.n	8004c76 <__exponent+0x44>
 8004c9a:	2330      	movs	r3, #48	@ 0x30
 8004c9c:	3130      	adds	r1, #48	@ 0x30
 8004c9e:	7083      	strb	r3, [r0, #2]
 8004ca0:	70c1      	strb	r1, [r0, #3]
 8004ca2:	1d03      	adds	r3, r0, #4
 8004ca4:	e7f1      	b.n	8004c8a <__exponent+0x58>
	...

08004ca8 <_printf_float>:
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	b08d      	sub	sp, #52	@ 0x34
 8004cae:	460c      	mov	r4, r1
 8004cb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004cb4:	4616      	mov	r6, r2
 8004cb6:	461f      	mov	r7, r3
 8004cb8:	4605      	mov	r5, r0
 8004cba:	f000 fdbd 	bl	8005838 <_localeconv_r>
 8004cbe:	6803      	ldr	r3, [r0, #0]
 8004cc0:	9304      	str	r3, [sp, #16]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fb fad4 	bl	8000270 <strlen>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8004cd0:	9005      	str	r0, [sp, #20]
 8004cd2:	3307      	adds	r3, #7
 8004cd4:	f023 0307 	bic.w	r3, r3, #7
 8004cd8:	f103 0208 	add.w	r2, r3, #8
 8004cdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ce0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ce4:	f8c8 2000 	str.w	r2, [r8]
 8004ce8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004cec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004cf0:	9307      	str	r3, [sp, #28]
 8004cf2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cfe:	4b9c      	ldr	r3, [pc, #624]	@ (8004f70 <_printf_float+0x2c8>)
 8004d00:	f04f 32ff 	mov.w	r2, #4294967295
 8004d04:	f7fb ff12 	bl	8000b2c <__aeabi_dcmpun>
 8004d08:	bb70      	cbnz	r0, 8004d68 <_printf_float+0xc0>
 8004d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d0e:	4b98      	ldr	r3, [pc, #608]	@ (8004f70 <_printf_float+0x2c8>)
 8004d10:	f04f 32ff 	mov.w	r2, #4294967295
 8004d14:	f7fb feec 	bl	8000af0 <__aeabi_dcmple>
 8004d18:	bb30      	cbnz	r0, 8004d68 <_printf_float+0xc0>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4640      	mov	r0, r8
 8004d20:	4649      	mov	r1, r9
 8004d22:	f7fb fedb 	bl	8000adc <__aeabi_dcmplt>
 8004d26:	b110      	cbz	r0, 8004d2e <_printf_float+0x86>
 8004d28:	232d      	movs	r3, #45	@ 0x2d
 8004d2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d2e:	4a91      	ldr	r2, [pc, #580]	@ (8004f74 <_printf_float+0x2cc>)
 8004d30:	4b91      	ldr	r3, [pc, #580]	@ (8004f78 <_printf_float+0x2d0>)
 8004d32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004d36:	bf8c      	ite	hi
 8004d38:	4690      	movhi	r8, r2
 8004d3a:	4698      	movls	r8, r3
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	6123      	str	r3, [r4, #16]
 8004d40:	f02b 0304 	bic.w	r3, fp, #4
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	f04f 0900 	mov.w	r9, #0
 8004d4a:	9700      	str	r7, [sp, #0]
 8004d4c:	4633      	mov	r3, r6
 8004d4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004d50:	4621      	mov	r1, r4
 8004d52:	4628      	mov	r0, r5
 8004d54:	f000 f9d2 	bl	80050fc <_printf_common>
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f040 808d 	bne.w	8004e78 <_printf_float+0x1d0>
 8004d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d62:	b00d      	add	sp, #52	@ 0x34
 8004d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d68:	4642      	mov	r2, r8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	4649      	mov	r1, r9
 8004d70:	f7fb fedc 	bl	8000b2c <__aeabi_dcmpun>
 8004d74:	b140      	cbz	r0, 8004d88 <_printf_float+0xe0>
 8004d76:	464b      	mov	r3, r9
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bfbc      	itt	lt
 8004d7c:	232d      	movlt	r3, #45	@ 0x2d
 8004d7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004d82:	4a7e      	ldr	r2, [pc, #504]	@ (8004f7c <_printf_float+0x2d4>)
 8004d84:	4b7e      	ldr	r3, [pc, #504]	@ (8004f80 <_printf_float+0x2d8>)
 8004d86:	e7d4      	b.n	8004d32 <_printf_float+0x8a>
 8004d88:	6863      	ldr	r3, [r4, #4]
 8004d8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004d8e:	9206      	str	r2, [sp, #24]
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	d13b      	bne.n	8004e0c <_printf_float+0x164>
 8004d94:	2306      	movs	r3, #6
 8004d96:	6063      	str	r3, [r4, #4]
 8004d98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	6022      	str	r2, [r4, #0]
 8004da0:	9303      	str	r3, [sp, #12]
 8004da2:	ab0a      	add	r3, sp, #40	@ 0x28
 8004da4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004da8:	ab09      	add	r3, sp, #36	@ 0x24
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	6861      	ldr	r1, [r4, #4]
 8004dae:	ec49 8b10 	vmov	d0, r8, r9
 8004db2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004db6:	4628      	mov	r0, r5
 8004db8:	f7ff fed6 	bl	8004b68 <__cvt>
 8004dbc:	9b06      	ldr	r3, [sp, #24]
 8004dbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004dc0:	2b47      	cmp	r3, #71	@ 0x47
 8004dc2:	4680      	mov	r8, r0
 8004dc4:	d129      	bne.n	8004e1a <_printf_float+0x172>
 8004dc6:	1cc8      	adds	r0, r1, #3
 8004dc8:	db02      	blt.n	8004dd0 <_printf_float+0x128>
 8004dca:	6863      	ldr	r3, [r4, #4]
 8004dcc:	4299      	cmp	r1, r3
 8004dce:	dd41      	ble.n	8004e54 <_printf_float+0x1ac>
 8004dd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004dd4:	fa5f fa8a 	uxtb.w	sl, sl
 8004dd8:	3901      	subs	r1, #1
 8004dda:	4652      	mov	r2, sl
 8004ddc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004de0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004de2:	f7ff ff26 	bl	8004c32 <__exponent>
 8004de6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004de8:	1813      	adds	r3, r2, r0
 8004dea:	2a01      	cmp	r2, #1
 8004dec:	4681      	mov	r9, r0
 8004dee:	6123      	str	r3, [r4, #16]
 8004df0:	dc02      	bgt.n	8004df8 <_printf_float+0x150>
 8004df2:	6822      	ldr	r2, [r4, #0]
 8004df4:	07d2      	lsls	r2, r2, #31
 8004df6:	d501      	bpl.n	8004dfc <_printf_float+0x154>
 8004df8:	3301      	adds	r3, #1
 8004dfa:	6123      	str	r3, [r4, #16]
 8004dfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0a2      	beq.n	8004d4a <_printf_float+0xa2>
 8004e04:	232d      	movs	r3, #45	@ 0x2d
 8004e06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e0a:	e79e      	b.n	8004d4a <_printf_float+0xa2>
 8004e0c:	9a06      	ldr	r2, [sp, #24]
 8004e0e:	2a47      	cmp	r2, #71	@ 0x47
 8004e10:	d1c2      	bne.n	8004d98 <_printf_float+0xf0>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1c0      	bne.n	8004d98 <_printf_float+0xf0>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e7bd      	b.n	8004d96 <_printf_float+0xee>
 8004e1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e1e:	d9db      	bls.n	8004dd8 <_printf_float+0x130>
 8004e20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004e24:	d118      	bne.n	8004e58 <_printf_float+0x1b0>
 8004e26:	2900      	cmp	r1, #0
 8004e28:	6863      	ldr	r3, [r4, #4]
 8004e2a:	dd0b      	ble.n	8004e44 <_printf_float+0x19c>
 8004e2c:	6121      	str	r1, [r4, #16]
 8004e2e:	b913      	cbnz	r3, 8004e36 <_printf_float+0x18e>
 8004e30:	6822      	ldr	r2, [r4, #0]
 8004e32:	07d0      	lsls	r0, r2, #31
 8004e34:	d502      	bpl.n	8004e3c <_printf_float+0x194>
 8004e36:	3301      	adds	r3, #1
 8004e38:	440b      	add	r3, r1
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004e3e:	f04f 0900 	mov.w	r9, #0
 8004e42:	e7db      	b.n	8004dfc <_printf_float+0x154>
 8004e44:	b913      	cbnz	r3, 8004e4c <_printf_float+0x1a4>
 8004e46:	6822      	ldr	r2, [r4, #0]
 8004e48:	07d2      	lsls	r2, r2, #31
 8004e4a:	d501      	bpl.n	8004e50 <_printf_float+0x1a8>
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	e7f4      	b.n	8004e3a <_printf_float+0x192>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e7f2      	b.n	8004e3a <_printf_float+0x192>
 8004e54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004e58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e5a:	4299      	cmp	r1, r3
 8004e5c:	db05      	blt.n	8004e6a <_printf_float+0x1c2>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	6121      	str	r1, [r4, #16]
 8004e62:	07d8      	lsls	r0, r3, #31
 8004e64:	d5ea      	bpl.n	8004e3c <_printf_float+0x194>
 8004e66:	1c4b      	adds	r3, r1, #1
 8004e68:	e7e7      	b.n	8004e3a <_printf_float+0x192>
 8004e6a:	2900      	cmp	r1, #0
 8004e6c:	bfd4      	ite	le
 8004e6e:	f1c1 0202 	rsble	r2, r1, #2
 8004e72:	2201      	movgt	r2, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	e7e0      	b.n	8004e3a <_printf_float+0x192>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	055a      	lsls	r2, r3, #21
 8004e7c:	d407      	bmi.n	8004e8e <_printf_float+0x1e6>
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	4642      	mov	r2, r8
 8004e82:	4631      	mov	r1, r6
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b8      	blx	r7
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d12b      	bne.n	8004ee4 <_printf_float+0x23c>
 8004e8c:	e767      	b.n	8004d5e <_printf_float+0xb6>
 8004e8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e92:	f240 80dd 	bls.w	8005050 <_printf_float+0x3a8>
 8004e96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f7fb fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d033      	beq.n	8004f0e <_printf_float+0x266>
 8004ea6:	4a37      	ldr	r2, [pc, #220]	@ (8004f84 <_printf_float+0x2dc>)
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	f43f af54 	beq.w	8004d5e <_printf_float+0xb6>
 8004eb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004eba:	4543      	cmp	r3, r8
 8004ebc:	db02      	blt.n	8004ec4 <_printf_float+0x21c>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	07d8      	lsls	r0, r3, #31
 8004ec2:	d50f      	bpl.n	8004ee4 <_printf_float+0x23c>
 8004ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ec8:	4631      	mov	r1, r6
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b8      	blx	r7
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f43f af45 	beq.w	8004d5e <_printf_float+0xb6>
 8004ed4:	f04f 0900 	mov.w	r9, #0
 8004ed8:	f108 38ff 	add.w	r8, r8, #4294967295
 8004edc:	f104 0a1a 	add.w	sl, r4, #26
 8004ee0:	45c8      	cmp	r8, r9
 8004ee2:	dc09      	bgt.n	8004ef8 <_printf_float+0x250>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	079b      	lsls	r3, r3, #30
 8004ee8:	f100 8103 	bmi.w	80050f2 <_printf_float+0x44a>
 8004eec:	68e0      	ldr	r0, [r4, #12]
 8004eee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ef0:	4298      	cmp	r0, r3
 8004ef2:	bfb8      	it	lt
 8004ef4:	4618      	movlt	r0, r3
 8004ef6:	e734      	b.n	8004d62 <_printf_float+0xba>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4652      	mov	r2, sl
 8004efc:	4631      	mov	r1, r6
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b8      	blx	r7
 8004f02:	3001      	adds	r0, #1
 8004f04:	f43f af2b 	beq.w	8004d5e <_printf_float+0xb6>
 8004f08:	f109 0901 	add.w	r9, r9, #1
 8004f0c:	e7e8      	b.n	8004ee0 <_printf_float+0x238>
 8004f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dc39      	bgt.n	8004f88 <_printf_float+0x2e0>
 8004f14:	4a1b      	ldr	r2, [pc, #108]	@ (8004f84 <_printf_float+0x2dc>)
 8004f16:	2301      	movs	r3, #1
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	f43f af1d 	beq.w	8004d5e <_printf_float+0xb6>
 8004f24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004f28:	ea59 0303 	orrs.w	r3, r9, r3
 8004f2c:	d102      	bne.n	8004f34 <_printf_float+0x28c>
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	07d9      	lsls	r1, r3, #31
 8004f32:	d5d7      	bpl.n	8004ee4 <_printf_float+0x23c>
 8004f34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f38:	4631      	mov	r1, r6
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	47b8      	blx	r7
 8004f3e:	3001      	adds	r0, #1
 8004f40:	f43f af0d 	beq.w	8004d5e <_printf_float+0xb6>
 8004f44:	f04f 0a00 	mov.w	sl, #0
 8004f48:	f104 0b1a 	add.w	fp, r4, #26
 8004f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f4e:	425b      	negs	r3, r3
 8004f50:	4553      	cmp	r3, sl
 8004f52:	dc01      	bgt.n	8004f58 <_printf_float+0x2b0>
 8004f54:	464b      	mov	r3, r9
 8004f56:	e793      	b.n	8004e80 <_printf_float+0x1d8>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	465a      	mov	r2, fp
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4628      	mov	r0, r5
 8004f60:	47b8      	blx	r7
 8004f62:	3001      	adds	r0, #1
 8004f64:	f43f aefb 	beq.w	8004d5e <_printf_float+0xb6>
 8004f68:	f10a 0a01 	add.w	sl, sl, #1
 8004f6c:	e7ee      	b.n	8004f4c <_printf_float+0x2a4>
 8004f6e:	bf00      	nop
 8004f70:	7fefffff 	.word	0x7fefffff
 8004f74:	08007e98 	.word	0x08007e98
 8004f78:	08007e94 	.word	0x08007e94
 8004f7c:	08007ea0 	.word	0x08007ea0
 8004f80:	08007e9c 	.word	0x08007e9c
 8004f84:	08007ea4 	.word	0x08007ea4
 8004f88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f8e:	4553      	cmp	r3, sl
 8004f90:	bfa8      	it	ge
 8004f92:	4653      	movge	r3, sl
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	4699      	mov	r9, r3
 8004f98:	dc36      	bgt.n	8005008 <_printf_float+0x360>
 8004f9a:	f04f 0b00 	mov.w	fp, #0
 8004f9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fa2:	f104 021a 	add.w	r2, r4, #26
 8004fa6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004fa8:	9306      	str	r3, [sp, #24]
 8004faa:	eba3 0309 	sub.w	r3, r3, r9
 8004fae:	455b      	cmp	r3, fp
 8004fb0:	dc31      	bgt.n	8005016 <_printf_float+0x36e>
 8004fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb4:	459a      	cmp	sl, r3
 8004fb6:	dc3a      	bgt.n	800502e <_printf_float+0x386>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	07da      	lsls	r2, r3, #31
 8004fbc:	d437      	bmi.n	800502e <_printf_float+0x386>
 8004fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fc0:	ebaa 0903 	sub.w	r9, sl, r3
 8004fc4:	9b06      	ldr	r3, [sp, #24]
 8004fc6:	ebaa 0303 	sub.w	r3, sl, r3
 8004fca:	4599      	cmp	r9, r3
 8004fcc:	bfa8      	it	ge
 8004fce:	4699      	movge	r9, r3
 8004fd0:	f1b9 0f00 	cmp.w	r9, #0
 8004fd4:	dc33      	bgt.n	800503e <_printf_float+0x396>
 8004fd6:	f04f 0800 	mov.w	r8, #0
 8004fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fde:	f104 0b1a 	add.w	fp, r4, #26
 8004fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe4:	ebaa 0303 	sub.w	r3, sl, r3
 8004fe8:	eba3 0309 	sub.w	r3, r3, r9
 8004fec:	4543      	cmp	r3, r8
 8004fee:	f77f af79 	ble.w	8004ee4 <_printf_float+0x23c>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	465a      	mov	r2, fp
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	47b8      	blx	r7
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	f43f aeae 	beq.w	8004d5e <_printf_float+0xb6>
 8005002:	f108 0801 	add.w	r8, r8, #1
 8005006:	e7ec      	b.n	8004fe2 <_printf_float+0x33a>
 8005008:	4642      	mov	r2, r8
 800500a:	4631      	mov	r1, r6
 800500c:	4628      	mov	r0, r5
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	d1c2      	bne.n	8004f9a <_printf_float+0x2f2>
 8005014:	e6a3      	b.n	8004d5e <_printf_float+0xb6>
 8005016:	2301      	movs	r3, #1
 8005018:	4631      	mov	r1, r6
 800501a:	4628      	mov	r0, r5
 800501c:	9206      	str	r2, [sp, #24]
 800501e:	47b8      	blx	r7
 8005020:	3001      	adds	r0, #1
 8005022:	f43f ae9c 	beq.w	8004d5e <_printf_float+0xb6>
 8005026:	9a06      	ldr	r2, [sp, #24]
 8005028:	f10b 0b01 	add.w	fp, fp, #1
 800502c:	e7bb      	b.n	8004fa6 <_printf_float+0x2fe>
 800502e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005032:	4631      	mov	r1, r6
 8005034:	4628      	mov	r0, r5
 8005036:	47b8      	blx	r7
 8005038:	3001      	adds	r0, #1
 800503a:	d1c0      	bne.n	8004fbe <_printf_float+0x316>
 800503c:	e68f      	b.n	8004d5e <_printf_float+0xb6>
 800503e:	9a06      	ldr	r2, [sp, #24]
 8005040:	464b      	mov	r3, r9
 8005042:	4442      	add	r2, r8
 8005044:	4631      	mov	r1, r6
 8005046:	4628      	mov	r0, r5
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	d1c3      	bne.n	8004fd6 <_printf_float+0x32e>
 800504e:	e686      	b.n	8004d5e <_printf_float+0xb6>
 8005050:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005054:	f1ba 0f01 	cmp.w	sl, #1
 8005058:	dc01      	bgt.n	800505e <_printf_float+0x3b6>
 800505a:	07db      	lsls	r3, r3, #31
 800505c:	d536      	bpl.n	80050cc <_printf_float+0x424>
 800505e:	2301      	movs	r3, #1
 8005060:	4642      	mov	r2, r8
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	f43f ae78 	beq.w	8004d5e <_printf_float+0xb6>
 800506e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005072:	4631      	mov	r1, r6
 8005074:	4628      	mov	r0, r5
 8005076:	47b8      	blx	r7
 8005078:	3001      	adds	r0, #1
 800507a:	f43f ae70 	beq.w	8004d5e <_printf_float+0xb6>
 800507e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005082:	2200      	movs	r2, #0
 8005084:	2300      	movs	r3, #0
 8005086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800508a:	f7fb fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800508e:	b9c0      	cbnz	r0, 80050c2 <_printf_float+0x41a>
 8005090:	4653      	mov	r3, sl
 8005092:	f108 0201 	add.w	r2, r8, #1
 8005096:	4631      	mov	r1, r6
 8005098:	4628      	mov	r0, r5
 800509a:	47b8      	blx	r7
 800509c:	3001      	adds	r0, #1
 800509e:	d10c      	bne.n	80050ba <_printf_float+0x412>
 80050a0:	e65d      	b.n	8004d5e <_printf_float+0xb6>
 80050a2:	2301      	movs	r3, #1
 80050a4:	465a      	mov	r2, fp
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	f43f ae56 	beq.w	8004d5e <_printf_float+0xb6>
 80050b2:	f108 0801 	add.w	r8, r8, #1
 80050b6:	45d0      	cmp	r8, sl
 80050b8:	dbf3      	blt.n	80050a2 <_printf_float+0x3fa>
 80050ba:	464b      	mov	r3, r9
 80050bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80050c0:	e6df      	b.n	8004e82 <_printf_float+0x1da>
 80050c2:	f04f 0800 	mov.w	r8, #0
 80050c6:	f104 0b1a 	add.w	fp, r4, #26
 80050ca:	e7f4      	b.n	80050b6 <_printf_float+0x40e>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4642      	mov	r2, r8
 80050d0:	e7e1      	b.n	8005096 <_printf_float+0x3ee>
 80050d2:	2301      	movs	r3, #1
 80050d4:	464a      	mov	r2, r9
 80050d6:	4631      	mov	r1, r6
 80050d8:	4628      	mov	r0, r5
 80050da:	47b8      	blx	r7
 80050dc:	3001      	adds	r0, #1
 80050de:	f43f ae3e 	beq.w	8004d5e <_printf_float+0xb6>
 80050e2:	f108 0801 	add.w	r8, r8, #1
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80050ea:	1a5b      	subs	r3, r3, r1
 80050ec:	4543      	cmp	r3, r8
 80050ee:	dcf0      	bgt.n	80050d2 <_printf_float+0x42a>
 80050f0:	e6fc      	b.n	8004eec <_printf_float+0x244>
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	f104 0919 	add.w	r9, r4, #25
 80050fa:	e7f4      	b.n	80050e6 <_printf_float+0x43e>

080050fc <_printf_common>:
 80050fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	4616      	mov	r6, r2
 8005102:	4698      	mov	r8, r3
 8005104:	688a      	ldr	r2, [r1, #8]
 8005106:	690b      	ldr	r3, [r1, #16]
 8005108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800510c:	4293      	cmp	r3, r2
 800510e:	bfb8      	it	lt
 8005110:	4613      	movlt	r3, r2
 8005112:	6033      	str	r3, [r6, #0]
 8005114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005118:	4607      	mov	r7, r0
 800511a:	460c      	mov	r4, r1
 800511c:	b10a      	cbz	r2, 8005122 <_printf_common+0x26>
 800511e:	3301      	adds	r3, #1
 8005120:	6033      	str	r3, [r6, #0]
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	0699      	lsls	r1, r3, #26
 8005126:	bf42      	ittt	mi
 8005128:	6833      	ldrmi	r3, [r6, #0]
 800512a:	3302      	addmi	r3, #2
 800512c:	6033      	strmi	r3, [r6, #0]
 800512e:	6825      	ldr	r5, [r4, #0]
 8005130:	f015 0506 	ands.w	r5, r5, #6
 8005134:	d106      	bne.n	8005144 <_printf_common+0x48>
 8005136:	f104 0a19 	add.w	sl, r4, #25
 800513a:	68e3      	ldr	r3, [r4, #12]
 800513c:	6832      	ldr	r2, [r6, #0]
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	42ab      	cmp	r3, r5
 8005142:	dc26      	bgt.n	8005192 <_printf_common+0x96>
 8005144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	3b00      	subs	r3, #0
 800514c:	bf18      	it	ne
 800514e:	2301      	movne	r3, #1
 8005150:	0692      	lsls	r2, r2, #26
 8005152:	d42b      	bmi.n	80051ac <_printf_common+0xb0>
 8005154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005158:	4641      	mov	r1, r8
 800515a:	4638      	mov	r0, r7
 800515c:	47c8      	blx	r9
 800515e:	3001      	adds	r0, #1
 8005160:	d01e      	beq.n	80051a0 <_printf_common+0xa4>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	6922      	ldr	r2, [r4, #16]
 8005166:	f003 0306 	and.w	r3, r3, #6
 800516a:	2b04      	cmp	r3, #4
 800516c:	bf02      	ittt	eq
 800516e:	68e5      	ldreq	r5, [r4, #12]
 8005170:	6833      	ldreq	r3, [r6, #0]
 8005172:	1aed      	subeq	r5, r5, r3
 8005174:	68a3      	ldr	r3, [r4, #8]
 8005176:	bf0c      	ite	eq
 8005178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800517c:	2500      	movne	r5, #0
 800517e:	4293      	cmp	r3, r2
 8005180:	bfc4      	itt	gt
 8005182:	1a9b      	subgt	r3, r3, r2
 8005184:	18ed      	addgt	r5, r5, r3
 8005186:	2600      	movs	r6, #0
 8005188:	341a      	adds	r4, #26
 800518a:	42b5      	cmp	r5, r6
 800518c:	d11a      	bne.n	80051c4 <_printf_common+0xc8>
 800518e:	2000      	movs	r0, #0
 8005190:	e008      	b.n	80051a4 <_printf_common+0xa8>
 8005192:	2301      	movs	r3, #1
 8005194:	4652      	mov	r2, sl
 8005196:	4641      	mov	r1, r8
 8005198:	4638      	mov	r0, r7
 800519a:	47c8      	blx	r9
 800519c:	3001      	adds	r0, #1
 800519e:	d103      	bne.n	80051a8 <_printf_common+0xac>
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a8:	3501      	adds	r5, #1
 80051aa:	e7c6      	b.n	800513a <_printf_common+0x3e>
 80051ac:	18e1      	adds	r1, r4, r3
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	2030      	movs	r0, #48	@ 0x30
 80051b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051b6:	4422      	add	r2, r4
 80051b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051c0:	3302      	adds	r3, #2
 80051c2:	e7c7      	b.n	8005154 <_printf_common+0x58>
 80051c4:	2301      	movs	r3, #1
 80051c6:	4622      	mov	r2, r4
 80051c8:	4641      	mov	r1, r8
 80051ca:	4638      	mov	r0, r7
 80051cc:	47c8      	blx	r9
 80051ce:	3001      	adds	r0, #1
 80051d0:	d0e6      	beq.n	80051a0 <_printf_common+0xa4>
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7d9      	b.n	800518a <_printf_common+0x8e>
	...

080051d8 <_printf_i>:
 80051d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051dc:	7e0f      	ldrb	r7, [r1, #24]
 80051de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051e0:	2f78      	cmp	r7, #120	@ 0x78
 80051e2:	4691      	mov	r9, r2
 80051e4:	4680      	mov	r8, r0
 80051e6:	460c      	mov	r4, r1
 80051e8:	469a      	mov	sl, r3
 80051ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051ee:	d807      	bhi.n	8005200 <_printf_i+0x28>
 80051f0:	2f62      	cmp	r7, #98	@ 0x62
 80051f2:	d80a      	bhi.n	800520a <_printf_i+0x32>
 80051f4:	2f00      	cmp	r7, #0
 80051f6:	f000 80d1 	beq.w	800539c <_printf_i+0x1c4>
 80051fa:	2f58      	cmp	r7, #88	@ 0x58
 80051fc:	f000 80b8 	beq.w	8005370 <_printf_i+0x198>
 8005200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005208:	e03a      	b.n	8005280 <_printf_i+0xa8>
 800520a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800520e:	2b15      	cmp	r3, #21
 8005210:	d8f6      	bhi.n	8005200 <_printf_i+0x28>
 8005212:	a101      	add	r1, pc, #4	@ (adr r1, 8005218 <_printf_i+0x40>)
 8005214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005218:	08005271 	.word	0x08005271
 800521c:	08005285 	.word	0x08005285
 8005220:	08005201 	.word	0x08005201
 8005224:	08005201 	.word	0x08005201
 8005228:	08005201 	.word	0x08005201
 800522c:	08005201 	.word	0x08005201
 8005230:	08005285 	.word	0x08005285
 8005234:	08005201 	.word	0x08005201
 8005238:	08005201 	.word	0x08005201
 800523c:	08005201 	.word	0x08005201
 8005240:	08005201 	.word	0x08005201
 8005244:	08005383 	.word	0x08005383
 8005248:	080052af 	.word	0x080052af
 800524c:	0800533d 	.word	0x0800533d
 8005250:	08005201 	.word	0x08005201
 8005254:	08005201 	.word	0x08005201
 8005258:	080053a5 	.word	0x080053a5
 800525c:	08005201 	.word	0x08005201
 8005260:	080052af 	.word	0x080052af
 8005264:	08005201 	.word	0x08005201
 8005268:	08005201 	.word	0x08005201
 800526c:	08005345 	.word	0x08005345
 8005270:	6833      	ldr	r3, [r6, #0]
 8005272:	1d1a      	adds	r2, r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6032      	str	r2, [r6, #0]
 8005278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800527c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005280:	2301      	movs	r3, #1
 8005282:	e09c      	b.n	80053be <_printf_i+0x1e6>
 8005284:	6833      	ldr	r3, [r6, #0]
 8005286:	6820      	ldr	r0, [r4, #0]
 8005288:	1d19      	adds	r1, r3, #4
 800528a:	6031      	str	r1, [r6, #0]
 800528c:	0606      	lsls	r6, r0, #24
 800528e:	d501      	bpl.n	8005294 <_printf_i+0xbc>
 8005290:	681d      	ldr	r5, [r3, #0]
 8005292:	e003      	b.n	800529c <_printf_i+0xc4>
 8005294:	0645      	lsls	r5, r0, #25
 8005296:	d5fb      	bpl.n	8005290 <_printf_i+0xb8>
 8005298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800529c:	2d00      	cmp	r5, #0
 800529e:	da03      	bge.n	80052a8 <_printf_i+0xd0>
 80052a0:	232d      	movs	r3, #45	@ 0x2d
 80052a2:	426d      	negs	r5, r5
 80052a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052a8:	4858      	ldr	r0, [pc, #352]	@ (800540c <_printf_i+0x234>)
 80052aa:	230a      	movs	r3, #10
 80052ac:	e011      	b.n	80052d2 <_printf_i+0xfa>
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	0608      	lsls	r0, r1, #24
 80052b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80052b8:	d402      	bmi.n	80052c0 <_printf_i+0xe8>
 80052ba:	0649      	lsls	r1, r1, #25
 80052bc:	bf48      	it	mi
 80052be:	b2ad      	uxthmi	r5, r5
 80052c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80052c2:	4852      	ldr	r0, [pc, #328]	@ (800540c <_printf_i+0x234>)
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	bf14      	ite	ne
 80052c8:	230a      	movne	r3, #10
 80052ca:	2308      	moveq	r3, #8
 80052cc:	2100      	movs	r1, #0
 80052ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052d2:	6866      	ldr	r6, [r4, #4]
 80052d4:	60a6      	str	r6, [r4, #8]
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	db05      	blt.n	80052e6 <_printf_i+0x10e>
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	432e      	orrs	r6, r5
 80052de:	f021 0104 	bic.w	r1, r1, #4
 80052e2:	6021      	str	r1, [r4, #0]
 80052e4:	d04b      	beq.n	800537e <_printf_i+0x1a6>
 80052e6:	4616      	mov	r6, r2
 80052e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80052ec:	fb03 5711 	mls	r7, r3, r1, r5
 80052f0:	5dc7      	ldrb	r7, [r0, r7]
 80052f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052f6:	462f      	mov	r7, r5
 80052f8:	42bb      	cmp	r3, r7
 80052fa:	460d      	mov	r5, r1
 80052fc:	d9f4      	bls.n	80052e8 <_printf_i+0x110>
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d10b      	bne.n	800531a <_printf_i+0x142>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	07df      	lsls	r7, r3, #31
 8005306:	d508      	bpl.n	800531a <_printf_i+0x142>
 8005308:	6923      	ldr	r3, [r4, #16]
 800530a:	6861      	ldr	r1, [r4, #4]
 800530c:	4299      	cmp	r1, r3
 800530e:	bfde      	ittt	le
 8005310:	2330      	movle	r3, #48	@ 0x30
 8005312:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005316:	f106 36ff 	addle.w	r6, r6, #4294967295
 800531a:	1b92      	subs	r2, r2, r6
 800531c:	6122      	str	r2, [r4, #16]
 800531e:	f8cd a000 	str.w	sl, [sp]
 8005322:	464b      	mov	r3, r9
 8005324:	aa03      	add	r2, sp, #12
 8005326:	4621      	mov	r1, r4
 8005328:	4640      	mov	r0, r8
 800532a:	f7ff fee7 	bl	80050fc <_printf_common>
 800532e:	3001      	adds	r0, #1
 8005330:	d14a      	bne.n	80053c8 <_printf_i+0x1f0>
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	b004      	add	sp, #16
 8005338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	f043 0320 	orr.w	r3, r3, #32
 8005342:	6023      	str	r3, [r4, #0]
 8005344:	4832      	ldr	r0, [pc, #200]	@ (8005410 <_printf_i+0x238>)
 8005346:	2778      	movs	r7, #120	@ 0x78
 8005348:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	6831      	ldr	r1, [r6, #0]
 8005350:	061f      	lsls	r7, r3, #24
 8005352:	f851 5b04 	ldr.w	r5, [r1], #4
 8005356:	d402      	bmi.n	800535e <_printf_i+0x186>
 8005358:	065f      	lsls	r7, r3, #25
 800535a:	bf48      	it	mi
 800535c:	b2ad      	uxthmi	r5, r5
 800535e:	6031      	str	r1, [r6, #0]
 8005360:	07d9      	lsls	r1, r3, #31
 8005362:	bf44      	itt	mi
 8005364:	f043 0320 	orrmi.w	r3, r3, #32
 8005368:	6023      	strmi	r3, [r4, #0]
 800536a:	b11d      	cbz	r5, 8005374 <_printf_i+0x19c>
 800536c:	2310      	movs	r3, #16
 800536e:	e7ad      	b.n	80052cc <_printf_i+0xf4>
 8005370:	4826      	ldr	r0, [pc, #152]	@ (800540c <_printf_i+0x234>)
 8005372:	e7e9      	b.n	8005348 <_printf_i+0x170>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	f023 0320 	bic.w	r3, r3, #32
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	e7f6      	b.n	800536c <_printf_i+0x194>
 800537e:	4616      	mov	r6, r2
 8005380:	e7bd      	b.n	80052fe <_printf_i+0x126>
 8005382:	6833      	ldr	r3, [r6, #0]
 8005384:	6825      	ldr	r5, [r4, #0]
 8005386:	6961      	ldr	r1, [r4, #20]
 8005388:	1d18      	adds	r0, r3, #4
 800538a:	6030      	str	r0, [r6, #0]
 800538c:	062e      	lsls	r6, r5, #24
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	d501      	bpl.n	8005396 <_printf_i+0x1be>
 8005392:	6019      	str	r1, [r3, #0]
 8005394:	e002      	b.n	800539c <_printf_i+0x1c4>
 8005396:	0668      	lsls	r0, r5, #25
 8005398:	d5fb      	bpl.n	8005392 <_printf_i+0x1ba>
 800539a:	8019      	strh	r1, [r3, #0]
 800539c:	2300      	movs	r3, #0
 800539e:	6123      	str	r3, [r4, #16]
 80053a0:	4616      	mov	r6, r2
 80053a2:	e7bc      	b.n	800531e <_printf_i+0x146>
 80053a4:	6833      	ldr	r3, [r6, #0]
 80053a6:	1d1a      	adds	r2, r3, #4
 80053a8:	6032      	str	r2, [r6, #0]
 80053aa:	681e      	ldr	r6, [r3, #0]
 80053ac:	6862      	ldr	r2, [r4, #4]
 80053ae:	2100      	movs	r1, #0
 80053b0:	4630      	mov	r0, r6
 80053b2:	f7fa ff0d 	bl	80001d0 <memchr>
 80053b6:	b108      	cbz	r0, 80053bc <_printf_i+0x1e4>
 80053b8:	1b80      	subs	r0, r0, r6
 80053ba:	6060      	str	r0, [r4, #4]
 80053bc:	6863      	ldr	r3, [r4, #4]
 80053be:	6123      	str	r3, [r4, #16]
 80053c0:	2300      	movs	r3, #0
 80053c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053c6:	e7aa      	b.n	800531e <_printf_i+0x146>
 80053c8:	6923      	ldr	r3, [r4, #16]
 80053ca:	4632      	mov	r2, r6
 80053cc:	4649      	mov	r1, r9
 80053ce:	4640      	mov	r0, r8
 80053d0:	47d0      	blx	sl
 80053d2:	3001      	adds	r0, #1
 80053d4:	d0ad      	beq.n	8005332 <_printf_i+0x15a>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	079b      	lsls	r3, r3, #30
 80053da:	d413      	bmi.n	8005404 <_printf_i+0x22c>
 80053dc:	68e0      	ldr	r0, [r4, #12]
 80053de:	9b03      	ldr	r3, [sp, #12]
 80053e0:	4298      	cmp	r0, r3
 80053e2:	bfb8      	it	lt
 80053e4:	4618      	movlt	r0, r3
 80053e6:	e7a6      	b.n	8005336 <_printf_i+0x15e>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4632      	mov	r2, r6
 80053ec:	4649      	mov	r1, r9
 80053ee:	4640      	mov	r0, r8
 80053f0:	47d0      	blx	sl
 80053f2:	3001      	adds	r0, #1
 80053f4:	d09d      	beq.n	8005332 <_printf_i+0x15a>
 80053f6:	3501      	adds	r5, #1
 80053f8:	68e3      	ldr	r3, [r4, #12]
 80053fa:	9903      	ldr	r1, [sp, #12]
 80053fc:	1a5b      	subs	r3, r3, r1
 80053fe:	42ab      	cmp	r3, r5
 8005400:	dcf2      	bgt.n	80053e8 <_printf_i+0x210>
 8005402:	e7eb      	b.n	80053dc <_printf_i+0x204>
 8005404:	2500      	movs	r5, #0
 8005406:	f104 0619 	add.w	r6, r4, #25
 800540a:	e7f5      	b.n	80053f8 <_printf_i+0x220>
 800540c:	08007ea6 	.word	0x08007ea6
 8005410:	08007eb7 	.word	0x08007eb7

08005414 <std>:
 8005414:	2300      	movs	r3, #0
 8005416:	b510      	push	{r4, lr}
 8005418:	4604      	mov	r4, r0
 800541a:	e9c0 3300 	strd	r3, r3, [r0]
 800541e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005422:	6083      	str	r3, [r0, #8]
 8005424:	8181      	strh	r1, [r0, #12]
 8005426:	6643      	str	r3, [r0, #100]	@ 0x64
 8005428:	81c2      	strh	r2, [r0, #14]
 800542a:	6183      	str	r3, [r0, #24]
 800542c:	4619      	mov	r1, r3
 800542e:	2208      	movs	r2, #8
 8005430:	305c      	adds	r0, #92	@ 0x5c
 8005432:	f000 f9f9 	bl	8005828 <memset>
 8005436:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <std+0x58>)
 8005438:	6263      	str	r3, [r4, #36]	@ 0x24
 800543a:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <std+0x5c>)
 800543c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800543e:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <std+0x60>)
 8005440:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005442:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <std+0x64>)
 8005444:	6323      	str	r3, [r4, #48]	@ 0x30
 8005446:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <std+0x68>)
 8005448:	6224      	str	r4, [r4, #32]
 800544a:	429c      	cmp	r4, r3
 800544c:	d006      	beq.n	800545c <std+0x48>
 800544e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005452:	4294      	cmp	r4, r2
 8005454:	d002      	beq.n	800545c <std+0x48>
 8005456:	33d0      	adds	r3, #208	@ 0xd0
 8005458:	429c      	cmp	r4, r3
 800545a:	d105      	bne.n	8005468 <std+0x54>
 800545c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005464:	f000 ba5c 	b.w	8005920 <__retarget_lock_init_recursive>
 8005468:	bd10      	pop	{r4, pc}
 800546a:	bf00      	nop
 800546c:	08005679 	.word	0x08005679
 8005470:	0800569b 	.word	0x0800569b
 8005474:	080056d3 	.word	0x080056d3
 8005478:	080056f7 	.word	0x080056f7
 800547c:	20000294 	.word	0x20000294

08005480 <stdio_exit_handler>:
 8005480:	4a02      	ldr	r2, [pc, #8]	@ (800548c <stdio_exit_handler+0xc>)
 8005482:	4903      	ldr	r1, [pc, #12]	@ (8005490 <stdio_exit_handler+0x10>)
 8005484:	4803      	ldr	r0, [pc, #12]	@ (8005494 <stdio_exit_handler+0x14>)
 8005486:	f000 b869 	b.w	800555c <_fwalk_sglue>
 800548a:	bf00      	nop
 800548c:	2000000c 	.word	0x2000000c
 8005490:	08007259 	.word	0x08007259
 8005494:	2000001c 	.word	0x2000001c

08005498 <cleanup_stdio>:
 8005498:	6841      	ldr	r1, [r0, #4]
 800549a:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <cleanup_stdio+0x34>)
 800549c:	4299      	cmp	r1, r3
 800549e:	b510      	push	{r4, lr}
 80054a0:	4604      	mov	r4, r0
 80054a2:	d001      	beq.n	80054a8 <cleanup_stdio+0x10>
 80054a4:	f001 fed8 	bl	8007258 <_fflush_r>
 80054a8:	68a1      	ldr	r1, [r4, #8]
 80054aa:	4b09      	ldr	r3, [pc, #36]	@ (80054d0 <cleanup_stdio+0x38>)
 80054ac:	4299      	cmp	r1, r3
 80054ae:	d002      	beq.n	80054b6 <cleanup_stdio+0x1e>
 80054b0:	4620      	mov	r0, r4
 80054b2:	f001 fed1 	bl	8007258 <_fflush_r>
 80054b6:	68e1      	ldr	r1, [r4, #12]
 80054b8:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <cleanup_stdio+0x3c>)
 80054ba:	4299      	cmp	r1, r3
 80054bc:	d004      	beq.n	80054c8 <cleanup_stdio+0x30>
 80054be:	4620      	mov	r0, r4
 80054c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c4:	f001 bec8 	b.w	8007258 <_fflush_r>
 80054c8:	bd10      	pop	{r4, pc}
 80054ca:	bf00      	nop
 80054cc:	20000294 	.word	0x20000294
 80054d0:	200002fc 	.word	0x200002fc
 80054d4:	20000364 	.word	0x20000364

080054d8 <global_stdio_init.part.0>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	4b0b      	ldr	r3, [pc, #44]	@ (8005508 <global_stdio_init.part.0+0x30>)
 80054dc:	4c0b      	ldr	r4, [pc, #44]	@ (800550c <global_stdio_init.part.0+0x34>)
 80054de:	4a0c      	ldr	r2, [pc, #48]	@ (8005510 <global_stdio_init.part.0+0x38>)
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	4620      	mov	r0, r4
 80054e4:	2200      	movs	r2, #0
 80054e6:	2104      	movs	r1, #4
 80054e8:	f7ff ff94 	bl	8005414 <std>
 80054ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80054f0:	2201      	movs	r2, #1
 80054f2:	2109      	movs	r1, #9
 80054f4:	f7ff ff8e 	bl	8005414 <std>
 80054f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80054fc:	2202      	movs	r2, #2
 80054fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005502:	2112      	movs	r1, #18
 8005504:	f7ff bf86 	b.w	8005414 <std>
 8005508:	200003cc 	.word	0x200003cc
 800550c:	20000294 	.word	0x20000294
 8005510:	08005481 	.word	0x08005481

08005514 <__sfp_lock_acquire>:
 8005514:	4801      	ldr	r0, [pc, #4]	@ (800551c <__sfp_lock_acquire+0x8>)
 8005516:	f000 ba04 	b.w	8005922 <__retarget_lock_acquire_recursive>
 800551a:	bf00      	nop
 800551c:	200003d5 	.word	0x200003d5

08005520 <__sfp_lock_release>:
 8005520:	4801      	ldr	r0, [pc, #4]	@ (8005528 <__sfp_lock_release+0x8>)
 8005522:	f000 b9ff 	b.w	8005924 <__retarget_lock_release_recursive>
 8005526:	bf00      	nop
 8005528:	200003d5 	.word	0x200003d5

0800552c <__sinit>:
 800552c:	b510      	push	{r4, lr}
 800552e:	4604      	mov	r4, r0
 8005530:	f7ff fff0 	bl	8005514 <__sfp_lock_acquire>
 8005534:	6a23      	ldr	r3, [r4, #32]
 8005536:	b11b      	cbz	r3, 8005540 <__sinit+0x14>
 8005538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800553c:	f7ff bff0 	b.w	8005520 <__sfp_lock_release>
 8005540:	4b04      	ldr	r3, [pc, #16]	@ (8005554 <__sinit+0x28>)
 8005542:	6223      	str	r3, [r4, #32]
 8005544:	4b04      	ldr	r3, [pc, #16]	@ (8005558 <__sinit+0x2c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f5      	bne.n	8005538 <__sinit+0xc>
 800554c:	f7ff ffc4 	bl	80054d8 <global_stdio_init.part.0>
 8005550:	e7f2      	b.n	8005538 <__sinit+0xc>
 8005552:	bf00      	nop
 8005554:	08005499 	.word	0x08005499
 8005558:	200003cc 	.word	0x200003cc

0800555c <_fwalk_sglue>:
 800555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005560:	4607      	mov	r7, r0
 8005562:	4688      	mov	r8, r1
 8005564:	4614      	mov	r4, r2
 8005566:	2600      	movs	r6, #0
 8005568:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800556c:	f1b9 0901 	subs.w	r9, r9, #1
 8005570:	d505      	bpl.n	800557e <_fwalk_sglue+0x22>
 8005572:	6824      	ldr	r4, [r4, #0]
 8005574:	2c00      	cmp	r4, #0
 8005576:	d1f7      	bne.n	8005568 <_fwalk_sglue+0xc>
 8005578:	4630      	mov	r0, r6
 800557a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800557e:	89ab      	ldrh	r3, [r5, #12]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d907      	bls.n	8005594 <_fwalk_sglue+0x38>
 8005584:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005588:	3301      	adds	r3, #1
 800558a:	d003      	beq.n	8005594 <_fwalk_sglue+0x38>
 800558c:	4629      	mov	r1, r5
 800558e:	4638      	mov	r0, r7
 8005590:	47c0      	blx	r8
 8005592:	4306      	orrs	r6, r0
 8005594:	3568      	adds	r5, #104	@ 0x68
 8005596:	e7e9      	b.n	800556c <_fwalk_sglue+0x10>

08005598 <iprintf>:
 8005598:	b40f      	push	{r0, r1, r2, r3}
 800559a:	b507      	push	{r0, r1, r2, lr}
 800559c:	4906      	ldr	r1, [pc, #24]	@ (80055b8 <iprintf+0x20>)
 800559e:	ab04      	add	r3, sp, #16
 80055a0:	6808      	ldr	r0, [r1, #0]
 80055a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a6:	6881      	ldr	r1, [r0, #8]
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	f001 fcb9 	bl	8006f20 <_vfiprintf_r>
 80055ae:	b003      	add	sp, #12
 80055b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80055b4:	b004      	add	sp, #16
 80055b6:	4770      	bx	lr
 80055b8:	20000018 	.word	0x20000018

080055bc <_puts_r>:
 80055bc:	6a03      	ldr	r3, [r0, #32]
 80055be:	b570      	push	{r4, r5, r6, lr}
 80055c0:	6884      	ldr	r4, [r0, #8]
 80055c2:	4605      	mov	r5, r0
 80055c4:	460e      	mov	r6, r1
 80055c6:	b90b      	cbnz	r3, 80055cc <_puts_r+0x10>
 80055c8:	f7ff ffb0 	bl	800552c <__sinit>
 80055cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055ce:	07db      	lsls	r3, r3, #31
 80055d0:	d405      	bmi.n	80055de <_puts_r+0x22>
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	0598      	lsls	r0, r3, #22
 80055d6:	d402      	bmi.n	80055de <_puts_r+0x22>
 80055d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055da:	f000 f9a2 	bl	8005922 <__retarget_lock_acquire_recursive>
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	0719      	lsls	r1, r3, #28
 80055e2:	d502      	bpl.n	80055ea <_puts_r+0x2e>
 80055e4:	6923      	ldr	r3, [r4, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d135      	bne.n	8005656 <_puts_r+0x9a>
 80055ea:	4621      	mov	r1, r4
 80055ec:	4628      	mov	r0, r5
 80055ee:	f000 f8c5 	bl	800577c <__swsetup_r>
 80055f2:	b380      	cbz	r0, 8005656 <_puts_r+0x9a>
 80055f4:	f04f 35ff 	mov.w	r5, #4294967295
 80055f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055fa:	07da      	lsls	r2, r3, #31
 80055fc:	d405      	bmi.n	800560a <_puts_r+0x4e>
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	059b      	lsls	r3, r3, #22
 8005602:	d402      	bmi.n	800560a <_puts_r+0x4e>
 8005604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005606:	f000 f98d 	bl	8005924 <__retarget_lock_release_recursive>
 800560a:	4628      	mov	r0, r5
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	2b00      	cmp	r3, #0
 8005610:	da04      	bge.n	800561c <_puts_r+0x60>
 8005612:	69a2      	ldr	r2, [r4, #24]
 8005614:	429a      	cmp	r2, r3
 8005616:	dc17      	bgt.n	8005648 <_puts_r+0x8c>
 8005618:	290a      	cmp	r1, #10
 800561a:	d015      	beq.n	8005648 <_puts_r+0x8c>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	6022      	str	r2, [r4, #0]
 8005622:	7019      	strb	r1, [r3, #0]
 8005624:	68a3      	ldr	r3, [r4, #8]
 8005626:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800562a:	3b01      	subs	r3, #1
 800562c:	60a3      	str	r3, [r4, #8]
 800562e:	2900      	cmp	r1, #0
 8005630:	d1ed      	bne.n	800560e <_puts_r+0x52>
 8005632:	2b00      	cmp	r3, #0
 8005634:	da11      	bge.n	800565a <_puts_r+0x9e>
 8005636:	4622      	mov	r2, r4
 8005638:	210a      	movs	r1, #10
 800563a:	4628      	mov	r0, r5
 800563c:	f000 f85f 	bl	80056fe <__swbuf_r>
 8005640:	3001      	adds	r0, #1
 8005642:	d0d7      	beq.n	80055f4 <_puts_r+0x38>
 8005644:	250a      	movs	r5, #10
 8005646:	e7d7      	b.n	80055f8 <_puts_r+0x3c>
 8005648:	4622      	mov	r2, r4
 800564a:	4628      	mov	r0, r5
 800564c:	f000 f857 	bl	80056fe <__swbuf_r>
 8005650:	3001      	adds	r0, #1
 8005652:	d1e7      	bne.n	8005624 <_puts_r+0x68>
 8005654:	e7ce      	b.n	80055f4 <_puts_r+0x38>
 8005656:	3e01      	subs	r6, #1
 8005658:	e7e4      	b.n	8005624 <_puts_r+0x68>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	6022      	str	r2, [r4, #0]
 8005660:	220a      	movs	r2, #10
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	e7ee      	b.n	8005644 <_puts_r+0x88>
	...

08005668 <puts>:
 8005668:	4b02      	ldr	r3, [pc, #8]	@ (8005674 <puts+0xc>)
 800566a:	4601      	mov	r1, r0
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	f7ff bfa5 	b.w	80055bc <_puts_r>
 8005672:	bf00      	nop
 8005674:	20000018 	.word	0x20000018

08005678 <__sread>:
 8005678:	b510      	push	{r4, lr}
 800567a:	460c      	mov	r4, r1
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	f000 f900 	bl	8005884 <_read_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	bfab      	itete	ge
 8005688:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800568a:	89a3      	ldrhlt	r3, [r4, #12]
 800568c:	181b      	addge	r3, r3, r0
 800568e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005692:	bfac      	ite	ge
 8005694:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005696:	81a3      	strhlt	r3, [r4, #12]
 8005698:	bd10      	pop	{r4, pc}

0800569a <__swrite>:
 800569a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800569e:	461f      	mov	r7, r3
 80056a0:	898b      	ldrh	r3, [r1, #12]
 80056a2:	05db      	lsls	r3, r3, #23
 80056a4:	4605      	mov	r5, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	4616      	mov	r6, r2
 80056aa:	d505      	bpl.n	80056b8 <__swrite+0x1e>
 80056ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b0:	2302      	movs	r3, #2
 80056b2:	2200      	movs	r2, #0
 80056b4:	f000 f8d4 	bl	8005860 <_lseek_r>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056c2:	81a3      	strh	r3, [r4, #12]
 80056c4:	4632      	mov	r2, r6
 80056c6:	463b      	mov	r3, r7
 80056c8:	4628      	mov	r0, r5
 80056ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ce:	f000 b8eb 	b.w	80058a8 <_write_r>

080056d2 <__sseek>:
 80056d2:	b510      	push	{r4, lr}
 80056d4:	460c      	mov	r4, r1
 80056d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056da:	f000 f8c1 	bl	8005860 <_lseek_r>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	bf15      	itete	ne
 80056e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056ee:	81a3      	strheq	r3, [r4, #12]
 80056f0:	bf18      	it	ne
 80056f2:	81a3      	strhne	r3, [r4, #12]
 80056f4:	bd10      	pop	{r4, pc}

080056f6 <__sclose>:
 80056f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056fa:	f000 b8a1 	b.w	8005840 <_close_r>

080056fe <__swbuf_r>:
 80056fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005700:	460e      	mov	r6, r1
 8005702:	4614      	mov	r4, r2
 8005704:	4605      	mov	r5, r0
 8005706:	b118      	cbz	r0, 8005710 <__swbuf_r+0x12>
 8005708:	6a03      	ldr	r3, [r0, #32]
 800570a:	b90b      	cbnz	r3, 8005710 <__swbuf_r+0x12>
 800570c:	f7ff ff0e 	bl	800552c <__sinit>
 8005710:	69a3      	ldr	r3, [r4, #24]
 8005712:	60a3      	str	r3, [r4, #8]
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	071a      	lsls	r2, r3, #28
 8005718:	d501      	bpl.n	800571e <__swbuf_r+0x20>
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	b943      	cbnz	r3, 8005730 <__swbuf_r+0x32>
 800571e:	4621      	mov	r1, r4
 8005720:	4628      	mov	r0, r5
 8005722:	f000 f82b 	bl	800577c <__swsetup_r>
 8005726:	b118      	cbz	r0, 8005730 <__swbuf_r+0x32>
 8005728:	f04f 37ff 	mov.w	r7, #4294967295
 800572c:	4638      	mov	r0, r7
 800572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	6922      	ldr	r2, [r4, #16]
 8005734:	1a98      	subs	r0, r3, r2
 8005736:	6963      	ldr	r3, [r4, #20]
 8005738:	b2f6      	uxtb	r6, r6
 800573a:	4283      	cmp	r3, r0
 800573c:	4637      	mov	r7, r6
 800573e:	dc05      	bgt.n	800574c <__swbuf_r+0x4e>
 8005740:	4621      	mov	r1, r4
 8005742:	4628      	mov	r0, r5
 8005744:	f001 fd88 	bl	8007258 <_fflush_r>
 8005748:	2800      	cmp	r0, #0
 800574a:	d1ed      	bne.n	8005728 <__swbuf_r+0x2a>
 800574c:	68a3      	ldr	r3, [r4, #8]
 800574e:	3b01      	subs	r3, #1
 8005750:	60a3      	str	r3, [r4, #8]
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	6022      	str	r2, [r4, #0]
 8005758:	701e      	strb	r6, [r3, #0]
 800575a:	6962      	ldr	r2, [r4, #20]
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	429a      	cmp	r2, r3
 8005760:	d004      	beq.n	800576c <__swbuf_r+0x6e>
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	07db      	lsls	r3, r3, #31
 8005766:	d5e1      	bpl.n	800572c <__swbuf_r+0x2e>
 8005768:	2e0a      	cmp	r6, #10
 800576a:	d1df      	bne.n	800572c <__swbuf_r+0x2e>
 800576c:	4621      	mov	r1, r4
 800576e:	4628      	mov	r0, r5
 8005770:	f001 fd72 	bl	8007258 <_fflush_r>
 8005774:	2800      	cmp	r0, #0
 8005776:	d0d9      	beq.n	800572c <__swbuf_r+0x2e>
 8005778:	e7d6      	b.n	8005728 <__swbuf_r+0x2a>
	...

0800577c <__swsetup_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4b29      	ldr	r3, [pc, #164]	@ (8005824 <__swsetup_r+0xa8>)
 8005780:	4605      	mov	r5, r0
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	460c      	mov	r4, r1
 8005786:	b118      	cbz	r0, 8005790 <__swsetup_r+0x14>
 8005788:	6a03      	ldr	r3, [r0, #32]
 800578a:	b90b      	cbnz	r3, 8005790 <__swsetup_r+0x14>
 800578c:	f7ff fece 	bl	800552c <__sinit>
 8005790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005794:	0719      	lsls	r1, r3, #28
 8005796:	d422      	bmi.n	80057de <__swsetup_r+0x62>
 8005798:	06da      	lsls	r2, r3, #27
 800579a:	d407      	bmi.n	80057ac <__swsetup_r+0x30>
 800579c:	2209      	movs	r2, #9
 800579e:	602a      	str	r2, [r5, #0]
 80057a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057a4:	81a3      	strh	r3, [r4, #12]
 80057a6:	f04f 30ff 	mov.w	r0, #4294967295
 80057aa:	e033      	b.n	8005814 <__swsetup_r+0x98>
 80057ac:	0758      	lsls	r0, r3, #29
 80057ae:	d512      	bpl.n	80057d6 <__swsetup_r+0x5a>
 80057b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057b2:	b141      	cbz	r1, 80057c6 <__swsetup_r+0x4a>
 80057b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057b8:	4299      	cmp	r1, r3
 80057ba:	d002      	beq.n	80057c2 <__swsetup_r+0x46>
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 ff0b 	bl	80065d8 <_free_r>
 80057c2:	2300      	movs	r3, #0
 80057c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80057c6:	89a3      	ldrh	r3, [r4, #12]
 80057c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057cc:	81a3      	strh	r3, [r4, #12]
 80057ce:	2300      	movs	r3, #0
 80057d0:	6063      	str	r3, [r4, #4]
 80057d2:	6923      	ldr	r3, [r4, #16]
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	f043 0308 	orr.w	r3, r3, #8
 80057dc:	81a3      	strh	r3, [r4, #12]
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	b94b      	cbnz	r3, 80057f6 <__swsetup_r+0x7a>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ec:	d003      	beq.n	80057f6 <__swsetup_r+0x7a>
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	f001 fd7f 	bl	80072f4 <__smakebuf_r>
 80057f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057fa:	f013 0201 	ands.w	r2, r3, #1
 80057fe:	d00a      	beq.n	8005816 <__swsetup_r+0x9a>
 8005800:	2200      	movs	r2, #0
 8005802:	60a2      	str	r2, [r4, #8]
 8005804:	6962      	ldr	r2, [r4, #20]
 8005806:	4252      	negs	r2, r2
 8005808:	61a2      	str	r2, [r4, #24]
 800580a:	6922      	ldr	r2, [r4, #16]
 800580c:	b942      	cbnz	r2, 8005820 <__swsetup_r+0xa4>
 800580e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005812:	d1c5      	bne.n	80057a0 <__swsetup_r+0x24>
 8005814:	bd38      	pop	{r3, r4, r5, pc}
 8005816:	0799      	lsls	r1, r3, #30
 8005818:	bf58      	it	pl
 800581a:	6962      	ldrpl	r2, [r4, #20]
 800581c:	60a2      	str	r2, [r4, #8]
 800581e:	e7f4      	b.n	800580a <__swsetup_r+0x8e>
 8005820:	2000      	movs	r0, #0
 8005822:	e7f7      	b.n	8005814 <__swsetup_r+0x98>
 8005824:	20000018 	.word	0x20000018

08005828 <memset>:
 8005828:	4402      	add	r2, r0
 800582a:	4603      	mov	r3, r0
 800582c:	4293      	cmp	r3, r2
 800582e:	d100      	bne.n	8005832 <memset+0xa>
 8005830:	4770      	bx	lr
 8005832:	f803 1b01 	strb.w	r1, [r3], #1
 8005836:	e7f9      	b.n	800582c <memset+0x4>

08005838 <_localeconv_r>:
 8005838:	4800      	ldr	r0, [pc, #0]	@ (800583c <_localeconv_r+0x4>)
 800583a:	4770      	bx	lr
 800583c:	20000158 	.word	0x20000158

08005840 <_close_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d06      	ldr	r5, [pc, #24]	@ (800585c <_close_r+0x1c>)
 8005844:	2300      	movs	r3, #0
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	602b      	str	r3, [r5, #0]
 800584c:	f7fd f9b0 	bl	8002bb0 <_close>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d102      	bne.n	800585a <_close_r+0x1a>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	b103      	cbz	r3, 800585a <_close_r+0x1a>
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	200003d0 	.word	0x200003d0

08005860 <_lseek_r>:
 8005860:	b538      	push	{r3, r4, r5, lr}
 8005862:	4d07      	ldr	r5, [pc, #28]	@ (8005880 <_lseek_r+0x20>)
 8005864:	4604      	mov	r4, r0
 8005866:	4608      	mov	r0, r1
 8005868:	4611      	mov	r1, r2
 800586a:	2200      	movs	r2, #0
 800586c:	602a      	str	r2, [r5, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	f7fd f9c5 	bl	8002bfe <_lseek>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d102      	bne.n	800587e <_lseek_r+0x1e>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	b103      	cbz	r3, 800587e <_lseek_r+0x1e>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	200003d0 	.word	0x200003d0

08005884 <_read_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4d07      	ldr	r5, [pc, #28]	@ (80058a4 <_read_r+0x20>)
 8005888:	4604      	mov	r4, r0
 800588a:	4608      	mov	r0, r1
 800588c:	4611      	mov	r1, r2
 800588e:	2200      	movs	r2, #0
 8005890:	602a      	str	r2, [r5, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	f7fd f96f 	bl	8002b76 <_read>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_read_r+0x1e>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_read_r+0x1e>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	200003d0 	.word	0x200003d0

080058a8 <_write_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d07      	ldr	r5, [pc, #28]	@ (80058c8 <_write_r+0x20>)
 80058ac:	4604      	mov	r4, r0
 80058ae:	4608      	mov	r0, r1
 80058b0:	4611      	mov	r1, r2
 80058b2:	2200      	movs	r2, #0
 80058b4:	602a      	str	r2, [r5, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f7fc fd7e 	bl	80023b8 <_write>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_write_r+0x1e>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_write_r+0x1e>
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	200003d0 	.word	0x200003d0

080058cc <__errno>:
 80058cc:	4b01      	ldr	r3, [pc, #4]	@ (80058d4 <__errno+0x8>)
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000018 	.word	0x20000018

080058d8 <__libc_init_array>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	4d0d      	ldr	r5, [pc, #52]	@ (8005910 <__libc_init_array+0x38>)
 80058dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005914 <__libc_init_array+0x3c>)
 80058de:	1b64      	subs	r4, r4, r5
 80058e0:	10a4      	asrs	r4, r4, #2
 80058e2:	2600      	movs	r6, #0
 80058e4:	42a6      	cmp	r6, r4
 80058e6:	d109      	bne.n	80058fc <__libc_init_array+0x24>
 80058e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005918 <__libc_init_array+0x40>)
 80058ea:	4c0c      	ldr	r4, [pc, #48]	@ (800591c <__libc_init_array+0x44>)
 80058ec:	f002 f9f4 	bl	8007cd8 <_init>
 80058f0:	1b64      	subs	r4, r4, r5
 80058f2:	10a4      	asrs	r4, r4, #2
 80058f4:	2600      	movs	r6, #0
 80058f6:	42a6      	cmp	r6, r4
 80058f8:	d105      	bne.n	8005906 <__libc_init_array+0x2e>
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005900:	4798      	blx	r3
 8005902:	3601      	adds	r6, #1
 8005904:	e7ee      	b.n	80058e4 <__libc_init_array+0xc>
 8005906:	f855 3b04 	ldr.w	r3, [r5], #4
 800590a:	4798      	blx	r3
 800590c:	3601      	adds	r6, #1
 800590e:	e7f2      	b.n	80058f6 <__libc_init_array+0x1e>
 8005910:	0800822c 	.word	0x0800822c
 8005914:	0800822c 	.word	0x0800822c
 8005918:	0800822c 	.word	0x0800822c
 800591c:	08008230 	.word	0x08008230

08005920 <__retarget_lock_init_recursive>:
 8005920:	4770      	bx	lr

08005922 <__retarget_lock_acquire_recursive>:
 8005922:	4770      	bx	lr

08005924 <__retarget_lock_release_recursive>:
 8005924:	4770      	bx	lr

08005926 <quorem>:
 8005926:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592a:	6903      	ldr	r3, [r0, #16]
 800592c:	690c      	ldr	r4, [r1, #16]
 800592e:	42a3      	cmp	r3, r4
 8005930:	4607      	mov	r7, r0
 8005932:	db7e      	blt.n	8005a32 <quorem+0x10c>
 8005934:	3c01      	subs	r4, #1
 8005936:	f101 0814 	add.w	r8, r1, #20
 800593a:	00a3      	lsls	r3, r4, #2
 800593c:	f100 0514 	add.w	r5, r0, #20
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800594c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005950:	3301      	adds	r3, #1
 8005952:	429a      	cmp	r2, r3
 8005954:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005958:	fbb2 f6f3 	udiv	r6, r2, r3
 800595c:	d32e      	bcc.n	80059bc <quorem+0x96>
 800595e:	f04f 0a00 	mov.w	sl, #0
 8005962:	46c4      	mov	ip, r8
 8005964:	46ae      	mov	lr, r5
 8005966:	46d3      	mov	fp, sl
 8005968:	f85c 3b04 	ldr.w	r3, [ip], #4
 800596c:	b298      	uxth	r0, r3
 800596e:	fb06 a000 	mla	r0, r6, r0, sl
 8005972:	0c02      	lsrs	r2, r0, #16
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	fb06 2303 	mla	r3, r6, r3, r2
 800597a:	f8de 2000 	ldr.w	r2, [lr]
 800597e:	b280      	uxth	r0, r0
 8005980:	b292      	uxth	r2, r2
 8005982:	1a12      	subs	r2, r2, r0
 8005984:	445a      	add	r2, fp
 8005986:	f8de 0000 	ldr.w	r0, [lr]
 800598a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800598e:	b29b      	uxth	r3, r3
 8005990:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005994:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005998:	b292      	uxth	r2, r2
 800599a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800599e:	45e1      	cmp	r9, ip
 80059a0:	f84e 2b04 	str.w	r2, [lr], #4
 80059a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80059a8:	d2de      	bcs.n	8005968 <quorem+0x42>
 80059aa:	9b00      	ldr	r3, [sp, #0]
 80059ac:	58eb      	ldr	r3, [r5, r3]
 80059ae:	b92b      	cbnz	r3, 80059bc <quorem+0x96>
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	3b04      	subs	r3, #4
 80059b4:	429d      	cmp	r5, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	d32f      	bcc.n	8005a1a <quorem+0xf4>
 80059ba:	613c      	str	r4, [r7, #16]
 80059bc:	4638      	mov	r0, r7
 80059be:	f001 f97d 	bl	8006cbc <__mcmp>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	db25      	blt.n	8005a12 <quorem+0xec>
 80059c6:	4629      	mov	r1, r5
 80059c8:	2000      	movs	r0, #0
 80059ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80059ce:	f8d1 c000 	ldr.w	ip, [r1]
 80059d2:	fa1f fe82 	uxth.w	lr, r2
 80059d6:	fa1f f38c 	uxth.w	r3, ip
 80059da:	eba3 030e 	sub.w	r3, r3, lr
 80059de:	4403      	add	r3, r0
 80059e0:	0c12      	lsrs	r2, r2, #16
 80059e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80059e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059f0:	45c1      	cmp	r9, r8
 80059f2:	f841 3b04 	str.w	r3, [r1], #4
 80059f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059fa:	d2e6      	bcs.n	80059ca <quorem+0xa4>
 80059fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a04:	b922      	cbnz	r2, 8005a10 <quorem+0xea>
 8005a06:	3b04      	subs	r3, #4
 8005a08:	429d      	cmp	r5, r3
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	d30b      	bcc.n	8005a26 <quorem+0x100>
 8005a0e:	613c      	str	r4, [r7, #16]
 8005a10:	3601      	adds	r6, #1
 8005a12:	4630      	mov	r0, r6
 8005a14:	b003      	add	sp, #12
 8005a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	3b04      	subs	r3, #4
 8005a1e:	2a00      	cmp	r2, #0
 8005a20:	d1cb      	bne.n	80059ba <quorem+0x94>
 8005a22:	3c01      	subs	r4, #1
 8005a24:	e7c6      	b.n	80059b4 <quorem+0x8e>
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	3b04      	subs	r3, #4
 8005a2a:	2a00      	cmp	r2, #0
 8005a2c:	d1ef      	bne.n	8005a0e <quorem+0xe8>
 8005a2e:	3c01      	subs	r4, #1
 8005a30:	e7ea      	b.n	8005a08 <quorem+0xe2>
 8005a32:	2000      	movs	r0, #0
 8005a34:	e7ee      	b.n	8005a14 <quorem+0xee>
	...

08005a38 <_dtoa_r>:
 8005a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3c:	69c7      	ldr	r7, [r0, #28]
 8005a3e:	b097      	sub	sp, #92	@ 0x5c
 8005a40:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005a44:	ec55 4b10 	vmov	r4, r5, d0
 8005a48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005a4a:	9107      	str	r1, [sp, #28]
 8005a4c:	4681      	mov	r9, r0
 8005a4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005a50:	9311      	str	r3, [sp, #68]	@ 0x44
 8005a52:	b97f      	cbnz	r7, 8005a74 <_dtoa_r+0x3c>
 8005a54:	2010      	movs	r0, #16
 8005a56:	f000 fe09 	bl	800666c <malloc>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005a60:	b920      	cbnz	r0, 8005a6c <_dtoa_r+0x34>
 8005a62:	4ba9      	ldr	r3, [pc, #676]	@ (8005d08 <_dtoa_r+0x2d0>)
 8005a64:	21ef      	movs	r1, #239	@ 0xef
 8005a66:	48a9      	ldr	r0, [pc, #676]	@ (8005d0c <_dtoa_r+0x2d4>)
 8005a68:	f001 fcc0 	bl	80073ec <__assert_func>
 8005a6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005a70:	6007      	str	r7, [r0, #0]
 8005a72:	60c7      	str	r7, [r0, #12]
 8005a74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005a78:	6819      	ldr	r1, [r3, #0]
 8005a7a:	b159      	cbz	r1, 8005a94 <_dtoa_r+0x5c>
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	604a      	str	r2, [r1, #4]
 8005a80:	2301      	movs	r3, #1
 8005a82:	4093      	lsls	r3, r2
 8005a84:	608b      	str	r3, [r1, #8]
 8005a86:	4648      	mov	r0, r9
 8005a88:	f000 fee6 	bl	8006858 <_Bfree>
 8005a8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	1e2b      	subs	r3, r5, #0
 8005a96:	bfb9      	ittee	lt
 8005a98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005a9c:	9305      	strlt	r3, [sp, #20]
 8005a9e:	2300      	movge	r3, #0
 8005aa0:	6033      	strge	r3, [r6, #0]
 8005aa2:	9f05      	ldr	r7, [sp, #20]
 8005aa4:	4b9a      	ldr	r3, [pc, #616]	@ (8005d10 <_dtoa_r+0x2d8>)
 8005aa6:	bfbc      	itt	lt
 8005aa8:	2201      	movlt	r2, #1
 8005aaa:	6032      	strlt	r2, [r6, #0]
 8005aac:	43bb      	bics	r3, r7
 8005aae:	d112      	bne.n	8005ad6 <_dtoa_r+0x9e>
 8005ab0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ab2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005abc:	4323      	orrs	r3, r4
 8005abe:	f000 855a 	beq.w	8006576 <_dtoa_r+0xb3e>
 8005ac2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ac4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005d24 <_dtoa_r+0x2ec>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 855c 	beq.w	8006586 <_dtoa_r+0xb4e>
 8005ace:	f10a 0303 	add.w	r3, sl, #3
 8005ad2:	f000 bd56 	b.w	8006582 <_dtoa_r+0xb4a>
 8005ad6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005ada:	2200      	movs	r2, #0
 8005adc:	ec51 0b17 	vmov	r0, r1, d7
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005ae6:	f7fa ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aea:	4680      	mov	r8, r0
 8005aec:	b158      	cbz	r0, 8005b06 <_dtoa_r+0xce>
 8005aee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005af0:	2301      	movs	r3, #1
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005af6:	b113      	cbz	r3, 8005afe <_dtoa_r+0xc6>
 8005af8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005afa:	4b86      	ldr	r3, [pc, #536]	@ (8005d14 <_dtoa_r+0x2dc>)
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005d28 <_dtoa_r+0x2f0>
 8005b02:	f000 bd40 	b.w	8006586 <_dtoa_r+0xb4e>
 8005b06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005b0a:	aa14      	add	r2, sp, #80	@ 0x50
 8005b0c:	a915      	add	r1, sp, #84	@ 0x54
 8005b0e:	4648      	mov	r0, r9
 8005b10:	f001 f984 	bl	8006e1c <__d2b>
 8005b14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005b18:	9002      	str	r0, [sp, #8]
 8005b1a:	2e00      	cmp	r6, #0
 8005b1c:	d078      	beq.n	8005c10 <_dtoa_r+0x1d8>
 8005b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005b34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005b38:	4619      	mov	r1, r3
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	4b76      	ldr	r3, [pc, #472]	@ (8005d18 <_dtoa_r+0x2e0>)
 8005b3e:	f7fa fba3 	bl	8000288 <__aeabi_dsub>
 8005b42:	a36b      	add	r3, pc, #428	@ (adr r3, 8005cf0 <_dtoa_r+0x2b8>)
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f7fa fd56 	bl	80005f8 <__aeabi_dmul>
 8005b4c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005cf8 <_dtoa_r+0x2c0>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f7fa fb9b 	bl	800028c <__adddf3>
 8005b56:	4604      	mov	r4, r0
 8005b58:	4630      	mov	r0, r6
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	f7fa fce2 	bl	8000524 <__aeabi_i2d>
 8005b60:	a367      	add	r3, pc, #412	@ (adr r3, 8005d00 <_dtoa_r+0x2c8>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fd47 	bl	80005f8 <__aeabi_dmul>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa fb8b 	bl	800028c <__adddf3>
 8005b76:	4604      	mov	r4, r0
 8005b78:	460d      	mov	r5, r1
 8005b7a:	f7fa ffed 	bl	8000b58 <__aeabi_d2iz>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	4607      	mov	r7, r0
 8005b82:	2300      	movs	r3, #0
 8005b84:	4620      	mov	r0, r4
 8005b86:	4629      	mov	r1, r5
 8005b88:	f7fa ffa8 	bl	8000adc <__aeabi_dcmplt>
 8005b8c:	b140      	cbz	r0, 8005ba0 <_dtoa_r+0x168>
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f7fa fcc8 	bl	8000524 <__aeabi_i2d>
 8005b94:	4622      	mov	r2, r4
 8005b96:	462b      	mov	r3, r5
 8005b98:	f7fa ff96 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b9c:	b900      	cbnz	r0, 8005ba0 <_dtoa_r+0x168>
 8005b9e:	3f01      	subs	r7, #1
 8005ba0:	2f16      	cmp	r7, #22
 8005ba2:	d852      	bhi.n	8005c4a <_dtoa_r+0x212>
 8005ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8005d1c <_dtoa_r+0x2e4>)
 8005ba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bb2:	f7fa ff93 	bl	8000adc <__aeabi_dcmplt>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d049      	beq.n	8005c4e <_dtoa_r+0x216>
 8005bba:	3f01      	subs	r7, #1
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8005bc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005bc2:	1b9b      	subs	r3, r3, r6
 8005bc4:	1e5a      	subs	r2, r3, #1
 8005bc6:	bf45      	ittet	mi
 8005bc8:	f1c3 0301 	rsbmi	r3, r3, #1
 8005bcc:	9300      	strmi	r3, [sp, #0]
 8005bce:	2300      	movpl	r3, #0
 8005bd0:	2300      	movmi	r3, #0
 8005bd2:	9206      	str	r2, [sp, #24]
 8005bd4:	bf54      	ite	pl
 8005bd6:	9300      	strpl	r3, [sp, #0]
 8005bd8:	9306      	strmi	r3, [sp, #24]
 8005bda:	2f00      	cmp	r7, #0
 8005bdc:	db39      	blt.n	8005c52 <_dtoa_r+0x21a>
 8005bde:	9b06      	ldr	r3, [sp, #24]
 8005be0:	970d      	str	r7, [sp, #52]	@ 0x34
 8005be2:	443b      	add	r3, r7
 8005be4:	9306      	str	r3, [sp, #24]
 8005be6:	2300      	movs	r3, #0
 8005be8:	9308      	str	r3, [sp, #32]
 8005bea:	9b07      	ldr	r3, [sp, #28]
 8005bec:	2b09      	cmp	r3, #9
 8005bee:	d863      	bhi.n	8005cb8 <_dtoa_r+0x280>
 8005bf0:	2b05      	cmp	r3, #5
 8005bf2:	bfc4      	itt	gt
 8005bf4:	3b04      	subgt	r3, #4
 8005bf6:	9307      	strgt	r3, [sp, #28]
 8005bf8:	9b07      	ldr	r3, [sp, #28]
 8005bfa:	f1a3 0302 	sub.w	r3, r3, #2
 8005bfe:	bfcc      	ite	gt
 8005c00:	2400      	movgt	r4, #0
 8005c02:	2401      	movle	r4, #1
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d863      	bhi.n	8005cd0 <_dtoa_r+0x298>
 8005c08:	e8df f003 	tbb	[pc, r3]
 8005c0c:	2b375452 	.word	0x2b375452
 8005c10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005c14:	441e      	add	r6, r3
 8005c16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	bfc1      	itttt	gt
 8005c1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005c22:	409f      	lslgt	r7, r3
 8005c24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005c28:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005c2c:	bfd6      	itet	le
 8005c2e:	f1c3 0320 	rsble	r3, r3, #32
 8005c32:	ea47 0003 	orrgt.w	r0, r7, r3
 8005c36:	fa04 f003 	lslle.w	r0, r4, r3
 8005c3a:	f7fa fc63 	bl	8000504 <__aeabi_ui2d>
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005c44:	3e01      	subs	r6, #1
 8005c46:	9212      	str	r2, [sp, #72]	@ 0x48
 8005c48:	e776      	b.n	8005b38 <_dtoa_r+0x100>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e7b7      	b.n	8005bbe <_dtoa_r+0x186>
 8005c4e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005c50:	e7b6      	b.n	8005bc0 <_dtoa_r+0x188>
 8005c52:	9b00      	ldr	r3, [sp, #0]
 8005c54:	1bdb      	subs	r3, r3, r7
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	427b      	negs	r3, r7
 8005c5a:	9308      	str	r3, [sp, #32]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005c60:	e7c3      	b.n	8005bea <_dtoa_r+0x1b2>
 8005c62:	2301      	movs	r3, #1
 8005c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c68:	eb07 0b03 	add.w	fp, r7, r3
 8005c6c:	f10b 0301 	add.w	r3, fp, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	9303      	str	r3, [sp, #12]
 8005c74:	bfb8      	it	lt
 8005c76:	2301      	movlt	r3, #1
 8005c78:	e006      	b.n	8005c88 <_dtoa_r+0x250>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	dd28      	ble.n	8005cd6 <_dtoa_r+0x29e>
 8005c84:	469b      	mov	fp, r3
 8005c86:	9303      	str	r3, [sp, #12]
 8005c88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	2204      	movs	r2, #4
 8005c90:	f102 0514 	add.w	r5, r2, #20
 8005c94:	429d      	cmp	r5, r3
 8005c96:	d926      	bls.n	8005ce6 <_dtoa_r+0x2ae>
 8005c98:	6041      	str	r1, [r0, #4]
 8005c9a:	4648      	mov	r0, r9
 8005c9c:	f000 fd9c 	bl	80067d8 <_Balloc>
 8005ca0:	4682      	mov	sl, r0
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d142      	bne.n	8005d2c <_dtoa_r+0x2f4>
 8005ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d20 <_dtoa_r+0x2e8>)
 8005ca8:	4602      	mov	r2, r0
 8005caa:	f240 11af 	movw	r1, #431	@ 0x1af
 8005cae:	e6da      	b.n	8005a66 <_dtoa_r+0x2e>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e7e3      	b.n	8005c7c <_dtoa_r+0x244>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e7d5      	b.n	8005c64 <_dtoa_r+0x22c>
 8005cb8:	2401      	movs	r4, #1
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9307      	str	r3, [sp, #28]
 8005cbe:	9409      	str	r4, [sp, #36]	@ 0x24
 8005cc0:	f04f 3bff 	mov.w	fp, #4294967295
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8cd b00c 	str.w	fp, [sp, #12]
 8005cca:	2312      	movs	r3, #18
 8005ccc:	920c      	str	r2, [sp, #48]	@ 0x30
 8005cce:	e7db      	b.n	8005c88 <_dtoa_r+0x250>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cd4:	e7f4      	b.n	8005cc0 <_dtoa_r+0x288>
 8005cd6:	f04f 0b01 	mov.w	fp, #1
 8005cda:	f8cd b00c 	str.w	fp, [sp, #12]
 8005cde:	465b      	mov	r3, fp
 8005ce0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005ce4:	e7d0      	b.n	8005c88 <_dtoa_r+0x250>
 8005ce6:	3101      	adds	r1, #1
 8005ce8:	0052      	lsls	r2, r2, #1
 8005cea:	e7d1      	b.n	8005c90 <_dtoa_r+0x258>
 8005cec:	f3af 8000 	nop.w
 8005cf0:	636f4361 	.word	0x636f4361
 8005cf4:	3fd287a7 	.word	0x3fd287a7
 8005cf8:	8b60c8b3 	.word	0x8b60c8b3
 8005cfc:	3fc68a28 	.word	0x3fc68a28
 8005d00:	509f79fb 	.word	0x509f79fb
 8005d04:	3fd34413 	.word	0x3fd34413
 8005d08:	08007ed5 	.word	0x08007ed5
 8005d0c:	08007eec 	.word	0x08007eec
 8005d10:	7ff00000 	.word	0x7ff00000
 8005d14:	08007ea5 	.word	0x08007ea5
 8005d18:	3ff80000 	.word	0x3ff80000
 8005d1c:	08008040 	.word	0x08008040
 8005d20:	08007f44 	.word	0x08007f44
 8005d24:	08007ed1 	.word	0x08007ed1
 8005d28:	08007ea4 	.word	0x08007ea4
 8005d2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d30:	6018      	str	r0, [r3, #0]
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	2b0e      	cmp	r3, #14
 8005d36:	f200 80a1 	bhi.w	8005e7c <_dtoa_r+0x444>
 8005d3a:	2c00      	cmp	r4, #0
 8005d3c:	f000 809e 	beq.w	8005e7c <_dtoa_r+0x444>
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	dd33      	ble.n	8005dac <_dtoa_r+0x374>
 8005d44:	4b9c      	ldr	r3, [pc, #624]	@ (8005fb8 <_dtoa_r+0x580>)
 8005d46:	f007 020f 	and.w	r2, r7, #15
 8005d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d4e:	ed93 7b00 	vldr	d7, [r3]
 8005d52:	05f8      	lsls	r0, r7, #23
 8005d54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005d58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005d5c:	d516      	bpl.n	8005d8c <_dtoa_r+0x354>
 8005d5e:	4b97      	ldr	r3, [pc, #604]	@ (8005fbc <_dtoa_r+0x584>)
 8005d60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d68:	f7fa fd70 	bl	800084c <__aeabi_ddiv>
 8005d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d70:	f004 040f 	and.w	r4, r4, #15
 8005d74:	2603      	movs	r6, #3
 8005d76:	4d91      	ldr	r5, [pc, #580]	@ (8005fbc <_dtoa_r+0x584>)
 8005d78:	b954      	cbnz	r4, 8005d90 <_dtoa_r+0x358>
 8005d7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d82:	f7fa fd63 	bl	800084c <__aeabi_ddiv>
 8005d86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d8a:	e028      	b.n	8005dde <_dtoa_r+0x3a6>
 8005d8c:	2602      	movs	r6, #2
 8005d8e:	e7f2      	b.n	8005d76 <_dtoa_r+0x33e>
 8005d90:	07e1      	lsls	r1, r4, #31
 8005d92:	d508      	bpl.n	8005da6 <_dtoa_r+0x36e>
 8005d94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005d98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d9c:	f7fa fc2c 	bl	80005f8 <__aeabi_dmul>
 8005da0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005da4:	3601      	adds	r6, #1
 8005da6:	1064      	asrs	r4, r4, #1
 8005da8:	3508      	adds	r5, #8
 8005daa:	e7e5      	b.n	8005d78 <_dtoa_r+0x340>
 8005dac:	f000 80af 	beq.w	8005f0e <_dtoa_r+0x4d6>
 8005db0:	427c      	negs	r4, r7
 8005db2:	4b81      	ldr	r3, [pc, #516]	@ (8005fb8 <_dtoa_r+0x580>)
 8005db4:	4d81      	ldr	r5, [pc, #516]	@ (8005fbc <_dtoa_r+0x584>)
 8005db6:	f004 020f 	and.w	r2, r4, #15
 8005dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005dc6:	f7fa fc17 	bl	80005f8 <__aeabi_dmul>
 8005dca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dce:	1124      	asrs	r4, r4, #4
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	2602      	movs	r6, #2
 8005dd4:	2c00      	cmp	r4, #0
 8005dd6:	f040 808f 	bne.w	8005ef8 <_dtoa_r+0x4c0>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1d3      	bne.n	8005d86 <_dtoa_r+0x34e>
 8005dde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005de0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8094 	beq.w	8005f12 <_dtoa_r+0x4da>
 8005dea:	4b75      	ldr	r3, [pc, #468]	@ (8005fc0 <_dtoa_r+0x588>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	4620      	mov	r0, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	f7fa fe73 	bl	8000adc <__aeabi_dcmplt>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	f000 808b 	beq.w	8005f12 <_dtoa_r+0x4da>
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8087 	beq.w	8005f12 <_dtoa_r+0x4da>
 8005e04:	f1bb 0f00 	cmp.w	fp, #0
 8005e08:	dd34      	ble.n	8005e74 <_dtoa_r+0x43c>
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	4b6d      	ldr	r3, [pc, #436]	@ (8005fc4 <_dtoa_r+0x58c>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa fbf1 	bl	80005f8 <__aeabi_dmul>
 8005e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e1a:	f107 38ff 	add.w	r8, r7, #4294967295
 8005e1e:	3601      	adds	r6, #1
 8005e20:	465c      	mov	r4, fp
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7fa fb7e 	bl	8000524 <__aeabi_i2d>
 8005e28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e2c:	f7fa fbe4 	bl	80005f8 <__aeabi_dmul>
 8005e30:	4b65      	ldr	r3, [pc, #404]	@ (8005fc8 <_dtoa_r+0x590>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	f7fa fa2a 	bl	800028c <__adddf3>
 8005e38:	4605      	mov	r5, r0
 8005e3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005e3e:	2c00      	cmp	r4, #0
 8005e40:	d16a      	bne.n	8005f18 <_dtoa_r+0x4e0>
 8005e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e46:	4b61      	ldr	r3, [pc, #388]	@ (8005fcc <_dtoa_r+0x594>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f7fa fa1d 	bl	8000288 <__aeabi_dsub>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e56:	462a      	mov	r2, r5
 8005e58:	4633      	mov	r3, r6
 8005e5a:	f7fa fe5d 	bl	8000b18 <__aeabi_dcmpgt>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	f040 8298 	bne.w	8006394 <_dtoa_r+0x95c>
 8005e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e68:	462a      	mov	r2, r5
 8005e6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005e6e:	f7fa fe35 	bl	8000adc <__aeabi_dcmplt>
 8005e72:	bb38      	cbnz	r0, 8005ec4 <_dtoa_r+0x48c>
 8005e74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005e78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f2c0 8157 	blt.w	8006132 <_dtoa_r+0x6fa>
 8005e84:	2f0e      	cmp	r7, #14
 8005e86:	f300 8154 	bgt.w	8006132 <_dtoa_r+0x6fa>
 8005e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8005fb8 <_dtoa_r+0x580>)
 8005e8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e90:	ed93 7b00 	vldr	d7, [r3]
 8005e94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	ed8d 7b00 	vstr	d7, [sp]
 8005e9c:	f280 80e5 	bge.w	800606a <_dtoa_r+0x632>
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f300 80e1 	bgt.w	800606a <_dtoa_r+0x632>
 8005ea8:	d10c      	bne.n	8005ec4 <_dtoa_r+0x48c>
 8005eaa:	4b48      	ldr	r3, [pc, #288]	@ (8005fcc <_dtoa_r+0x594>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	ec51 0b17 	vmov	r0, r1, d7
 8005eb2:	f7fa fba1 	bl	80005f8 <__aeabi_dmul>
 8005eb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eba:	f7fa fe23 	bl	8000b04 <__aeabi_dcmpge>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f000 8266 	beq.w	8006390 <_dtoa_r+0x958>
 8005ec4:	2400      	movs	r4, #0
 8005ec6:	4625      	mov	r5, r4
 8005ec8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005eca:	4656      	mov	r6, sl
 8005ecc:	ea6f 0803 	mvn.w	r8, r3
 8005ed0:	2700      	movs	r7, #0
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	4648      	mov	r0, r9
 8005ed6:	f000 fcbf 	bl	8006858 <_Bfree>
 8005eda:	2d00      	cmp	r5, #0
 8005edc:	f000 80bd 	beq.w	800605a <_dtoa_r+0x622>
 8005ee0:	b12f      	cbz	r7, 8005eee <_dtoa_r+0x4b6>
 8005ee2:	42af      	cmp	r7, r5
 8005ee4:	d003      	beq.n	8005eee <_dtoa_r+0x4b6>
 8005ee6:	4639      	mov	r1, r7
 8005ee8:	4648      	mov	r0, r9
 8005eea:	f000 fcb5 	bl	8006858 <_Bfree>
 8005eee:	4629      	mov	r1, r5
 8005ef0:	4648      	mov	r0, r9
 8005ef2:	f000 fcb1 	bl	8006858 <_Bfree>
 8005ef6:	e0b0      	b.n	800605a <_dtoa_r+0x622>
 8005ef8:	07e2      	lsls	r2, r4, #31
 8005efa:	d505      	bpl.n	8005f08 <_dtoa_r+0x4d0>
 8005efc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f00:	f7fa fb7a 	bl	80005f8 <__aeabi_dmul>
 8005f04:	3601      	adds	r6, #1
 8005f06:	2301      	movs	r3, #1
 8005f08:	1064      	asrs	r4, r4, #1
 8005f0a:	3508      	adds	r5, #8
 8005f0c:	e762      	b.n	8005dd4 <_dtoa_r+0x39c>
 8005f0e:	2602      	movs	r6, #2
 8005f10:	e765      	b.n	8005dde <_dtoa_r+0x3a6>
 8005f12:	9c03      	ldr	r4, [sp, #12]
 8005f14:	46b8      	mov	r8, r7
 8005f16:	e784      	b.n	8005e22 <_dtoa_r+0x3ea>
 8005f18:	4b27      	ldr	r3, [pc, #156]	@ (8005fb8 <_dtoa_r+0x580>)
 8005f1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f24:	4454      	add	r4, sl
 8005f26:	2900      	cmp	r1, #0
 8005f28:	d054      	beq.n	8005fd4 <_dtoa_r+0x59c>
 8005f2a:	4929      	ldr	r1, [pc, #164]	@ (8005fd0 <_dtoa_r+0x598>)
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f7fa fc8d 	bl	800084c <__aeabi_ddiv>
 8005f32:	4633      	mov	r3, r6
 8005f34:	462a      	mov	r2, r5
 8005f36:	f7fa f9a7 	bl	8000288 <__aeabi_dsub>
 8005f3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005f3e:	4656      	mov	r6, sl
 8005f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f44:	f7fa fe08 	bl	8000b58 <__aeabi_d2iz>
 8005f48:	4605      	mov	r5, r0
 8005f4a:	f7fa faeb 	bl	8000524 <__aeabi_i2d>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f56:	f7fa f997 	bl	8000288 <__aeabi_dsub>
 8005f5a:	3530      	adds	r5, #48	@ 0x30
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f64:	f806 5b01 	strb.w	r5, [r6], #1
 8005f68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f6c:	f7fa fdb6 	bl	8000adc <__aeabi_dcmplt>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d172      	bne.n	800605a <_dtoa_r+0x622>
 8005f74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f78:	4911      	ldr	r1, [pc, #68]	@ (8005fc0 <_dtoa_r+0x588>)
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f7fa f984 	bl	8000288 <__aeabi_dsub>
 8005f80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f84:	f7fa fdaa 	bl	8000adc <__aeabi_dcmplt>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	f040 80b4 	bne.w	80060f6 <_dtoa_r+0x6be>
 8005f8e:	42a6      	cmp	r6, r4
 8005f90:	f43f af70 	beq.w	8005e74 <_dtoa_r+0x43c>
 8005f94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005f98:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc4 <_dtoa_r+0x58c>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f7fa fb2c 	bl	80005f8 <__aeabi_dmul>
 8005fa0:	4b08      	ldr	r3, [pc, #32]	@ (8005fc4 <_dtoa_r+0x58c>)
 8005fa2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fac:	f7fa fb24 	bl	80005f8 <__aeabi_dmul>
 8005fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fb4:	e7c4      	b.n	8005f40 <_dtoa_r+0x508>
 8005fb6:	bf00      	nop
 8005fb8:	08008040 	.word	0x08008040
 8005fbc:	08008018 	.word	0x08008018
 8005fc0:	3ff00000 	.word	0x3ff00000
 8005fc4:	40240000 	.word	0x40240000
 8005fc8:	401c0000 	.word	0x401c0000
 8005fcc:	40140000 	.word	0x40140000
 8005fd0:	3fe00000 	.word	0x3fe00000
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f7fa fb0e 	bl	80005f8 <__aeabi_dmul>
 8005fdc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fe0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005fe2:	4656      	mov	r6, sl
 8005fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe8:	f7fa fdb6 	bl	8000b58 <__aeabi_d2iz>
 8005fec:	4605      	mov	r5, r0
 8005fee:	f7fa fa99 	bl	8000524 <__aeabi_i2d>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ffa:	f7fa f945 	bl	8000288 <__aeabi_dsub>
 8005ffe:	3530      	adds	r5, #48	@ 0x30
 8006000:	f806 5b01 	strb.w	r5, [r6], #1
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	42a6      	cmp	r6, r4
 800600a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	d124      	bne.n	800605e <_dtoa_r+0x626>
 8006014:	4baf      	ldr	r3, [pc, #700]	@ (80062d4 <_dtoa_r+0x89c>)
 8006016:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800601a:	f7fa f937 	bl	800028c <__adddf3>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006026:	f7fa fd77 	bl	8000b18 <__aeabi_dcmpgt>
 800602a:	2800      	cmp	r0, #0
 800602c:	d163      	bne.n	80060f6 <_dtoa_r+0x6be>
 800602e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006032:	49a8      	ldr	r1, [pc, #672]	@ (80062d4 <_dtoa_r+0x89c>)
 8006034:	2000      	movs	r0, #0
 8006036:	f7fa f927 	bl	8000288 <__aeabi_dsub>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006042:	f7fa fd4b 	bl	8000adc <__aeabi_dcmplt>
 8006046:	2800      	cmp	r0, #0
 8006048:	f43f af14 	beq.w	8005e74 <_dtoa_r+0x43c>
 800604c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800604e:	1e73      	subs	r3, r6, #1
 8006050:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006052:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006056:	2b30      	cmp	r3, #48	@ 0x30
 8006058:	d0f8      	beq.n	800604c <_dtoa_r+0x614>
 800605a:	4647      	mov	r7, r8
 800605c:	e03b      	b.n	80060d6 <_dtoa_r+0x69e>
 800605e:	4b9e      	ldr	r3, [pc, #632]	@ (80062d8 <_dtoa_r+0x8a0>)
 8006060:	f7fa faca 	bl	80005f8 <__aeabi_dmul>
 8006064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006068:	e7bc      	b.n	8005fe4 <_dtoa_r+0x5ac>
 800606a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800606e:	4656      	mov	r6, sl
 8006070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006074:	4620      	mov	r0, r4
 8006076:	4629      	mov	r1, r5
 8006078:	f7fa fbe8 	bl	800084c <__aeabi_ddiv>
 800607c:	f7fa fd6c 	bl	8000b58 <__aeabi_d2iz>
 8006080:	4680      	mov	r8, r0
 8006082:	f7fa fa4f 	bl	8000524 <__aeabi_i2d>
 8006086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800608a:	f7fa fab5 	bl	80005f8 <__aeabi_dmul>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4620      	mov	r0, r4
 8006094:	4629      	mov	r1, r5
 8006096:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800609a:	f7fa f8f5 	bl	8000288 <__aeabi_dsub>
 800609e:	f806 4b01 	strb.w	r4, [r6], #1
 80060a2:	9d03      	ldr	r5, [sp, #12]
 80060a4:	eba6 040a 	sub.w	r4, r6, sl
 80060a8:	42a5      	cmp	r5, r4
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	d133      	bne.n	8006118 <_dtoa_r+0x6e0>
 80060b0:	f7fa f8ec 	bl	800028c <__adddf3>
 80060b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
 80060bc:	f7fa fd2c 	bl	8000b18 <__aeabi_dcmpgt>
 80060c0:	b9c0      	cbnz	r0, 80060f4 <_dtoa_r+0x6bc>
 80060c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060c6:	4620      	mov	r0, r4
 80060c8:	4629      	mov	r1, r5
 80060ca:	f7fa fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80060ce:	b110      	cbz	r0, 80060d6 <_dtoa_r+0x69e>
 80060d0:	f018 0f01 	tst.w	r8, #1
 80060d4:	d10e      	bne.n	80060f4 <_dtoa_r+0x6bc>
 80060d6:	9902      	ldr	r1, [sp, #8]
 80060d8:	4648      	mov	r0, r9
 80060da:	f000 fbbd 	bl	8006858 <_Bfree>
 80060de:	2300      	movs	r3, #0
 80060e0:	7033      	strb	r3, [r6, #0]
 80060e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80060e4:	3701      	adds	r7, #1
 80060e6:	601f      	str	r7, [r3, #0]
 80060e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 824b 	beq.w	8006586 <_dtoa_r+0xb4e>
 80060f0:	601e      	str	r6, [r3, #0]
 80060f2:	e248      	b.n	8006586 <_dtoa_r+0xb4e>
 80060f4:	46b8      	mov	r8, r7
 80060f6:	4633      	mov	r3, r6
 80060f8:	461e      	mov	r6, r3
 80060fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060fe:	2a39      	cmp	r2, #57	@ 0x39
 8006100:	d106      	bne.n	8006110 <_dtoa_r+0x6d8>
 8006102:	459a      	cmp	sl, r3
 8006104:	d1f8      	bne.n	80060f8 <_dtoa_r+0x6c0>
 8006106:	2230      	movs	r2, #48	@ 0x30
 8006108:	f108 0801 	add.w	r8, r8, #1
 800610c:	f88a 2000 	strb.w	r2, [sl]
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	3201      	adds	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e7a0      	b.n	800605a <_dtoa_r+0x622>
 8006118:	4b6f      	ldr	r3, [pc, #444]	@ (80062d8 <_dtoa_r+0x8a0>)
 800611a:	2200      	movs	r2, #0
 800611c:	f7fa fa6c 	bl	80005f8 <__aeabi_dmul>
 8006120:	2200      	movs	r2, #0
 8006122:	2300      	movs	r3, #0
 8006124:	4604      	mov	r4, r0
 8006126:	460d      	mov	r5, r1
 8006128:	f7fa fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800612c:	2800      	cmp	r0, #0
 800612e:	d09f      	beq.n	8006070 <_dtoa_r+0x638>
 8006130:	e7d1      	b.n	80060d6 <_dtoa_r+0x69e>
 8006132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006134:	2a00      	cmp	r2, #0
 8006136:	f000 80ea 	beq.w	800630e <_dtoa_r+0x8d6>
 800613a:	9a07      	ldr	r2, [sp, #28]
 800613c:	2a01      	cmp	r2, #1
 800613e:	f300 80cd 	bgt.w	80062dc <_dtoa_r+0x8a4>
 8006142:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006144:	2a00      	cmp	r2, #0
 8006146:	f000 80c1 	beq.w	80062cc <_dtoa_r+0x894>
 800614a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800614e:	9c08      	ldr	r4, [sp, #32]
 8006150:	9e00      	ldr	r6, [sp, #0]
 8006152:	9a00      	ldr	r2, [sp, #0]
 8006154:	441a      	add	r2, r3
 8006156:	9200      	str	r2, [sp, #0]
 8006158:	9a06      	ldr	r2, [sp, #24]
 800615a:	2101      	movs	r1, #1
 800615c:	441a      	add	r2, r3
 800615e:	4648      	mov	r0, r9
 8006160:	9206      	str	r2, [sp, #24]
 8006162:	f000 fc2d 	bl	80069c0 <__i2b>
 8006166:	4605      	mov	r5, r0
 8006168:	b166      	cbz	r6, 8006184 <_dtoa_r+0x74c>
 800616a:	9b06      	ldr	r3, [sp, #24]
 800616c:	2b00      	cmp	r3, #0
 800616e:	dd09      	ble.n	8006184 <_dtoa_r+0x74c>
 8006170:	42b3      	cmp	r3, r6
 8006172:	9a00      	ldr	r2, [sp, #0]
 8006174:	bfa8      	it	ge
 8006176:	4633      	movge	r3, r6
 8006178:	1ad2      	subs	r2, r2, r3
 800617a:	9200      	str	r2, [sp, #0]
 800617c:	9a06      	ldr	r2, [sp, #24]
 800617e:	1af6      	subs	r6, r6, r3
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	9306      	str	r3, [sp, #24]
 8006184:	9b08      	ldr	r3, [sp, #32]
 8006186:	b30b      	cbz	r3, 80061cc <_dtoa_r+0x794>
 8006188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80c6 	beq.w	800631c <_dtoa_r+0x8e4>
 8006190:	2c00      	cmp	r4, #0
 8006192:	f000 80c0 	beq.w	8006316 <_dtoa_r+0x8de>
 8006196:	4629      	mov	r1, r5
 8006198:	4622      	mov	r2, r4
 800619a:	4648      	mov	r0, r9
 800619c:	f000 fcc8 	bl	8006b30 <__pow5mult>
 80061a0:	9a02      	ldr	r2, [sp, #8]
 80061a2:	4601      	mov	r1, r0
 80061a4:	4605      	mov	r5, r0
 80061a6:	4648      	mov	r0, r9
 80061a8:	f000 fc20 	bl	80069ec <__multiply>
 80061ac:	9902      	ldr	r1, [sp, #8]
 80061ae:	4680      	mov	r8, r0
 80061b0:	4648      	mov	r0, r9
 80061b2:	f000 fb51 	bl	8006858 <_Bfree>
 80061b6:	9b08      	ldr	r3, [sp, #32]
 80061b8:	1b1b      	subs	r3, r3, r4
 80061ba:	9308      	str	r3, [sp, #32]
 80061bc:	f000 80b1 	beq.w	8006322 <_dtoa_r+0x8ea>
 80061c0:	9a08      	ldr	r2, [sp, #32]
 80061c2:	4641      	mov	r1, r8
 80061c4:	4648      	mov	r0, r9
 80061c6:	f000 fcb3 	bl	8006b30 <__pow5mult>
 80061ca:	9002      	str	r0, [sp, #8]
 80061cc:	2101      	movs	r1, #1
 80061ce:	4648      	mov	r0, r9
 80061d0:	f000 fbf6 	bl	80069c0 <__i2b>
 80061d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061d6:	4604      	mov	r4, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 81d8 	beq.w	800658e <_dtoa_r+0xb56>
 80061de:	461a      	mov	r2, r3
 80061e0:	4601      	mov	r1, r0
 80061e2:	4648      	mov	r0, r9
 80061e4:	f000 fca4 	bl	8006b30 <__pow5mult>
 80061e8:	9b07      	ldr	r3, [sp, #28]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	4604      	mov	r4, r0
 80061ee:	f300 809f 	bgt.w	8006330 <_dtoa_r+0x8f8>
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 8097 	bne.w	8006328 <_dtoa_r+0x8f0>
 80061fa:	9b05      	ldr	r3, [sp, #20]
 80061fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006200:	2b00      	cmp	r3, #0
 8006202:	f040 8093 	bne.w	800632c <_dtoa_r+0x8f4>
 8006206:	9b05      	ldr	r3, [sp, #20]
 8006208:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800620c:	0d1b      	lsrs	r3, r3, #20
 800620e:	051b      	lsls	r3, r3, #20
 8006210:	b133      	cbz	r3, 8006220 <_dtoa_r+0x7e8>
 8006212:	9b00      	ldr	r3, [sp, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	9b06      	ldr	r3, [sp, #24]
 800621a:	3301      	adds	r3, #1
 800621c:	9306      	str	r3, [sp, #24]
 800621e:	2301      	movs	r3, #1
 8006220:	9308      	str	r3, [sp, #32]
 8006222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 81b8 	beq.w	800659a <_dtoa_r+0xb62>
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006230:	6918      	ldr	r0, [r3, #16]
 8006232:	f000 fb79 	bl	8006928 <__hi0bits>
 8006236:	f1c0 0020 	rsb	r0, r0, #32
 800623a:	9b06      	ldr	r3, [sp, #24]
 800623c:	4418      	add	r0, r3
 800623e:	f010 001f 	ands.w	r0, r0, #31
 8006242:	f000 8082 	beq.w	800634a <_dtoa_r+0x912>
 8006246:	f1c0 0320 	rsb	r3, r0, #32
 800624a:	2b04      	cmp	r3, #4
 800624c:	dd73      	ble.n	8006336 <_dtoa_r+0x8fe>
 800624e:	9b00      	ldr	r3, [sp, #0]
 8006250:	f1c0 001c 	rsb	r0, r0, #28
 8006254:	4403      	add	r3, r0
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	9b06      	ldr	r3, [sp, #24]
 800625a:	4403      	add	r3, r0
 800625c:	4406      	add	r6, r0
 800625e:	9306      	str	r3, [sp, #24]
 8006260:	9b00      	ldr	r3, [sp, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	dd05      	ble.n	8006272 <_dtoa_r+0x83a>
 8006266:	9902      	ldr	r1, [sp, #8]
 8006268:	461a      	mov	r2, r3
 800626a:	4648      	mov	r0, r9
 800626c:	f000 fcba 	bl	8006be4 <__lshift>
 8006270:	9002      	str	r0, [sp, #8]
 8006272:	9b06      	ldr	r3, [sp, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	dd05      	ble.n	8006284 <_dtoa_r+0x84c>
 8006278:	4621      	mov	r1, r4
 800627a:	461a      	mov	r2, r3
 800627c:	4648      	mov	r0, r9
 800627e:	f000 fcb1 	bl	8006be4 <__lshift>
 8006282:	4604      	mov	r4, r0
 8006284:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d061      	beq.n	800634e <_dtoa_r+0x916>
 800628a:	9802      	ldr	r0, [sp, #8]
 800628c:	4621      	mov	r1, r4
 800628e:	f000 fd15 	bl	8006cbc <__mcmp>
 8006292:	2800      	cmp	r0, #0
 8006294:	da5b      	bge.n	800634e <_dtoa_r+0x916>
 8006296:	2300      	movs	r3, #0
 8006298:	9902      	ldr	r1, [sp, #8]
 800629a:	220a      	movs	r2, #10
 800629c:	4648      	mov	r0, r9
 800629e:	f000 fafd 	bl	800689c <__multadd>
 80062a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a4:	9002      	str	r0, [sp, #8]
 80062a6:	f107 38ff 	add.w	r8, r7, #4294967295
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8177 	beq.w	800659e <_dtoa_r+0xb66>
 80062b0:	4629      	mov	r1, r5
 80062b2:	2300      	movs	r3, #0
 80062b4:	220a      	movs	r2, #10
 80062b6:	4648      	mov	r0, r9
 80062b8:	f000 faf0 	bl	800689c <__multadd>
 80062bc:	f1bb 0f00 	cmp.w	fp, #0
 80062c0:	4605      	mov	r5, r0
 80062c2:	dc6f      	bgt.n	80063a4 <_dtoa_r+0x96c>
 80062c4:	9b07      	ldr	r3, [sp, #28]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	dc49      	bgt.n	800635e <_dtoa_r+0x926>
 80062ca:	e06b      	b.n	80063a4 <_dtoa_r+0x96c>
 80062cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80062d2:	e73c      	b.n	800614e <_dtoa_r+0x716>
 80062d4:	3fe00000 	.word	0x3fe00000
 80062d8:	40240000 	.word	0x40240000
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	1e5c      	subs	r4, r3, #1
 80062e0:	9b08      	ldr	r3, [sp, #32]
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	db09      	blt.n	80062fa <_dtoa_r+0x8c2>
 80062e6:	1b1c      	subs	r4, r3, r4
 80062e8:	9b03      	ldr	r3, [sp, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f6bf af30 	bge.w	8006150 <_dtoa_r+0x718>
 80062f0:	9b00      	ldr	r3, [sp, #0]
 80062f2:	9a03      	ldr	r2, [sp, #12]
 80062f4:	1a9e      	subs	r6, r3, r2
 80062f6:	2300      	movs	r3, #0
 80062f8:	e72b      	b.n	8006152 <_dtoa_r+0x71a>
 80062fa:	9b08      	ldr	r3, [sp, #32]
 80062fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80062fe:	9408      	str	r4, [sp, #32]
 8006300:	1ae3      	subs	r3, r4, r3
 8006302:	441a      	add	r2, r3
 8006304:	9e00      	ldr	r6, [sp, #0]
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	920d      	str	r2, [sp, #52]	@ 0x34
 800630a:	2400      	movs	r4, #0
 800630c:	e721      	b.n	8006152 <_dtoa_r+0x71a>
 800630e:	9c08      	ldr	r4, [sp, #32]
 8006310:	9e00      	ldr	r6, [sp, #0]
 8006312:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006314:	e728      	b.n	8006168 <_dtoa_r+0x730>
 8006316:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800631a:	e751      	b.n	80061c0 <_dtoa_r+0x788>
 800631c:	9a08      	ldr	r2, [sp, #32]
 800631e:	9902      	ldr	r1, [sp, #8]
 8006320:	e750      	b.n	80061c4 <_dtoa_r+0x78c>
 8006322:	f8cd 8008 	str.w	r8, [sp, #8]
 8006326:	e751      	b.n	80061cc <_dtoa_r+0x794>
 8006328:	2300      	movs	r3, #0
 800632a:	e779      	b.n	8006220 <_dtoa_r+0x7e8>
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	e777      	b.n	8006220 <_dtoa_r+0x7e8>
 8006330:	2300      	movs	r3, #0
 8006332:	9308      	str	r3, [sp, #32]
 8006334:	e779      	b.n	800622a <_dtoa_r+0x7f2>
 8006336:	d093      	beq.n	8006260 <_dtoa_r+0x828>
 8006338:	9a00      	ldr	r2, [sp, #0]
 800633a:	331c      	adds	r3, #28
 800633c:	441a      	add	r2, r3
 800633e:	9200      	str	r2, [sp, #0]
 8006340:	9a06      	ldr	r2, [sp, #24]
 8006342:	441a      	add	r2, r3
 8006344:	441e      	add	r6, r3
 8006346:	9206      	str	r2, [sp, #24]
 8006348:	e78a      	b.n	8006260 <_dtoa_r+0x828>
 800634a:	4603      	mov	r3, r0
 800634c:	e7f4      	b.n	8006338 <_dtoa_r+0x900>
 800634e:	9b03      	ldr	r3, [sp, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	46b8      	mov	r8, r7
 8006354:	dc20      	bgt.n	8006398 <_dtoa_r+0x960>
 8006356:	469b      	mov	fp, r3
 8006358:	9b07      	ldr	r3, [sp, #28]
 800635a:	2b02      	cmp	r3, #2
 800635c:	dd1e      	ble.n	800639c <_dtoa_r+0x964>
 800635e:	f1bb 0f00 	cmp.w	fp, #0
 8006362:	f47f adb1 	bne.w	8005ec8 <_dtoa_r+0x490>
 8006366:	4621      	mov	r1, r4
 8006368:	465b      	mov	r3, fp
 800636a:	2205      	movs	r2, #5
 800636c:	4648      	mov	r0, r9
 800636e:	f000 fa95 	bl	800689c <__multadd>
 8006372:	4601      	mov	r1, r0
 8006374:	4604      	mov	r4, r0
 8006376:	9802      	ldr	r0, [sp, #8]
 8006378:	f000 fca0 	bl	8006cbc <__mcmp>
 800637c:	2800      	cmp	r0, #0
 800637e:	f77f ada3 	ble.w	8005ec8 <_dtoa_r+0x490>
 8006382:	4656      	mov	r6, sl
 8006384:	2331      	movs	r3, #49	@ 0x31
 8006386:	f806 3b01 	strb.w	r3, [r6], #1
 800638a:	f108 0801 	add.w	r8, r8, #1
 800638e:	e59f      	b.n	8005ed0 <_dtoa_r+0x498>
 8006390:	9c03      	ldr	r4, [sp, #12]
 8006392:	46b8      	mov	r8, r7
 8006394:	4625      	mov	r5, r4
 8006396:	e7f4      	b.n	8006382 <_dtoa_r+0x94a>
 8006398:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800639c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 8101 	beq.w	80065a6 <_dtoa_r+0xb6e>
 80063a4:	2e00      	cmp	r6, #0
 80063a6:	dd05      	ble.n	80063b4 <_dtoa_r+0x97c>
 80063a8:	4629      	mov	r1, r5
 80063aa:	4632      	mov	r2, r6
 80063ac:	4648      	mov	r0, r9
 80063ae:	f000 fc19 	bl	8006be4 <__lshift>
 80063b2:	4605      	mov	r5, r0
 80063b4:	9b08      	ldr	r3, [sp, #32]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d05c      	beq.n	8006474 <_dtoa_r+0xa3c>
 80063ba:	6869      	ldr	r1, [r5, #4]
 80063bc:	4648      	mov	r0, r9
 80063be:	f000 fa0b 	bl	80067d8 <_Balloc>
 80063c2:	4606      	mov	r6, r0
 80063c4:	b928      	cbnz	r0, 80063d2 <_dtoa_r+0x99a>
 80063c6:	4b82      	ldr	r3, [pc, #520]	@ (80065d0 <_dtoa_r+0xb98>)
 80063c8:	4602      	mov	r2, r0
 80063ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80063ce:	f7ff bb4a 	b.w	8005a66 <_dtoa_r+0x2e>
 80063d2:	692a      	ldr	r2, [r5, #16]
 80063d4:	3202      	adds	r2, #2
 80063d6:	0092      	lsls	r2, r2, #2
 80063d8:	f105 010c 	add.w	r1, r5, #12
 80063dc:	300c      	adds	r0, #12
 80063de:	f000 fff7 	bl	80073d0 <memcpy>
 80063e2:	2201      	movs	r2, #1
 80063e4:	4631      	mov	r1, r6
 80063e6:	4648      	mov	r0, r9
 80063e8:	f000 fbfc 	bl	8006be4 <__lshift>
 80063ec:	f10a 0301 	add.w	r3, sl, #1
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	eb0a 030b 	add.w	r3, sl, fp
 80063f6:	9308      	str	r3, [sp, #32]
 80063f8:	9b04      	ldr	r3, [sp, #16]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	462f      	mov	r7, r5
 8006400:	9306      	str	r3, [sp, #24]
 8006402:	4605      	mov	r5, r0
 8006404:	9b00      	ldr	r3, [sp, #0]
 8006406:	9802      	ldr	r0, [sp, #8]
 8006408:	4621      	mov	r1, r4
 800640a:	f103 3bff 	add.w	fp, r3, #4294967295
 800640e:	f7ff fa8a 	bl	8005926 <quorem>
 8006412:	4603      	mov	r3, r0
 8006414:	3330      	adds	r3, #48	@ 0x30
 8006416:	9003      	str	r0, [sp, #12]
 8006418:	4639      	mov	r1, r7
 800641a:	9802      	ldr	r0, [sp, #8]
 800641c:	9309      	str	r3, [sp, #36]	@ 0x24
 800641e:	f000 fc4d 	bl	8006cbc <__mcmp>
 8006422:	462a      	mov	r2, r5
 8006424:	9004      	str	r0, [sp, #16]
 8006426:	4621      	mov	r1, r4
 8006428:	4648      	mov	r0, r9
 800642a:	f000 fc63 	bl	8006cf4 <__mdiff>
 800642e:	68c2      	ldr	r2, [r0, #12]
 8006430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006432:	4606      	mov	r6, r0
 8006434:	bb02      	cbnz	r2, 8006478 <_dtoa_r+0xa40>
 8006436:	4601      	mov	r1, r0
 8006438:	9802      	ldr	r0, [sp, #8]
 800643a:	f000 fc3f 	bl	8006cbc <__mcmp>
 800643e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006440:	4602      	mov	r2, r0
 8006442:	4631      	mov	r1, r6
 8006444:	4648      	mov	r0, r9
 8006446:	920c      	str	r2, [sp, #48]	@ 0x30
 8006448:	9309      	str	r3, [sp, #36]	@ 0x24
 800644a:	f000 fa05 	bl	8006858 <_Bfree>
 800644e:	9b07      	ldr	r3, [sp, #28]
 8006450:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006452:	9e00      	ldr	r6, [sp, #0]
 8006454:	ea42 0103 	orr.w	r1, r2, r3
 8006458:	9b06      	ldr	r3, [sp, #24]
 800645a:	4319      	orrs	r1, r3
 800645c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800645e:	d10d      	bne.n	800647c <_dtoa_r+0xa44>
 8006460:	2b39      	cmp	r3, #57	@ 0x39
 8006462:	d027      	beq.n	80064b4 <_dtoa_r+0xa7c>
 8006464:	9a04      	ldr	r2, [sp, #16]
 8006466:	2a00      	cmp	r2, #0
 8006468:	dd01      	ble.n	800646e <_dtoa_r+0xa36>
 800646a:	9b03      	ldr	r3, [sp, #12]
 800646c:	3331      	adds	r3, #49	@ 0x31
 800646e:	f88b 3000 	strb.w	r3, [fp]
 8006472:	e52e      	b.n	8005ed2 <_dtoa_r+0x49a>
 8006474:	4628      	mov	r0, r5
 8006476:	e7b9      	b.n	80063ec <_dtoa_r+0x9b4>
 8006478:	2201      	movs	r2, #1
 800647a:	e7e2      	b.n	8006442 <_dtoa_r+0xa0a>
 800647c:	9904      	ldr	r1, [sp, #16]
 800647e:	2900      	cmp	r1, #0
 8006480:	db04      	blt.n	800648c <_dtoa_r+0xa54>
 8006482:	9807      	ldr	r0, [sp, #28]
 8006484:	4301      	orrs	r1, r0
 8006486:	9806      	ldr	r0, [sp, #24]
 8006488:	4301      	orrs	r1, r0
 800648a:	d120      	bne.n	80064ce <_dtoa_r+0xa96>
 800648c:	2a00      	cmp	r2, #0
 800648e:	ddee      	ble.n	800646e <_dtoa_r+0xa36>
 8006490:	9902      	ldr	r1, [sp, #8]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2201      	movs	r2, #1
 8006496:	4648      	mov	r0, r9
 8006498:	f000 fba4 	bl	8006be4 <__lshift>
 800649c:	4621      	mov	r1, r4
 800649e:	9002      	str	r0, [sp, #8]
 80064a0:	f000 fc0c 	bl	8006cbc <__mcmp>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	dc02      	bgt.n	80064b0 <_dtoa_r+0xa78>
 80064aa:	d1e0      	bne.n	800646e <_dtoa_r+0xa36>
 80064ac:	07da      	lsls	r2, r3, #31
 80064ae:	d5de      	bpl.n	800646e <_dtoa_r+0xa36>
 80064b0:	2b39      	cmp	r3, #57	@ 0x39
 80064b2:	d1da      	bne.n	800646a <_dtoa_r+0xa32>
 80064b4:	2339      	movs	r3, #57	@ 0x39
 80064b6:	f88b 3000 	strb.w	r3, [fp]
 80064ba:	4633      	mov	r3, r6
 80064bc:	461e      	mov	r6, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80064c4:	2a39      	cmp	r2, #57	@ 0x39
 80064c6:	d04e      	beq.n	8006566 <_dtoa_r+0xb2e>
 80064c8:	3201      	adds	r2, #1
 80064ca:	701a      	strb	r2, [r3, #0]
 80064cc:	e501      	b.n	8005ed2 <_dtoa_r+0x49a>
 80064ce:	2a00      	cmp	r2, #0
 80064d0:	dd03      	ble.n	80064da <_dtoa_r+0xaa2>
 80064d2:	2b39      	cmp	r3, #57	@ 0x39
 80064d4:	d0ee      	beq.n	80064b4 <_dtoa_r+0xa7c>
 80064d6:	3301      	adds	r3, #1
 80064d8:	e7c9      	b.n	800646e <_dtoa_r+0xa36>
 80064da:	9a00      	ldr	r2, [sp, #0]
 80064dc:	9908      	ldr	r1, [sp, #32]
 80064de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064e2:	428a      	cmp	r2, r1
 80064e4:	d028      	beq.n	8006538 <_dtoa_r+0xb00>
 80064e6:	9902      	ldr	r1, [sp, #8]
 80064e8:	2300      	movs	r3, #0
 80064ea:	220a      	movs	r2, #10
 80064ec:	4648      	mov	r0, r9
 80064ee:	f000 f9d5 	bl	800689c <__multadd>
 80064f2:	42af      	cmp	r7, r5
 80064f4:	9002      	str	r0, [sp, #8]
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	f04f 020a 	mov.w	r2, #10
 80064fe:	4639      	mov	r1, r7
 8006500:	4648      	mov	r0, r9
 8006502:	d107      	bne.n	8006514 <_dtoa_r+0xadc>
 8006504:	f000 f9ca 	bl	800689c <__multadd>
 8006508:	4607      	mov	r7, r0
 800650a:	4605      	mov	r5, r0
 800650c:	9b00      	ldr	r3, [sp, #0]
 800650e:	3301      	adds	r3, #1
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	e777      	b.n	8006404 <_dtoa_r+0x9cc>
 8006514:	f000 f9c2 	bl	800689c <__multadd>
 8006518:	4629      	mov	r1, r5
 800651a:	4607      	mov	r7, r0
 800651c:	2300      	movs	r3, #0
 800651e:	220a      	movs	r2, #10
 8006520:	4648      	mov	r0, r9
 8006522:	f000 f9bb 	bl	800689c <__multadd>
 8006526:	4605      	mov	r5, r0
 8006528:	e7f0      	b.n	800650c <_dtoa_r+0xad4>
 800652a:	f1bb 0f00 	cmp.w	fp, #0
 800652e:	bfcc      	ite	gt
 8006530:	465e      	movgt	r6, fp
 8006532:	2601      	movle	r6, #1
 8006534:	4456      	add	r6, sl
 8006536:	2700      	movs	r7, #0
 8006538:	9902      	ldr	r1, [sp, #8]
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	2201      	movs	r2, #1
 800653e:	4648      	mov	r0, r9
 8006540:	f000 fb50 	bl	8006be4 <__lshift>
 8006544:	4621      	mov	r1, r4
 8006546:	9002      	str	r0, [sp, #8]
 8006548:	f000 fbb8 	bl	8006cbc <__mcmp>
 800654c:	2800      	cmp	r0, #0
 800654e:	dcb4      	bgt.n	80064ba <_dtoa_r+0xa82>
 8006550:	d102      	bne.n	8006558 <_dtoa_r+0xb20>
 8006552:	9b00      	ldr	r3, [sp, #0]
 8006554:	07db      	lsls	r3, r3, #31
 8006556:	d4b0      	bmi.n	80064ba <_dtoa_r+0xa82>
 8006558:	4633      	mov	r3, r6
 800655a:	461e      	mov	r6, r3
 800655c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006560:	2a30      	cmp	r2, #48	@ 0x30
 8006562:	d0fa      	beq.n	800655a <_dtoa_r+0xb22>
 8006564:	e4b5      	b.n	8005ed2 <_dtoa_r+0x49a>
 8006566:	459a      	cmp	sl, r3
 8006568:	d1a8      	bne.n	80064bc <_dtoa_r+0xa84>
 800656a:	2331      	movs	r3, #49	@ 0x31
 800656c:	f108 0801 	add.w	r8, r8, #1
 8006570:	f88a 3000 	strb.w	r3, [sl]
 8006574:	e4ad      	b.n	8005ed2 <_dtoa_r+0x49a>
 8006576:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006578:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80065d4 <_dtoa_r+0xb9c>
 800657c:	b11b      	cbz	r3, 8006586 <_dtoa_r+0xb4e>
 800657e:	f10a 0308 	add.w	r3, sl, #8
 8006582:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	4650      	mov	r0, sl
 8006588:	b017      	add	sp, #92	@ 0x5c
 800658a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658e:	9b07      	ldr	r3, [sp, #28]
 8006590:	2b01      	cmp	r3, #1
 8006592:	f77f ae2e 	ble.w	80061f2 <_dtoa_r+0x7ba>
 8006596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006598:	9308      	str	r3, [sp, #32]
 800659a:	2001      	movs	r0, #1
 800659c:	e64d      	b.n	800623a <_dtoa_r+0x802>
 800659e:	f1bb 0f00 	cmp.w	fp, #0
 80065a2:	f77f aed9 	ble.w	8006358 <_dtoa_r+0x920>
 80065a6:	4656      	mov	r6, sl
 80065a8:	9802      	ldr	r0, [sp, #8]
 80065aa:	4621      	mov	r1, r4
 80065ac:	f7ff f9bb 	bl	8005926 <quorem>
 80065b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80065b4:	f806 3b01 	strb.w	r3, [r6], #1
 80065b8:	eba6 020a 	sub.w	r2, r6, sl
 80065bc:	4593      	cmp	fp, r2
 80065be:	ddb4      	ble.n	800652a <_dtoa_r+0xaf2>
 80065c0:	9902      	ldr	r1, [sp, #8]
 80065c2:	2300      	movs	r3, #0
 80065c4:	220a      	movs	r2, #10
 80065c6:	4648      	mov	r0, r9
 80065c8:	f000 f968 	bl	800689c <__multadd>
 80065cc:	9002      	str	r0, [sp, #8]
 80065ce:	e7eb      	b.n	80065a8 <_dtoa_r+0xb70>
 80065d0:	08007f44 	.word	0x08007f44
 80065d4:	08007ec8 	.word	0x08007ec8

080065d8 <_free_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4605      	mov	r5, r0
 80065dc:	2900      	cmp	r1, #0
 80065de:	d041      	beq.n	8006664 <_free_r+0x8c>
 80065e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e4:	1f0c      	subs	r4, r1, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bfb8      	it	lt
 80065ea:	18e4      	addlt	r4, r4, r3
 80065ec:	f000 f8e8 	bl	80067c0 <__malloc_lock>
 80065f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006668 <_free_r+0x90>)
 80065f2:	6813      	ldr	r3, [r2, #0]
 80065f4:	b933      	cbnz	r3, 8006604 <_free_r+0x2c>
 80065f6:	6063      	str	r3, [r4, #4]
 80065f8:	6014      	str	r4, [r2, #0]
 80065fa:	4628      	mov	r0, r5
 80065fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006600:	f000 b8e4 	b.w	80067cc <__malloc_unlock>
 8006604:	42a3      	cmp	r3, r4
 8006606:	d908      	bls.n	800661a <_free_r+0x42>
 8006608:	6820      	ldr	r0, [r4, #0]
 800660a:	1821      	adds	r1, r4, r0
 800660c:	428b      	cmp	r3, r1
 800660e:	bf01      	itttt	eq
 8006610:	6819      	ldreq	r1, [r3, #0]
 8006612:	685b      	ldreq	r3, [r3, #4]
 8006614:	1809      	addeq	r1, r1, r0
 8006616:	6021      	streq	r1, [r4, #0]
 8006618:	e7ed      	b.n	80065f6 <_free_r+0x1e>
 800661a:	461a      	mov	r2, r3
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	b10b      	cbz	r3, 8006624 <_free_r+0x4c>
 8006620:	42a3      	cmp	r3, r4
 8006622:	d9fa      	bls.n	800661a <_free_r+0x42>
 8006624:	6811      	ldr	r1, [r2, #0]
 8006626:	1850      	adds	r0, r2, r1
 8006628:	42a0      	cmp	r0, r4
 800662a:	d10b      	bne.n	8006644 <_free_r+0x6c>
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	4401      	add	r1, r0
 8006630:	1850      	adds	r0, r2, r1
 8006632:	4283      	cmp	r3, r0
 8006634:	6011      	str	r1, [r2, #0]
 8006636:	d1e0      	bne.n	80065fa <_free_r+0x22>
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	6053      	str	r3, [r2, #4]
 800663e:	4408      	add	r0, r1
 8006640:	6010      	str	r0, [r2, #0]
 8006642:	e7da      	b.n	80065fa <_free_r+0x22>
 8006644:	d902      	bls.n	800664c <_free_r+0x74>
 8006646:	230c      	movs	r3, #12
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	e7d6      	b.n	80065fa <_free_r+0x22>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	1821      	adds	r1, r4, r0
 8006650:	428b      	cmp	r3, r1
 8006652:	bf04      	itt	eq
 8006654:	6819      	ldreq	r1, [r3, #0]
 8006656:	685b      	ldreq	r3, [r3, #4]
 8006658:	6063      	str	r3, [r4, #4]
 800665a:	bf04      	itt	eq
 800665c:	1809      	addeq	r1, r1, r0
 800665e:	6021      	streq	r1, [r4, #0]
 8006660:	6054      	str	r4, [r2, #4]
 8006662:	e7ca      	b.n	80065fa <_free_r+0x22>
 8006664:	bd38      	pop	{r3, r4, r5, pc}
 8006666:	bf00      	nop
 8006668:	200003dc 	.word	0x200003dc

0800666c <malloc>:
 800666c:	4b02      	ldr	r3, [pc, #8]	@ (8006678 <malloc+0xc>)
 800666e:	4601      	mov	r1, r0
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	f000 b825 	b.w	80066c0 <_malloc_r>
 8006676:	bf00      	nop
 8006678:	20000018 	.word	0x20000018

0800667c <sbrk_aligned>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4e0f      	ldr	r6, [pc, #60]	@ (80066bc <sbrk_aligned+0x40>)
 8006680:	460c      	mov	r4, r1
 8006682:	6831      	ldr	r1, [r6, #0]
 8006684:	4605      	mov	r5, r0
 8006686:	b911      	cbnz	r1, 800668e <sbrk_aligned+0x12>
 8006688:	f000 fe92 	bl	80073b0 <_sbrk_r>
 800668c:	6030      	str	r0, [r6, #0]
 800668e:	4621      	mov	r1, r4
 8006690:	4628      	mov	r0, r5
 8006692:	f000 fe8d 	bl	80073b0 <_sbrk_r>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d103      	bne.n	80066a2 <sbrk_aligned+0x26>
 800669a:	f04f 34ff 	mov.w	r4, #4294967295
 800669e:	4620      	mov	r0, r4
 80066a0:	bd70      	pop	{r4, r5, r6, pc}
 80066a2:	1cc4      	adds	r4, r0, #3
 80066a4:	f024 0403 	bic.w	r4, r4, #3
 80066a8:	42a0      	cmp	r0, r4
 80066aa:	d0f8      	beq.n	800669e <sbrk_aligned+0x22>
 80066ac:	1a21      	subs	r1, r4, r0
 80066ae:	4628      	mov	r0, r5
 80066b0:	f000 fe7e 	bl	80073b0 <_sbrk_r>
 80066b4:	3001      	adds	r0, #1
 80066b6:	d1f2      	bne.n	800669e <sbrk_aligned+0x22>
 80066b8:	e7ef      	b.n	800669a <sbrk_aligned+0x1e>
 80066ba:	bf00      	nop
 80066bc:	200003d8 	.word	0x200003d8

080066c0 <_malloc_r>:
 80066c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c4:	1ccd      	adds	r5, r1, #3
 80066c6:	f025 0503 	bic.w	r5, r5, #3
 80066ca:	3508      	adds	r5, #8
 80066cc:	2d0c      	cmp	r5, #12
 80066ce:	bf38      	it	cc
 80066d0:	250c      	movcc	r5, #12
 80066d2:	2d00      	cmp	r5, #0
 80066d4:	4606      	mov	r6, r0
 80066d6:	db01      	blt.n	80066dc <_malloc_r+0x1c>
 80066d8:	42a9      	cmp	r1, r5
 80066da:	d904      	bls.n	80066e6 <_malloc_r+0x26>
 80066dc:	230c      	movs	r3, #12
 80066de:	6033      	str	r3, [r6, #0]
 80066e0:	2000      	movs	r0, #0
 80066e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067bc <_malloc_r+0xfc>
 80066ea:	f000 f869 	bl	80067c0 <__malloc_lock>
 80066ee:	f8d8 3000 	ldr.w	r3, [r8]
 80066f2:	461c      	mov	r4, r3
 80066f4:	bb44      	cbnz	r4, 8006748 <_malloc_r+0x88>
 80066f6:	4629      	mov	r1, r5
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff ffbf 	bl	800667c <sbrk_aligned>
 80066fe:	1c43      	adds	r3, r0, #1
 8006700:	4604      	mov	r4, r0
 8006702:	d158      	bne.n	80067b6 <_malloc_r+0xf6>
 8006704:	f8d8 4000 	ldr.w	r4, [r8]
 8006708:	4627      	mov	r7, r4
 800670a:	2f00      	cmp	r7, #0
 800670c:	d143      	bne.n	8006796 <_malloc_r+0xd6>
 800670e:	2c00      	cmp	r4, #0
 8006710:	d04b      	beq.n	80067aa <_malloc_r+0xea>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	4639      	mov	r1, r7
 8006716:	4630      	mov	r0, r6
 8006718:	eb04 0903 	add.w	r9, r4, r3
 800671c:	f000 fe48 	bl	80073b0 <_sbrk_r>
 8006720:	4581      	cmp	r9, r0
 8006722:	d142      	bne.n	80067aa <_malloc_r+0xea>
 8006724:	6821      	ldr	r1, [r4, #0]
 8006726:	1a6d      	subs	r5, r5, r1
 8006728:	4629      	mov	r1, r5
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff ffa6 	bl	800667c <sbrk_aligned>
 8006730:	3001      	adds	r0, #1
 8006732:	d03a      	beq.n	80067aa <_malloc_r+0xea>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	442b      	add	r3, r5
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	f8d8 3000 	ldr.w	r3, [r8]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	bb62      	cbnz	r2, 800679c <_malloc_r+0xdc>
 8006742:	f8c8 7000 	str.w	r7, [r8]
 8006746:	e00f      	b.n	8006768 <_malloc_r+0xa8>
 8006748:	6822      	ldr	r2, [r4, #0]
 800674a:	1b52      	subs	r2, r2, r5
 800674c:	d420      	bmi.n	8006790 <_malloc_r+0xd0>
 800674e:	2a0b      	cmp	r2, #11
 8006750:	d917      	bls.n	8006782 <_malloc_r+0xc2>
 8006752:	1961      	adds	r1, r4, r5
 8006754:	42a3      	cmp	r3, r4
 8006756:	6025      	str	r5, [r4, #0]
 8006758:	bf18      	it	ne
 800675a:	6059      	strne	r1, [r3, #4]
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	bf08      	it	eq
 8006760:	f8c8 1000 	streq.w	r1, [r8]
 8006764:	5162      	str	r2, [r4, r5]
 8006766:	604b      	str	r3, [r1, #4]
 8006768:	4630      	mov	r0, r6
 800676a:	f000 f82f 	bl	80067cc <__malloc_unlock>
 800676e:	f104 000b 	add.w	r0, r4, #11
 8006772:	1d23      	adds	r3, r4, #4
 8006774:	f020 0007 	bic.w	r0, r0, #7
 8006778:	1ac2      	subs	r2, r0, r3
 800677a:	bf1c      	itt	ne
 800677c:	1a1b      	subne	r3, r3, r0
 800677e:	50a3      	strne	r3, [r4, r2]
 8006780:	e7af      	b.n	80066e2 <_malloc_r+0x22>
 8006782:	6862      	ldr	r2, [r4, #4]
 8006784:	42a3      	cmp	r3, r4
 8006786:	bf0c      	ite	eq
 8006788:	f8c8 2000 	streq.w	r2, [r8]
 800678c:	605a      	strne	r2, [r3, #4]
 800678e:	e7eb      	b.n	8006768 <_malloc_r+0xa8>
 8006790:	4623      	mov	r3, r4
 8006792:	6864      	ldr	r4, [r4, #4]
 8006794:	e7ae      	b.n	80066f4 <_malloc_r+0x34>
 8006796:	463c      	mov	r4, r7
 8006798:	687f      	ldr	r7, [r7, #4]
 800679a:	e7b6      	b.n	800670a <_malloc_r+0x4a>
 800679c:	461a      	mov	r2, r3
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	d1fb      	bne.n	800679c <_malloc_r+0xdc>
 80067a4:	2300      	movs	r3, #0
 80067a6:	6053      	str	r3, [r2, #4]
 80067a8:	e7de      	b.n	8006768 <_malloc_r+0xa8>
 80067aa:	230c      	movs	r3, #12
 80067ac:	6033      	str	r3, [r6, #0]
 80067ae:	4630      	mov	r0, r6
 80067b0:	f000 f80c 	bl	80067cc <__malloc_unlock>
 80067b4:	e794      	b.n	80066e0 <_malloc_r+0x20>
 80067b6:	6005      	str	r5, [r0, #0]
 80067b8:	e7d6      	b.n	8006768 <_malloc_r+0xa8>
 80067ba:	bf00      	nop
 80067bc:	200003dc 	.word	0x200003dc

080067c0 <__malloc_lock>:
 80067c0:	4801      	ldr	r0, [pc, #4]	@ (80067c8 <__malloc_lock+0x8>)
 80067c2:	f7ff b8ae 	b.w	8005922 <__retarget_lock_acquire_recursive>
 80067c6:	bf00      	nop
 80067c8:	200003d4 	.word	0x200003d4

080067cc <__malloc_unlock>:
 80067cc:	4801      	ldr	r0, [pc, #4]	@ (80067d4 <__malloc_unlock+0x8>)
 80067ce:	f7ff b8a9 	b.w	8005924 <__retarget_lock_release_recursive>
 80067d2:	bf00      	nop
 80067d4:	200003d4 	.word	0x200003d4

080067d8 <_Balloc>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	69c6      	ldr	r6, [r0, #28]
 80067dc:	4604      	mov	r4, r0
 80067de:	460d      	mov	r5, r1
 80067e0:	b976      	cbnz	r6, 8006800 <_Balloc+0x28>
 80067e2:	2010      	movs	r0, #16
 80067e4:	f7ff ff42 	bl	800666c <malloc>
 80067e8:	4602      	mov	r2, r0
 80067ea:	61e0      	str	r0, [r4, #28]
 80067ec:	b920      	cbnz	r0, 80067f8 <_Balloc+0x20>
 80067ee:	4b18      	ldr	r3, [pc, #96]	@ (8006850 <_Balloc+0x78>)
 80067f0:	4818      	ldr	r0, [pc, #96]	@ (8006854 <_Balloc+0x7c>)
 80067f2:	216b      	movs	r1, #107	@ 0x6b
 80067f4:	f000 fdfa 	bl	80073ec <__assert_func>
 80067f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067fc:	6006      	str	r6, [r0, #0]
 80067fe:	60c6      	str	r6, [r0, #12]
 8006800:	69e6      	ldr	r6, [r4, #28]
 8006802:	68f3      	ldr	r3, [r6, #12]
 8006804:	b183      	cbz	r3, 8006828 <_Balloc+0x50>
 8006806:	69e3      	ldr	r3, [r4, #28]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800680e:	b9b8      	cbnz	r0, 8006840 <_Balloc+0x68>
 8006810:	2101      	movs	r1, #1
 8006812:	fa01 f605 	lsl.w	r6, r1, r5
 8006816:	1d72      	adds	r2, r6, #5
 8006818:	0092      	lsls	r2, r2, #2
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fe04 	bl	8007428 <_calloc_r>
 8006820:	b160      	cbz	r0, 800683c <_Balloc+0x64>
 8006822:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006826:	e00e      	b.n	8006846 <_Balloc+0x6e>
 8006828:	2221      	movs	r2, #33	@ 0x21
 800682a:	2104      	movs	r1, #4
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fdfb 	bl	8007428 <_calloc_r>
 8006832:	69e3      	ldr	r3, [r4, #28]
 8006834:	60f0      	str	r0, [r6, #12]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e4      	bne.n	8006806 <_Balloc+0x2e>
 800683c:	2000      	movs	r0, #0
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	6802      	ldr	r2, [r0, #0]
 8006842:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006846:	2300      	movs	r3, #0
 8006848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800684c:	e7f7      	b.n	800683e <_Balloc+0x66>
 800684e:	bf00      	nop
 8006850:	08007ed5 	.word	0x08007ed5
 8006854:	08007f55 	.word	0x08007f55

08006858 <_Bfree>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	69c6      	ldr	r6, [r0, #28]
 800685c:	4605      	mov	r5, r0
 800685e:	460c      	mov	r4, r1
 8006860:	b976      	cbnz	r6, 8006880 <_Bfree+0x28>
 8006862:	2010      	movs	r0, #16
 8006864:	f7ff ff02 	bl	800666c <malloc>
 8006868:	4602      	mov	r2, r0
 800686a:	61e8      	str	r0, [r5, #28]
 800686c:	b920      	cbnz	r0, 8006878 <_Bfree+0x20>
 800686e:	4b09      	ldr	r3, [pc, #36]	@ (8006894 <_Bfree+0x3c>)
 8006870:	4809      	ldr	r0, [pc, #36]	@ (8006898 <_Bfree+0x40>)
 8006872:	218f      	movs	r1, #143	@ 0x8f
 8006874:	f000 fdba 	bl	80073ec <__assert_func>
 8006878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800687c:	6006      	str	r6, [r0, #0]
 800687e:	60c6      	str	r6, [r0, #12]
 8006880:	b13c      	cbz	r4, 8006892 <_Bfree+0x3a>
 8006882:	69eb      	ldr	r3, [r5, #28]
 8006884:	6862      	ldr	r2, [r4, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800688c:	6021      	str	r1, [r4, #0]
 800688e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	08007ed5 	.word	0x08007ed5
 8006898:	08007f55 	.word	0x08007f55

0800689c <__multadd>:
 800689c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a0:	690d      	ldr	r5, [r1, #16]
 80068a2:	4607      	mov	r7, r0
 80068a4:	460c      	mov	r4, r1
 80068a6:	461e      	mov	r6, r3
 80068a8:	f101 0c14 	add.w	ip, r1, #20
 80068ac:	2000      	movs	r0, #0
 80068ae:	f8dc 3000 	ldr.w	r3, [ip]
 80068b2:	b299      	uxth	r1, r3
 80068b4:	fb02 6101 	mla	r1, r2, r1, r6
 80068b8:	0c1e      	lsrs	r6, r3, #16
 80068ba:	0c0b      	lsrs	r3, r1, #16
 80068bc:	fb02 3306 	mla	r3, r2, r6, r3
 80068c0:	b289      	uxth	r1, r1
 80068c2:	3001      	adds	r0, #1
 80068c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068c8:	4285      	cmp	r5, r0
 80068ca:	f84c 1b04 	str.w	r1, [ip], #4
 80068ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068d2:	dcec      	bgt.n	80068ae <__multadd+0x12>
 80068d4:	b30e      	cbz	r6, 800691a <__multadd+0x7e>
 80068d6:	68a3      	ldr	r3, [r4, #8]
 80068d8:	42ab      	cmp	r3, r5
 80068da:	dc19      	bgt.n	8006910 <__multadd+0x74>
 80068dc:	6861      	ldr	r1, [r4, #4]
 80068de:	4638      	mov	r0, r7
 80068e0:	3101      	adds	r1, #1
 80068e2:	f7ff ff79 	bl	80067d8 <_Balloc>
 80068e6:	4680      	mov	r8, r0
 80068e8:	b928      	cbnz	r0, 80068f6 <__multadd+0x5a>
 80068ea:	4602      	mov	r2, r0
 80068ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006920 <__multadd+0x84>)
 80068ee:	480d      	ldr	r0, [pc, #52]	@ (8006924 <__multadd+0x88>)
 80068f0:	21ba      	movs	r1, #186	@ 0xba
 80068f2:	f000 fd7b 	bl	80073ec <__assert_func>
 80068f6:	6922      	ldr	r2, [r4, #16]
 80068f8:	3202      	adds	r2, #2
 80068fa:	f104 010c 	add.w	r1, r4, #12
 80068fe:	0092      	lsls	r2, r2, #2
 8006900:	300c      	adds	r0, #12
 8006902:	f000 fd65 	bl	80073d0 <memcpy>
 8006906:	4621      	mov	r1, r4
 8006908:	4638      	mov	r0, r7
 800690a:	f7ff ffa5 	bl	8006858 <_Bfree>
 800690e:	4644      	mov	r4, r8
 8006910:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006914:	3501      	adds	r5, #1
 8006916:	615e      	str	r6, [r3, #20]
 8006918:	6125      	str	r5, [r4, #16]
 800691a:	4620      	mov	r0, r4
 800691c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006920:	08007f44 	.word	0x08007f44
 8006924:	08007f55 	.word	0x08007f55

08006928 <__hi0bits>:
 8006928:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800692c:	4603      	mov	r3, r0
 800692e:	bf36      	itet	cc
 8006930:	0403      	lslcc	r3, r0, #16
 8006932:	2000      	movcs	r0, #0
 8006934:	2010      	movcc	r0, #16
 8006936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800693a:	bf3c      	itt	cc
 800693c:	021b      	lslcc	r3, r3, #8
 800693e:	3008      	addcc	r0, #8
 8006940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006944:	bf3c      	itt	cc
 8006946:	011b      	lslcc	r3, r3, #4
 8006948:	3004      	addcc	r0, #4
 800694a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694e:	bf3c      	itt	cc
 8006950:	009b      	lslcc	r3, r3, #2
 8006952:	3002      	addcc	r0, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	db05      	blt.n	8006964 <__hi0bits+0x3c>
 8006958:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800695c:	f100 0001 	add.w	r0, r0, #1
 8006960:	bf08      	it	eq
 8006962:	2020      	moveq	r0, #32
 8006964:	4770      	bx	lr

08006966 <__lo0bits>:
 8006966:	6803      	ldr	r3, [r0, #0]
 8006968:	4602      	mov	r2, r0
 800696a:	f013 0007 	ands.w	r0, r3, #7
 800696e:	d00b      	beq.n	8006988 <__lo0bits+0x22>
 8006970:	07d9      	lsls	r1, r3, #31
 8006972:	d421      	bmi.n	80069b8 <__lo0bits+0x52>
 8006974:	0798      	lsls	r0, r3, #30
 8006976:	bf49      	itett	mi
 8006978:	085b      	lsrmi	r3, r3, #1
 800697a:	089b      	lsrpl	r3, r3, #2
 800697c:	2001      	movmi	r0, #1
 800697e:	6013      	strmi	r3, [r2, #0]
 8006980:	bf5c      	itt	pl
 8006982:	6013      	strpl	r3, [r2, #0]
 8006984:	2002      	movpl	r0, #2
 8006986:	4770      	bx	lr
 8006988:	b299      	uxth	r1, r3
 800698a:	b909      	cbnz	r1, 8006990 <__lo0bits+0x2a>
 800698c:	0c1b      	lsrs	r3, r3, #16
 800698e:	2010      	movs	r0, #16
 8006990:	b2d9      	uxtb	r1, r3
 8006992:	b909      	cbnz	r1, 8006998 <__lo0bits+0x32>
 8006994:	3008      	adds	r0, #8
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	0719      	lsls	r1, r3, #28
 800699a:	bf04      	itt	eq
 800699c:	091b      	lsreq	r3, r3, #4
 800699e:	3004      	addeq	r0, #4
 80069a0:	0799      	lsls	r1, r3, #30
 80069a2:	bf04      	itt	eq
 80069a4:	089b      	lsreq	r3, r3, #2
 80069a6:	3002      	addeq	r0, #2
 80069a8:	07d9      	lsls	r1, r3, #31
 80069aa:	d403      	bmi.n	80069b4 <__lo0bits+0x4e>
 80069ac:	085b      	lsrs	r3, r3, #1
 80069ae:	f100 0001 	add.w	r0, r0, #1
 80069b2:	d003      	beq.n	80069bc <__lo0bits+0x56>
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	4770      	bx	lr
 80069b8:	2000      	movs	r0, #0
 80069ba:	4770      	bx	lr
 80069bc:	2020      	movs	r0, #32
 80069be:	4770      	bx	lr

080069c0 <__i2b>:
 80069c0:	b510      	push	{r4, lr}
 80069c2:	460c      	mov	r4, r1
 80069c4:	2101      	movs	r1, #1
 80069c6:	f7ff ff07 	bl	80067d8 <_Balloc>
 80069ca:	4602      	mov	r2, r0
 80069cc:	b928      	cbnz	r0, 80069da <__i2b+0x1a>
 80069ce:	4b05      	ldr	r3, [pc, #20]	@ (80069e4 <__i2b+0x24>)
 80069d0:	4805      	ldr	r0, [pc, #20]	@ (80069e8 <__i2b+0x28>)
 80069d2:	f240 1145 	movw	r1, #325	@ 0x145
 80069d6:	f000 fd09 	bl	80073ec <__assert_func>
 80069da:	2301      	movs	r3, #1
 80069dc:	6144      	str	r4, [r0, #20]
 80069de:	6103      	str	r3, [r0, #16]
 80069e0:	bd10      	pop	{r4, pc}
 80069e2:	bf00      	nop
 80069e4:	08007f44 	.word	0x08007f44
 80069e8:	08007f55 	.word	0x08007f55

080069ec <__multiply>:
 80069ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	4617      	mov	r7, r2
 80069f2:	690a      	ldr	r2, [r1, #16]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	bfa8      	it	ge
 80069fa:	463b      	movge	r3, r7
 80069fc:	4689      	mov	r9, r1
 80069fe:	bfa4      	itt	ge
 8006a00:	460f      	movge	r7, r1
 8006a02:	4699      	movge	r9, r3
 8006a04:	693d      	ldr	r5, [r7, #16]
 8006a06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	eb05 060a 	add.w	r6, r5, sl
 8006a12:	42b3      	cmp	r3, r6
 8006a14:	b085      	sub	sp, #20
 8006a16:	bfb8      	it	lt
 8006a18:	3101      	addlt	r1, #1
 8006a1a:	f7ff fedd 	bl	80067d8 <_Balloc>
 8006a1e:	b930      	cbnz	r0, 8006a2e <__multiply+0x42>
 8006a20:	4602      	mov	r2, r0
 8006a22:	4b41      	ldr	r3, [pc, #260]	@ (8006b28 <__multiply+0x13c>)
 8006a24:	4841      	ldr	r0, [pc, #260]	@ (8006b2c <__multiply+0x140>)
 8006a26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a2a:	f000 fcdf 	bl	80073ec <__assert_func>
 8006a2e:	f100 0414 	add.w	r4, r0, #20
 8006a32:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006a36:	4623      	mov	r3, r4
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4573      	cmp	r3, lr
 8006a3c:	d320      	bcc.n	8006a80 <__multiply+0x94>
 8006a3e:	f107 0814 	add.w	r8, r7, #20
 8006a42:	f109 0114 	add.w	r1, r9, #20
 8006a46:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006a4a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006a4e:	9302      	str	r3, [sp, #8]
 8006a50:	1beb      	subs	r3, r5, r7
 8006a52:	3b15      	subs	r3, #21
 8006a54:	f023 0303 	bic.w	r3, r3, #3
 8006a58:	3304      	adds	r3, #4
 8006a5a:	3715      	adds	r7, #21
 8006a5c:	42bd      	cmp	r5, r7
 8006a5e:	bf38      	it	cc
 8006a60:	2304      	movcc	r3, #4
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	9b02      	ldr	r3, [sp, #8]
 8006a66:	9103      	str	r1, [sp, #12]
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	d80c      	bhi.n	8006a86 <__multiply+0x9a>
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	dd03      	ble.n	8006a78 <__multiply+0x8c>
 8006a70:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d055      	beq.n	8006b24 <__multiply+0x138>
 8006a78:	6106      	str	r6, [r0, #16]
 8006a7a:	b005      	add	sp, #20
 8006a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a80:	f843 2b04 	str.w	r2, [r3], #4
 8006a84:	e7d9      	b.n	8006a3a <__multiply+0x4e>
 8006a86:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a8a:	f1ba 0f00 	cmp.w	sl, #0
 8006a8e:	d01f      	beq.n	8006ad0 <__multiply+0xe4>
 8006a90:	46c4      	mov	ip, r8
 8006a92:	46a1      	mov	r9, r4
 8006a94:	2700      	movs	r7, #0
 8006a96:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a9a:	f8d9 3000 	ldr.w	r3, [r9]
 8006a9e:	fa1f fb82 	uxth.w	fp, r2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	fb0a 330b 	mla	r3, sl, fp, r3
 8006aa8:	443b      	add	r3, r7
 8006aaa:	f8d9 7000 	ldr.w	r7, [r9]
 8006aae:	0c12      	lsrs	r2, r2, #16
 8006ab0:	0c3f      	lsrs	r7, r7, #16
 8006ab2:	fb0a 7202 	mla	r2, sl, r2, r7
 8006ab6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ac0:	4565      	cmp	r5, ip
 8006ac2:	f849 3b04 	str.w	r3, [r9], #4
 8006ac6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006aca:	d8e4      	bhi.n	8006a96 <__multiply+0xaa>
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	50e7      	str	r7, [r4, r3]
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006ad6:	3104      	adds	r1, #4
 8006ad8:	f1b9 0f00 	cmp.w	r9, #0
 8006adc:	d020      	beq.n	8006b20 <__multiply+0x134>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	4647      	mov	r7, r8
 8006ae2:	46a4      	mov	ip, r4
 8006ae4:	f04f 0a00 	mov.w	sl, #0
 8006ae8:	f8b7 b000 	ldrh.w	fp, [r7]
 8006aec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006af0:	fb09 220b 	mla	r2, r9, fp, r2
 8006af4:	4452      	add	r2, sl
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006afc:	f84c 3b04 	str.w	r3, [ip], #4
 8006b00:	f857 3b04 	ldr.w	r3, [r7], #4
 8006b04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b08:	f8bc 3000 	ldrh.w	r3, [ip]
 8006b0c:	fb09 330a 	mla	r3, r9, sl, r3
 8006b10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006b14:	42bd      	cmp	r5, r7
 8006b16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b1a:	d8e5      	bhi.n	8006ae8 <__multiply+0xfc>
 8006b1c:	9a01      	ldr	r2, [sp, #4]
 8006b1e:	50a3      	str	r3, [r4, r2]
 8006b20:	3404      	adds	r4, #4
 8006b22:	e79f      	b.n	8006a64 <__multiply+0x78>
 8006b24:	3e01      	subs	r6, #1
 8006b26:	e7a1      	b.n	8006a6c <__multiply+0x80>
 8006b28:	08007f44 	.word	0x08007f44
 8006b2c:	08007f55 	.word	0x08007f55

08006b30 <__pow5mult>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	4615      	mov	r5, r2
 8006b36:	f012 0203 	ands.w	r2, r2, #3
 8006b3a:	4607      	mov	r7, r0
 8006b3c:	460e      	mov	r6, r1
 8006b3e:	d007      	beq.n	8006b50 <__pow5mult+0x20>
 8006b40:	4c25      	ldr	r4, [pc, #148]	@ (8006bd8 <__pow5mult+0xa8>)
 8006b42:	3a01      	subs	r2, #1
 8006b44:	2300      	movs	r3, #0
 8006b46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b4a:	f7ff fea7 	bl	800689c <__multadd>
 8006b4e:	4606      	mov	r6, r0
 8006b50:	10ad      	asrs	r5, r5, #2
 8006b52:	d03d      	beq.n	8006bd0 <__pow5mult+0xa0>
 8006b54:	69fc      	ldr	r4, [r7, #28]
 8006b56:	b97c      	cbnz	r4, 8006b78 <__pow5mult+0x48>
 8006b58:	2010      	movs	r0, #16
 8006b5a:	f7ff fd87 	bl	800666c <malloc>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	61f8      	str	r0, [r7, #28]
 8006b62:	b928      	cbnz	r0, 8006b70 <__pow5mult+0x40>
 8006b64:	4b1d      	ldr	r3, [pc, #116]	@ (8006bdc <__pow5mult+0xac>)
 8006b66:	481e      	ldr	r0, [pc, #120]	@ (8006be0 <__pow5mult+0xb0>)
 8006b68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b6c:	f000 fc3e 	bl	80073ec <__assert_func>
 8006b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b74:	6004      	str	r4, [r0, #0]
 8006b76:	60c4      	str	r4, [r0, #12]
 8006b78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b80:	b94c      	cbnz	r4, 8006b96 <__pow5mult+0x66>
 8006b82:	f240 2171 	movw	r1, #625	@ 0x271
 8006b86:	4638      	mov	r0, r7
 8006b88:	f7ff ff1a 	bl	80069c0 <__i2b>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b92:	4604      	mov	r4, r0
 8006b94:	6003      	str	r3, [r0, #0]
 8006b96:	f04f 0900 	mov.w	r9, #0
 8006b9a:	07eb      	lsls	r3, r5, #31
 8006b9c:	d50a      	bpl.n	8006bb4 <__pow5mult+0x84>
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	f7ff ff22 	bl	80069ec <__multiply>
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4680      	mov	r8, r0
 8006bac:	4638      	mov	r0, r7
 8006bae:	f7ff fe53 	bl	8006858 <_Bfree>
 8006bb2:	4646      	mov	r6, r8
 8006bb4:	106d      	asrs	r5, r5, #1
 8006bb6:	d00b      	beq.n	8006bd0 <__pow5mult+0xa0>
 8006bb8:	6820      	ldr	r0, [r4, #0]
 8006bba:	b938      	cbnz	r0, 8006bcc <__pow5mult+0x9c>
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f7ff ff13 	bl	80069ec <__multiply>
 8006bc6:	6020      	str	r0, [r4, #0]
 8006bc8:	f8c0 9000 	str.w	r9, [r0]
 8006bcc:	4604      	mov	r4, r0
 8006bce:	e7e4      	b.n	8006b9a <__pow5mult+0x6a>
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd6:	bf00      	nop
 8006bd8:	08008008 	.word	0x08008008
 8006bdc:	08007ed5 	.word	0x08007ed5
 8006be0:	08007f55 	.word	0x08007f55

08006be4 <__lshift>:
 8006be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be8:	460c      	mov	r4, r1
 8006bea:	6849      	ldr	r1, [r1, #4]
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	4691      	mov	r9, r2
 8006bf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bfc:	f108 0601 	add.w	r6, r8, #1
 8006c00:	42b3      	cmp	r3, r6
 8006c02:	db0b      	blt.n	8006c1c <__lshift+0x38>
 8006c04:	4638      	mov	r0, r7
 8006c06:	f7ff fde7 	bl	80067d8 <_Balloc>
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	b948      	cbnz	r0, 8006c22 <__lshift+0x3e>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	4b28      	ldr	r3, [pc, #160]	@ (8006cb4 <__lshift+0xd0>)
 8006c12:	4829      	ldr	r0, [pc, #164]	@ (8006cb8 <__lshift+0xd4>)
 8006c14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c18:	f000 fbe8 	bl	80073ec <__assert_func>
 8006c1c:	3101      	adds	r1, #1
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	e7ee      	b.n	8006c00 <__lshift+0x1c>
 8006c22:	2300      	movs	r3, #0
 8006c24:	f100 0114 	add.w	r1, r0, #20
 8006c28:	f100 0210 	add.w	r2, r0, #16
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	4553      	cmp	r3, sl
 8006c30:	db33      	blt.n	8006c9a <__lshift+0xb6>
 8006c32:	6920      	ldr	r0, [r4, #16]
 8006c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c38:	f104 0314 	add.w	r3, r4, #20
 8006c3c:	f019 091f 	ands.w	r9, r9, #31
 8006c40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c48:	d02b      	beq.n	8006ca2 <__lshift+0xbe>
 8006c4a:	f1c9 0e20 	rsb	lr, r9, #32
 8006c4e:	468a      	mov	sl, r1
 8006c50:	2200      	movs	r2, #0
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	fa00 f009 	lsl.w	r0, r0, r9
 8006c58:	4310      	orrs	r0, r2
 8006c5a:	f84a 0b04 	str.w	r0, [sl], #4
 8006c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c62:	459c      	cmp	ip, r3
 8006c64:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c68:	d8f3      	bhi.n	8006c52 <__lshift+0x6e>
 8006c6a:	ebac 0304 	sub.w	r3, ip, r4
 8006c6e:	3b15      	subs	r3, #21
 8006c70:	f023 0303 	bic.w	r3, r3, #3
 8006c74:	3304      	adds	r3, #4
 8006c76:	f104 0015 	add.w	r0, r4, #21
 8006c7a:	4560      	cmp	r0, ip
 8006c7c:	bf88      	it	hi
 8006c7e:	2304      	movhi	r3, #4
 8006c80:	50ca      	str	r2, [r1, r3]
 8006c82:	b10a      	cbz	r2, 8006c88 <__lshift+0xa4>
 8006c84:	f108 0602 	add.w	r6, r8, #2
 8006c88:	3e01      	subs	r6, #1
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	612e      	str	r6, [r5, #16]
 8006c8e:	4621      	mov	r1, r4
 8006c90:	f7ff fde2 	bl	8006858 <_Bfree>
 8006c94:	4628      	mov	r0, r5
 8006c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	e7c5      	b.n	8006c2e <__lshift+0x4a>
 8006ca2:	3904      	subs	r1, #4
 8006ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006cac:	459c      	cmp	ip, r3
 8006cae:	d8f9      	bhi.n	8006ca4 <__lshift+0xc0>
 8006cb0:	e7ea      	b.n	8006c88 <__lshift+0xa4>
 8006cb2:	bf00      	nop
 8006cb4:	08007f44 	.word	0x08007f44
 8006cb8:	08007f55 	.word	0x08007f55

08006cbc <__mcmp>:
 8006cbc:	690a      	ldr	r2, [r1, #16]
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	6900      	ldr	r0, [r0, #16]
 8006cc2:	1a80      	subs	r0, r0, r2
 8006cc4:	b530      	push	{r4, r5, lr}
 8006cc6:	d10e      	bne.n	8006ce6 <__mcmp+0x2a>
 8006cc8:	3314      	adds	r3, #20
 8006cca:	3114      	adds	r1, #20
 8006ccc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006cd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006cd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cdc:	4295      	cmp	r5, r2
 8006cde:	d003      	beq.n	8006ce8 <__mcmp+0x2c>
 8006ce0:	d205      	bcs.n	8006cee <__mcmp+0x32>
 8006ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce6:	bd30      	pop	{r4, r5, pc}
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	d3f3      	bcc.n	8006cd4 <__mcmp+0x18>
 8006cec:	e7fb      	b.n	8006ce6 <__mcmp+0x2a>
 8006cee:	2001      	movs	r0, #1
 8006cf0:	e7f9      	b.n	8006ce6 <__mcmp+0x2a>
	...

08006cf4 <__mdiff>:
 8006cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	4689      	mov	r9, r1
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	4648      	mov	r0, r9
 8006d00:	4614      	mov	r4, r2
 8006d02:	f7ff ffdb 	bl	8006cbc <__mcmp>
 8006d06:	1e05      	subs	r5, r0, #0
 8006d08:	d112      	bne.n	8006d30 <__mdiff+0x3c>
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f7ff fd63 	bl	80067d8 <_Balloc>
 8006d12:	4602      	mov	r2, r0
 8006d14:	b928      	cbnz	r0, 8006d22 <__mdiff+0x2e>
 8006d16:	4b3f      	ldr	r3, [pc, #252]	@ (8006e14 <__mdiff+0x120>)
 8006d18:	f240 2137 	movw	r1, #567	@ 0x237
 8006d1c:	483e      	ldr	r0, [pc, #248]	@ (8006e18 <__mdiff+0x124>)
 8006d1e:	f000 fb65 	bl	80073ec <__assert_func>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d28:	4610      	mov	r0, r2
 8006d2a:	b003      	add	sp, #12
 8006d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d30:	bfbc      	itt	lt
 8006d32:	464b      	movlt	r3, r9
 8006d34:	46a1      	movlt	r9, r4
 8006d36:	4630      	mov	r0, r6
 8006d38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d3c:	bfba      	itte	lt
 8006d3e:	461c      	movlt	r4, r3
 8006d40:	2501      	movlt	r5, #1
 8006d42:	2500      	movge	r5, #0
 8006d44:	f7ff fd48 	bl	80067d8 <_Balloc>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	b918      	cbnz	r0, 8006d54 <__mdiff+0x60>
 8006d4c:	4b31      	ldr	r3, [pc, #196]	@ (8006e14 <__mdiff+0x120>)
 8006d4e:	f240 2145 	movw	r1, #581	@ 0x245
 8006d52:	e7e3      	b.n	8006d1c <__mdiff+0x28>
 8006d54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d58:	6926      	ldr	r6, [r4, #16]
 8006d5a:	60c5      	str	r5, [r0, #12]
 8006d5c:	f109 0310 	add.w	r3, r9, #16
 8006d60:	f109 0514 	add.w	r5, r9, #20
 8006d64:	f104 0e14 	add.w	lr, r4, #20
 8006d68:	f100 0b14 	add.w	fp, r0, #20
 8006d6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	46d9      	mov	r9, fp
 8006d78:	f04f 0c00 	mov.w	ip, #0
 8006d7c:	9b01      	ldr	r3, [sp, #4]
 8006d7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	fa1f f38a 	uxth.w	r3, sl
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	b283      	uxth	r3, r0
 8006d90:	1acb      	subs	r3, r1, r3
 8006d92:	0c00      	lsrs	r0, r0, #16
 8006d94:	4463      	add	r3, ip
 8006d96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006da4:	4576      	cmp	r6, lr
 8006da6:	f849 3b04 	str.w	r3, [r9], #4
 8006daa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006dae:	d8e5      	bhi.n	8006d7c <__mdiff+0x88>
 8006db0:	1b33      	subs	r3, r6, r4
 8006db2:	3b15      	subs	r3, #21
 8006db4:	f023 0303 	bic.w	r3, r3, #3
 8006db8:	3415      	adds	r4, #21
 8006dba:	3304      	adds	r3, #4
 8006dbc:	42a6      	cmp	r6, r4
 8006dbe:	bf38      	it	cc
 8006dc0:	2304      	movcc	r3, #4
 8006dc2:	441d      	add	r5, r3
 8006dc4:	445b      	add	r3, fp
 8006dc6:	461e      	mov	r6, r3
 8006dc8:	462c      	mov	r4, r5
 8006dca:	4544      	cmp	r4, r8
 8006dcc:	d30e      	bcc.n	8006dec <__mdiff+0xf8>
 8006dce:	f108 0103 	add.w	r1, r8, #3
 8006dd2:	1b49      	subs	r1, r1, r5
 8006dd4:	f021 0103 	bic.w	r1, r1, #3
 8006dd8:	3d03      	subs	r5, #3
 8006dda:	45a8      	cmp	r8, r5
 8006ddc:	bf38      	it	cc
 8006dde:	2100      	movcc	r1, #0
 8006de0:	440b      	add	r3, r1
 8006de2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006de6:	b191      	cbz	r1, 8006e0e <__mdiff+0x11a>
 8006de8:	6117      	str	r7, [r2, #16]
 8006dea:	e79d      	b.n	8006d28 <__mdiff+0x34>
 8006dec:	f854 1b04 	ldr.w	r1, [r4], #4
 8006df0:	46e6      	mov	lr, ip
 8006df2:	0c08      	lsrs	r0, r1, #16
 8006df4:	fa1c fc81 	uxtah	ip, ip, r1
 8006df8:	4471      	add	r1, lr
 8006dfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006dfe:	b289      	uxth	r1, r1
 8006e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e04:	f846 1b04 	str.w	r1, [r6], #4
 8006e08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e0c:	e7dd      	b.n	8006dca <__mdiff+0xd6>
 8006e0e:	3f01      	subs	r7, #1
 8006e10:	e7e7      	b.n	8006de2 <__mdiff+0xee>
 8006e12:	bf00      	nop
 8006e14:	08007f44 	.word	0x08007f44
 8006e18:	08007f55 	.word	0x08007f55

08006e1c <__d2b>:
 8006e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e20:	460f      	mov	r7, r1
 8006e22:	2101      	movs	r1, #1
 8006e24:	ec59 8b10 	vmov	r8, r9, d0
 8006e28:	4616      	mov	r6, r2
 8006e2a:	f7ff fcd5 	bl	80067d8 <_Balloc>
 8006e2e:	4604      	mov	r4, r0
 8006e30:	b930      	cbnz	r0, 8006e40 <__d2b+0x24>
 8006e32:	4602      	mov	r2, r0
 8006e34:	4b23      	ldr	r3, [pc, #140]	@ (8006ec4 <__d2b+0xa8>)
 8006e36:	4824      	ldr	r0, [pc, #144]	@ (8006ec8 <__d2b+0xac>)
 8006e38:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e3c:	f000 fad6 	bl	80073ec <__assert_func>
 8006e40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e48:	b10d      	cbz	r5, 8006e4e <__d2b+0x32>
 8006e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	f1b8 0300 	subs.w	r3, r8, #0
 8006e54:	d023      	beq.n	8006e9e <__d2b+0x82>
 8006e56:	4668      	mov	r0, sp
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	f7ff fd84 	bl	8006966 <__lo0bits>
 8006e5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e62:	b1d0      	cbz	r0, 8006e9a <__d2b+0x7e>
 8006e64:	f1c0 0320 	rsb	r3, r0, #32
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	40c2      	lsrs	r2, r0
 8006e70:	6163      	str	r3, [r4, #20]
 8006e72:	9201      	str	r2, [sp, #4]
 8006e74:	9b01      	ldr	r3, [sp, #4]
 8006e76:	61a3      	str	r3, [r4, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2201      	moveq	r2, #1
 8006e7e:	2202      	movne	r2, #2
 8006e80:	6122      	str	r2, [r4, #16]
 8006e82:	b1a5      	cbz	r5, 8006eae <__d2b+0x92>
 8006e84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e88:	4405      	add	r5, r0
 8006e8a:	603d      	str	r5, [r7, #0]
 8006e8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e90:	6030      	str	r0, [r6, #0]
 8006e92:	4620      	mov	r0, r4
 8006e94:	b003      	add	sp, #12
 8006e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e9a:	6161      	str	r1, [r4, #20]
 8006e9c:	e7ea      	b.n	8006e74 <__d2b+0x58>
 8006e9e:	a801      	add	r0, sp, #4
 8006ea0:	f7ff fd61 	bl	8006966 <__lo0bits>
 8006ea4:	9b01      	ldr	r3, [sp, #4]
 8006ea6:	6163      	str	r3, [r4, #20]
 8006ea8:	3020      	adds	r0, #32
 8006eaa:	2201      	movs	r2, #1
 8006eac:	e7e8      	b.n	8006e80 <__d2b+0x64>
 8006eae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006eb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006eb6:	6038      	str	r0, [r7, #0]
 8006eb8:	6918      	ldr	r0, [r3, #16]
 8006eba:	f7ff fd35 	bl	8006928 <__hi0bits>
 8006ebe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ec2:	e7e5      	b.n	8006e90 <__d2b+0x74>
 8006ec4:	08007f44 	.word	0x08007f44
 8006ec8:	08007f55 	.word	0x08007f55

08006ecc <__sfputc_r>:
 8006ecc:	6893      	ldr	r3, [r2, #8]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	b410      	push	{r4}
 8006ed4:	6093      	str	r3, [r2, #8]
 8006ed6:	da08      	bge.n	8006eea <__sfputc_r+0x1e>
 8006ed8:	6994      	ldr	r4, [r2, #24]
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	db01      	blt.n	8006ee2 <__sfputc_r+0x16>
 8006ede:	290a      	cmp	r1, #10
 8006ee0:	d103      	bne.n	8006eea <__sfputc_r+0x1e>
 8006ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee6:	f7fe bc0a 	b.w	80056fe <__swbuf_r>
 8006eea:	6813      	ldr	r3, [r2, #0]
 8006eec:	1c58      	adds	r0, r3, #1
 8006eee:	6010      	str	r0, [r2, #0]
 8006ef0:	7019      	strb	r1, [r3, #0]
 8006ef2:	4608      	mov	r0, r1
 8006ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <__sfputs_r>:
 8006efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efc:	4606      	mov	r6, r0
 8006efe:	460f      	mov	r7, r1
 8006f00:	4614      	mov	r4, r2
 8006f02:	18d5      	adds	r5, r2, r3
 8006f04:	42ac      	cmp	r4, r5
 8006f06:	d101      	bne.n	8006f0c <__sfputs_r+0x12>
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e007      	b.n	8006f1c <__sfputs_r+0x22>
 8006f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f10:	463a      	mov	r2, r7
 8006f12:	4630      	mov	r0, r6
 8006f14:	f7ff ffda 	bl	8006ecc <__sfputc_r>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d1f3      	bne.n	8006f04 <__sfputs_r+0xa>
 8006f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f20 <_vfiprintf_r>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	460d      	mov	r5, r1
 8006f26:	b09d      	sub	sp, #116	@ 0x74
 8006f28:	4614      	mov	r4, r2
 8006f2a:	4698      	mov	r8, r3
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	b118      	cbz	r0, 8006f38 <_vfiprintf_r+0x18>
 8006f30:	6a03      	ldr	r3, [r0, #32]
 8006f32:	b90b      	cbnz	r3, 8006f38 <_vfiprintf_r+0x18>
 8006f34:	f7fe fafa 	bl	800552c <__sinit>
 8006f38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f3a:	07d9      	lsls	r1, r3, #31
 8006f3c:	d405      	bmi.n	8006f4a <_vfiprintf_r+0x2a>
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	059a      	lsls	r2, r3, #22
 8006f42:	d402      	bmi.n	8006f4a <_vfiprintf_r+0x2a>
 8006f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f46:	f7fe fcec 	bl	8005922 <__retarget_lock_acquire_recursive>
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	071b      	lsls	r3, r3, #28
 8006f4e:	d501      	bpl.n	8006f54 <_vfiprintf_r+0x34>
 8006f50:	692b      	ldr	r3, [r5, #16]
 8006f52:	b99b      	cbnz	r3, 8006f7c <_vfiprintf_r+0x5c>
 8006f54:	4629      	mov	r1, r5
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7fe fc10 	bl	800577c <__swsetup_r>
 8006f5c:	b170      	cbz	r0, 8006f7c <_vfiprintf_r+0x5c>
 8006f5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f60:	07dc      	lsls	r4, r3, #31
 8006f62:	d504      	bpl.n	8006f6e <_vfiprintf_r+0x4e>
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	b01d      	add	sp, #116	@ 0x74
 8006f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6e:	89ab      	ldrh	r3, [r5, #12]
 8006f70:	0598      	lsls	r0, r3, #22
 8006f72:	d4f7      	bmi.n	8006f64 <_vfiprintf_r+0x44>
 8006f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f76:	f7fe fcd5 	bl	8005924 <__retarget_lock_release_recursive>
 8006f7a:	e7f3      	b.n	8006f64 <_vfiprintf_r+0x44>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f80:	2320      	movs	r3, #32
 8006f82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f8a:	2330      	movs	r3, #48	@ 0x30
 8006f8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800713c <_vfiprintf_r+0x21c>
 8006f90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f94:	f04f 0901 	mov.w	r9, #1
 8006f98:	4623      	mov	r3, r4
 8006f9a:	469a      	mov	sl, r3
 8006f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fa0:	b10a      	cbz	r2, 8006fa6 <_vfiprintf_r+0x86>
 8006fa2:	2a25      	cmp	r2, #37	@ 0x25
 8006fa4:	d1f9      	bne.n	8006f9a <_vfiprintf_r+0x7a>
 8006fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8006faa:	d00b      	beq.n	8006fc4 <_vfiprintf_r+0xa4>
 8006fac:	465b      	mov	r3, fp
 8006fae:	4622      	mov	r2, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f7ff ffa1 	bl	8006efa <__sfputs_r>
 8006fb8:	3001      	adds	r0, #1
 8006fba:	f000 80a7 	beq.w	800710c <_vfiprintf_r+0x1ec>
 8006fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fc0:	445a      	add	r2, fp
 8006fc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 809f 	beq.w	800710c <_vfiprintf_r+0x1ec>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fd8:	f10a 0a01 	add.w	sl, sl, #1
 8006fdc:	9304      	str	r3, [sp, #16]
 8006fde:	9307      	str	r3, [sp, #28]
 8006fe0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fe4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fe6:	4654      	mov	r4, sl
 8006fe8:	2205      	movs	r2, #5
 8006fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fee:	4853      	ldr	r0, [pc, #332]	@ (800713c <_vfiprintf_r+0x21c>)
 8006ff0:	f7f9 f8ee 	bl	80001d0 <memchr>
 8006ff4:	9a04      	ldr	r2, [sp, #16]
 8006ff6:	b9d8      	cbnz	r0, 8007030 <_vfiprintf_r+0x110>
 8006ff8:	06d1      	lsls	r1, r2, #27
 8006ffa:	bf44      	itt	mi
 8006ffc:	2320      	movmi	r3, #32
 8006ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007002:	0713      	lsls	r3, r2, #28
 8007004:	bf44      	itt	mi
 8007006:	232b      	movmi	r3, #43	@ 0x2b
 8007008:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800700c:	f89a 3000 	ldrb.w	r3, [sl]
 8007010:	2b2a      	cmp	r3, #42	@ 0x2a
 8007012:	d015      	beq.n	8007040 <_vfiprintf_r+0x120>
 8007014:	9a07      	ldr	r2, [sp, #28]
 8007016:	4654      	mov	r4, sl
 8007018:	2000      	movs	r0, #0
 800701a:	f04f 0c0a 	mov.w	ip, #10
 800701e:	4621      	mov	r1, r4
 8007020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007024:	3b30      	subs	r3, #48	@ 0x30
 8007026:	2b09      	cmp	r3, #9
 8007028:	d94b      	bls.n	80070c2 <_vfiprintf_r+0x1a2>
 800702a:	b1b0      	cbz	r0, 800705a <_vfiprintf_r+0x13a>
 800702c:	9207      	str	r2, [sp, #28]
 800702e:	e014      	b.n	800705a <_vfiprintf_r+0x13a>
 8007030:	eba0 0308 	sub.w	r3, r0, r8
 8007034:	fa09 f303 	lsl.w	r3, r9, r3
 8007038:	4313      	orrs	r3, r2
 800703a:	9304      	str	r3, [sp, #16]
 800703c:	46a2      	mov	sl, r4
 800703e:	e7d2      	b.n	8006fe6 <_vfiprintf_r+0xc6>
 8007040:	9b03      	ldr	r3, [sp, #12]
 8007042:	1d19      	adds	r1, r3, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	9103      	str	r1, [sp, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	bfbb      	ittet	lt
 800704c:	425b      	neglt	r3, r3
 800704e:	f042 0202 	orrlt.w	r2, r2, #2
 8007052:	9307      	strge	r3, [sp, #28]
 8007054:	9307      	strlt	r3, [sp, #28]
 8007056:	bfb8      	it	lt
 8007058:	9204      	strlt	r2, [sp, #16]
 800705a:	7823      	ldrb	r3, [r4, #0]
 800705c:	2b2e      	cmp	r3, #46	@ 0x2e
 800705e:	d10a      	bne.n	8007076 <_vfiprintf_r+0x156>
 8007060:	7863      	ldrb	r3, [r4, #1]
 8007062:	2b2a      	cmp	r3, #42	@ 0x2a
 8007064:	d132      	bne.n	80070cc <_vfiprintf_r+0x1ac>
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	1d1a      	adds	r2, r3, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	9203      	str	r2, [sp, #12]
 800706e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007072:	3402      	adds	r4, #2
 8007074:	9305      	str	r3, [sp, #20]
 8007076:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800714c <_vfiprintf_r+0x22c>
 800707a:	7821      	ldrb	r1, [r4, #0]
 800707c:	2203      	movs	r2, #3
 800707e:	4650      	mov	r0, sl
 8007080:	f7f9 f8a6 	bl	80001d0 <memchr>
 8007084:	b138      	cbz	r0, 8007096 <_vfiprintf_r+0x176>
 8007086:	9b04      	ldr	r3, [sp, #16]
 8007088:	eba0 000a 	sub.w	r0, r0, sl
 800708c:	2240      	movs	r2, #64	@ 0x40
 800708e:	4082      	lsls	r2, r0
 8007090:	4313      	orrs	r3, r2
 8007092:	3401      	adds	r4, #1
 8007094:	9304      	str	r3, [sp, #16]
 8007096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800709a:	4829      	ldr	r0, [pc, #164]	@ (8007140 <_vfiprintf_r+0x220>)
 800709c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070a0:	2206      	movs	r2, #6
 80070a2:	f7f9 f895 	bl	80001d0 <memchr>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d03f      	beq.n	800712a <_vfiprintf_r+0x20a>
 80070aa:	4b26      	ldr	r3, [pc, #152]	@ (8007144 <_vfiprintf_r+0x224>)
 80070ac:	bb1b      	cbnz	r3, 80070f6 <_vfiprintf_r+0x1d6>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	3307      	adds	r3, #7
 80070b2:	f023 0307 	bic.w	r3, r3, #7
 80070b6:	3308      	adds	r3, #8
 80070b8:	9303      	str	r3, [sp, #12]
 80070ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070bc:	443b      	add	r3, r7
 80070be:	9309      	str	r3, [sp, #36]	@ 0x24
 80070c0:	e76a      	b.n	8006f98 <_vfiprintf_r+0x78>
 80070c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80070c6:	460c      	mov	r4, r1
 80070c8:	2001      	movs	r0, #1
 80070ca:	e7a8      	b.n	800701e <_vfiprintf_r+0xfe>
 80070cc:	2300      	movs	r3, #0
 80070ce:	3401      	adds	r4, #1
 80070d0:	9305      	str	r3, [sp, #20]
 80070d2:	4619      	mov	r1, r3
 80070d4:	f04f 0c0a 	mov.w	ip, #10
 80070d8:	4620      	mov	r0, r4
 80070da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070de:	3a30      	subs	r2, #48	@ 0x30
 80070e0:	2a09      	cmp	r2, #9
 80070e2:	d903      	bls.n	80070ec <_vfiprintf_r+0x1cc>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0c6      	beq.n	8007076 <_vfiprintf_r+0x156>
 80070e8:	9105      	str	r1, [sp, #20]
 80070ea:	e7c4      	b.n	8007076 <_vfiprintf_r+0x156>
 80070ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80070f0:	4604      	mov	r4, r0
 80070f2:	2301      	movs	r3, #1
 80070f4:	e7f0      	b.n	80070d8 <_vfiprintf_r+0x1b8>
 80070f6:	ab03      	add	r3, sp, #12
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	462a      	mov	r2, r5
 80070fc:	4b12      	ldr	r3, [pc, #72]	@ (8007148 <_vfiprintf_r+0x228>)
 80070fe:	a904      	add	r1, sp, #16
 8007100:	4630      	mov	r0, r6
 8007102:	f7fd fdd1 	bl	8004ca8 <_printf_float>
 8007106:	4607      	mov	r7, r0
 8007108:	1c78      	adds	r0, r7, #1
 800710a:	d1d6      	bne.n	80070ba <_vfiprintf_r+0x19a>
 800710c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800710e:	07d9      	lsls	r1, r3, #31
 8007110:	d405      	bmi.n	800711e <_vfiprintf_r+0x1fe>
 8007112:	89ab      	ldrh	r3, [r5, #12]
 8007114:	059a      	lsls	r2, r3, #22
 8007116:	d402      	bmi.n	800711e <_vfiprintf_r+0x1fe>
 8007118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800711a:	f7fe fc03 	bl	8005924 <__retarget_lock_release_recursive>
 800711e:	89ab      	ldrh	r3, [r5, #12]
 8007120:	065b      	lsls	r3, r3, #25
 8007122:	f53f af1f 	bmi.w	8006f64 <_vfiprintf_r+0x44>
 8007126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007128:	e71e      	b.n	8006f68 <_vfiprintf_r+0x48>
 800712a:	ab03      	add	r3, sp, #12
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	462a      	mov	r2, r5
 8007130:	4b05      	ldr	r3, [pc, #20]	@ (8007148 <_vfiprintf_r+0x228>)
 8007132:	a904      	add	r1, sp, #16
 8007134:	4630      	mov	r0, r6
 8007136:	f7fe f84f 	bl	80051d8 <_printf_i>
 800713a:	e7e4      	b.n	8007106 <_vfiprintf_r+0x1e6>
 800713c:	08007fae 	.word	0x08007fae
 8007140:	08007fb8 	.word	0x08007fb8
 8007144:	08004ca9 	.word	0x08004ca9
 8007148:	08006efb 	.word	0x08006efb
 800714c:	08007fb4 	.word	0x08007fb4

08007150 <__sflush_r>:
 8007150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007158:	0716      	lsls	r6, r2, #28
 800715a:	4605      	mov	r5, r0
 800715c:	460c      	mov	r4, r1
 800715e:	d454      	bmi.n	800720a <__sflush_r+0xba>
 8007160:	684b      	ldr	r3, [r1, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	dc02      	bgt.n	800716c <__sflush_r+0x1c>
 8007166:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	dd48      	ble.n	80071fe <__sflush_r+0xae>
 800716c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800716e:	2e00      	cmp	r6, #0
 8007170:	d045      	beq.n	80071fe <__sflush_r+0xae>
 8007172:	2300      	movs	r3, #0
 8007174:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007178:	682f      	ldr	r7, [r5, #0]
 800717a:	6a21      	ldr	r1, [r4, #32]
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	d030      	beq.n	80071e2 <__sflush_r+0x92>
 8007180:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	0759      	lsls	r1, r3, #29
 8007186:	d505      	bpl.n	8007194 <__sflush_r+0x44>
 8007188:	6863      	ldr	r3, [r4, #4]
 800718a:	1ad2      	subs	r2, r2, r3
 800718c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800718e:	b10b      	cbz	r3, 8007194 <__sflush_r+0x44>
 8007190:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	2300      	movs	r3, #0
 8007196:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007198:	6a21      	ldr	r1, [r4, #32]
 800719a:	4628      	mov	r0, r5
 800719c:	47b0      	blx	r6
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	d106      	bne.n	80071b2 <__sflush_r+0x62>
 80071a4:	6829      	ldr	r1, [r5, #0]
 80071a6:	291d      	cmp	r1, #29
 80071a8:	d82b      	bhi.n	8007202 <__sflush_r+0xb2>
 80071aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007254 <__sflush_r+0x104>)
 80071ac:	40ca      	lsrs	r2, r1
 80071ae:	07d6      	lsls	r6, r2, #31
 80071b0:	d527      	bpl.n	8007202 <__sflush_r+0xb2>
 80071b2:	2200      	movs	r2, #0
 80071b4:	6062      	str	r2, [r4, #4]
 80071b6:	04d9      	lsls	r1, r3, #19
 80071b8:	6922      	ldr	r2, [r4, #16]
 80071ba:	6022      	str	r2, [r4, #0]
 80071bc:	d504      	bpl.n	80071c8 <__sflush_r+0x78>
 80071be:	1c42      	adds	r2, r0, #1
 80071c0:	d101      	bne.n	80071c6 <__sflush_r+0x76>
 80071c2:	682b      	ldr	r3, [r5, #0]
 80071c4:	b903      	cbnz	r3, 80071c8 <__sflush_r+0x78>
 80071c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80071c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071ca:	602f      	str	r7, [r5, #0]
 80071cc:	b1b9      	cbz	r1, 80071fe <__sflush_r+0xae>
 80071ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071d2:	4299      	cmp	r1, r3
 80071d4:	d002      	beq.n	80071dc <__sflush_r+0x8c>
 80071d6:	4628      	mov	r0, r5
 80071d8:	f7ff f9fe 	bl	80065d8 <_free_r>
 80071dc:	2300      	movs	r3, #0
 80071de:	6363      	str	r3, [r4, #52]	@ 0x34
 80071e0:	e00d      	b.n	80071fe <__sflush_r+0xae>
 80071e2:	2301      	movs	r3, #1
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b0      	blx	r6
 80071e8:	4602      	mov	r2, r0
 80071ea:	1c50      	adds	r0, r2, #1
 80071ec:	d1c9      	bne.n	8007182 <__sflush_r+0x32>
 80071ee:	682b      	ldr	r3, [r5, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0c6      	beq.n	8007182 <__sflush_r+0x32>
 80071f4:	2b1d      	cmp	r3, #29
 80071f6:	d001      	beq.n	80071fc <__sflush_r+0xac>
 80071f8:	2b16      	cmp	r3, #22
 80071fa:	d11e      	bne.n	800723a <__sflush_r+0xea>
 80071fc:	602f      	str	r7, [r5, #0]
 80071fe:	2000      	movs	r0, #0
 8007200:	e022      	b.n	8007248 <__sflush_r+0xf8>
 8007202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007206:	b21b      	sxth	r3, r3
 8007208:	e01b      	b.n	8007242 <__sflush_r+0xf2>
 800720a:	690f      	ldr	r7, [r1, #16]
 800720c:	2f00      	cmp	r7, #0
 800720e:	d0f6      	beq.n	80071fe <__sflush_r+0xae>
 8007210:	0793      	lsls	r3, r2, #30
 8007212:	680e      	ldr	r6, [r1, #0]
 8007214:	bf08      	it	eq
 8007216:	694b      	ldreq	r3, [r1, #20]
 8007218:	600f      	str	r7, [r1, #0]
 800721a:	bf18      	it	ne
 800721c:	2300      	movne	r3, #0
 800721e:	eba6 0807 	sub.w	r8, r6, r7
 8007222:	608b      	str	r3, [r1, #8]
 8007224:	f1b8 0f00 	cmp.w	r8, #0
 8007228:	dde9      	ble.n	80071fe <__sflush_r+0xae>
 800722a:	6a21      	ldr	r1, [r4, #32]
 800722c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800722e:	4643      	mov	r3, r8
 8007230:	463a      	mov	r2, r7
 8007232:	4628      	mov	r0, r5
 8007234:	47b0      	blx	r6
 8007236:	2800      	cmp	r0, #0
 8007238:	dc08      	bgt.n	800724c <__sflush_r+0xfc>
 800723a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800723e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007242:	81a3      	strh	r3, [r4, #12]
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	4407      	add	r7, r0
 800724e:	eba8 0800 	sub.w	r8, r8, r0
 8007252:	e7e7      	b.n	8007224 <__sflush_r+0xd4>
 8007254:	20400001 	.word	0x20400001

08007258 <_fflush_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	690b      	ldr	r3, [r1, #16]
 800725c:	4605      	mov	r5, r0
 800725e:	460c      	mov	r4, r1
 8007260:	b913      	cbnz	r3, 8007268 <_fflush_r+0x10>
 8007262:	2500      	movs	r5, #0
 8007264:	4628      	mov	r0, r5
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	b118      	cbz	r0, 8007272 <_fflush_r+0x1a>
 800726a:	6a03      	ldr	r3, [r0, #32]
 800726c:	b90b      	cbnz	r3, 8007272 <_fflush_r+0x1a>
 800726e:	f7fe f95d 	bl	800552c <__sinit>
 8007272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0f3      	beq.n	8007262 <_fflush_r+0xa>
 800727a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800727c:	07d0      	lsls	r0, r2, #31
 800727e:	d404      	bmi.n	800728a <_fflush_r+0x32>
 8007280:	0599      	lsls	r1, r3, #22
 8007282:	d402      	bmi.n	800728a <_fflush_r+0x32>
 8007284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007286:	f7fe fb4c 	bl	8005922 <__retarget_lock_acquire_recursive>
 800728a:	4628      	mov	r0, r5
 800728c:	4621      	mov	r1, r4
 800728e:	f7ff ff5f 	bl	8007150 <__sflush_r>
 8007292:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007294:	07da      	lsls	r2, r3, #31
 8007296:	4605      	mov	r5, r0
 8007298:	d4e4      	bmi.n	8007264 <_fflush_r+0xc>
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	059b      	lsls	r3, r3, #22
 800729e:	d4e1      	bmi.n	8007264 <_fflush_r+0xc>
 80072a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072a2:	f7fe fb3f 	bl	8005924 <__retarget_lock_release_recursive>
 80072a6:	e7dd      	b.n	8007264 <_fflush_r+0xc>

080072a8 <__swhatbuf_r>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	460c      	mov	r4, r1
 80072ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b0:	2900      	cmp	r1, #0
 80072b2:	b096      	sub	sp, #88	@ 0x58
 80072b4:	4615      	mov	r5, r2
 80072b6:	461e      	mov	r6, r3
 80072b8:	da0d      	bge.n	80072d6 <__swhatbuf_r+0x2e>
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072c0:	f04f 0100 	mov.w	r1, #0
 80072c4:	bf14      	ite	ne
 80072c6:	2340      	movne	r3, #64	@ 0x40
 80072c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072cc:	2000      	movs	r0, #0
 80072ce:	6031      	str	r1, [r6, #0]
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	b016      	add	sp, #88	@ 0x58
 80072d4:	bd70      	pop	{r4, r5, r6, pc}
 80072d6:	466a      	mov	r2, sp
 80072d8:	f000 f848 	bl	800736c <_fstat_r>
 80072dc:	2800      	cmp	r0, #0
 80072de:	dbec      	blt.n	80072ba <__swhatbuf_r+0x12>
 80072e0:	9901      	ldr	r1, [sp, #4]
 80072e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072ea:	4259      	negs	r1, r3
 80072ec:	4159      	adcs	r1, r3
 80072ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072f2:	e7eb      	b.n	80072cc <__swhatbuf_r+0x24>

080072f4 <__smakebuf_r>:
 80072f4:	898b      	ldrh	r3, [r1, #12]
 80072f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072f8:	079d      	lsls	r5, r3, #30
 80072fa:	4606      	mov	r6, r0
 80072fc:	460c      	mov	r4, r1
 80072fe:	d507      	bpl.n	8007310 <__smakebuf_r+0x1c>
 8007300:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	6123      	str	r3, [r4, #16]
 8007308:	2301      	movs	r3, #1
 800730a:	6163      	str	r3, [r4, #20]
 800730c:	b003      	add	sp, #12
 800730e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007310:	ab01      	add	r3, sp, #4
 8007312:	466a      	mov	r2, sp
 8007314:	f7ff ffc8 	bl	80072a8 <__swhatbuf_r>
 8007318:	9f00      	ldr	r7, [sp, #0]
 800731a:	4605      	mov	r5, r0
 800731c:	4639      	mov	r1, r7
 800731e:	4630      	mov	r0, r6
 8007320:	f7ff f9ce 	bl	80066c0 <_malloc_r>
 8007324:	b948      	cbnz	r0, 800733a <__smakebuf_r+0x46>
 8007326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732a:	059a      	lsls	r2, r3, #22
 800732c:	d4ee      	bmi.n	800730c <__smakebuf_r+0x18>
 800732e:	f023 0303 	bic.w	r3, r3, #3
 8007332:	f043 0302 	orr.w	r3, r3, #2
 8007336:	81a3      	strh	r3, [r4, #12]
 8007338:	e7e2      	b.n	8007300 <__smakebuf_r+0xc>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	6020      	str	r0, [r4, #0]
 800733e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007342:	81a3      	strh	r3, [r4, #12]
 8007344:	9b01      	ldr	r3, [sp, #4]
 8007346:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800734a:	b15b      	cbz	r3, 8007364 <__smakebuf_r+0x70>
 800734c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007350:	4630      	mov	r0, r6
 8007352:	f000 f81d 	bl	8007390 <_isatty_r>
 8007356:	b128      	cbz	r0, 8007364 <__smakebuf_r+0x70>
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	f023 0303 	bic.w	r3, r3, #3
 800735e:	f043 0301 	orr.w	r3, r3, #1
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	431d      	orrs	r5, r3
 8007368:	81a5      	strh	r5, [r4, #12]
 800736a:	e7cf      	b.n	800730c <__smakebuf_r+0x18>

0800736c <_fstat_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d07      	ldr	r5, [pc, #28]	@ (800738c <_fstat_r+0x20>)
 8007370:	2300      	movs	r3, #0
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	4611      	mov	r1, r2
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	f7fb fc25 	bl	8002bc8 <_fstat>
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	d102      	bne.n	8007388 <_fstat_r+0x1c>
 8007382:	682b      	ldr	r3, [r5, #0]
 8007384:	b103      	cbz	r3, 8007388 <_fstat_r+0x1c>
 8007386:	6023      	str	r3, [r4, #0]
 8007388:	bd38      	pop	{r3, r4, r5, pc}
 800738a:	bf00      	nop
 800738c:	200003d0 	.word	0x200003d0

08007390 <_isatty_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4d06      	ldr	r5, [pc, #24]	@ (80073ac <_isatty_r+0x1c>)
 8007394:	2300      	movs	r3, #0
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	f7fb fc24 	bl	8002be8 <_isatty>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_isatty_r+0x1a>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_isatty_r+0x1a>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	200003d0 	.word	0x200003d0

080073b0 <_sbrk_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4d06      	ldr	r5, [pc, #24]	@ (80073cc <_sbrk_r+0x1c>)
 80073b4:	2300      	movs	r3, #0
 80073b6:	4604      	mov	r4, r0
 80073b8:	4608      	mov	r0, r1
 80073ba:	602b      	str	r3, [r5, #0]
 80073bc:	f7fb fc2c 	bl	8002c18 <_sbrk>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_sbrk_r+0x1a>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_sbrk_r+0x1a>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	200003d0 	.word	0x200003d0

080073d0 <memcpy>:
 80073d0:	440a      	add	r2, r1
 80073d2:	4291      	cmp	r1, r2
 80073d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073d8:	d100      	bne.n	80073dc <memcpy+0xc>
 80073da:	4770      	bx	lr
 80073dc:	b510      	push	{r4, lr}
 80073de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073e6:	4291      	cmp	r1, r2
 80073e8:	d1f9      	bne.n	80073de <memcpy+0xe>
 80073ea:	bd10      	pop	{r4, pc}

080073ec <__assert_func>:
 80073ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073ee:	4614      	mov	r4, r2
 80073f0:	461a      	mov	r2, r3
 80073f2:	4b09      	ldr	r3, [pc, #36]	@ (8007418 <__assert_func+0x2c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4605      	mov	r5, r0
 80073f8:	68d8      	ldr	r0, [r3, #12]
 80073fa:	b14c      	cbz	r4, 8007410 <__assert_func+0x24>
 80073fc:	4b07      	ldr	r3, [pc, #28]	@ (800741c <__assert_func+0x30>)
 80073fe:	9100      	str	r1, [sp, #0]
 8007400:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007404:	4906      	ldr	r1, [pc, #24]	@ (8007420 <__assert_func+0x34>)
 8007406:	462b      	mov	r3, r5
 8007408:	f000 f842 	bl	8007490 <fiprintf>
 800740c:	f000 f852 	bl	80074b4 <abort>
 8007410:	4b04      	ldr	r3, [pc, #16]	@ (8007424 <__assert_func+0x38>)
 8007412:	461c      	mov	r4, r3
 8007414:	e7f3      	b.n	80073fe <__assert_func+0x12>
 8007416:	bf00      	nop
 8007418:	20000018 	.word	0x20000018
 800741c:	08007fc9 	.word	0x08007fc9
 8007420:	08007fd6 	.word	0x08007fd6
 8007424:	08008004 	.word	0x08008004

08007428 <_calloc_r>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	fba1 5402 	umull	r5, r4, r1, r2
 800742e:	b934      	cbnz	r4, 800743e <_calloc_r+0x16>
 8007430:	4629      	mov	r1, r5
 8007432:	f7ff f945 	bl	80066c0 <_malloc_r>
 8007436:	4606      	mov	r6, r0
 8007438:	b928      	cbnz	r0, 8007446 <_calloc_r+0x1e>
 800743a:	4630      	mov	r0, r6
 800743c:	bd70      	pop	{r4, r5, r6, pc}
 800743e:	220c      	movs	r2, #12
 8007440:	6002      	str	r2, [r0, #0]
 8007442:	2600      	movs	r6, #0
 8007444:	e7f9      	b.n	800743a <_calloc_r+0x12>
 8007446:	462a      	mov	r2, r5
 8007448:	4621      	mov	r1, r4
 800744a:	f7fe f9ed 	bl	8005828 <memset>
 800744e:	e7f4      	b.n	800743a <_calloc_r+0x12>

08007450 <__ascii_mbtowc>:
 8007450:	b082      	sub	sp, #8
 8007452:	b901      	cbnz	r1, 8007456 <__ascii_mbtowc+0x6>
 8007454:	a901      	add	r1, sp, #4
 8007456:	b142      	cbz	r2, 800746a <__ascii_mbtowc+0x1a>
 8007458:	b14b      	cbz	r3, 800746e <__ascii_mbtowc+0x1e>
 800745a:	7813      	ldrb	r3, [r2, #0]
 800745c:	600b      	str	r3, [r1, #0]
 800745e:	7812      	ldrb	r2, [r2, #0]
 8007460:	1e10      	subs	r0, r2, #0
 8007462:	bf18      	it	ne
 8007464:	2001      	movne	r0, #1
 8007466:	b002      	add	sp, #8
 8007468:	4770      	bx	lr
 800746a:	4610      	mov	r0, r2
 800746c:	e7fb      	b.n	8007466 <__ascii_mbtowc+0x16>
 800746e:	f06f 0001 	mvn.w	r0, #1
 8007472:	e7f8      	b.n	8007466 <__ascii_mbtowc+0x16>

08007474 <__ascii_wctomb>:
 8007474:	4603      	mov	r3, r0
 8007476:	4608      	mov	r0, r1
 8007478:	b141      	cbz	r1, 800748c <__ascii_wctomb+0x18>
 800747a:	2aff      	cmp	r2, #255	@ 0xff
 800747c:	d904      	bls.n	8007488 <__ascii_wctomb+0x14>
 800747e:	228a      	movs	r2, #138	@ 0x8a
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	f04f 30ff 	mov.w	r0, #4294967295
 8007486:	4770      	bx	lr
 8007488:	700a      	strb	r2, [r1, #0]
 800748a:	2001      	movs	r0, #1
 800748c:	4770      	bx	lr
	...

08007490 <fiprintf>:
 8007490:	b40e      	push	{r1, r2, r3}
 8007492:	b503      	push	{r0, r1, lr}
 8007494:	4601      	mov	r1, r0
 8007496:	ab03      	add	r3, sp, #12
 8007498:	4805      	ldr	r0, [pc, #20]	@ (80074b0 <fiprintf+0x20>)
 800749a:	f853 2b04 	ldr.w	r2, [r3], #4
 800749e:	6800      	ldr	r0, [r0, #0]
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	f7ff fd3d 	bl	8006f20 <_vfiprintf_r>
 80074a6:	b002      	add	sp, #8
 80074a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074ac:	b003      	add	sp, #12
 80074ae:	4770      	bx	lr
 80074b0:	20000018 	.word	0x20000018

080074b4 <abort>:
 80074b4:	b508      	push	{r3, lr}
 80074b6:	2006      	movs	r0, #6
 80074b8:	f000 f82c 	bl	8007514 <raise>
 80074bc:	2001      	movs	r0, #1
 80074be:	f7fb fb4f 	bl	8002b60 <_exit>

080074c2 <_raise_r>:
 80074c2:	291f      	cmp	r1, #31
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	4605      	mov	r5, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	d904      	bls.n	80074d6 <_raise_r+0x14>
 80074cc:	2316      	movs	r3, #22
 80074ce:	6003      	str	r3, [r0, #0]
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	bd38      	pop	{r3, r4, r5, pc}
 80074d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074d8:	b112      	cbz	r2, 80074e0 <_raise_r+0x1e>
 80074da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074de:	b94b      	cbnz	r3, 80074f4 <_raise_r+0x32>
 80074e0:	4628      	mov	r0, r5
 80074e2:	f000 f831 	bl	8007548 <_getpid_r>
 80074e6:	4622      	mov	r2, r4
 80074e8:	4601      	mov	r1, r0
 80074ea:	4628      	mov	r0, r5
 80074ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f0:	f000 b818 	b.w	8007524 <_kill_r>
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d00a      	beq.n	800750e <_raise_r+0x4c>
 80074f8:	1c59      	adds	r1, r3, #1
 80074fa:	d103      	bne.n	8007504 <_raise_r+0x42>
 80074fc:	2316      	movs	r3, #22
 80074fe:	6003      	str	r3, [r0, #0]
 8007500:	2001      	movs	r0, #1
 8007502:	e7e7      	b.n	80074d4 <_raise_r+0x12>
 8007504:	2100      	movs	r1, #0
 8007506:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800750a:	4620      	mov	r0, r4
 800750c:	4798      	blx	r3
 800750e:	2000      	movs	r0, #0
 8007510:	e7e0      	b.n	80074d4 <_raise_r+0x12>
	...

08007514 <raise>:
 8007514:	4b02      	ldr	r3, [pc, #8]	@ (8007520 <raise+0xc>)
 8007516:	4601      	mov	r1, r0
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	f7ff bfd2 	b.w	80074c2 <_raise_r>
 800751e:	bf00      	nop
 8007520:	20000018 	.word	0x20000018

08007524 <_kill_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4d07      	ldr	r5, [pc, #28]	@ (8007544 <_kill_r+0x20>)
 8007528:	2300      	movs	r3, #0
 800752a:	4604      	mov	r4, r0
 800752c:	4608      	mov	r0, r1
 800752e:	4611      	mov	r1, r2
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	f7fb fb05 	bl	8002b40 <_kill>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	d102      	bne.n	8007540 <_kill_r+0x1c>
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	b103      	cbz	r3, 8007540 <_kill_r+0x1c>
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	bd38      	pop	{r3, r4, r5, pc}
 8007542:	bf00      	nop
 8007544:	200003d0 	.word	0x200003d0

08007548 <_getpid_r>:
 8007548:	f7fb baf2 	b.w	8002b30 <_getpid>

0800754c <powf>:
 800754c:	b508      	push	{r3, lr}
 800754e:	ed2d 8b04 	vpush	{d8-d9}
 8007552:	eeb0 8a60 	vmov.f32	s16, s1
 8007556:	eeb0 9a40 	vmov.f32	s18, s0
 800755a:	f000 f85f 	bl	800761c <__ieee754_powf>
 800755e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007566:	eef0 8a40 	vmov.f32	s17, s0
 800756a:	d63e      	bvs.n	80075ea <powf+0x9e>
 800756c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007574:	d112      	bne.n	800759c <powf+0x50>
 8007576:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800757a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757e:	d039      	beq.n	80075f4 <powf+0xa8>
 8007580:	eeb0 0a48 	vmov.f32	s0, s16
 8007584:	f000 f840 	bl	8007608 <finitef>
 8007588:	b378      	cbz	r0, 80075ea <powf+0x9e>
 800758a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800758e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007592:	d52a      	bpl.n	80075ea <powf+0x9e>
 8007594:	f7fe f99a 	bl	80058cc <__errno>
 8007598:	2322      	movs	r3, #34	@ 0x22
 800759a:	e014      	b.n	80075c6 <powf+0x7a>
 800759c:	f000 f834 	bl	8007608 <finitef>
 80075a0:	b998      	cbnz	r0, 80075ca <powf+0x7e>
 80075a2:	eeb0 0a49 	vmov.f32	s0, s18
 80075a6:	f000 f82f 	bl	8007608 <finitef>
 80075aa:	b170      	cbz	r0, 80075ca <powf+0x7e>
 80075ac:	eeb0 0a48 	vmov.f32	s0, s16
 80075b0:	f000 f82a 	bl	8007608 <finitef>
 80075b4:	b148      	cbz	r0, 80075ca <powf+0x7e>
 80075b6:	eef4 8a68 	vcmp.f32	s17, s17
 80075ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075be:	d7e9      	bvc.n	8007594 <powf+0x48>
 80075c0:	f7fe f984 	bl	80058cc <__errno>
 80075c4:	2321      	movs	r3, #33	@ 0x21
 80075c6:	6003      	str	r3, [r0, #0]
 80075c8:	e00f      	b.n	80075ea <powf+0x9e>
 80075ca:	eef5 8a40 	vcmp.f32	s17, #0.0
 80075ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d2:	d10a      	bne.n	80075ea <powf+0x9e>
 80075d4:	eeb0 0a49 	vmov.f32	s0, s18
 80075d8:	f000 f816 	bl	8007608 <finitef>
 80075dc:	b128      	cbz	r0, 80075ea <powf+0x9e>
 80075de:	eeb0 0a48 	vmov.f32	s0, s16
 80075e2:	f000 f811 	bl	8007608 <finitef>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d1d4      	bne.n	8007594 <powf+0x48>
 80075ea:	eeb0 0a68 	vmov.f32	s0, s17
 80075ee:	ecbd 8b04 	vpop	{d8-d9}
 80075f2:	bd08      	pop	{r3, pc}
 80075f4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80075f8:	e7f7      	b.n	80075ea <powf+0x9e>

080075fa <fabsf>:
 80075fa:	ee10 3a10 	vmov	r3, s0
 80075fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007602:	ee00 3a10 	vmov	s0, r3
 8007606:	4770      	bx	lr

08007608 <finitef>:
 8007608:	ee10 3a10 	vmov	r3, s0
 800760c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8007610:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007614:	bfac      	ite	ge
 8007616:	2000      	movge	r0, #0
 8007618:	2001      	movlt	r0, #1
 800761a:	4770      	bx	lr

0800761c <__ieee754_powf>:
 800761c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007620:	ee10 4a90 	vmov	r4, s1
 8007624:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8007628:	ed2d 8b02 	vpush	{d8}
 800762c:	ee10 6a10 	vmov	r6, s0
 8007630:	eeb0 8a40 	vmov.f32	s16, s0
 8007634:	eef0 8a60 	vmov.f32	s17, s1
 8007638:	d10c      	bne.n	8007654 <__ieee754_powf+0x38>
 800763a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800763e:	0076      	lsls	r6, r6, #1
 8007640:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8007644:	f240 8274 	bls.w	8007b30 <__ieee754_powf+0x514>
 8007648:	ee38 0a28 	vadd.f32	s0, s16, s17
 800764c:	ecbd 8b02 	vpop	{d8}
 8007650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007654:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8007658:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800765c:	d802      	bhi.n	8007664 <__ieee754_powf+0x48>
 800765e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007662:	d908      	bls.n	8007676 <__ieee754_powf+0x5a>
 8007664:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8007668:	d1ee      	bne.n	8007648 <__ieee754_powf+0x2c>
 800766a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800766e:	0064      	lsls	r4, r4, #1
 8007670:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8007674:	e7e6      	b.n	8007644 <__ieee754_powf+0x28>
 8007676:	2e00      	cmp	r6, #0
 8007678:	da1f      	bge.n	80076ba <__ieee754_powf+0x9e>
 800767a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800767e:	f080 8260 	bcs.w	8007b42 <__ieee754_powf+0x526>
 8007682:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8007686:	d32f      	bcc.n	80076e8 <__ieee754_powf+0xcc>
 8007688:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800768c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8007690:	fa49 f503 	asr.w	r5, r9, r3
 8007694:	fa05 f303 	lsl.w	r3, r5, r3
 8007698:	454b      	cmp	r3, r9
 800769a:	d123      	bne.n	80076e4 <__ieee754_powf+0xc8>
 800769c:	f005 0501 	and.w	r5, r5, #1
 80076a0:	f1c5 0502 	rsb	r5, r5, #2
 80076a4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80076a8:	d11f      	bne.n	80076ea <__ieee754_powf+0xce>
 80076aa:	2c00      	cmp	r4, #0
 80076ac:	f280 8246 	bge.w	8007b3c <__ieee754_powf+0x520>
 80076b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80076b4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80076b8:	e7c8      	b.n	800764c <__ieee754_powf+0x30>
 80076ba:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80076be:	d111      	bne.n	80076e4 <__ieee754_powf+0xc8>
 80076c0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80076c4:	f000 8234 	beq.w	8007b30 <__ieee754_powf+0x514>
 80076c8:	d906      	bls.n	80076d8 <__ieee754_powf+0xbc>
 80076ca:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80079e0 <__ieee754_powf+0x3c4>
 80076ce:	2c00      	cmp	r4, #0
 80076d0:	bfa8      	it	ge
 80076d2:	eeb0 0a68 	vmovge.f32	s0, s17
 80076d6:	e7b9      	b.n	800764c <__ieee754_powf+0x30>
 80076d8:	2c00      	cmp	r4, #0
 80076da:	f280 822c 	bge.w	8007b36 <__ieee754_powf+0x51a>
 80076de:	eeb1 0a68 	vneg.f32	s0, s17
 80076e2:	e7b3      	b.n	800764c <__ieee754_powf+0x30>
 80076e4:	2500      	movs	r5, #0
 80076e6:	e7dd      	b.n	80076a4 <__ieee754_powf+0x88>
 80076e8:	2500      	movs	r5, #0
 80076ea:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80076ee:	d102      	bne.n	80076f6 <__ieee754_powf+0xda>
 80076f0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80076f4:	e7aa      	b.n	800764c <__ieee754_powf+0x30>
 80076f6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80076fa:	f040 8227 	bne.w	8007b4c <__ieee754_powf+0x530>
 80076fe:	2e00      	cmp	r6, #0
 8007700:	f2c0 8224 	blt.w	8007b4c <__ieee754_powf+0x530>
 8007704:	eeb0 0a48 	vmov.f32	s0, s16
 8007708:	ecbd 8b02 	vpop	{d8}
 800770c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007710:	f000 bade 	b.w	8007cd0 <__ieee754_sqrtf>
 8007714:	2d01      	cmp	r5, #1
 8007716:	d199      	bne.n	800764c <__ieee754_powf+0x30>
 8007718:	eeb1 0a40 	vneg.f32	s0, s0
 800771c:	e796      	b.n	800764c <__ieee754_powf+0x30>
 800771e:	0ff0      	lsrs	r0, r6, #31
 8007720:	3801      	subs	r0, #1
 8007722:	ea55 0300 	orrs.w	r3, r5, r0
 8007726:	d104      	bne.n	8007732 <__ieee754_powf+0x116>
 8007728:	ee38 8a48 	vsub.f32	s16, s16, s16
 800772c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007730:	e78c      	b.n	800764c <__ieee754_powf+0x30>
 8007732:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8007736:	d96d      	bls.n	8007814 <__ieee754_powf+0x1f8>
 8007738:	4baa      	ldr	r3, [pc, #680]	@ (80079e4 <__ieee754_powf+0x3c8>)
 800773a:	4598      	cmp	r8, r3
 800773c:	d808      	bhi.n	8007750 <__ieee754_powf+0x134>
 800773e:	2c00      	cmp	r4, #0
 8007740:	da0b      	bge.n	800775a <__ieee754_powf+0x13e>
 8007742:	2000      	movs	r0, #0
 8007744:	ecbd 8b02 	vpop	{d8}
 8007748:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800774c:	f000 baba 	b.w	8007cc4 <__math_oflowf>
 8007750:	4ba5      	ldr	r3, [pc, #660]	@ (80079e8 <__ieee754_powf+0x3cc>)
 8007752:	4598      	cmp	r8, r3
 8007754:	d908      	bls.n	8007768 <__ieee754_powf+0x14c>
 8007756:	2c00      	cmp	r4, #0
 8007758:	dcf3      	bgt.n	8007742 <__ieee754_powf+0x126>
 800775a:	2000      	movs	r0, #0
 800775c:	ecbd 8b02 	vpop	{d8}
 8007760:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007764:	f000 baa8 	b.w	8007cb8 <__math_uflowf>
 8007768:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800776c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007770:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80079ec <__ieee754_powf+0x3d0>
 8007774:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8007778:	eee0 6a67 	vfms.f32	s13, s0, s15
 800777c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007780:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007784:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007788:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80079f0 <__ieee754_powf+0x3d4>
 800778c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007790:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80079f4 <__ieee754_powf+0x3d8>
 8007794:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8007798:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80079f8 <__ieee754_powf+0x3dc>
 800779c:	eee0 7a07 	vfma.f32	s15, s0, s14
 80077a0:	eeb0 7a67 	vmov.f32	s14, s15
 80077a4:	eea0 7a26 	vfma.f32	s14, s0, s13
 80077a8:	ee17 3a10 	vmov	r3, s14
 80077ac:	f36f 030b 	bfc	r3, #0, #12
 80077b0:	ee07 3a10 	vmov	s14, r3
 80077b4:	eeb0 6a47 	vmov.f32	s12, s14
 80077b8:	eea0 6a66 	vfms.f32	s12, s0, s13
 80077bc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80077c0:	3d01      	subs	r5, #1
 80077c2:	4305      	orrs	r5, r0
 80077c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077c8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80077cc:	f36f 040b 	bfc	r4, #0, #12
 80077d0:	bf18      	it	ne
 80077d2:	eeb0 8a66 	vmovne.f32	s16, s13
 80077d6:	ee06 4a90 	vmov	s13, r4
 80077da:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80077de:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80077e2:	ee67 7a26 	vmul.f32	s15, s14, s13
 80077e6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80077ea:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80077ee:	ee17 1a10 	vmov	r1, s14
 80077f2:	2900      	cmp	r1, #0
 80077f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80077f8:	f340 80dd 	ble.w	80079b6 <__ieee754_powf+0x39a>
 80077fc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8007800:	f240 80ca 	bls.w	8007998 <__ieee754_powf+0x37c>
 8007804:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780c:	bf4c      	ite	mi
 800780e:	2001      	movmi	r0, #1
 8007810:	2000      	movpl	r0, #0
 8007812:	e797      	b.n	8007744 <__ieee754_powf+0x128>
 8007814:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007818:	bf01      	itttt	eq
 800781a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80079fc <__ieee754_powf+0x3e0>
 800781e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007822:	f06f 0317 	mvneq.w	r3, #23
 8007826:	ee17 7a90 	vmoveq	r7, s15
 800782a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800782e:	bf18      	it	ne
 8007830:	2300      	movne	r3, #0
 8007832:	3a7f      	subs	r2, #127	@ 0x7f
 8007834:	441a      	add	r2, r3
 8007836:	4b72      	ldr	r3, [pc, #456]	@ (8007a00 <__ieee754_powf+0x3e4>)
 8007838:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800783c:	429f      	cmp	r7, r3
 800783e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8007842:	dd06      	ble.n	8007852 <__ieee754_powf+0x236>
 8007844:	4b6f      	ldr	r3, [pc, #444]	@ (8007a04 <__ieee754_powf+0x3e8>)
 8007846:	429f      	cmp	r7, r3
 8007848:	f340 80a4 	ble.w	8007994 <__ieee754_powf+0x378>
 800784c:	3201      	adds	r2, #1
 800784e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8007852:	2600      	movs	r6, #0
 8007854:	4b6c      	ldr	r3, [pc, #432]	@ (8007a08 <__ieee754_powf+0x3ec>)
 8007856:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800785a:	ee07 1a10 	vmov	s14, r1
 800785e:	edd3 5a00 	vldr	s11, [r3]
 8007862:	4b6a      	ldr	r3, [pc, #424]	@ (8007a0c <__ieee754_powf+0x3f0>)
 8007864:	ee75 7a87 	vadd.f32	s15, s11, s14
 8007868:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800786c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8007870:	1049      	asrs	r1, r1, #1
 8007872:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8007876:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800787a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800787e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8007882:	ee07 1a90 	vmov	s15, r1
 8007886:	ee26 5a24 	vmul.f32	s10, s12, s9
 800788a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800788e:	ee15 7a10 	vmov	r7, s10
 8007892:	401f      	ands	r7, r3
 8007894:	ee06 7a90 	vmov	s13, r7
 8007898:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800789c:	ee37 7a65 	vsub.f32	s14, s14, s11
 80078a0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80078a4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80078a8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007a10 <__ieee754_powf+0x3f4>
 80078ac:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8007a14 <__ieee754_powf+0x3f8>
 80078b0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80078b4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8007a18 <__ieee754_powf+0x3fc>
 80078b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80078bc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80079ec <__ieee754_powf+0x3d0>
 80078c0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80078c4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8007a1c <__ieee754_powf+0x400>
 80078c8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80078cc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8007a20 <__ieee754_powf+0x404>
 80078d0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80078d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80078d8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80078dc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80078e0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80078e4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80078e8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80078ec:	eef0 5a67 	vmov.f32	s11, s15
 80078f0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80078f4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80078f8:	ee15 1a90 	vmov	r1, s11
 80078fc:	4019      	ands	r1, r3
 80078fe:	ee05 1a90 	vmov	s11, r1
 8007902:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007906:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800790a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800790e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007912:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007916:	eeb0 6a67 	vmov.f32	s12, s15
 800791a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800791e:	ee16 1a10 	vmov	r1, s12
 8007922:	4019      	ands	r1, r3
 8007924:	ee06 1a10 	vmov	s12, r1
 8007928:	eeb0 7a46 	vmov.f32	s14, s12
 800792c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8007930:	493c      	ldr	r1, [pc, #240]	@ (8007a24 <__ieee754_powf+0x408>)
 8007932:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8007936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800793a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8007a28 <__ieee754_powf+0x40c>
 800793e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8007a2c <__ieee754_powf+0x410>
 8007942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007946:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007a30 <__ieee754_powf+0x414>
 800794a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800794e:	ed91 7a00 	vldr	s14, [r1]
 8007952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007956:	ee07 2a10 	vmov	s14, r2
 800795a:	4a36      	ldr	r2, [pc, #216]	@ (8007a34 <__ieee754_powf+0x418>)
 800795c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007960:	eeb0 7a67 	vmov.f32	s14, s15
 8007964:	eea6 7a25 	vfma.f32	s14, s12, s11
 8007968:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800796c:	ed92 5a00 	vldr	s10, [r2]
 8007970:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007974:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007978:	ee17 2a10 	vmov	r2, s14
 800797c:	401a      	ands	r2, r3
 800797e:	ee07 2a10 	vmov	s14, r2
 8007982:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007986:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800798a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800798e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007992:	e715      	b.n	80077c0 <__ieee754_powf+0x1a4>
 8007994:	2601      	movs	r6, #1
 8007996:	e75d      	b.n	8007854 <__ieee754_powf+0x238>
 8007998:	d152      	bne.n	8007a40 <__ieee754_powf+0x424>
 800799a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007a38 <__ieee754_powf+0x41c>
 800799e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80079a2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80079a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80079aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ae:	f73f af29 	bgt.w	8007804 <__ieee754_powf+0x1e8>
 80079b2:	2386      	movs	r3, #134	@ 0x86
 80079b4:	e048      	b.n	8007a48 <__ieee754_powf+0x42c>
 80079b6:	4a21      	ldr	r2, [pc, #132]	@ (8007a3c <__ieee754_powf+0x420>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d907      	bls.n	80079cc <__ieee754_powf+0x3b0>
 80079bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80079c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c4:	bf4c      	ite	mi
 80079c6:	2001      	movmi	r0, #1
 80079c8:	2000      	movpl	r0, #0
 80079ca:	e6c7      	b.n	800775c <__ieee754_powf+0x140>
 80079cc:	d138      	bne.n	8007a40 <__ieee754_powf+0x424>
 80079ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80079d2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80079d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079da:	dbea      	blt.n	80079b2 <__ieee754_powf+0x396>
 80079dc:	e7ee      	b.n	80079bc <__ieee754_powf+0x3a0>
 80079de:	bf00      	nop
 80079e0:	00000000 	.word	0x00000000
 80079e4:	3f7ffff3 	.word	0x3f7ffff3
 80079e8:	3f800007 	.word	0x3f800007
 80079ec:	3eaaaaab 	.word	0x3eaaaaab
 80079f0:	3fb8aa00 	.word	0x3fb8aa00
 80079f4:	3fb8aa3b 	.word	0x3fb8aa3b
 80079f8:	36eca570 	.word	0x36eca570
 80079fc:	4b800000 	.word	0x4b800000
 8007a00:	001cc471 	.word	0x001cc471
 8007a04:	005db3d6 	.word	0x005db3d6
 8007a08:	0800821c 	.word	0x0800821c
 8007a0c:	fffff000 	.word	0xfffff000
 8007a10:	3e6c3255 	.word	0x3e6c3255
 8007a14:	3e53f142 	.word	0x3e53f142
 8007a18:	3e8ba305 	.word	0x3e8ba305
 8007a1c:	3edb6db7 	.word	0x3edb6db7
 8007a20:	3f19999a 	.word	0x3f19999a
 8007a24:	0800820c 	.word	0x0800820c
 8007a28:	3f76384f 	.word	0x3f76384f
 8007a2c:	3f763800 	.word	0x3f763800
 8007a30:	369dc3a0 	.word	0x369dc3a0
 8007a34:	08008214 	.word	0x08008214
 8007a38:	3338aa3c 	.word	0x3338aa3c
 8007a3c:	43160000 	.word	0x43160000
 8007a40:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8007a44:	d96f      	bls.n	8007b26 <__ieee754_powf+0x50a>
 8007a46:	15db      	asrs	r3, r3, #23
 8007a48:	3b7e      	subs	r3, #126	@ 0x7e
 8007a4a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8007a4e:	4118      	asrs	r0, r3
 8007a50:	4408      	add	r0, r1
 8007a52:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007a56:	4a4e      	ldr	r2, [pc, #312]	@ (8007b90 <__ieee754_powf+0x574>)
 8007a58:	3b7f      	subs	r3, #127	@ 0x7f
 8007a5a:	411a      	asrs	r2, r3
 8007a5c:	4002      	ands	r2, r0
 8007a5e:	ee07 2a10 	vmov	s14, r2
 8007a62:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8007a66:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8007a6a:	f1c3 0317 	rsb	r3, r3, #23
 8007a6e:	4118      	asrs	r0, r3
 8007a70:	2900      	cmp	r1, #0
 8007a72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a76:	bfb8      	it	lt
 8007a78:	4240      	neglt	r0, r0
 8007a7a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8007a7e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8007b94 <__ieee754_powf+0x578>
 8007a82:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8007b98 <__ieee754_powf+0x57c>
 8007a86:	ee16 3a90 	vmov	r3, s13
 8007a8a:	f36f 030b 	bfc	r3, #0, #12
 8007a8e:	ee06 3a90 	vmov	s13, r3
 8007a92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007a96:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007a9a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007a9e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8007b9c <__ieee754_powf+0x580>
 8007aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007aa6:	eee0 7a87 	vfma.f32	s15, s1, s14
 8007aaa:	eeb0 7a67 	vmov.f32	s14, s15
 8007aae:	eea6 7a86 	vfma.f32	s14, s13, s12
 8007ab2:	eef0 5a47 	vmov.f32	s11, s14
 8007ab6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8007aba:	ee67 6a07 	vmul.f32	s13, s14, s14
 8007abe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007ac2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8007ba0 <__ieee754_powf+0x584>
 8007ac6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8007ba4 <__ieee754_powf+0x588>
 8007aca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007ace:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8007ba8 <__ieee754_powf+0x58c>
 8007ad2:	eee6 5a26 	vfma.f32	s11, s12, s13
 8007ad6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8007bac <__ieee754_powf+0x590>
 8007ada:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8007ade:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007bb0 <__ieee754_powf+0x594>
 8007ae2:	eee6 5a26 	vfma.f32	s11, s12, s13
 8007ae6:	eeb0 6a47 	vmov.f32	s12, s14
 8007aea:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8007aee:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007af2:	ee67 5a06 	vmul.f32	s11, s14, s12
 8007af6:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007afa:	eee7 7a27 	vfma.f32	s15, s14, s15
 8007afe:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007b02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007b06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007b0e:	ee10 3a10 	vmov	r3, s0
 8007b12:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007b16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b1a:	da06      	bge.n	8007b2a <__ieee754_powf+0x50e>
 8007b1c:	f000 f84c 	bl	8007bb8 <scalbnf>
 8007b20:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007b24:	e592      	b.n	800764c <__ieee754_powf+0x30>
 8007b26:	2000      	movs	r0, #0
 8007b28:	e7a7      	b.n	8007a7a <__ieee754_powf+0x45e>
 8007b2a:	ee00 3a10 	vmov	s0, r3
 8007b2e:	e7f7      	b.n	8007b20 <__ieee754_powf+0x504>
 8007b30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007b34:	e58a      	b.n	800764c <__ieee754_powf+0x30>
 8007b36:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8007bb4 <__ieee754_powf+0x598>
 8007b3a:	e587      	b.n	800764c <__ieee754_powf+0x30>
 8007b3c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b40:	e584      	b.n	800764c <__ieee754_powf+0x30>
 8007b42:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007b46:	f43f adbb 	beq.w	80076c0 <__ieee754_powf+0xa4>
 8007b4a:	2502      	movs	r5, #2
 8007b4c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b50:	f7ff fd53 	bl	80075fa <fabsf>
 8007b54:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8007b58:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8007b5c:	4647      	mov	r7, r8
 8007b5e:	d003      	beq.n	8007b68 <__ieee754_powf+0x54c>
 8007b60:	f1b8 0f00 	cmp.w	r8, #0
 8007b64:	f47f addb 	bne.w	800771e <__ieee754_powf+0x102>
 8007b68:	2c00      	cmp	r4, #0
 8007b6a:	bfbc      	itt	lt
 8007b6c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8007b70:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007b74:	2e00      	cmp	r6, #0
 8007b76:	f6bf ad69 	bge.w	800764c <__ieee754_powf+0x30>
 8007b7a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8007b7e:	ea58 0805 	orrs.w	r8, r8, r5
 8007b82:	f47f adc7 	bne.w	8007714 <__ieee754_powf+0xf8>
 8007b86:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007b8a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007b8e:	e55d      	b.n	800764c <__ieee754_powf+0x30>
 8007b90:	ff800000 	.word	0xff800000
 8007b94:	3f317218 	.word	0x3f317218
 8007b98:	3f317200 	.word	0x3f317200
 8007b9c:	35bfbe8c 	.word	0x35bfbe8c
 8007ba0:	b5ddea0e 	.word	0xb5ddea0e
 8007ba4:	3331bb4c 	.word	0x3331bb4c
 8007ba8:	388ab355 	.word	0x388ab355
 8007bac:	bb360b61 	.word	0xbb360b61
 8007bb0:	3e2aaaab 	.word	0x3e2aaaab
 8007bb4:	00000000 	.word	0x00000000

08007bb8 <scalbnf>:
 8007bb8:	ee10 3a10 	vmov	r3, s0
 8007bbc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007bc0:	d02b      	beq.n	8007c1a <scalbnf+0x62>
 8007bc2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007bc6:	d302      	bcc.n	8007bce <scalbnf+0x16>
 8007bc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007bcc:	4770      	bx	lr
 8007bce:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007bd2:	d123      	bne.n	8007c1c <scalbnf+0x64>
 8007bd4:	4b24      	ldr	r3, [pc, #144]	@ (8007c68 <scalbnf+0xb0>)
 8007bd6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007c6c <scalbnf+0xb4>
 8007bda:	4298      	cmp	r0, r3
 8007bdc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007be0:	db17      	blt.n	8007c12 <scalbnf+0x5a>
 8007be2:	ee10 3a10 	vmov	r3, s0
 8007be6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007bea:	3a19      	subs	r2, #25
 8007bec:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007bf0:	4288      	cmp	r0, r1
 8007bf2:	dd15      	ble.n	8007c20 <scalbnf+0x68>
 8007bf4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007c70 <scalbnf+0xb8>
 8007bf8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007c74 <scalbnf+0xbc>
 8007bfc:	ee10 3a10 	vmov	r3, s0
 8007c00:	eeb0 7a67 	vmov.f32	s14, s15
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bfb8      	it	lt
 8007c08:	eef0 7a66 	vmovlt.f32	s15, s13
 8007c0c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007c10:	4770      	bx	lr
 8007c12:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007c78 <scalbnf+0xc0>
 8007c16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007c1a:	4770      	bx	lr
 8007c1c:	0dd2      	lsrs	r2, r2, #23
 8007c1e:	e7e5      	b.n	8007bec <scalbnf+0x34>
 8007c20:	4410      	add	r0, r2
 8007c22:	28fe      	cmp	r0, #254	@ 0xfe
 8007c24:	dce6      	bgt.n	8007bf4 <scalbnf+0x3c>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	dd06      	ble.n	8007c38 <scalbnf+0x80>
 8007c2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007c2e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007c32:	ee00 3a10 	vmov	s0, r3
 8007c36:	4770      	bx	lr
 8007c38:	f110 0f16 	cmn.w	r0, #22
 8007c3c:	da09      	bge.n	8007c52 <scalbnf+0x9a>
 8007c3e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8007c78 <scalbnf+0xc0>
 8007c42:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007c7c <scalbnf+0xc4>
 8007c46:	ee10 3a10 	vmov	r3, s0
 8007c4a:	eeb0 7a67 	vmov.f32	s14, s15
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	e7d9      	b.n	8007c06 <scalbnf+0x4e>
 8007c52:	3019      	adds	r0, #25
 8007c54:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007c58:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007c5c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007c80 <scalbnf+0xc8>
 8007c60:	ee07 3a90 	vmov	s15, r3
 8007c64:	e7d7      	b.n	8007c16 <scalbnf+0x5e>
 8007c66:	bf00      	nop
 8007c68:	ffff3cb0 	.word	0xffff3cb0
 8007c6c:	4c000000 	.word	0x4c000000
 8007c70:	7149f2ca 	.word	0x7149f2ca
 8007c74:	f149f2ca 	.word	0xf149f2ca
 8007c78:	0da24260 	.word	0x0da24260
 8007c7c:	8da24260 	.word	0x8da24260
 8007c80:	33000000 	.word	0x33000000

08007c84 <with_errnof>:
 8007c84:	b510      	push	{r4, lr}
 8007c86:	ed2d 8b02 	vpush	{d8}
 8007c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8007c8e:	4604      	mov	r4, r0
 8007c90:	f7fd fe1c 	bl	80058cc <__errno>
 8007c94:	eeb0 0a48 	vmov.f32	s0, s16
 8007c98:	ecbd 8b02 	vpop	{d8}
 8007c9c:	6004      	str	r4, [r0, #0]
 8007c9e:	bd10      	pop	{r4, pc}

08007ca0 <xflowf>:
 8007ca0:	b130      	cbz	r0, 8007cb0 <xflowf+0x10>
 8007ca2:	eef1 7a40 	vneg.f32	s15, s0
 8007ca6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007caa:	2022      	movs	r0, #34	@ 0x22
 8007cac:	f7ff bfea 	b.w	8007c84 <with_errnof>
 8007cb0:	eef0 7a40 	vmov.f32	s15, s0
 8007cb4:	e7f7      	b.n	8007ca6 <xflowf+0x6>
	...

08007cb8 <__math_uflowf>:
 8007cb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007cc0 <__math_uflowf+0x8>
 8007cbc:	f7ff bff0 	b.w	8007ca0 <xflowf>
 8007cc0:	10000000 	.word	0x10000000

08007cc4 <__math_oflowf>:
 8007cc4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007ccc <__math_oflowf+0x8>
 8007cc8:	f7ff bfea 	b.w	8007ca0 <xflowf>
 8007ccc:	70000000 	.word	0x70000000

08007cd0 <__ieee754_sqrtf>:
 8007cd0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007cd4:	4770      	bx	lr
	...

08007cd8 <_init>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr

08007ce4 <_fini>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	bf00      	nop
 8007ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cea:	bc08      	pop	{r3}
 8007cec:	469e      	mov	lr, r3
 8007cee:	4770      	bx	lr
