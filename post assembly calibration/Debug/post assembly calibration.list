
post assembly calibration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a278  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800a408  0800a408  0000b408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9a4  0800a9a4  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a9a4  0800a9a4  0000b9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9ac  0800a9ac  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9ac  0800a9ac  0000b9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9b0  0800a9b0  0000b9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a9b4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d8  2**0
                  CONTENTS
 10 .bss          000002c4  200001d8  200001d8  0000c1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e590  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002be5  00000000  00000000  0001a798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  0001d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ccf  00000000  00000000  0001e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024234  00000000  00000000  0001f137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a22  00000000  00000000  0004336b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd80f  00000000  00000000  00054d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012259c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000594c  00000000  00000000  001225e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00127f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3f0 	.word	0x0800a3f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a3f0 	.word	0x0800a3f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f023 0210 	bic.w	r2, r3, #16
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d101      	bne.n	8000f58 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	330c      	adds	r3, #12
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	330c      	adds	r3, #12
 8000f92:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	619a      	str	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001018:	4907      	ldr	r1, [pc, #28]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800

0800103c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4013      	ands	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40023800 	.word	0x40023800

0800106c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b090      	sub	sp, #64	@ 0x40
 8001070:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2228      	movs	r2, #40	@ 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f006 fcd4 	bl	8007a28 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001090:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001094:	f7ff ffd2 	bl	800103c <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001098:	2002      	movs	r0, #2
 800109a:	f7ff ffb7 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800109e:	2004      	movs	r0, #4
 80010a0:	f7ff ffb4 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ffb1 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80010aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80010ae:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010b0:	2302      	movs	r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80010c0:	2305      	movs	r3, #5
 80010c2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4841      	ldr	r0, [pc, #260]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010ca:	f004 fe42 	bl	8005d52 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010d2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80010d6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010dc:	2302      	movs	r3, #2
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ea:	2318      	movs	r3, #24
 80010ec:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010f6:	230a      	movs	r3, #10
 80010f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	4619      	mov	r1, r3
 8001100:	4834      	ldr	r0, [pc, #208]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001102:	f005 f804 	bl	800610e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001106:	2100      	movs	r1, #0
 8001108:	4832      	ldr	r0, [pc, #200]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 800110a:	f7ff fef3 	bl	8000ef4 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800110e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001112:	4831      	ldr	r0, [pc, #196]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001114:	f7ff ff6a 	bl	8000fec <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800111c:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800111e:	f7ff ff65 	bl	8000fec <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001126:	482d      	ldr	r0, [pc, #180]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 8001128:	f7ff ff60 	bl	8000fec <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001132:	2301      	movs	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4822      	ldr	r0, [pc, #136]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001148:	f004 fe03 	bl	8005d52 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800114c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001150:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001152:	2301      	movs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	481c      	ldr	r0, [pc, #112]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001168:	f004 fdf3 	bl	8005d52 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800116c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001170:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4815      	ldr	r0, [pc, #84]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 8001188:	f004 fde3 	bl	8005d52 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800118c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001190:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001196:	2301      	movs	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011a0:	f004 fdd7 	bl	8005d52 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80011a4:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80011a6:	f7ff fe95 	bl	8000ed4 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80011aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ae:	4808      	ldr	r0, [pc, #32]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80011b0:	f7ff ff0e 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80011b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 80011ba:	f7ff ff09 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80011be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011c4:	f7ff ff04 	bl	8000fd0 <LL_GPIO_SetOutputPin>
}
 80011c8:	bf00      	nop
 80011ca:	3740      	adds	r7, #64	@ 0x40
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40003800 	.word	0x40003800
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020000 	.word	0x40020000

080011e0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	BNO080_GPIO_SPI_Initialization();
 80011e4:	f7ff ff42 	bl	800106c <BNO080_GPIO_SPI_Initialization>

	printf("Checking BNO080...\n");
 80011e8:	4825      	ldr	r0, [pc, #148]	@ (8001280 <BNO080_Initialization+0xa0>)
 80011ea:	f006 fb3d 	bl	8007868 <puts>

	CHIP_DESELECT(BNO080);
 80011ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011f2:	4824      	ldr	r0, [pc, #144]	@ (8001284 <BNO080_Initialization+0xa4>)
 80011f4:	f7ff feec 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011fc:	4822      	ldr	r0, [pc, #136]	@ (8001288 <BNO080_Initialization+0xa8>)
 80011fe:	f7ff fee7 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001202:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001206:	4821      	ldr	r0, [pc, #132]	@ (800128c <BNO080_Initialization+0xac>)
 8001208:	f7ff fef0 	bl	8000fec <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800120c:	20c8      	movs	r0, #200	@ 0xc8
 800120e:	f002 fd07 	bl	8003c20 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001212:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001216:	481d      	ldr	r0, [pc, #116]	@ (800128c <BNO080_Initialization+0xac>)
 8001218:	f7ff feda 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800121c:	f000 fb16 	bl	800184c <BNO080_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001220:	f000 fb14 	bl	800184c <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001224:	f000 fb36 	bl	8001894 <BNO080_receivePacket>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001228:	f000 fb10 	bl	800184c <BNO080_waitForSPI>
	BNO080_receivePacket();
 800122c:	f000 fb32 	bl	8001894 <BNO080_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <BNO080_Initialization+0xb0>)
 8001232:	22f9      	movs	r2, #249	@ 0xf9
 8001234:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <BNO080_Initialization+0xb0>)
 8001238:	2200      	movs	r2, #0
 800123a:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800123c:	2102      	movs	r1, #2
 800123e:	2002      	movs	r0, #2
 8001240:	f000 fb9a 	bl	8001978 <BNO080_sendPacket>

	//Now we wait for response
	BNO080_waitForSPI();
 8001244:	f000 fb02 	bl	800184c <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001248:	f000 fb24 	bl	8001894 <BNO080_receivePacket>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10b      	bne.n	800126a <BNO080_Initialization+0x8a>
	{
		//printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <BNO080_Initialization+0xb0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2bf8      	cmp	r3, #248	@ 0xf8
 8001258:	d107      	bne.n	800126a <BNO080_Initialization+0x8a>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <BNO080_Initialization+0xb0>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <BNO080_Initialization+0xb4>)
 8001262:	f006 fa99 	bl	8007798 <iprintf>
			return (0);
 8001266:	2300      	movs	r3, #0
 8001268:	e007      	b.n	800127a <BNO080_Initialization+0x9a>
		}// Sensor OK
	}

	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <BNO080_Initialization+0xb0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	22f8      	movs	r2, #248	@ 0xf8
 8001270:	4619      	mov	r1, r3
 8001272:	4809      	ldr	r0, [pc, #36]	@ (8001298 <BNO080_Initialization+0xb8>)
 8001274:	f006 fa90 	bl	8007798 <iprintf>
	return (1); //Something went wrong
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	0800a408 	.word	0x0800a408
 8001284:	40020400 	.word	0x40020400
 8001288:	40020000 	.word	0x40020000
 800128c:	40020800 	.word	0x40020800
 8001290:	200001f8 	.word	0x200001f8
 8001294:	0800a41c 	.word	0x0800a41c
 8001298:	0800a43c 	.word	0x0800a43c

0800129c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012a6:	bf00      	nop
 80012a8:	480c      	ldr	r0, [pc, #48]	@ (80012dc <SPI2_SendByte+0x40>)
 80012aa:	f7ff fe49 	bl	8000f40 <LL_SPI_IsActiveFlag_TXE>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f9      	beq.n	80012a8 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4619      	mov	r1, r3
 80012b8:	4808      	ldr	r0, [pc, #32]	@ (80012dc <SPI2_SendByte+0x40>)
 80012ba:	f7ff fe62 	bl	8000f82 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012be:	bf00      	nop
 80012c0:	4806      	ldr	r0, [pc, #24]	@ (80012dc <SPI2_SendByte+0x40>)
 80012c2:	f7ff fe2a 	bl	8000f1a <LL_SPI_IsActiveFlag_RXNE>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f9      	beq.n	80012c0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012cc:	4803      	ldr	r0, [pc, #12]	@ (80012dc <SPI2_SendByte+0x40>)
 80012ce:	f7ff fe4a 	bl	8000f66 <LL_SPI_ReceiveData8>
 80012d2:	4603      	mov	r3, r0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40003800 	.word	0x40003800

080012e0 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80012e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012e8:	4811      	ldr	r0, [pc, #68]	@ (8001330 <BNO080_dataAvailable+0x50>)
 80012ea:	f7ff fe5c 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <BNO080_dataAvailable+0x18>
		return (0);
 80012f4:	2300      	movs	r3, #0
 80012f6:	e019      	b.n	800132c <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 80012f8:	f000 facc 	bl	8001894 <BNO080_receivePacket>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d113      	bne.n	800132a <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <BNO080_dataAvailable+0x54>)
 8001304:	789b      	ldrb	r3, [r3, #2]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d107      	bne.n	800131a <BNO080_dataAvailable+0x3a>
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <BNO080_dataAvailable+0x58>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2bfb      	cmp	r3, #251	@ 0xfb
 8001310:	d103      	bne.n	800131a <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001312:	f000 f82f 	bl	8001374 <BNO080_parseInputReport>
			return (1);
 8001316:	2301      	movs	r3, #1
 8001318:	e008      	b.n	800132c <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <BNO080_dataAvailable+0x54>)
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d103      	bne.n	800132a <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001322:	f000 f80b 	bl	800133c <BNO080_parseCommandReport>
			return (1);
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40020800 	.word	0x40020800
 8001334:	200001f4 	.word	0x200001f4
 8001338:	200001f8 	.word	0x200001f8

0800133c <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <BNO080_parseCommandReport+0x30>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2bf1      	cmp	r3, #241	@ 0xf1
 8001348:	d109      	bne.n	800135e <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <BNO080_parseCommandReport+0x30>)
 800134c:	789b      	ldrb	r3, [r3, #2]
 800134e:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b07      	cmp	r3, #7
 8001354:	d103      	bne.n	800135e <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <BNO080_parseCommandReport+0x30>)
 8001358:	795a      	ldrb	r2, [r3, #5]
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <BNO080_parseCommandReport+0x34>)
 800135c:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200001f8 	.word	0x200001f8
 8001370:	200002b8 	.word	0x200002b8

08001374 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800137a:	4b9b      	ldr	r3, [pc, #620]	@ (80015e8 <BNO080_parseInputReport+0x274>)
 800137c:	785b      	ldrb	r3, [r3, #1]
 800137e:	b21b      	sxth	r3, r3
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b98      	ldr	r3, [pc, #608]	@ (80015e8 <BNO080_parseInputReport+0x274>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800138e:	8a3b      	ldrh	r3, [r7, #16]
 8001390:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001394:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001396:	8a3b      	ldrh	r3, [r7, #16]
 8001398:	3b04      	subs	r3, #4
 800139a:	b29b      	uxth	r3, r3
 800139c:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 800139e:	4b93      	ldr	r3, [pc, #588]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80013a0:	791b      	ldrb	r3, [r3, #4]
 80013a2:	061a      	lsls	r2, r3, #24
 80013a4:	4b91      	ldr	r3, [pc, #580]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80013a6:	78db      	ldrb	r3, [r3, #3]
 80013a8:	041b      	lsls	r3, r3, #16
 80013aa:	431a      	orrs	r2, r3
 80013ac:	4b8f      	ldr	r3, [pc, #572]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80013ae:	789b      	ldrb	r3, [r3, #2]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	4313      	orrs	r3, r2
 80013b4:	4a8d      	ldr	r2, [pc, #564]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80013b6:	7852      	ldrb	r2, [r2, #1]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	4a8d      	ldr	r2, [pc, #564]	@ (80015f0 <BNO080_parseInputReport+0x27c>)
 80013bc:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80013be:	4b8b      	ldr	r3, [pc, #556]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80013c0:	79db      	ldrb	r3, [r3, #7]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80013c8:	4b88      	ldr	r3, [pc, #544]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80013ca:	7a9b      	ldrb	r3, [r3, #10]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b86      	ldr	r3, [pc, #536]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80013d4:	7a5b      	ldrb	r3, [r3, #9]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21b      	sxth	r3, r3
 80013dc:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80013de:	4b83      	ldr	r3, [pc, #524]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80013e0:	7b1b      	ldrb	r3, [r3, #12]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	4b80      	ldr	r3, [pc, #512]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80013ea:	7adb      	ldrb	r3, [r3, #11]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 80013f4:	4b7d      	ldr	r3, [pc, #500]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80013f6:	7b9b      	ldrb	r3, [r3, #14]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b7b      	ldr	r3, [pc, #492]	@ (80015ec <BNO080_parseInputReport+0x278>)
 8001400:	7b5b      	ldrb	r3, [r3, #13]
 8001402:	b21b      	sxth	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8001412:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001416:	2b0e      	cmp	r3, #14
 8001418:	dd0a      	ble.n	8001430 <BNO080_parseInputReport+0xbc>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 800141a:	4b74      	ldr	r3, [pc, #464]	@ (80015ec <BNO080_parseInputReport+0x278>)
 800141c:	7c1b      	ldrb	r3, [r3, #16]
 800141e:	b21b      	sxth	r3, r3
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b21a      	sxth	r2, r3
 8001424:	4b71      	ldr	r3, [pc, #452]	@ (80015ec <BNO080_parseInputReport+0x278>)
 8001426:	7bdb      	ldrb	r3, [r3, #15]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21b      	sxth	r3, r3
 800142e:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 8001430:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001434:	2b10      	cmp	r3, #16
 8001436:	dd0a      	ble.n	800144e <BNO080_parseInputReport+0xda>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001438:	4b6c      	ldr	r3, [pc, #432]	@ (80015ec <BNO080_parseInputReport+0x278>)
 800143a:	7c9b      	ldrb	r3, [r3, #18]
 800143c:	b21b      	sxth	r3, r3
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	4b6a      	ldr	r3, [pc, #424]	@ (80015ec <BNO080_parseInputReport+0x278>)
 8001444:	7c5b      	ldrb	r3, [r3, #17]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21b      	sxth	r3, r3
 800144c:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 800144e:	4b67      	ldr	r3, [pc, #412]	@ (80015ec <BNO080_parseInputReport+0x278>)
 8001450:	795b      	ldrb	r3, [r3, #5]
 8001452:	2b1e      	cmp	r3, #30
 8001454:	dc46      	bgt.n	80014e4 <BNO080_parseInputReport+0x170>
 8001456:	2b00      	cmp	r3, #0
 8001458:	f340 80bf 	ble.w	80015da <BNO080_parseInputReport+0x266>
 800145c:	3b01      	subs	r3, #1
 800145e:	2b1d      	cmp	r3, #29
 8001460:	f200 80bb 	bhi.w	80015da <BNO080_parseInputReport+0x266>
 8001464:	a201      	add	r2, pc, #4	@ (adr r2, 800146c <BNO080_parseInputReport+0xf8>)
 8001466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146a:	bf00      	nop
 800146c:	080014eb 	.word	0x080014eb
 8001470:	08001523 	.word	0x08001523
 8001474:	0800153f 	.word	0x0800153f
 8001478:	08001507 	.word	0x08001507
 800147c:	0800155b 	.word	0x0800155b
 8001480:	080015db 	.word	0x080015db
 8001484:	080015db 	.word	0x080015db
 8001488:	0800155b 	.word	0x0800155b
 800148c:	080015db 	.word	0x080015db
 8001490:	080015db 	.word	0x080015db
 8001494:	080015db 	.word	0x080015db
 8001498:	080015db 	.word	0x080015db
 800149c:	080015db 	.word	0x080015db
 80014a0:	080015db 	.word	0x080015db
 80014a4:	080015db 	.word	0x080015db
 80014a8:	080015db 	.word	0x080015db
 80014ac:	08001583 	.word	0x08001583
 80014b0:	080015db 	.word	0x080015db
 80014b4:	0800158b 	.word	0x0800158b
 80014b8:	080015db 	.word	0x080015db
 80014bc:	080015db 	.word	0x080015db
 80014c0:	080015db 	.word	0x080015db
 80014c4:	080015db 	.word	0x080015db
 80014c8:	080015db 	.word	0x080015db
 80014cc:	080015db 	.word	0x080015db
 80014d0:	080015db 	.word	0x080015db
 80014d4:	080015db 	.word	0x080015db
 80014d8:	080015db 	.word	0x080015db
 80014dc:	080015db 	.word	0x080015db
 80014e0:	08001595 	.word	0x08001595
 80014e4:	2bf1      	cmp	r3, #241	@ 0xf1
 80014e6:	d06d      	beq.n	80015c4 <BNO080_parseInputReport+0x250>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80014e8:	e077      	b.n	80015da <BNO080_parseInputReport+0x266>
			accelAccuracy = status;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b41      	ldr	r3, [pc, #260]	@ (80015f4 <BNO080_parseInputReport+0x280>)
 80014f0:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80014f2:	4a41      	ldr	r2, [pc, #260]	@ (80015f8 <BNO080_parseInputReport+0x284>)
 80014f4:	89bb      	ldrh	r3, [r7, #12]
 80014f6:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 80014f8:	4a40      	ldr	r2, [pc, #256]	@ (80015fc <BNO080_parseInputReport+0x288>)
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 80014fe:	4a40      	ldr	r2, [pc, #256]	@ (8001600 <BNO080_parseInputReport+0x28c>)
 8001500:	893b      	ldrh	r3, [r7, #8]
 8001502:	8013      	strh	r3, [r2, #0]
			break;
 8001504:	e069      	b.n	80015da <BNO080_parseInputReport+0x266>
			accelLinAccuracy = status;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b3e      	ldr	r3, [pc, #248]	@ (8001604 <BNO080_parseInputReport+0x290>)
 800150c:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800150e:	4a3e      	ldr	r2, [pc, #248]	@ (8001608 <BNO080_parseInputReport+0x294>)
 8001510:	89bb      	ldrh	r3, [r7, #12]
 8001512:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001514:	4a3d      	ldr	r2, [pc, #244]	@ (800160c <BNO080_parseInputReport+0x298>)
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800151a:	4a3d      	ldr	r2, [pc, #244]	@ (8001610 <BNO080_parseInputReport+0x29c>)
 800151c:	893b      	ldrh	r3, [r7, #8]
 800151e:	8013      	strh	r3, [r2, #0]
			break;
 8001520:	e05b      	b.n	80015da <BNO080_parseInputReport+0x266>
			gyroAccuracy = status;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b3b      	ldr	r3, [pc, #236]	@ (8001614 <BNO080_parseInputReport+0x2a0>)
 8001528:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800152a:	4a3b      	ldr	r2, [pc, #236]	@ (8001618 <BNO080_parseInputReport+0x2a4>)
 800152c:	89bb      	ldrh	r3, [r7, #12]
 800152e:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8001530:	4a3a      	ldr	r2, [pc, #232]	@ (800161c <BNO080_parseInputReport+0x2a8>)
 8001532:	897b      	ldrh	r3, [r7, #10]
 8001534:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8001536:	4a3a      	ldr	r2, [pc, #232]	@ (8001620 <BNO080_parseInputReport+0x2ac>)
 8001538:	893b      	ldrh	r3, [r7, #8]
 800153a:	8013      	strh	r3, [r2, #0]
			break;
 800153c:	e04d      	b.n	80015da <BNO080_parseInputReport+0x266>
			magAccuracy = status;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <BNO080_parseInputReport+0x2b0>)
 8001544:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001546:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <BNO080_parseInputReport+0x2b4>)
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 800154c:	4a37      	ldr	r2, [pc, #220]	@ (800162c <BNO080_parseInputReport+0x2b8>)
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8001552:	4a37      	ldr	r2, [pc, #220]	@ (8001630 <BNO080_parseInputReport+0x2bc>)
 8001554:	893b      	ldrh	r3, [r7, #8]
 8001556:	8013      	strh	r3, [r2, #0]
			break;
 8001558:	e03f      	b.n	80015da <BNO080_parseInputReport+0x266>
			quatAccuracy = status;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b35      	ldr	r3, [pc, #212]	@ (8001634 <BNO080_parseInputReport+0x2c0>)
 8001560:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 8001562:	4a35      	ldr	r2, [pc, #212]	@ (8001638 <BNO080_parseInputReport+0x2c4>)
 8001564:	89bb      	ldrh	r3, [r7, #12]
 8001566:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001568:	4a34      	ldr	r2, [pc, #208]	@ (800163c <BNO080_parseInputReport+0x2c8>)
 800156a:	897b      	ldrh	r3, [r7, #10]
 800156c:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 800156e:	4a34      	ldr	r2, [pc, #208]	@ (8001640 <BNO080_parseInputReport+0x2cc>)
 8001570:	893b      	ldrh	r3, [r7, #8]
 8001572:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001574:	4a33      	ldr	r2, [pc, #204]	@ (8001644 <BNO080_parseInputReport+0x2d0>)
 8001576:	8afb      	ldrh	r3, [r7, #22]
 8001578:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800157a:	4a33      	ldr	r2, [pc, #204]	@ (8001648 <BNO080_parseInputReport+0x2d4>)
 800157c:	8abb      	ldrh	r3, [r7, #20]
 800157e:	8013      	strh	r3, [r2, #0]
			break;
 8001580:	e02b      	b.n	80015da <BNO080_parseInputReport+0x266>
			stepCount = data3; //Bytes 8/9
 8001582:	4a32      	ldr	r2, [pc, #200]	@ (800164c <BNO080_parseInputReport+0x2d8>)
 8001584:	893b      	ldrh	r3, [r7, #8]
 8001586:	8013      	strh	r3, [r2, #0]
			break;
 8001588:	e027      	b.n	80015da <BNO080_parseInputReport+0x266>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <BNO080_parseInputReport+0x278>)
 800158c:	7a5a      	ldrb	r2, [r3, #9]
 800158e:	4b30      	ldr	r3, [pc, #192]	@ (8001650 <BNO080_parseInputReport+0x2dc>)
 8001590:	701a      	strb	r2, [r3, #0]
			break;
 8001592:	e022      	b.n	80015da <BNO080_parseInputReport+0x266>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001594:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <BNO080_parseInputReport+0x278>)
 8001596:	7a9a      	ldrb	r2, [r3, #10]
 8001598:	4b2e      	ldr	r3, [pc, #184]	@ (8001654 <BNO080_parseInputReport+0x2e0>)
 800159a:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800159c:	2300      	movs	r3, #0
 800159e:	74fb      	strb	r3, [r7, #19]
 80015a0:	e00c      	b.n	80015bc <BNO080_parseInputReport+0x248>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80015a2:	7cfb      	ldrb	r3, [r7, #19]
 80015a4:	f103 020b 	add.w	r2, r3, #11
 80015a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <BNO080_parseInputReport+0x2e4>)
 80015aa:	6819      	ldr	r1, [r3, #0]
 80015ac:	7cfb      	ldrb	r3, [r7, #19]
 80015ae:	440b      	add	r3, r1
 80015b0:	490e      	ldr	r1, [pc, #56]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80015b2:	5c8a      	ldrb	r2, [r1, r2]
 80015b4:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80015b6:	7cfb      	ldrb	r3, [r7, #19]
 80015b8:	3301      	adds	r3, #1
 80015ba:	74fb      	strb	r3, [r7, #19]
 80015bc:	7cfb      	ldrb	r3, [r7, #19]
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d9ef      	bls.n	80015a2 <BNO080_parseInputReport+0x22e>
			break;
 80015c2:	e00a      	b.n	80015da <BNO080_parseInputReport+0x266>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80015c6:	79db      	ldrb	r3, [r3, #7]
 80015c8:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	d103      	bne.n	80015d8 <BNO080_parseInputReport+0x264>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <BNO080_parseInputReport+0x278>)
 80015d2:	7a9a      	ldrb	r2, [r3, #10]
 80015d4:	4b21      	ldr	r3, [pc, #132]	@ (800165c <BNO080_parseInputReport+0x2e8>)
 80015d6:	701a      	strb	r2, [r3, #0]
			break;
 80015d8:	bf00      	nop
}
 80015da:	bf00      	nop
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200001f4 	.word	0x200001f4
 80015ec:	200001f8 	.word	0x200001f8
 80015f0:	200002ac 	.word	0x200002ac
 80015f4:	20000284 	.word	0x20000284
 80015f8:	2000027e 	.word	0x2000027e
 80015fc:	20000280 	.word	0x20000280
 8001600:	20000282 	.word	0x20000282
 8001604:	2000028c 	.word	0x2000028c
 8001608:	20000286 	.word	0x20000286
 800160c:	20000288 	.word	0x20000288
 8001610:	2000028a 	.word	0x2000028a
 8001614:	20000294 	.word	0x20000294
 8001618:	2000028e 	.word	0x2000028e
 800161c:	20000290 	.word	0x20000290
 8001620:	20000292 	.word	0x20000292
 8001624:	2000029c 	.word	0x2000029c
 8001628:	20000296 	.word	0x20000296
 800162c:	20000298 	.word	0x20000298
 8001630:	2000029a 	.word	0x2000029a
 8001634:	200002a8 	.word	0x200002a8
 8001638:	2000029e 	.word	0x2000029e
 800163c:	200002a0 	.word	0x200002a0
 8001640:	200002a2 	.word	0x200002a2
 8001644:	200002a4 	.word	0x200002a4
 8001648:	200002a6 	.word	0x200002a6
 800164c:	200002aa 	.word	0x200002aa
 8001650:	200002b0 	.word	0x200002b0
 8001654:	200002b1 	.word	0x200002b1
 8001658:	200002b4 	.word	0x200002b4
 800165c:	200002b8 	.word	0x200002b8

08001660 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <BNO080_getQuatI+0x24>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b21b      	sxth	r3, r3
 800166a:	4a07      	ldr	r2, [pc, #28]	@ (8001688 <BNO080_getQuatI+0x28>)
 800166c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f861 	bl	800173c <BNO080_qToFloat>
 800167a:	eef0 7a40 	vmov.f32	s15, s0
}
 800167e:	eeb0 0a67 	vmov.f32	s0, s15
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000029e 	.word	0x2000029e
 8001688:	20000000 	.word	0x20000000

0800168c <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001690:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <BNO080_getQuatJ+0x24>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	b21b      	sxth	r3, r3
 8001696:	4a07      	ldr	r2, [pc, #28]	@ (80016b4 <BNO080_getQuatJ+0x28>)
 8001698:	f9b2 2000 	ldrsh.w	r2, [r2]
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f84b 	bl	800173c <BNO080_qToFloat>
 80016a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200002a0 	.word	0x200002a0
 80016b4:	20000000 	.word	0x20000000

080016b8 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <BNO080_getQuatK+0x24>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <BNO080_getQuatK+0x28>)
 80016c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f835 	bl	800173c <BNO080_qToFloat>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200002a2 	.word	0x200002a2
 80016e0:	20000000 	.word	0x20000000

080016e4 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <BNO080_getQuatReal+0x24>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4a07      	ldr	r2, [pc, #28]	@ (800170c <BNO080_getQuatReal+0x28>)
 80016f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f81f 	bl	800173c <BNO080_qToFloat>
 80016fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200002a4 	.word	0x200002a4
 800170c:	20000000 	.word	0x20000000

08001710 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <BNO080_getQuatRadianAccuracy+0x24>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <BNO080_getQuatRadianAccuracy+0x28>)
 800171c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f809 	bl	800173c <BNO080_qToFloat>
 800172a:	eef0 7a40 	vmov.f32	s15, s0
}
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200002a6 	.word	0x200002a6
 8001738:	20000000 	.word	0x20000000

0800173c <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	ed2d 8b02 	vpush	{d8}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	80fb      	strh	r3, [r7, #6]
 800174c:	4613      	mov	r3, r2
 800174e:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800175c:	797b      	ldrb	r3, [r7, #5]
 800175e:	425b      	negs	r3, r3
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001768:	eef0 0a67 	vmov.f32	s1, s15
 800176c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001770:	f008 f81a 	bl	80097a8 <powf>
 8001774:	eef0 7a40 	vmov.f32	s15, s0
 8001778:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 800177c:	eeb0 0a67 	vmov.f32	s0, s15
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	ecbd 8b02 	vpop	{d8}
 8001788:	bd80      	pop	{r7, pc}

0800178a <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	2200      	movs	r2, #0
 8001798:	4619      	mov	r1, r3
 800179a:	2005      	movs	r0, #5
 800179c:	f000 f804 	bl	80017a8 <BNO080_setFeatureCommand>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017b8:	22fd      	movs	r2, #253	@ 0xfd
 80017ba:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80017bc:	4a22      	ldr	r2, [pc, #136]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80017c2:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80017c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80017ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017da:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017e4:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	0c1b      	lsrs	r3, r3, #16
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017ee:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	0e1b      	lsrs	r3, r3, #24
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017f8:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 8001802:	2200      	movs	r2, #0
 8001804:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 8001808:	2200      	movs	r2, #0
 800180a:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 800180c:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 800180e:	2200      	movs	r2, #0
 8001810:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 8001818:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 8001822:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 800182c:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	0e1b      	lsrs	r3, r3, #24
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <BNO080_setFeatureCommand+0xa0>)
 8001836:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001838:	2111      	movs	r1, #17
 800183a:	2002      	movs	r0, #2
 800183c:	f000 f89c 	bl	8001978 <BNO080_sendPacket>
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200001f8 	.word	0x200001f8

0800184c <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	e00c      	b.n	8001872 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001858:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800185c:	480b      	ldr	r0, [pc, #44]	@ (800188c <BNO080_waitForSPI+0x40>)
 800185e:	f7ff fba2 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001868:	2301      	movs	r3, #1
 800186a:	e00a      	b.n	8001882 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d1ee      	bne.n	8001858 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <BNO080_waitForSPI+0x44>)
 800187c:	f005 fff4 	bl	8007868 <puts>
	return (0);
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40020800 	.word	0x40020800
 8001890:	0800a488 	.word	0x0800a488

08001894 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 800189a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800189e:	4832      	ldr	r0, [pc, #200]	@ (8001968 <BNO080_receivePacket+0xd4>)
 80018a0:	f7ff fb81 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80018aa:	2300      	movs	r3, #0
 80018ac:	e057      	b.n	800195e <BNO080_receivePacket+0xca>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80018ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018b2:	482e      	ldr	r0, [pc, #184]	@ (800196c <BNO080_receivePacket+0xd8>)
 80018b4:	f7ff fb9a 	bl	8000fec <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff fcef 	bl	800129c <SPI2_SendByte>
 80018be:	4603      	mov	r3, r0
 80018c0:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7ff fcea 	bl	800129c <SPI2_SendByte>
 80018c8:	4603      	mov	r3, r0
 80018ca:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff fce5 	bl	800129c <SPI2_SendByte>
 80018d2:	4603      	mov	r3, r0
 80018d4:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff fce0 	bl	800129c <SPI2_SendByte>
 80018dc:	4603      	mov	r3, r0
 80018de:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80018e0:	4a23      	ldr	r2, [pc, #140]	@ (8001970 <BNO080_receivePacket+0xdc>)
 80018e2:	7b7b      	ldrb	r3, [r7, #13]
 80018e4:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80018e6:	4a22      	ldr	r2, [pc, #136]	@ (8001970 <BNO080_receivePacket+0xdc>)
 80018e8:	7b3b      	ldrb	r3, [r7, #12]
 80018ea:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80018ec:	4a20      	ldr	r2, [pc, #128]	@ (8001970 <BNO080_receivePacket+0xdc>)
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80018f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001970 <BNO080_receivePacket+0xdc>)
 80018f4:	7abb      	ldrb	r3, [r7, #10]
 80018f6:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80018f8:	7b3b      	ldrb	r3, [r7, #12]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	b21a      	sxth	r2, r3
 8001900:	7b7b      	ldrb	r3, [r7, #13]
 8001902:	b21b      	sxth	r3, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001908:	893b      	ldrh	r3, [r7, #8]
 800190a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800190e:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001910:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <BNO080_receivePacket+0x88>
	{
		//Packet is empty
		return (0); //All done
 8001918:	2300      	movs	r3, #0
 800191a:	e020      	b.n	800195e <BNO080_receivePacket+0xca>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 800191c:	893b      	ldrh	r3, [r7, #8]
 800191e:	3b04      	subs	r3, #4
 8001920:	b29b      	uxth	r3, r3
 8001922:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001924:	2300      	movs	r3, #0
 8001926:	81fb      	strh	r3, [r7, #14]
 8001928:	e00e      	b.n	8001948 <BNO080_receivePacket+0xb4>
	{
		incoming = SPI2_SendByte(0xFF);
 800192a:	20ff      	movs	r0, #255	@ 0xff
 800192c:	f7ff fcb6 	bl	800129c <SPI2_SendByte>
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001934:	89fb      	ldrh	r3, [r7, #14]
 8001936:	2b7f      	cmp	r3, #127	@ 0x7f
 8001938:	d803      	bhi.n	8001942 <BNO080_receivePacket+0xae>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	490d      	ldr	r1, [pc, #52]	@ (8001974 <BNO080_receivePacket+0xe0>)
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	3301      	adds	r3, #1
 8001946:	81fb      	strh	r3, [r7, #14]
 8001948:	89fa      	ldrh	r2, [r7, #14]
 800194a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbeb      	blt.n	800192a <BNO080_receivePacket+0x96>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001952:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <BNO080_receivePacket+0xd8>)
 8001958:	f7ff fb3a 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40020800 	.word	0x40020800
 800196c:	40020400 	.word	0x40020400
 8001970:	200001f4 	.word	0x200001f4
 8001974:	200001f8 	.word	0x200001f8

08001978 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	3304      	adds	r3, #4
 800198c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 800198e:	f7ff ff5d 	bl	800184c <BNO080_waitForSPI>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001998:	2300      	movs	r3, #0
 800199a:	e032      	b.n	8001a02 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 800199c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019a0:	481a      	ldr	r0, [pc, #104]	@ (8001a0c <BNO080_sendPacket+0x94>)
 80019a2:	f7ff fb23 	bl	8000fec <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80019a6:	7bbb      	ldrb	r3, [r7, #14]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fc77 	bl	800129c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	121b      	asrs	r3, r3, #8
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fc71 	bl	800129c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fc6d 	bl	800129c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <BNO080_sendPacket+0x98>)
 80019c6:	5cd2      	ldrb	r2, [r2, r3]
 80019c8:	1c51      	adds	r1, r2, #1
 80019ca:	b2c8      	uxtb	r0, r1
 80019cc:	4910      	ldr	r1, [pc, #64]	@ (8001a10 <BNO080_sendPacket+0x98>)
 80019ce:	54c8      	strb	r0, [r1, r3]
 80019d0:	4610      	mov	r0, r2
 80019d2:	f7ff fc63 	bl	800129c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	e008      	b.n	80019ee <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <BNO080_sendPacket+0x9c>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fc5a 	bl	800129c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	3301      	adds	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3f2      	bcc.n	80019dc <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 80019f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019fa:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <BNO080_sendPacket+0x94>)
 80019fc:	f7ff fae8 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	return (1);
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	20000278 	.word	0x20000278
 8001a14:	200001f8 	.word	0x200001f8

08001a18 <LL_SPI_Enable>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_SPI_SetStandard>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f023 0210 	bic.w	r2, r3, #16
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	605a      	str	r2, [r3, #4]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_SPI_IsActiveFlag_RXNE>:
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_SPI_IsActiveFlag_TXE>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d101      	bne.n	8001a9c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_SPI_ReceiveData8>:
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_SPI_TransmitData8>:
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	701a      	strb	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_GPIO_SetOutputPin>:
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	619a      	str	r2, [r3, #24]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_GPIO_ResetOutputPin>:
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	041a      	lsls	r2, r3, #16
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_AHB1_GRP1_EnableClock>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b2c:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b30:	4907      	ldr	r1, [pc, #28]	@ (8001b50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40023800 	.word	0x40023800

08001b54 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b60:	4907      	ldr	r1, [pc, #28]	@ (8001b80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40023800 	.word	0x40023800

08001b84 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b090      	sub	sp, #64	@ 0x40
 8001b88:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001b8a:	f107 0318 	add.w	r3, r7, #24
 8001b8e:	2228      	movs	r2, #40	@ 0x28
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f005 ff48 	bl	8007a28 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]
 8001ba6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001ba8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001bac:	f7ff ffd2 	bl	8001b54 <LL_APB2_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff ffb7 	bl	8001b24 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001bb6:	2004      	movs	r0, #4
 8001bb8:	f7ff ffb4 	bl	8001b24 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001bbc:	23e0      	movs	r3, #224	@ 0xe0
 8001bbe:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001bd0:	2305      	movs	r3, #5
 8001bd2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4825      	ldr	r0, [pc, #148]	@ (8001c70 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001bda:	f004 f8ba 	bl	8005d52 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001be2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001be6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001bec:	2302      	movs	r3, #2
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001bf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001c06:	230a      	movs	r3, #10
 8001c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4818      	ldr	r0, [pc, #96]	@ (8001c74 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001c12:	f004 fa7c 	bl	800610e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001c16:	2100      	movs	r1, #0
 8001c18:	4816      	ldr	r0, [pc, #88]	@ (8001c74 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001c1a:	f7ff ff0d 	bl	8001a38 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001c1e:	2110      	movs	r1, #16
 8001c20:	4815      	ldr	r0, [pc, #84]	@ (8001c78 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001c22:	f7ff ff70 	bl	8001b06 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001c26:	2310      	movs	r3, #16
 8001c28:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480e      	ldr	r0, [pc, #56]	@ (8001c78 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001c40:	f004 f887 	bl	8005d52 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001c44:	2320      	movs	r3, #32
 8001c46:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001c50:	463b      	mov	r3, r7
 8001c52:	4619      	mov	r1, r3
 8001c54:	4808      	ldr	r0, [pc, #32]	@ (8001c78 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001c56:	f004 f87c 	bl	8005d52 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001c5c:	f7ff fedc 	bl	8001a18 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001c60:	2110      	movs	r1, #16
 8001c62:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001c64:	f7ff ff41 	bl	8001aea <LL_GPIO_SetOutputPin>
}
 8001c68:	bf00      	nop
 8001c6a:	3740      	adds	r7, #64	@ 0x40
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40020000 	.word	0x40020000
 8001c74:	40013000 	.word	0x40013000
 8001c78:	40020800 	.word	0x40020800

08001c7c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001c86:	bf00      	nop
 8001c88:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <SPI1_SendByte+0x40>)
 8001c8a:	f7ff fefb 	bl	8001a84 <LL_SPI_IsActiveFlag_TXE>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f9      	beq.n	8001c88 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4808      	ldr	r0, [pc, #32]	@ (8001cbc <SPI1_SendByte+0x40>)
 8001c9a:	f7ff ff14 	bl	8001ac6 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001c9e:	bf00      	nop
 8001ca0:	4806      	ldr	r0, [pc, #24]	@ (8001cbc <SPI1_SendByte+0x40>)
 8001ca2:	f7ff fedc 	bl	8001a5e <LL_SPI_IsActiveFlag_RXNE>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f9      	beq.n	8001ca0 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001cac:	4803      	ldr	r0, [pc, #12]	@ (8001cbc <SPI1_SendByte+0x40>)
 8001cae:	f7ff fefc 	bl	8001aaa <LL_SPI_ReceiveData8>
 8001cb2:	4603      	mov	r3, r0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40013000 	.word	0x40013000

08001cc0 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001cca:	2110      	movs	r1, #16
 8001ccc:	480b      	ldr	r0, [pc, #44]	@ (8001cfc <ICM20602_Readbyte+0x3c>)
 8001cce:	f7ff ff1a 	bl	8001b06 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ffce 	bl	8001c7c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f7ff ffcb 	bl	8001c7c <SPI1_SendByte>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001cea:	2110      	movs	r1, #16
 8001cec:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <ICM20602_Readbyte+0x3c>)
 8001cee:	f7ff fefc 	bl	8001aea <LL_GPIO_SetOutputPin>

	return val;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40020800 	.word	0x40020800

08001d00 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	460a      	mov	r2, r1
 8001d0a:	71fb      	strb	r3, [r7, #7]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001d10:	2110      	movs	r1, #16
 8001d12:	480b      	ldr	r0, [pc, #44]	@ (8001d40 <ICM20602_Writebyte+0x40>)
 8001d14:	f7ff fef7 	bl	8001b06 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ffab 	bl	8001c7c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8001d26:	79bb      	ldrb	r3, [r7, #6]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ffa7 	bl	8001c7c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001d2e:	2110      	movs	r1, #16
 8001d30:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <ICM20602_Writebyte+0x40>)
 8001d32:	f7ff feda 	bl	8001aea <LL_GPIO_SetOutputPin>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40020800 	.word	0x40020800

08001d44 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001d58:	463b      	mov	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	809a      	strh	r2, [r3, #4]

	ICM20602_GPIO_SPI_Initialization();
 8001d60:	f7ff ff10 	bl	8001b84 <ICM20602_GPIO_SPI_Initialization>

	printf("Checking ICM20602...");
 8001d64:	4833      	ldr	r0, [pc, #204]	@ (8001e34 <ICM20602_Initialization+0xf0>)
 8001d66:	f005 fd17 	bl	8007798 <iprintf>

	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I);
 8001d6a:	2075      	movs	r0, #117	@ 0x75
 8001d6c:	f7ff ffa8 	bl	8001cc0 <ICM20602_Readbyte>
 8001d70:	4603      	mov	r3, r0
 8001d72:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	2b12      	cmp	r3, #18
 8001d78:	d105      	bne.n	8001d86 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	482e      	ldr	r0, [pc, #184]	@ (8001e38 <ICM20602_Initialization+0xf4>)
 8001d80:	f005 fd0a 	bl	8007798 <iprintf>
 8001d84:	e012      	b.n	8001dac <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b12      	cmp	r3, #18
 8001d8a:	d00f      	beq.n	8001dac <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001d8c:	2075      	movs	r0, #117	@ 0x75
 8001d8e:	f7ff ff97 	bl	8001cc0 <ICM20602_Readbyte>
 8001d92:	4603      	mov	r3, r0
 8001d94:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2b12      	cmp	r3, #18
 8001d9a:	d007      	beq.n	8001dac <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2212      	movs	r2, #18
 8001da0:	4619      	mov	r1, r3
 8001da2:	4826      	ldr	r0, [pc, #152]	@ (8001e3c <ICM20602_Initialization+0xf8>)
 8001da4:	f005 fcf8 	bl	8007798 <iprintf>
			return 1; //ERROR
 8001da8:	2301      	movs	r3, #1
 8001daa:	e03f      	b.n	8001e2c <ICM20602_Initialization+0xe8>
		}
	}

	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001dac:	2180      	movs	r1, #128	@ 0x80
 8001dae:	206b      	movs	r0, #107	@ 0x6b
 8001db0:	f7ff ffa6 	bl	8001d00 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001db4:	2032      	movs	r0, #50	@ 0x32
 8001db6:	f001 ff33 	bl	8003c20 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001dba:	2101      	movs	r1, #1
 8001dbc:	206b      	movs	r0, #107	@ 0x6b
 8001dbe:	f7ff ff9f 	bl	8001d00 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001dc2:	2032      	movs	r0, #50	@ 0x32
 8001dc4:	f001 ff2c 	bl	8003c20 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001dc8:	2138      	movs	r1, #56	@ 0x38
 8001dca:	206c      	movs	r0, #108	@ 0x6c
 8001dcc:	f7ff ff98 	bl	8001d00 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001dd0:	2032      	movs	r0, #50	@ 0x32
 8001dd2:	f001 ff25 	bl	8003c20 <HAL_Delay>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2019      	movs	r0, #25
 8001dda:	f7ff ff91 	bl	8001d00 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001dde:	2032      	movs	r0, #50	@ 0x32
 8001de0:	f001 ff1e 	bl	8003c20 <HAL_Delay>

	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001de4:	2105      	movs	r1, #5
 8001de6:	201a      	movs	r0, #26
 8001de8:	f7ff ff8a 	bl	8001d00 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001dec:	2032      	movs	r0, #50	@ 0x32
 8001dee:	f001 ff17 	bl	8003c20 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001df2:	2118      	movs	r1, #24
 8001df4:	201b      	movs	r0, #27
 8001df6:	f7ff ff83 	bl	8001d00 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001dfa:	2032      	movs	r0, #50	@ 0x32
 8001dfc:	f001 ff10 	bl	8003c20 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001e00:	2118      	movs	r1, #24
 8001e02:	201c      	movs	r0, #28
 8001e04:	f7ff ff7c 	bl	8001d00 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001e08:	2032      	movs	r0, #50	@ 0x32
 8001e0a:	f001 ff09 	bl	8003c20 <HAL_Delay>

	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001e0e:	2103      	movs	r1, #3
 8001e10:	201d      	movs	r0, #29
 8001e12:	f7ff ff75 	bl	8001d00 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001e16:	2032      	movs	r0, #50	@ 0x32
 8001e18:	f001 ff02 	bl	8003c20 <HAL_Delay>

	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	2038      	movs	r0, #56	@ 0x38
 8001e20:	f7ff ff6e 	bl	8001d00 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001e24:	2032      	movs	r0, #50	@ 0x32
 8001e26:	f001 fefb 	bl	8003c20 <HAL_Delay>
//
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	0800a49c 	.word	0x0800a49c
 8001e38:	0800a4b4 	.word	0x0800a4b4
 8001e3c:	0800a4d8 	.word	0x0800a4d8

08001e40 <LL_SPI_Enable>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_SPI_SetStandard>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f023 0210 	bic.w	r2, r3, #16
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	605a      	str	r2, [r3, #4]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_SPI_IsActiveFlag_TXE>:
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d101      	bne.n	8001ec4 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_SPI_ReceiveData8>:
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	330c      	adds	r3, #12
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b2db      	uxtb	r3, r3
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_SPI_TransmitData8>:
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	330c      	adds	r3, #12
 8001efe:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	701a      	strb	r2, [r3, #0]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_GPIO_SetOutputPin>:
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	619a      	str	r2, [r3, #24]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_GPIO_ResetOutputPin>:
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	041a      	lsls	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_AHB1_GRP1_EnableClock>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f58:	4907      	ldr	r1, [pc, #28]	@ (8001f78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40023800 	.word	0x40023800

08001f7c <LL_APB1_GRP1_EnableClock>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f88:	4907      	ldr	r1, [pc, #28]	@ (8001fa8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40023800 	.word	0x40023800

08001fac <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b090      	sub	sp, #64	@ 0x40
 8001fb0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001fb2:	f107 0318 	add.w	r3, r7, #24
 8001fb6:	2228      	movs	r2, #40	@ 0x28
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f005 fd34 	bl	8007a28 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001fd0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001fd4:	f7ff ffd2 	bl	8001f7c <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fd8:	2002      	movs	r0, #2
 8001fda:	f7ff ffb7 	bl	8001f4c <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001fde:	2338      	movs	r3, #56	@ 0x38
 8001fe0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001ff2:	2306      	movs	r3, #6
 8001ff4:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4826      	ldr	r0, [pc, #152]	@ (8002094 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001ffc:	f003 fea9 	bl	8005d52 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002004:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002008:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800200e:	2302      	movs	r3, #2
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002012:	2301      	movs	r3, #1
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800201c:	2308      	movs	r3, #8
 800201e:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002028:	230a      	movs	r3, #10
 800202a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 800202c:	f107 0318 	add.w	r3, r7, #24
 8002030:	4619      	mov	r1, r3
 8002032:	4819      	ldr	r0, [pc, #100]	@ (8002098 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002034:	f004 f86b 	bl	800610e <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002038:	2100      	movs	r1, #0
 800203a:	4817      	ldr	r0, [pc, #92]	@ (8002098 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800203c:	f7ff ff10 	bl	8001e60 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8002040:	2140      	movs	r1, #64	@ 0x40
 8002042:	4814      	ldr	r0, [pc, #80]	@ (8002094 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002044:	f7ff ff73 	bl	8001f2e <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8002048:	2340      	movs	r3, #64	@ 0x40
 800204a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800204c:	2301      	movs	r3, #1
 800204e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002062:	f003 fe76 	bl	8005d52 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8002066:	2380      	movs	r3, #128	@ 0x80
 8002068:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800206e:	2301      	movs	r3, #1
 8002070:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8002072:	463b      	mov	r3, r7
 8002074:	4619      	mov	r1, r3
 8002076:	4807      	ldr	r0, [pc, #28]	@ (8002094 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002078:	f003 fe6b 	bl	8005d52 <LL_GPIO_Init>

	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 800207c:	4806      	ldr	r0, [pc, #24]	@ (8002098 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800207e:	f7ff fedf 	bl	8001e40 <LL_SPI_Enable>

	CHIP_DESELECT(LPS22HH);
 8002082:	2140      	movs	r1, #64	@ 0x40
 8002084:	4803      	ldr	r0, [pc, #12]	@ (8002094 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002086:	f7ff ff44 	bl	8001f12 <LL_GPIO_SetOutputPin>
}
 800208a:	bf00      	nop
 800208c:	3740      	adds	r7, #64	@ 0x40
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40020400 	.word	0x40020400
 8002098:	40003c00 	.word	0x40003c00

0800209c <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80020a6:	bf00      	nop
 80020a8:	480c      	ldr	r0, [pc, #48]	@ (80020dc <SPI3_SendByte+0x40>)
 80020aa:	f7ff feff 	bl	8001eac <LL_SPI_IsActiveFlag_TXE>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f9      	beq.n	80020a8 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	4619      	mov	r1, r3
 80020b8:	4808      	ldr	r0, [pc, #32]	@ (80020dc <SPI3_SendByte+0x40>)
 80020ba:	f7ff ff18 	bl	8001eee <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80020be:	bf00      	nop
 80020c0:	4806      	ldr	r0, [pc, #24]	@ (80020dc <SPI3_SendByte+0x40>)
 80020c2:	f7ff fee0 	bl	8001e86 <LL_SPI_IsActiveFlag_RXNE>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f9      	beq.n	80020c0 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80020cc:	4803      	ldr	r0, [pc, #12]	@ (80020dc <SPI3_SendByte+0x40>)
 80020ce:	f7ff ff00 	bl	8001ed2 <LL_SPI_ReceiveData8>
 80020d2:	4603      	mov	r3, r0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40003c00 	.word	0x40003c00

080020e0 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 80020ea:	2140      	movs	r1, #64	@ 0x40
 80020ec:	480b      	ldr	r0, [pc, #44]	@ (800211c <LPS22HH_Readbyte+0x3c>)
 80020ee:	f7ff ff1e 	bl	8001f2e <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ffce 	bl	800209c <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8002100:	2000      	movs	r0, #0
 8002102:	f7ff ffcb 	bl	800209c <SPI3_SendByte>
 8002106:	4603      	mov	r3, r0
 8002108:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 800210a:	2140      	movs	r1, #64	@ 0x40
 800210c:	4803      	ldr	r0, [pc, #12]	@ (800211c <LPS22HH_Readbyte+0x3c>)
 800210e:	f7ff ff00 	bl	8001f12 <LL_GPIO_SetOutputPin>

	return val;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40020400 	.word	0x40020400

08002120 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	460a      	mov	r2, r1
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	4613      	mov	r3, r2
 800212e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002130:	2140      	movs	r1, #64	@ 0x40
 8002132:	480b      	ldr	r0, [pc, #44]	@ (8002160 <LPS22HH_Writebyte+0x40>)
 8002134:	f7ff fefb 	bl	8001f2e <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ffab 	bl	800209c <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8002146:	79bb      	ldrb	r3, [r7, #6]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ffa7 	bl	800209c <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 800214e:	2140      	movs	r1, #64	@ 0x40
 8002150:	4803      	ldr	r0, [pc, #12]	@ (8002160 <LPS22HH_Writebyte+0x40>)
 8002152:	f7ff fede 	bl	8001f12 <LL_GPIO_SetOutputPin>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40020400 	.word	0x40020400

08002164 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	71fb      	strb	r3, [r7, #7]

	LPS22HH_GPIO_SPI_Initialization();
 800216e:	f7ff ff1d 	bl	8001fac <LPS22HH_GPIO_SPI_Initialization>

	printf("Checking LPS22HH...\n");
 8002172:	4841      	ldr	r0, [pc, #260]	@ (8002278 <LPS22HH_Initialization+0x114>)
 8002174:	f005 fb78 	bl	8007868 <puts>

	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F);
 8002178:	200f      	movs	r0, #15
 800217a:	f7ff ffb1 	bl	80020e0 <LPS22HH_Readbyte>
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2bb3      	cmp	r3, #179	@ 0xb3
 8002186:	d105      	bne.n	8002194 <LPS22HH_Initialization+0x30>
	{
		printf("LPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	4619      	mov	r1, r3
 800218c:	483b      	ldr	r0, [pc, #236]	@ (800227c <LPS22HH_Initialization+0x118>)
 800218e:	f005 fb03 	bl	8007798 <iprintf>
 8002192:	e012      	b.n	80021ba <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2bb3      	cmp	r3, #179	@ 0xb3
 8002198:	d00f      	beq.n	80021ba <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 800219a:	200f      	movs	r0, #15
 800219c:	f7ff ffa0 	bl	80020e0 <LPS22HH_Readbyte>
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	2bb3      	cmp	r3, #179	@ 0xb3
 80021a8:	d007      	beq.n	80021ba <LPS22HH_Initialization+0x56>
			printf( "LPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	22b3      	movs	r2, #179	@ 0xb3
 80021ae:	4619      	mov	r1, r3
 80021b0:	4833      	ldr	r0, [pc, #204]	@ (8002280 <LPS22HH_Initialization+0x11c>)
 80021b2:	f005 faf1 	bl	8007798 <iprintf>
			return 1; //ERROR
 80021b6:	2301      	movs	r3, #1
 80021b8:	e059      	b.n	800226e <LPS22HH_Initialization+0x10a>
		}
	}

	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 80021ba:	2104      	movs	r1, #4
 80021bc:	2011      	movs	r0, #17
 80021be:	f7ff ffaf 	bl	8002120 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 80021c2:	2011      	movs	r0, #17
 80021c4:	f7ff ff8c 	bl	80020e0 <LPS22HH_Readbyte>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f7      	bne.n	80021c2 <LPS22HH_Initialization+0x5e>

	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80021d2:	2010      	movs	r0, #16
 80021d4:	f7ff ff84 	bl	80020e0 <LPS22HH_Readbyte>
 80021d8:	4603      	mov	r3, r0
 80021da:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021e2:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	4619      	mov	r1, r3
 80021e8:	2010      	movs	r0, #16
 80021ea:	f7ff ff99 	bl	8002120 <LPS22HH_Writebyte>
	temp_reg = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80021f2:	2010      	movs	r0, #16
 80021f4:	f7ff ff74 	bl	80020e0 <LPS22HH_Readbyte>
 80021f8:	4603      	mov	r3, r0
 80021fa:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);

	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 80021fc:	2010      	movs	r0, #16
 80021fe:	f7ff ff6f 	bl	80020e0 <LPS22HH_Readbyte>
 8002202:	4603      	mov	r3, r0
 8002204:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002206:	79bb      	ldrb	r3, [r7, #6]
 8002208:	f043 030c 	orr.w	r3, r3, #12
 800220c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	4619      	mov	r1, r3
 8002212:	2010      	movs	r0, #16
 8002214:	f7ff ff84 	bl	8002120 <LPS22HH_Writebyte>

	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002218:	2010      	movs	r0, #16
 800221a:	f7ff ff61 	bl	80020e0 <LPS22HH_Readbyte>
 800221e:	4603      	mov	r3, r0
 8002220:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002222:	79bb      	ldrb	r3, [r7, #6]
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800222a:	79bb      	ldrb	r3, [r7, #6]
 800222c:	4619      	mov	r1, r3
 800222e:	2010      	movs	r0, #16
 8002230:	f7ff ff76 	bl	8002120 <LPS22HH_Writebyte>

	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002234:	2011      	movs	r0, #17
 8002236:	f7ff ff53 	bl	80020e0 <LPS22HH_Readbyte>
 800223a:	4603      	mov	r3, r0
 800223c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002246:	79bb      	ldrb	r3, [r7, #6]
 8002248:	4619      	mov	r1, r3
 800224a:	2011      	movs	r0, #17
 800224c:	f7ff ff68 	bl	8002120 <LPS22HH_Writebyte>

	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002250:	2012      	movs	r0, #18
 8002252:	f7ff ff45 	bl	80020e0 <LPS22HH_Readbyte>
 8002256:	4603      	mov	r3, r0
 8002258:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 800225a:	79bb      	ldrb	r3, [r7, #6]
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002262:	79bb      	ldrb	r3, [r7, #6]
 8002264:	4619      	mov	r1, r3
 8002266:	2012      	movs	r0, #18
 8002268:	f7ff ff5a 	bl	8002120 <LPS22HH_Writebyte>

	return 0; //OK
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	0800a504 	.word	0x0800a504
 800227c:	0800a518 	.word	0x0800a518
 8002280:	0800a53c 	.word	0x0800a53c

08002284 <Quaternion_Update>:
float BNO080_Pitch;
float BNO080_Yaw;

// update our quaternion value passed by MotionEngine software
void Quaternion_Update(float *q_in)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b091      	sub	sp, #68	@ 0x44
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	float q_corr[4] = {0.0f, 0.0f, -0.70710678f, 0.70710678f};
 800228c:	4b95      	ldr	r3, [pc, #596]	@ (80024e4 <Quaternion_Update+0x260>)
 800228e:	f107 041c 	add.w	r4, r7, #28
 8002292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float q[4];

	Quaternion_Multiply(q_corr, q_in, q); // apply offset correction
 8002298:	f107 020c 	add.w	r2, r7, #12
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f968 	bl	8002578 <Quaternion_Multiply>

	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]); // normalize the quaternion
 80022a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80022b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80022b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80022c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80022cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80022d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e4:	eeb0 0a67 	vmov.f32	s0, s15
 80022e8:	f000 f90a 	bl	8002500 <invSqrt>
 80022ec:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

	q1 = q[0] * norm; // x
 80022f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80022f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	q2 = q[1] * norm; // y
 8002300:	edd7 7a04 	vldr	s15, [r7, #16]
 8002304:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	q3 = q[2] * norm; // z
 8002310:	edd7 7a05 	vldr	s15, [r7, #20]
 8002314:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	q4 = q[3] * norm; // w
 8002320:	edd7 7a06 	vldr	s15, [r7, #24]
 8002324:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	BNO080_Roll = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002330:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002334:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002340:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002350:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002354:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002358:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800235c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002364:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002368:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800236c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002370:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002374:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	eef0 0a67 	vmov.f32	s1, s15
 8002380:	eeb0 0a66 	vmov.f32	s0, s13
 8002384:	f007 fa0e 	bl	80097a4 <atan2f>
 8002388:	eef0 7a40 	vmov.f32	s15, s0
 800238c:	4b56      	ldr	r3, [pc, #344]	@ (80024e8 <Quaternion_Update+0x264>)
 800238e:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Pitch = -asinf(2.0f * (q2*q4 - q1*q3));
 8002392:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002396:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800239a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80023a2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80023a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023b2:	eeb0 0a67 	vmov.f32	s0, s15
 80023b6:	f007 f9c9 	bl	800974c <asinf>
 80023ba:	eef0 7a40 	vmov.f32	s15, s0
 80023be:	eef1 7a67 	vneg.f32	s15, s15
 80023c2:	4b4a      	ldr	r3, [pc, #296]	@ (80024ec <Quaternion_Update+0x268>)
 80023c4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 80023c8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80023cc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80023d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d4:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80023d8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80023e8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80023ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023f0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80023f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002400:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002408:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800240c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002414:	eef0 0a67 	vmov.f32	s1, s15
 8002418:	eeb0 0a66 	vmov.f32	s0, s13
 800241c:	f007 f9c2 	bl	80097a4 <atan2f>
 8002420:	eef0 7a40 	vmov.f32	s15, s0
 8002424:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <Quaternion_Update+0x26c>)
 8002426:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Roll *= _180_DIV_PI;
 800242a:	4b2f      	ldr	r3, [pc, #188]	@ (80024e8 <Quaternion_Update+0x264>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80024f4 <Quaternion_Update+0x270>
 8002434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002438:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <Quaternion_Update+0x264>)
 800243a:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Pitch *= _180_DIV_PI;
 800243e:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <Quaternion_Update+0x268>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80024f4 <Quaternion_Update+0x270>
 8002448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244c:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <Quaternion_Update+0x268>)
 800244e:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw *= _180_DIV_PI;
 8002452:	4b27      	ldr	r3, [pc, #156]	@ (80024f0 <Quaternion_Update+0x26c>)
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80024f4 <Quaternion_Update+0x270>
 800245c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002460:	4b23      	ldr	r3, [pc, #140]	@ (80024f0 <Quaternion_Update+0x26c>)
 8002462:	edc3 7a00 	vstr	s15, [r3]

	if (BNO080_Yaw >= 0)
 8002466:	4b22      	ldr	r3, [pc, #136]	@ (80024f0 <Quaternion_Update+0x26c>)
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	db0a      	blt.n	800248c <Quaternion_Update+0x208>
	{
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8002476:	4b1e      	ldr	r3, [pc, #120]	@ (80024f0 <Quaternion_Update+0x26c>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80024f8 <Quaternion_Update+0x274>
 8002480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002484:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <Quaternion_Update+0x26c>)
 8002486:	edc3 7a00 	vstr	s15, [r3]
 800248a:	e007      	b.n	800249c <Quaternion_Update+0x218>
	}
	else
	{
		BNO080_Yaw = -BNO080_Yaw;
 800248c:	4b18      	ldr	r3, [pc, #96]	@ (80024f0 <Quaternion_Update+0x26c>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	eef1 7a67 	vneg.f32	s15, s15
 8002496:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <Quaternion_Update+0x26c>)
 8002498:	edc3 7a00 	vstr	s15, [r3]
	}

	if (BNO080_Pitch >= 0)
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <Quaternion_Update+0x268>)
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024aa:	db0a      	blt.n	80024c2 <Quaternion_Update+0x23e>
	{
		BNO080_Pitch = 180.f - BNO080_Pitch;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <Quaternion_Update+0x268>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80024fc <Quaternion_Update+0x278>
 80024b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <Quaternion_Update+0x268>)
 80024bc:	edc3 7a00 	vstr	s15, [r3]
	}
	else
	{
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
	}
}
 80024c0:	e00b      	b.n	80024da <Quaternion_Update+0x256>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <Quaternion_Update+0x268>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80024fc <Quaternion_Update+0x278>
 80024cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024d0:	eef1 7a67 	vneg.f32	s15, s15
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <Quaternion_Update+0x268>)
 80024d6:	edc3 7a00 	vstr	s15, [r3]
}
 80024da:	bf00      	nop
 80024dc:	3744      	adds	r7, #68	@ 0x44
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd90      	pop	{r4, r7, pc}
 80024e2:	bf00      	nop
 80024e4:	0800a568 	.word	0x0800a568
 80024e8:	200002bc 	.word	0x200002bc
 80024ec:	200002c0 	.word	0x200002c0
 80024f0:	200002c4 	.word	0x200002c4
 80024f4:	42652ee1 	.word	0x42652ee1
 80024f8:	43b40000 	.word	0x43b40000
 80024fc:	43340000 	.word	0x43340000

08002500 <invSqrt>:

// fast inverse square-root borrowed from wiki

float invSqrt(float x)
{
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfX = 0.5f * x;
 800250a:	edd7 7a01 	vldr	s15, [r7, #4]
 800250e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002516:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800251e:	f107 0310 	add.w	r3, r7, #16
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	105a      	asrs	r2, r3, #1
 800252a:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <invSqrt+0x74>)
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfX * y * y));
 8002538:	ed97 7a04 	vldr	s14, [r7, #16]
 800253c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002544:	edd7 7a04 	vldr	s15, [r7, #16]
 8002548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002550:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002554:	edd7 7a04 	vldr	s15, [r7, #16]
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	ee07 3a90 	vmov	s15, r3
}
 8002566:	eeb0 0a67 	vmov.f32	s0, s15
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	5f3759df 	.word	0x5f3759df

08002578 <Quaternion_Multiply>:

// offset correction
void Quaternion_Multiply(const float *q1, const float *q2, float *out)
{
 8002578:	b480      	push	{r7}
 800257a:	b08d      	sub	sp, #52	@ 0x34
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
    float x1 = q1[0], y1 = q1[1], z1 = q1[2], w1 = q1[3];
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3304      	adds	r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3308      	adds	r3, #8
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	330c      	adds	r3, #12
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	623b      	str	r3, [r7, #32]
    float x2 = q2[0], y2 = q2[1], z2 = q2[2], w2 = q2[3];
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3304      	adds	r3, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3308      	adds	r3, #8
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	330c      	adds	r3, #12
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	613b      	str	r3, [r7, #16]

    out[0] = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;
 80025c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80025c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025cc:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80025d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025dc:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80025e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ec:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80025f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80025f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	edc3 7a00 	vstr	s15, [r3]
    out[1] = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;
 8002602:	ed97 7a08 	vldr	s14, [r7, #32]
 8002606:	edd7 7a06 	vldr	s15, [r7, #24]
 800260a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800260e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8002612:	edd7 7a05 	vldr	s15, [r7, #20]
 8002616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800261e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8002622:	edd7 7a04 	vldr	s15, [r7, #16]
 8002626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002632:	edd7 7a07 	vldr	s15, [r7, #28]
 8002636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	edc3 7a00 	vstr	s15, [r3]
    out[2] = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;
 8002646:	ed97 7a08 	vldr	s14, [r7, #32]
 800264a:	edd7 7a05 	vldr	s15, [r7, #20]
 800264e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002652:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8002656:	edd7 7a06 	vldr	s15, [r7, #24]
 800265a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800265e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002662:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8002666:	edd7 7a07 	vldr	s15, [r7, #28]
 800266a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002672:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002676:	edd7 7a04 	vldr	s15, [r7, #16]
 800267a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3308      	adds	r3, #8
 8002682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002686:	edc3 7a00 	vstr	s15, [r3]
    out[3] = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;
 800268a:	ed97 7a08 	vldr	s14, [r7, #32]
 800268e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800269a:	edd7 7a07 	vldr	s15, [r7, #28]
 800269e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a6:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80026aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80026ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80026ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80026be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	330c      	adds	r3, #12
 80026c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ca:	edc3 7a00 	vstr	s15, [r3]
}
 80026ce:	bf00      	nop
 80026d0:	3734      	adds	r7, #52	@ 0x34
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e0:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <__NVIC_GetPriorityGrouping+0x18>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	f003 0307 	and.w	r3, r3, #7
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	2b00      	cmp	r3, #0
 8002708:	db0b      	blt.n	8002722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	4907      	ldr	r1, [pc, #28]	@ (8002730 <__NVIC_EnableIRQ+0x38>)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2001      	movs	r0, #1
 800271a:	fa00 f202 	lsl.w	r2, r0, r2
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	db0a      	blt.n	800275e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	490c      	ldr	r1, [pc, #48]	@ (8002780 <__NVIC_SetPriority+0x4c>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	440b      	add	r3, r1
 8002758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800275c:	e00a      	b.n	8002774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4908      	ldr	r1, [pc, #32]	@ (8002784 <__NVIC_SetPriority+0x50>)
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	3b04      	subs	r3, #4
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	440b      	add	r3, r1
 8002772:	761a      	strb	r2, [r3, #24]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000e100 	.word	0xe000e100
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	@ 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f1c3 0307 	rsb	r3, r3, #7
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	bf28      	it	cs
 80027a6:	2304      	movcs	r3, #4
 80027a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d902      	bls.n	80027b8 <NVIC_EncodePriority+0x30>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3b03      	subs	r3, #3
 80027b6:	e000      	b.n	80027ba <NVIC_EncodePriority+0x32>
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	401a      	ands	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d0:	f04f 31ff 	mov.w	r1, #4294967295
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43d9      	mvns	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	4313      	orrs	r3, r2
         );
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3724      	adds	r7, #36	@ 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_SPI_SetStandard>:
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 0210 	bic.w	r2, r3, #16
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	605a      	str	r2, [r3, #4]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	621a      	str	r2, [r3, #32]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	43db      	mvns	r3, r3
 8002888:	401a      	ands	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d01c      	beq.n	80028e6 <LL_TIM_OC_EnableFast+0x4a>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d017      	beq.n	80028e2 <LL_TIM_OC_EnableFast+0x46>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b10      	cmp	r3, #16
 80028b6:	d012      	beq.n	80028de <LL_TIM_OC_EnableFast+0x42>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2b40      	cmp	r3, #64	@ 0x40
 80028bc:	d00d      	beq.n	80028da <LL_TIM_OC_EnableFast+0x3e>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c4:	d007      	beq.n	80028d6 <LL_TIM_OC_EnableFast+0x3a>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028cc:	d101      	bne.n	80028d2 <LL_TIM_OC_EnableFast+0x36>
 80028ce:	2305      	movs	r3, #5
 80028d0:	e00a      	b.n	80028e8 <LL_TIM_OC_EnableFast+0x4c>
 80028d2:	2306      	movs	r3, #6
 80028d4:	e008      	b.n	80028e8 <LL_TIM_OC_EnableFast+0x4c>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <LL_TIM_OC_EnableFast+0x4c>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <LL_TIM_OC_EnableFast+0x4c>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <LL_TIM_OC_EnableFast+0x4c>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <LL_TIM_OC_EnableFast+0x4c>
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3318      	adds	r3, #24
 80028ee:	4619      	mov	r1, r3
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <LL_TIM_OC_EnableFast+0x80>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	440b      	add	r3, r1
 80028f8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	4907      	ldr	r1, [pc, #28]	@ (8002920 <LL_TIM_OC_EnableFast+0x84>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	4619      	mov	r1, r3
 8002906:	2304      	movs	r3, #4
 8002908:	408b      	lsls	r3, r1
 800290a:	431a      	orrs	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	601a      	str	r2, [r3, #0]

}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	0800a5b8 	.word	0x0800a5b8
 8002920:	0800a5c0 	.word	0x0800a5c0

08002924 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d01c      	beq.n	800296e <LL_TIM_OC_EnablePreload+0x4a>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d017      	beq.n	800296a <LL_TIM_OC_EnablePreload+0x46>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b10      	cmp	r3, #16
 800293e:	d012      	beq.n	8002966 <LL_TIM_OC_EnablePreload+0x42>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b40      	cmp	r3, #64	@ 0x40
 8002944:	d00d      	beq.n	8002962 <LL_TIM_OC_EnablePreload+0x3e>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800294c:	d007      	beq.n	800295e <LL_TIM_OC_EnablePreload+0x3a>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002954:	d101      	bne.n	800295a <LL_TIM_OC_EnablePreload+0x36>
 8002956:	2305      	movs	r3, #5
 8002958:	e00a      	b.n	8002970 <LL_TIM_OC_EnablePreload+0x4c>
 800295a:	2306      	movs	r3, #6
 800295c:	e008      	b.n	8002970 <LL_TIM_OC_EnablePreload+0x4c>
 800295e:	2304      	movs	r3, #4
 8002960:	e006      	b.n	8002970 <LL_TIM_OC_EnablePreload+0x4c>
 8002962:	2303      	movs	r3, #3
 8002964:	e004      	b.n	8002970 <LL_TIM_OC_EnablePreload+0x4c>
 8002966:	2302      	movs	r3, #2
 8002968:	e002      	b.n	8002970 <LL_TIM_OC_EnablePreload+0x4c>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_TIM_OC_EnablePreload+0x4c>
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3318      	adds	r3, #24
 8002976:	4619      	mov	r1, r3
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <LL_TIM_OC_EnablePreload+0x80>)
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	440b      	add	r3, r1
 8002980:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	4907      	ldr	r1, [pc, #28]	@ (80029a8 <LL_TIM_OC_EnablePreload+0x84>)
 800298a:	5ccb      	ldrb	r3, [r1, r3]
 800298c:	4619      	mov	r1, r3
 800298e:	2308      	movs	r3, #8
 8002990:	408b      	lsls	r3, r1
 8002992:	431a      	orrs	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	601a      	str	r2, [r3, #0]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	0800a5b8 	.word	0x0800a5b8
 80029a8:	0800a5c0 	.word	0x0800a5c0

080029ac <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029be:	f023 0307 	bic.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	60da      	str	r2, [r3, #12]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	615a      	str	r2, [r3, #20]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	@ 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	330c      	adds	r3, #12
 8002a74:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f043 0320 	orr.w	r3, r3, #32
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	330c      	adds	r3, #12
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	61ba      	str	r2, [r7, #24]
 8002a8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a90:	6979      	ldr	r1, [r7, #20]
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	e841 2300 	strex	r3, r2, [r1]
 8002a98:	613b      	str	r3, [r7, #16]
   return(result);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e7      	bne.n	8002a70 <LL_USART_EnableIT_RXNE+0x8>
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3724      	adds	r7, #36	@ 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	605a      	str	r2, [r3, #4]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_GPIO_SetOutputPin>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	619a      	str	r2, [r3, #24]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_GPIO_ResetOutputPin>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	041a      	lsls	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	619a      	str	r2, [r3, #24]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <LL_AHB1_GRP1_EnableClock>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b10:	4b08      	ldr	r3, [pc, #32]	@ (8002b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b14:	4907      	ldr	r1, [pc, #28]	@ (8002b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4013      	ands	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	40023800 	.word	0x40023800

08002b38 <LL_APB1_GRP1_EnableClock>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002b40:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b44:	4907      	ldr	r1, [pc, #28]	@ (8002b64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40023800 	.word	0x40023800

08002b68 <LL_APB2_GRP1_EnableClock>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b70:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b74:	4907      	ldr	r1, [pc, #28]	@ (8002b94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002b7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4013      	ands	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40023800 	.word	0x40023800

08002b98 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i ++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e00d      	b.n	8002bc6 <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p + i));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4808      	ldr	r0, [pc, #32]	@ (8002bd8 <_write+0x40>)
 8002bb6:	f7ff ff7a 	bl	8002aae <LL_USART_TransmitData8>
		HAL_Delay(1);
 8002bba:	2001      	movs	r0, #1
 8002bbc:	f001 f830 	bl	8003c20 <HAL_Delay>
	for (int i = 0; i < len; i ++)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	dbed      	blt.n	8002baa <_write+0x12>
	}
	return len;
 8002bce:	687b      	ldr	r3, [r7, #4]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40011400 	.word	0x40011400

08002bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bdc:	b5b0      	push	{r4, r5, r7, lr}
 8002bde:	b094      	sub	sp, #80	@ 0x50
 8002be0:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	float q[4]; // array to store components of quaternion (x, y, z, w)
	float quatRadianAccuracy;
	unsigned char buf_read[16] = {0};
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]
	unsigned char buf_write[17] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};
 8002bf0:	4b90      	ldr	r3, [pc, #576]	@ (8002e34 <main+0x258>)
 8002bf2:	463c      	mov	r4, r7
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bfa:	682b      	ldr	r3, [r5, #0]
 8002bfc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bfe:	f000 ff9d 	bl	8003b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c02:	f000 f935 	bl	8002e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c06:	f000 fcaf 	bl	8003568 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002c0a:	f000 fac1 	bl	8003190 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002c0e:	f000 fc4b 	bl	80034a8 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002c12:	f000 fa17 	bl	8003044 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002c16:	f000 f9c3 	bl	8002fa0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002c1a:	f000 fa67 	bl	80030ec <MX_SPI3_Init>
  MX_UART5_Init();
 8002c1e:	f000 fbcb 	bl	80033b8 <MX_UART5_Init>
  MX_TIM5_Init();
 8002c22:	f000 fb27 	bl	8003274 <MX_TIM5_Init>
  MX_I2C1_Init();
 8002c26:	f000 f98d 	bl	8002f44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	LL_TIM_EnableCounter(TIM3);
 8002c2a:	4883      	ldr	r0, [pc, #524]	@ (8002e38 <main+0x25c>)
 8002c2c:	f7ff fdf2 	bl	8002814 <LL_TIM_EnableCounter>

	LL_USART_EnableIT_RXNE(USART6);
 8002c30:	4882      	ldr	r0, [pc, #520]	@ (8002e3c <main+0x260>)
 8002c32:	f7ff ff19 	bl	8002a68 <LL_USART_EnableIT_RXNE>
	// TODO: enable interrupt pin for GPS module
	LL_USART_EnableIT_RXNE(UART5);
 8002c36:	4882      	ldr	r0, [pc, #520]	@ (8002e40 <main+0x264>)
 8002c38:	f7ff ff16 	bl	8002a68 <LL_USART_EnableIT_RXNE>

	// initialize 9-axis sensor for rotation vector
	BNO080_Initialization();
 8002c3c:	f7fe fad0 	bl	80011e0 <BNO080_Initialization>
	BNO080_enableRotationVector(2500);
 8002c40:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002c44:	f7fe fda1 	bl	800178a <BNO080_enableRotationVector>

	// initialize 6-axis sensor for angular velocity
	ICM20602_Initialization();
 8002c48:	f7ff f87c 	bl	8001d44 <ICM20602_Initialization>

	// initialize barometric sensor for altitude
	LPS22HH_Initialization();
 8002c4c:	f7ff fa8a 	bl	8002164 <LPS22HH_Initialization>

	// TODO: initialize M8N GPS module

	// initialize timer for generating PWM signals to motors
	LL_TIM_EnableCounter(TIM5);
 8002c50:	487c      	ldr	r0, [pc, #496]	@ (8002e44 <main+0x268>)
 8002c52:	f7ff fddf 	bl	8002814 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8002c56:	2101      	movs	r1, #1
 8002c58:	487a      	ldr	r0, [pc, #488]	@ (8002e44 <main+0x268>)
 8002c5a:	f7ff fdfb 	bl	8002854 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8002c5e:	2110      	movs	r1, #16
 8002c60:	4878      	ldr	r0, [pc, #480]	@ (8002e44 <main+0x268>)
 8002c62:	f7ff fdf7 	bl	8002854 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8002c66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c6a:	4876      	ldr	r0, [pc, #472]	@ (8002e44 <main+0x268>)
 8002c6c:	f7ff fdf2 	bl	8002854 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8002c70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c74:	4873      	ldr	r0, [pc, #460]	@ (8002e44 <main+0x268>)
 8002c76:	f7ff fded 	bl	8002854 <LL_TIM_CC_EnableChannel>
//		HAL_Delay(70);
//		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
//		HAL_Delay(70);
//	}

	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0x00, I2C_MEMADD_SIZE_8BIT, &buf_read[0], sizeof(buf_read), 1);
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	9302      	str	r3, [sp, #8]
 8002c7e:	2310      	movs	r3, #16
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2301      	movs	r3, #1
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	21a0      	movs	r1, #160	@ 0xa0
 8002c8e:	486e      	ldr	r0, [pc, #440]	@ (8002e48 <main+0x26c>)
 8002c90:	f001 fcaa 	bl	80045e8 <HAL_I2C_Mem_Read>

	for(int i = 0; i < 16; i++) printf("%d ", buf_read[i]);
 8002c94:	2300      	movs	r3, #0
 8002c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c98:	e00b      	b.n	8002cb2 <main+0xd6>
 8002c9a:	f107 0214 	add.w	r2, r7, #20
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca0:	4413      	add	r3, r2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4869      	ldr	r0, [pc, #420]	@ (8002e4c <main+0x270>)
 8002ca8:	f004 fd76 	bl	8007798 <iprintf>
 8002cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cae:	3301      	adds	r3, #1
 8002cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb4:	2b0f      	cmp	r3, #15
 8002cb6:	ddf0      	ble.n	8002c9a <main+0xbe>

	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8002cb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002cbc:	4864      	ldr	r0, [pc, #400]	@ (8002e50 <main+0x274>)
 8002cbe:	f7ff ff13 	bl	8002ae8 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0x00, I2C_MEMADD_SIZE_8BIT, &buf_write[0], sizeof(buf_write), 1);
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	9302      	str	r3, [sp, #8]
 8002cc6:	2311      	movs	r3, #17
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	463b      	mov	r3, r7
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	21a0      	movs	r1, #160	@ 0xa0
 8002cd4:	485c      	ldr	r0, [pc, #368]	@ (8002e48 <main+0x26c>)
 8002cd6:	f001 fb8d 	bl	80043f4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f000 ffa0 	bl	8003c20 <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8002ce0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ce4:	485a      	ldr	r0, [pc, #360]	@ (8002e50 <main+0x274>)
 8002ce6:	f7ff fef1 	bl	8002acc <LL_GPIO_SetOutputPin>

	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0x00, I2C_MEMADD_SIZE_8BIT, &buf_read[0], sizeof(buf_read), 1);
 8002cea:	2301      	movs	r3, #1
 8002cec:	9302      	str	r3, [sp, #8]
 8002cee:	2310      	movs	r3, #16
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	21a0      	movs	r1, #160	@ 0xa0
 8002cfe:	4852      	ldr	r0, [pc, #328]	@ (8002e48 <main+0x26c>)
 8002d00:	f001 fc72 	bl	80045e8 <HAL_I2C_Mem_Read>

	for(int i = 0; i < 16; i++) printf("%d ", buf_read[i]);
 8002d04:	2300      	movs	r3, #0
 8002d06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d08:	e00b      	b.n	8002d22 <main+0x146>
 8002d0a:	f107 0214 	add.w	r2, r7, #20
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d10:	4413      	add	r3, r2
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	484d      	ldr	r0, [pc, #308]	@ (8002e4c <main+0x270>)
 8002d18:	f004 fd3e 	bl	8007798 <iprintf>
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1e:	3301      	adds	r3, #1
 8002d20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	ddf0      	ble.n	8002d0a <main+0x12e>

	// buzzer to indicate successful startup
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002d28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d2c:	4842      	ldr	r0, [pc, #264]	@ (8002e38 <main+0x25c>)
 8002d2e:	f7ff fd91 	bl	8002854 <LL_TIM_CC_EnableChannel>

	TIM3->PSC = 2000;
 8002d32:	4b41      	ldr	r3, [pc, #260]	@ (8002e38 <main+0x25c>)
 8002d34:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002d38:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8002d3a:	2064      	movs	r0, #100	@ 0x64
 8002d3c:	f000 ff70 	bl	8003c20 <HAL_Delay>
	TIM3->PSC = 1500;
 8002d40:	4b3d      	ldr	r3, [pc, #244]	@ (8002e38 <main+0x25c>)
 8002d42:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002d46:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8002d48:	2064      	movs	r0, #100	@ 0x64
 8002d4a:	f000 ff69 	bl	8003c20 <HAL_Delay>
	TIM3->PSC = 1000;
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e38 <main+0x25c>)
 8002d50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d54:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8002d56:	2064      	movs	r0, #100	@ 0x64
 8002d58:	f000 ff62 	bl	8003c20 <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002d5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d60:	4835      	ldr	r0, [pc, #212]	@ (8002e38 <main+0x25c>)
 8002d62:	f7ff fd88 	bl	8002876 <LL_TIM_CC_DisableChannel>

	printf("start\n");
 8002d66:	483b      	ldr	r0, [pc, #236]	@ (8002e54 <main+0x278>)
 8002d68:	f004 fd7e 	bl	8007868 <puts>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
			if (BNO080_dataAvailable())
 8002d6c:	f7fe fab8 	bl	80012e0 <BNO080_dataAvailable>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0fa      	beq.n	8002d6c <main+0x190>
			{
				q[0] = BNO080_getQuatI();
 8002d76:	f7fe fc73 	bl	8001660 <BNO080_getQuatI>
 8002d7a:	eef0 7a40 	vmov.f32	s15, s0
 8002d7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				q[1] = BNO080_getQuatJ();
 8002d82:	f7fe fc83 	bl	800168c <BNO080_getQuatJ>
 8002d86:	eef0 7a40 	vmov.f32	s15, s0
 8002d8a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
				q[2] = BNO080_getQuatK();
 8002d8e:	f7fe fc93 	bl	80016b8 <BNO080_getQuatK>
 8002d92:	eef0 7a40 	vmov.f32	s15, s0
 8002d96:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
				q[3] = BNO080_getQuatReal();
 8002d9a:	f7fe fca3 	bl	80016e4 <BNO080_getQuatReal>
 8002d9e:	eef0 7a40 	vmov.f32	s15, s0
 8002da2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
				quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8002da6:	f7fe fcb3 	bl	8001710 <BNO080_getQuatRadianAccuracy>
 8002daa:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34

				Quaternion_Update(&q[0]);
 8002dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fa66 	bl	8002284 <Quaternion_Update>

				printf("R: %d, P: %d, Y: %d\n", (int) (BNO080_Roll * 100), (int) (BNO080_Pitch * 100), (int) (BNO080_Yaw * 100));
 8002db8:	4b27      	ldr	r3, [pc, #156]	@ (8002e58 <main+0x27c>)
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002e5c <main+0x280>
 8002dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002dca:	4b25      	ldr	r3, [pc, #148]	@ (8002e60 <main+0x284>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002e5c <main+0x280>
 8002dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd8:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8002ddc:	4b21      	ldr	r3, [pc, #132]	@ (8002e64 <main+0x288>)
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002e5c <main+0x280>
 8002de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dee:	ee17 3a90 	vmov	r3, s15
 8002df2:	ee16 2a10 	vmov	r2, s12
 8002df6:	ee16 1a90 	vmov	r1, s13
 8002dfa:	481b      	ldr	r0, [pc, #108]	@ (8002e68 <main+0x28c>)
 8002dfc:	f004 fccc 	bl	8007798 <iprintf>
				printf("%d, %d\n", (int) (BNO080_Roll * 100), (int) (BNO080_Pitch * 100));
 8002e00:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <main+0x27c>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002e5c <main+0x280>
 8002e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002e12:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <main+0x284>)
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002e5c <main+0x280>
 8002e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e24:	ee17 2a90 	vmov	r2, s15
 8002e28:	ee16 1a90 	vmov	r1, s13
 8002e2c:	480f      	ldr	r0, [pc, #60]	@ (8002e6c <main+0x290>)
 8002e2e:	f004 fcb3 	bl	8007798 <iprintf>
			if (BNO080_dataAvailable())
 8002e32:	e79b      	b.n	8002d6c <main+0x190>
 8002e34:	0800a5a4 	.word	0x0800a5a4
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40011400 	.word	0x40011400
 8002e40:	40005000 	.word	0x40005000
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	200002c8 	.word	0x200002c8
 8002e4c:	0800a578 	.word	0x0800a578
 8002e50:	40020800 	.word	0x40020800
 8002e54:	0800a57c 	.word	0x0800a57c
 8002e58:	200002bc 	.word	0x200002bc
 8002e5c:	42c80000 	.word	0x42c80000
 8002e60:	200002c0 	.word	0x200002c0
 8002e64:	200002c4 	.word	0x200002c4
 8002e68:	0800a584 	.word	0x0800a584
 8002e6c:	0800a59c 	.word	0x0800a59c

08002e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b094      	sub	sp, #80	@ 0x50
 8002e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e76:	f107 0320 	add.w	r3, r7, #32
 8002e7a:	2230      	movs	r2, #48	@ 0x30
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 fdd2 	bl	8007a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	4b28      	ldr	r3, [pc, #160]	@ (8002f3c <SystemClock_Config+0xcc>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	4a27      	ldr	r2, [pc, #156]	@ (8002f3c <SystemClock_Config+0xcc>)
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ea4:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <SystemClock_Config+0xcc>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	4b22      	ldr	r3, [pc, #136]	@ (8002f40 <SystemClock_Config+0xd0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a21      	ldr	r2, [pc, #132]	@ (8002f40 <SystemClock_Config+0xd0>)
 8002eba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <SystemClock_Config+0xd0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ed0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ee4:	23a8      	movs	r3, #168	@ 0xa8
 8002ee6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002eec:	2304      	movs	r3, #4
 8002eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ef0:	f107 0320 	add.w	r3, r7, #32
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 f95d 	bl	80051b4 <HAL_RCC_OscConfig>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f00:	f000 fbb2 	bl	8003668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f04:	230f      	movs	r3, #15
 8002f06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	2105      	movs	r1, #5
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 fbbe 	bl	80056a4 <HAL_RCC_ClockConfig>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f2e:	f000 fb9b 	bl	8003668 <Error_Handler>
  }
}
 8002f32:	bf00      	nop
 8002f34:	3750      	adds	r7, #80	@ 0x50
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40007000 	.word	0x40007000

08002f44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f48:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <MX_I2C1_Init+0x50>)
 8002f4a:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <MX_I2C1_Init+0x54>)
 8002f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f4e:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <MX_I2C1_Init+0x50>)
 8002f50:	4a12      	ldr	r2, [pc, #72]	@ (8002f9c <MX_I2C1_Init+0x58>)
 8002f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <MX_I2C1_Init+0x50>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <MX_I2C1_Init+0x50>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <MX_I2C1_Init+0x50>)
 8002f62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f68:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <MX_I2C1_Init+0x50>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f6e:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <MX_I2C1_Init+0x50>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f74:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <MX_I2C1_Init+0x50>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f7a:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <MX_I2C1_Init+0x50>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f80:	4804      	ldr	r0, [pc, #16]	@ (8002f94 <MX_I2C1_Init+0x50>)
 8002f82:	f001 f8f3 	bl	800416c <HAL_I2C_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f8c:	f000 fb6c 	bl	8003668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f90:	bf00      	nop
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	200002c8 	.word	0x200002c8
 8002f98:	40005400 	.word	0x40005400
 8002f9c:	00061a80 	.word	0x00061a80

08002fa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b090      	sub	sp, #64	@ 0x40
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002fa6:	f107 0318 	add.w	r3, r7, #24
 8002faa:	2228      	movs	r2, #40	@ 0x28
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 fd3a 	bl	8007a28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	60da      	str	r2, [r3, #12]
 8002fc0:	611a      	str	r2, [r3, #16]
 8002fc2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002fc4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002fc8:	f7ff fdce 	bl	8002b68 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f7ff fd9b 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002fd2:	23e0      	movs	r3, #224	@ 0xe0
 8002fd4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fea:	463b      	mov	r3, r7
 8002fec:	4619      	mov	r1, r3
 8002fee:	4813      	ldr	r0, [pc, #76]	@ (800303c <MX_SPI1_Init+0x9c>)
 8002ff0:	f002 feaf 	bl	8005d52 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002ff8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002ffc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003002:	2302      	movs	r3, #2
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003006:	2301      	movs	r3, #1
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800300a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800300e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003010:	2310      	movs	r3, #16
 8003012:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003014:	2300      	movs	r3, #0
 8003016:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800301c:	230a      	movs	r3, #10
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003020:	f107 0318 	add.w	r3, r7, #24
 8003024:	4619      	mov	r1, r3
 8003026:	4806      	ldr	r0, [pc, #24]	@ (8003040 <MX_SPI1_Init+0xa0>)
 8003028:	f003 f871 	bl	800610e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800302c:	2100      	movs	r1, #0
 800302e:	4804      	ldr	r0, [pc, #16]	@ (8003040 <MX_SPI1_Init+0xa0>)
 8003030:	f7ff fbdd 	bl	80027ee <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	3740      	adds	r7, #64	@ 0x40
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40020000 	.word	0x40020000
 8003040:	40013000 	.word	0x40013000

08003044 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b090      	sub	sp, #64	@ 0x40
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800304a:	f107 0318 	add.w	r3, r7, #24
 800304e:	2228      	movs	r2, #40	@ 0x28
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f004 fce8 	bl	8007a28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	463b      	mov	r3, r7
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	60da      	str	r2, [r3, #12]
 8003064:	611a      	str	r2, [r3, #16]
 8003066:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8003068:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800306c:	f7ff fd64 	bl	8002b38 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003070:	2002      	movs	r0, #2
 8003072:	f7ff fd49 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8003076:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800307a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800307c:	2302      	movs	r3, #2
 800307e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003080:	2303      	movs	r3, #3
 8003082:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800308c:	2305      	movs	r3, #5
 800308e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003090:	463b      	mov	r3, r7
 8003092:	4619      	mov	r1, r3
 8003094:	4813      	ldr	r0, [pc, #76]	@ (80030e4 <MX_SPI2_Init+0xa0>)
 8003096:	f002 fe5c 	bl	8005d52 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800309e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80030a2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80030a4:	2300      	movs	r3, #0
 80030a6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80030a8:	2302      	movs	r3, #2
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80030ac:	2301      	movs	r3, #1
 80030ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80030b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80030b6:	2318      	movs	r3, #24
 80030b8:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80030ba:	2300      	movs	r3, #0
 80030bc:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80030c2:	230a      	movs	r3, #10
 80030c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80030c6:	f107 0318 	add.w	r3, r7, #24
 80030ca:	4619      	mov	r1, r3
 80030cc:	4806      	ldr	r0, [pc, #24]	@ (80030e8 <MX_SPI2_Init+0xa4>)
 80030ce:	f003 f81e 	bl	800610e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80030d2:	2100      	movs	r1, #0
 80030d4:	4804      	ldr	r0, [pc, #16]	@ (80030e8 <MX_SPI2_Init+0xa4>)
 80030d6:	f7ff fb8a 	bl	80027ee <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80030da:	bf00      	nop
 80030dc:	3740      	adds	r7, #64	@ 0x40
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40020400 	.word	0x40020400
 80030e8:	40003800 	.word	0x40003800

080030ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b090      	sub	sp, #64	@ 0x40
 80030f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80030f2:	f107 0318 	add.w	r3, r7, #24
 80030f6:	2228      	movs	r2, #40	@ 0x28
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f004 fc94 	bl	8007a28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	463b      	mov	r3, r7
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	60da      	str	r2, [r3, #12]
 800310c:	611a      	str	r2, [r3, #16]
 800310e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003110:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003114:	f7ff fd10 	bl	8002b38 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003118:	2002      	movs	r0, #2
 800311a:	f7ff fcf5 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800311e:	2338      	movs	r3, #56	@ 0x38
 8003120:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003122:	2302      	movs	r3, #2
 8003124:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003126:	2303      	movs	r3, #3
 8003128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003132:	2306      	movs	r3, #6
 8003134:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003136:	463b      	mov	r3, r7
 8003138:	4619      	mov	r1, r3
 800313a:	4813      	ldr	r0, [pc, #76]	@ (8003188 <MX_SPI3_Init+0x9c>)
 800313c:	f002 fe09 	bl	8005d52 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003144:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003148:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800314e:	2302      	movs	r3, #2
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003152:	2301      	movs	r3, #1
 8003154:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003156:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800315c:	2308      	movs	r3, #8
 800315e:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003160:	2300      	movs	r3, #0
 8003162:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003168:	230a      	movs	r3, #10
 800316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800316c:	f107 0318 	add.w	r3, r7, #24
 8003170:	4619      	mov	r1, r3
 8003172:	4806      	ldr	r0, [pc, #24]	@ (800318c <MX_SPI3_Init+0xa0>)
 8003174:	f002 ffcb 	bl	800610e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003178:	2100      	movs	r1, #0
 800317a:	4804      	ldr	r0, [pc, #16]	@ (800318c <MX_SPI3_Init+0xa0>)
 800317c:	f7ff fb37 	bl	80027ee <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003180:	bf00      	nop
 8003182:	3740      	adds	r7, #64	@ 0x40
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40020400 	.word	0x40020400
 800318c:	40003c00 	.word	0x40003c00

08003190 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b094      	sub	sp, #80	@ 0x50
 8003194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003196:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80031a6:	f107 031c 	add.w	r3, r7, #28
 80031aa:	2220      	movs	r2, #32
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f004 fc3a 	bl	8007a28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	611a      	str	r2, [r3, #16]
 80031c2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80031c4:	2002      	movs	r0, #2
 80031c6:	f7ff fcb7 	bl	8002b38 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 80031ca:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80031ce:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80031d0:	2300      	movs	r3, #0
 80031d2:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20;
 80031d4:	2314      	movs	r3, #20
 80031d6:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80031d8:	2300      	movs	r3, #0
 80031da:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80031dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031e0:	4619      	mov	r1, r3
 80031e2:	4822      	ldr	r0, [pc, #136]	@ (800326c <MX_TIM3_Init+0xdc>)
 80031e4:	f003 f858 	bl	8006298 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80031e8:	4820      	ldr	r0, [pc, #128]	@ (800326c <MX_TIM3_Init+0xdc>)
 80031ea:	f7ff fb23 	bl	8002834 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80031ee:	2100      	movs	r1, #0
 80031f0:	481e      	ldr	r0, [pc, #120]	@ (800326c <MX_TIM3_Init+0xdc>)
 80031f2:	f7ff fbdb 	bl	80029ac <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 80031f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031fa:	481c      	ldr	r0, [pc, #112]	@ (800326c <MX_TIM3_Init+0xdc>)
 80031fc:	f7ff fb92 	bl	8002924 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003200:	2360      	movs	r3, #96	@ 0x60
 8003202:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003204:	2300      	movs	r3, #0
 8003206:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 800320c:	230a      	movs	r3, #10
 800320e:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003210:	2300      	movs	r3, #0
 8003212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	461a      	mov	r2, r3
 800321a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800321e:	4813      	ldr	r0, [pc, #76]	@ (800326c <MX_TIM3_Init+0xdc>)
 8003220:	f003 f8d4 	bl	80063cc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003224:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003228:	4810      	ldr	r0, [pc, #64]	@ (800326c <MX_TIM3_Init+0xdc>)
 800322a:	f7ff fb37 	bl	800289c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800322e:	2100      	movs	r1, #0
 8003230:	480e      	ldr	r0, [pc, #56]	@ (800326c <MX_TIM3_Init+0xdc>)
 8003232:	f7ff fbd0 	bl	80029d6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003236:	480d      	ldr	r0, [pc, #52]	@ (800326c <MX_TIM3_Init+0xdc>)
 8003238:	f7ff fbe0 	bl	80029fc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800323c:	2002      	movs	r0, #2
 800323e:	f7ff fc63 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB1   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8003242:	2302      	movs	r3, #2
 8003244:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003246:	2302      	movs	r3, #2
 8003248:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003256:	2302      	movs	r3, #2
 8003258:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4804      	ldr	r0, [pc, #16]	@ (8003270 <MX_TIM3_Init+0xe0>)
 8003260:	f002 fd77 	bl	8005d52 <LL_GPIO_Init>

}
 8003264:	bf00      	nop
 8003266:	3750      	adds	r7, #80	@ 0x50
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40000400 	.word	0x40000400
 8003270:	40020400 	.word	0x40020400

08003274 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b094      	sub	sp, #80	@ 0x50
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800327a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	60da      	str	r2, [r3, #12]
 8003288:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	2220      	movs	r2, #32
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fbc8 	bl	8007a28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	611a      	str	r2, [r3, #16]
 80032a6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80032a8:	2008      	movs	r0, #8
 80032aa:	f7ff fc45 	bl	8002b38 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80032b2:	2300      	movs	r3, #0
 80032b4:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 41999;
 80032b6:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 80032ba:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80032bc:	2300      	movs	r3, #0
 80032be:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80032c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032c4:	4619      	mov	r1, r3
 80032c6:	483a      	ldr	r0, [pc, #232]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 80032c8:	f002 ffe6 	bl	8006298 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 80032cc:	4838      	ldr	r0, [pc, #224]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 80032ce:	f7ff fab1 	bl	8002834 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 80032d2:	2100      	movs	r1, #0
 80032d4:	4836      	ldr	r0, [pc, #216]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 80032d6:	f7ff fb69 	bl	80029ac <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 80032da:	2101      	movs	r1, #1
 80032dc:	4834      	ldr	r0, [pc, #208]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 80032de:	f7ff fb21 	bl	8002924 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80032e2:	2360      	movs	r3, #96	@ 0x60
 80032e4:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80032f2:	2300      	movs	r3, #0
 80032f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80032f6:	f107 031c 	add.w	r3, r7, #28
 80032fa:	461a      	mov	r2, r3
 80032fc:	2101      	movs	r1, #1
 80032fe:	482c      	ldr	r0, [pc, #176]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 8003300:	f003 f864 	bl	80063cc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8003304:	2101      	movs	r1, #1
 8003306:	482a      	ldr	r0, [pc, #168]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 8003308:	f7ff fac8 	bl	800289c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 800330c:	2110      	movs	r1, #16
 800330e:	4828      	ldr	r0, [pc, #160]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 8003310:	f7ff fb08 	bl	8002924 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003314:	f107 031c 	add.w	r3, r7, #28
 8003318:	461a      	mov	r2, r3
 800331a:	2110      	movs	r1, #16
 800331c:	4824      	ldr	r0, [pc, #144]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 800331e:	f003 f855 	bl	80063cc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8003322:	2110      	movs	r1, #16
 8003324:	4822      	ldr	r0, [pc, #136]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 8003326:	f7ff fab9 	bl	800289c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 800332a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800332e:	4820      	ldr	r0, [pc, #128]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 8003330:	f7ff faf8 	bl	8002924 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003334:	f107 031c 	add.w	r3, r7, #28
 8003338:	461a      	mov	r2, r3
 800333a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800333e:	481c      	ldr	r0, [pc, #112]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 8003340:	f003 f844 	bl	80063cc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8003344:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003348:	4819      	ldr	r0, [pc, #100]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 800334a:	f7ff faa7 	bl	800289c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 800334e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003352:	4817      	ldr	r0, [pc, #92]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 8003354:	f7ff fae6 	bl	8002924 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003358:	f107 031c 	add.w	r3, r7, #28
 800335c:	461a      	mov	r2, r3
 800335e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003362:	4813      	ldr	r0, [pc, #76]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 8003364:	f003 f832 	bl	80063cc <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8003368:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800336c:	4810      	ldr	r0, [pc, #64]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 800336e:	f7ff fa95 	bl	800289c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8003372:	2100      	movs	r1, #0
 8003374:	480e      	ldr	r0, [pc, #56]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 8003376:	f7ff fb2e 	bl	80029d6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 800337a:	480d      	ldr	r0, [pc, #52]	@ (80033b0 <MX_TIM5_Init+0x13c>)
 800337c:	f7ff fb3e 	bl	80029fc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003380:	2001      	movs	r0, #1
 8003382:	f7ff fbc1 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8003386:	230f      	movs	r3, #15
 8003388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800338a:	2302      	movs	r3, #2
 800338c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800339a:	2302      	movs	r3, #2
 800339c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4804      	ldr	r0, [pc, #16]	@ (80033b4 <MX_TIM5_Init+0x140>)
 80033a4:	f002 fcd5 	bl	8005d52 <LL_GPIO_Init>

}
 80033a8:	bf00      	nop
 80033aa:	3750      	adds	r7, #80	@ 0x50
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40020000 	.word	0x40020000

080033b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08e      	sub	sp, #56	@ 0x38
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80033be:	f107 031c 	add.w	r3, r7, #28
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	611a      	str	r2, [r3, #16]
 80033ce:	615a      	str	r2, [r3, #20]
 80033d0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
 80033e0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80033e2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80033e6:	f7ff fba7 	bl	8002b38 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80033ea:	2004      	movs	r0, #4
 80033ec:	f7ff fb8c 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80033f0:	2008      	movs	r0, #8
 80033f2:	f7ff fb89 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80033f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80033fc:	2302      	movs	r3, #2
 80033fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	2303      	movs	r3, #3
 8003402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800340c:	2308      	movs	r3, #8
 800340e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	4619      	mov	r1, r3
 8003414:	4821      	ldr	r0, [pc, #132]	@ (800349c <MX_UART5_Init+0xe4>)
 8003416:	f002 fc9c 	bl	8005d52 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800341a:	2304      	movs	r3, #4
 800341c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800341e:	2302      	movs	r3, #2
 8003420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003422:	2303      	movs	r3, #3
 8003424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800342e:	2308      	movs	r3, #8
 8003430:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	4619      	mov	r1, r3
 8003436:	481a      	ldr	r0, [pc, #104]	@ (80034a0 <MX_UART5_Init+0xe8>)
 8003438:	f002 fc8b 	bl	8005d52 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800343c:	f7ff f94e 	bl	80026dc <__NVIC_GetPriorityGrouping>
 8003440:	4603      	mov	r3, r0
 8003442:	2200      	movs	r2, #0
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff f99e 	bl	8002788 <NVIC_EncodePriority>
 800344c:	4603      	mov	r3, r0
 800344e:	4619      	mov	r1, r3
 8003450:	2035      	movs	r0, #53	@ 0x35
 8003452:	f7ff f96f 	bl	8002734 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8003456:	2035      	movs	r0, #53	@ 0x35
 8003458:	f7ff f94e 	bl	80026f8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800345c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003460:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800346a:	2300      	movs	r3, #0
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800346e:	2304      	movs	r3, #4
 8003470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003472:	2300      	movs	r3, #0
 8003474:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003476:	2300      	movs	r3, #0
 8003478:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800347a:	f107 031c 	add.w	r3, r7, #28
 800347e:	4619      	mov	r1, r3
 8003480:	4808      	ldr	r0, [pc, #32]	@ (80034a4 <MX_UART5_Init+0xec>)
 8003482:	f003 fbf1 	bl	8006c68 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8003486:	4807      	ldr	r0, [pc, #28]	@ (80034a4 <MX_UART5_Init+0xec>)
 8003488:	f7ff fad8 	bl	8002a3c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800348c:	4805      	ldr	r0, [pc, #20]	@ (80034a4 <MX_UART5_Init+0xec>)
 800348e:	f7ff fac5 	bl	8002a1c <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003492:	bf00      	nop
 8003494:	3738      	adds	r7, #56	@ 0x38
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020c00 	.word	0x40020c00
 80034a4:	40005000 	.word	0x40005000

080034a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08e      	sub	sp, #56	@ 0x38
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80034ae:	f107 031c 	add.w	r3, r7, #28
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	615a      	str	r2, [r3, #20]
 80034c0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
 80034d0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80034d2:	2020      	movs	r0, #32
 80034d4:	f7ff fb48 	bl	8002b68 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80034d8:	2004      	movs	r0, #4
 80034da:	f7ff fb15 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80034de:	23c0      	movs	r3, #192	@ 0xc0
 80034e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034e2:	2302      	movs	r3, #2
 80034e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80034e6:	2303      	movs	r3, #3
 80034e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80034f2:	2308      	movs	r3, #8
 80034f4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4819      	ldr	r0, [pc, #100]	@ (8003560 <MX_USART6_UART_Init+0xb8>)
 80034fc:	f002 fc29 	bl	8005d52 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003500:	f7ff f8ec 	bl	80026dc <__NVIC_GetPriorityGrouping>
 8003504:	4603      	mov	r3, r0
 8003506:	2200      	movs	r2, #0
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff f93c 	bl	8002788 <NVIC_EncodePriority>
 8003510:	4603      	mov	r3, r0
 8003512:	4619      	mov	r1, r3
 8003514:	2047      	movs	r0, #71	@ 0x47
 8003516:	f7ff f90d 	bl	8002734 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800351a:	2047      	movs	r0, #71	@ 0x47
 800351c:	f7ff f8ec 	bl	80026f8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003520:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003524:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800352e:	2300      	movs	r3, #0
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003532:	230c      	movs	r3, #12
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003536:	2300      	movs	r3, #0
 8003538:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800353a:	2300      	movs	r3, #0
 800353c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800353e:	f107 031c 	add.w	r3, r7, #28
 8003542:	4619      	mov	r1, r3
 8003544:	4807      	ldr	r0, [pc, #28]	@ (8003564 <MX_USART6_UART_Init+0xbc>)
 8003546:	f003 fb8f 	bl	8006c68 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800354a:	4806      	ldr	r0, [pc, #24]	@ (8003564 <MX_USART6_UART_Init+0xbc>)
 800354c:	f7ff fa76 	bl	8002a3c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8003550:	4804      	ldr	r0, [pc, #16]	@ (8003564 <MX_USART6_UART_Init+0xbc>)
 8003552:	f7ff fa63 	bl	8002a1c <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003556:	bf00      	nop
 8003558:	3738      	adds	r7, #56	@ 0x38
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40020800 	.word	0x40020800
 8003564:	40011400 	.word	0x40011400

08003568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356e:	463b      	mov	r3, r7
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
 800357c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800357e:	2004      	movs	r0, #4
 8003580:	f7ff fac2 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8003584:	2080      	movs	r0, #128	@ 0x80
 8003586:	f7ff fabf 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800358a:	2001      	movs	r0, #1
 800358c:	f7ff fabc 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003590:	2002      	movs	r0, #2
 8003592:	f7ff fab9 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8003596:	2008      	movs	r0, #8
 8003598:	f7ff fab6 	bl	8002b08 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 800359c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035a0:	482e      	ldr	r0, [pc, #184]	@ (800365c <MX_GPIO_Init+0xf4>)
 80035a2:	f7ff fa93 	bl	8002acc <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 80035a6:	f240 2117 	movw	r1, #535	@ 0x217
 80035aa:	482c      	ldr	r0, [pc, #176]	@ (800365c <MX_GPIO_Init+0xf4>)
 80035ac:	f7ff fa9c 	bl	8002ae8 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 80035b0:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 80035b4:	482a      	ldr	r0, [pc, #168]	@ (8003660 <MX_GPIO_Init+0xf8>)
 80035b6:	f7ff fa97 	bl	8002ae8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80035ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035be:	4829      	ldr	r0, [pc, #164]	@ (8003664 <MX_GPIO_Init+0xfc>)
 80035c0:	f7ff fa92 	bl	8002ae8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 80035c4:	f242 2317 	movw	r3, #8727	@ 0x2217
 80035c8:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80035ca:	2301      	movs	r3, #1
 80035cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035da:	463b      	mov	r3, r7
 80035dc:	4619      	mov	r1, r3
 80035de:	481f      	ldr	r0, [pc, #124]	@ (800365c <MX_GPIO_Init+0xf4>)
 80035e0:	f002 fbb7 	bl	8005d52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80035e4:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80035e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f2:	463b      	mov	r3, r7
 80035f4:	4619      	mov	r1, r3
 80035f6:	4819      	ldr	r0, [pc, #100]	@ (800365c <MX_GPIO_Init+0xf4>)
 80035f8:	f002 fbab 	bl	8005d52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80035fc:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8003600:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003602:	2301      	movs	r3, #1
 8003604:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003612:	463b      	mov	r3, r7
 8003614:	4619      	mov	r1, r3
 8003616:	4812      	ldr	r0, [pc, #72]	@ (8003660 <MX_GPIO_Init+0xf8>)
 8003618:	f002 fb9b 	bl	8005d52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800361c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003620:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003622:	2301      	movs	r3, #1
 8003624:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003632:	463b      	mov	r3, r7
 8003634:	4619      	mov	r1, r3
 8003636:	480b      	ldr	r0, [pc, #44]	@ (8003664 <MX_GPIO_Init+0xfc>)
 8003638:	f002 fb8b 	bl	8005d52 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800363c:	2380      	movs	r3, #128	@ 0x80
 800363e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003640:	2300      	movs	r3, #0
 8003642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003648:	463b      	mov	r3, r7
 800364a:	4619      	mov	r1, r3
 800364c:	4804      	ldr	r0, [pc, #16]	@ (8003660 <MX_GPIO_Init+0xf8>)
 800364e:	f002 fb80 	bl	8005d52 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003652:	bf00      	nop
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40020800 	.word	0x40020800
 8003660:	40020400 	.word	0x40020400
 8003664:	40020000 	.word	0x40020000

08003668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800366c:	b672      	cpsid	i
}
 800366e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <Error_Handler+0x8>

08003674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <HAL_MspInit+0x4c>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	4a0f      	ldr	r2, [pc, #60]	@ (80036c0 <HAL_MspInit+0x4c>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003688:	6453      	str	r3, [r2, #68]	@ 0x44
 800368a:	4b0d      	ldr	r3, [pc, #52]	@ (80036c0 <HAL_MspInit+0x4c>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_MspInit+0x4c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	4a08      	ldr	r2, [pc, #32]	@ (80036c0 <HAL_MspInit+0x4c>)
 80036a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a6:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_MspInit+0x4c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800

080036c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	@ 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a19      	ldr	r2, [pc, #100]	@ (8003748 <HAL_I2C_MspInit+0x84>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d12c      	bne.n	8003740 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	4b18      	ldr	r3, [pc, #96]	@ (800374c <HAL_I2C_MspInit+0x88>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	4a17      	ldr	r2, [pc, #92]	@ (800374c <HAL_I2C_MspInit+0x88>)
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f6:	4b15      	ldr	r3, [pc, #84]	@ (800374c <HAL_I2C_MspInit+0x88>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003702:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003708:	2312      	movs	r3, #18
 800370a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003710:	2303      	movs	r3, #3
 8003712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003714:	2304      	movs	r3, #4
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	4619      	mov	r1, r3
 800371e:	480c      	ldr	r0, [pc, #48]	@ (8003750 <HAL_I2C_MspInit+0x8c>)
 8003720:	f000 fb88 	bl	8003e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	4b08      	ldr	r3, [pc, #32]	@ (800374c <HAL_I2C_MspInit+0x88>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	4a07      	ldr	r2, [pc, #28]	@ (800374c <HAL_I2C_MspInit+0x88>)
 800372e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003732:	6413      	str	r3, [r2, #64]	@ 0x40
 8003734:	4b05      	ldr	r3, [pc, #20]	@ (800374c <HAL_I2C_MspInit+0x88>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003740:	bf00      	nop
 8003742:	3728      	adds	r7, #40	@ 0x28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40005400 	.word	0x40005400
 800374c:	40023800 	.word	0x40023800
 8003750:	40020400 	.word	0x40020400

08003754 <LL_USART_IsActiveFlag_RXNE>:
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b20      	cmp	r3, #32
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <LL_USART_ClearFlag_RXNE>:
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f06f 0220 	mvn.w	r2, #32
 8003788:	601a      	str	r2, [r3, #0]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_USART_ReceiveData8>:
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	b2db      	uxtb	r3, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	4013      	ands	r3, r2
 80037c6:	041a      	lsls	r2, r3, #16
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43d9      	mvns	r1, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	400b      	ands	r3, r1
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	619a      	str	r2, [r3, #24]
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037e6:	bf00      	nop
 80037e8:	e7fd      	b.n	80037e6 <NMI_Handler+0x4>

080037ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ee:	bf00      	nop
 80037f0:	e7fd      	b.n	80037ee <HardFault_Handler+0x4>

080037f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037f2:	b480      	push	{r7}
 80037f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037f6:	bf00      	nop
 80037f8:	e7fd      	b.n	80037f6 <MemManage_Handler+0x4>

080037fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037fa:	b480      	push	{r7}
 80037fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037fe:	bf00      	nop
 8003800:	e7fd      	b.n	80037fe <BusFault_Handler+0x4>

08003802 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003806:	bf00      	nop
 8003808:	e7fd      	b.n	8003806 <UsageFault_Handler+0x4>

0800380a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003838:	f000 f9d2 	bl	8003be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800383c:	bf00      	nop
 800383e:	bd80      	pop	{r7, pc}

08003840 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  static unsigned char count = 0; // count number of interrupts

	if (LL_USART_IsActiveFlag_RXNE(UART5))
 8003844:	4834      	ldr	r0, [pc, #208]	@ (8003918 <UART5_IRQHandler+0xd8>)
 8003846:	f7ff ff85 	bl	8003754 <LL_USART_IsActiveFlag_RXNE>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d060      	beq.n	8003912 <UART5_IRQHandler+0xd2>
  {
	  LL_USART_ClearFlag_RXNE(UART5);
 8003850:	4831      	ldr	r0, [pc, #196]	@ (8003918 <UART5_IRQHandler+0xd8>)
 8003852:	f7ff ff92 	bl	800377a <LL_USART_ClearFlag_RXNE>
	  uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8003856:	4830      	ldr	r0, [pc, #192]	@ (8003918 <UART5_IRQHandler+0xd8>)
 8003858:	f7ff ff9d 	bl	8003796 <LL_USART_ReceiveData8>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	4b2e      	ldr	r3, [pc, #184]	@ (800391c <UART5_IRQHandler+0xdc>)
 8003862:	701a      	strb	r2, [r3, #0]
	  uart5_rx_flag = 1;
 8003864:	4b2e      	ldr	r3, [pc, #184]	@ (8003920 <UART5_IRQHandler+0xe0>)
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]

	  switch(count)
 800386a:	4b2e      	ldr	r3, [pc, #184]	@ (8003924 <UART5_IRQHandler+0xe4>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b1f      	cmp	r3, #31
 8003870:	d02e      	beq.n	80038d0 <UART5_IRQHandler+0x90>
 8003872:	2b1f      	cmp	r3, #31
 8003874:	dc3e      	bgt.n	80038f4 <UART5_IRQHandler+0xb4>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <UART5_IRQHandler+0x40>
 800387a:	2b01      	cmp	r3, #1
 800387c:	d012      	beq.n	80038a4 <UART5_IRQHandler+0x64>
 800387e:	e039      	b.n	80038f4 <UART5_IRQHandler+0xb4>
	  {
	  case 0:
		  if (uart5_rx_data == 0x20)
 8003880:	4b26      	ldr	r3, [pc, #152]	@ (800391c <UART5_IRQHandler+0xdc>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b20      	cmp	r3, #32
 8003886:	d143      	bne.n	8003910 <UART5_IRQHandler+0xd0>
		  {
			  ibus_rx_buf[count] = uart5_rx_data;
 8003888:	4b26      	ldr	r3, [pc, #152]	@ (8003924 <UART5_IRQHandler+0xe4>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	4b23      	ldr	r3, [pc, #140]	@ (800391c <UART5_IRQHandler+0xdc>)
 8003890:	7819      	ldrb	r1, [r3, #0]
 8003892:	4b25      	ldr	r3, [pc, #148]	@ (8003928 <UART5_IRQHandler+0xe8>)
 8003894:	5499      	strb	r1, [r3, r2]
			  count++;
 8003896:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <UART5_IRQHandler+0xe4>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4b21      	ldr	r3, [pc, #132]	@ (8003924 <UART5_IRQHandler+0xe4>)
 80038a0:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80038a2:	e035      	b.n	8003910 <UART5_IRQHandler+0xd0>
	  case 1:
		  if (uart5_rx_data == 0x40)
 80038a4:	4b1d      	ldr	r3, [pc, #116]	@ (800391c <UART5_IRQHandler+0xdc>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b40      	cmp	r3, #64	@ 0x40
 80038aa:	d10d      	bne.n	80038c8 <UART5_IRQHandler+0x88>
		  {
			  ibus_rx_buf[count] = uart5_rx_data;
 80038ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003924 <UART5_IRQHandler+0xe4>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b1a      	ldr	r3, [pc, #104]	@ (800391c <UART5_IRQHandler+0xdc>)
 80038b4:	7819      	ldrb	r1, [r3, #0]
 80038b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003928 <UART5_IRQHandler+0xe8>)
 80038b8:	5499      	strb	r1, [r3, r2]
			  count++;
 80038ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003924 <UART5_IRQHandler+0xe4>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	3301      	adds	r3, #1
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4b18      	ldr	r3, [pc, #96]	@ (8003924 <UART5_IRQHandler+0xe4>)
 80038c4:	701a      	strb	r2, [r3, #0]
		  }
		  else
		  {
			  count = 0;
		  }
		  break;
 80038c6:	e024      	b.n	8003912 <UART5_IRQHandler+0xd2>
			  count = 0;
 80038c8:	4b16      	ldr	r3, [pc, #88]	@ (8003924 <UART5_IRQHandler+0xe4>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]
		  break;
 80038ce:	e020      	b.n	8003912 <UART5_IRQHandler+0xd2>
	  case 31:
		  ibus_rx_buf[count] = uart5_rx_data;
 80038d0:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <UART5_IRQHandler+0xe4>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b11      	ldr	r3, [pc, #68]	@ (800391c <UART5_IRQHandler+0xdc>)
 80038d8:	7819      	ldrb	r1, [r3, #0]
 80038da:	4b13      	ldr	r3, [pc, #76]	@ (8003928 <UART5_IRQHandler+0xe8>)
 80038dc:	5499      	strb	r1, [r3, r2]
		  count = 0;
 80038de:	4b11      	ldr	r3, [pc, #68]	@ (8003924 <UART5_IRQHandler+0xe4>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
		  ibus_rx_cplt_flag = 1;
 80038e4:	4b11      	ldr	r3, [pc, #68]	@ (800392c <UART5_IRQHandler+0xec>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 80038ea:	2104      	movs	r1, #4
 80038ec:	4810      	ldr	r0, [pc, #64]	@ (8003930 <UART5_IRQHandler+0xf0>)
 80038ee:	f7ff ff5f 	bl	80037b0 <LL_GPIO_TogglePin>
		  break;
 80038f2:	e00e      	b.n	8003912 <UART5_IRQHandler+0xd2>
	  default:
		  ibus_rx_buf[count] = uart5_rx_data;
 80038f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <UART5_IRQHandler+0xe4>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b08      	ldr	r3, [pc, #32]	@ (800391c <UART5_IRQHandler+0xdc>)
 80038fc:	7819      	ldrb	r1, [r3, #0]
 80038fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <UART5_IRQHandler+0xe8>)
 8003900:	5499      	strb	r1, [r3, r2]
		  count++;
 8003902:	4b08      	ldr	r3, [pc, #32]	@ (8003924 <UART5_IRQHandler+0xe4>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	3301      	adds	r3, #1
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <UART5_IRQHandler+0xe4>)
 800390c:	701a      	strb	r2, [r3, #0]
		  break;
 800390e:	e000      	b.n	8003912 <UART5_IRQHandler+0xd2>
		  break;
 8003910:	bf00      	nop
  }
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40005000 	.word	0x40005000
 800391c:	2000031f 	.word	0x2000031f
 8003920:	2000031e 	.word	0x2000031e
 8003924:	20000345 	.word	0x20000345
 8003928:	20000320 	.word	0x20000320
 800392c:	20000344 	.word	0x20000344
 8003930:	40020800 	.word	0x40020800

08003934 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(USART6))
 8003938:	480a      	ldr	r0, [pc, #40]	@ (8003964 <USART6_IRQHandler+0x30>)
 800393a:	f7ff ff0b 	bl	8003754 <LL_USART_IsActiveFlag_RXNE>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00c      	beq.n	800395e <USART6_IRQHandler+0x2a>
  {
	  LL_USART_ClearFlag_RXNE(USART6);
 8003944:	4807      	ldr	r0, [pc, #28]	@ (8003964 <USART6_IRQHandler+0x30>)
 8003946:	f7ff ff18 	bl	800377a <LL_USART_ClearFlag_RXNE>
	  uart6_rx_data = LL_USART_ReceiveData8(USART6);
 800394a:	4806      	ldr	r0, [pc, #24]	@ (8003964 <USART6_IRQHandler+0x30>)
 800394c:	f7ff ff23 	bl	8003796 <LL_USART_ReceiveData8>
 8003950:	4603      	mov	r3, r0
 8003952:	461a      	mov	r2, r3
 8003954:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <USART6_IRQHandler+0x34>)
 8003956:	701a      	strb	r2, [r3, #0]
	  uart6_rx_flag = 1;
 8003958:	4b04      	ldr	r3, [pc, #16]	@ (800396c <USART6_IRQHandler+0x38>)
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40011400 	.word	0x40011400
 8003968:	2000031d 	.word	0x2000031d
 800396c:	2000031c 	.word	0x2000031c

08003970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return 1;
 8003974:	2301      	movs	r3, #1
}
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <_kill>:

int _kill(int pid, int sig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800398a:	f004 f89f 	bl	8007acc <__errno>
 800398e:	4603      	mov	r3, r0
 8003990:	2216      	movs	r2, #22
 8003992:	601a      	str	r2, [r3, #0]
  return -1;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <_exit>:

void _exit (int status)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039a8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ffe7 	bl	8003980 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039b2:	bf00      	nop
 80039b4:	e7fd      	b.n	80039b2 <_exit+0x12>

080039b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e00a      	b.n	80039de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039c8:	f3af 8000 	nop.w
 80039cc:	4601      	mov	r1, r0
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	60ba      	str	r2, [r7, #8]
 80039d4:	b2ca      	uxtb	r2, r1
 80039d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	dbf0      	blt.n	80039c8 <_read+0x12>
  }

  return len;
 80039e6:	687b      	ldr	r3, [r7, #4]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a18:	605a      	str	r2, [r3, #4]
  return 0;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <_isatty>:

int _isatty(int file)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a60:	4a14      	ldr	r2, [pc, #80]	@ (8003ab4 <_sbrk+0x5c>)
 8003a62:	4b15      	ldr	r3, [pc, #84]	@ (8003ab8 <_sbrk+0x60>)
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a6c:	4b13      	ldr	r3, [pc, #76]	@ (8003abc <_sbrk+0x64>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a74:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <_sbrk+0x64>)
 8003a76:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <_sbrk+0x68>)
 8003a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a7a:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <_sbrk+0x64>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d207      	bcs.n	8003a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a88:	f004 f820 	bl	8007acc <__errno>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	220c      	movs	r2, #12
 8003a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	e009      	b.n	8003aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a98:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <_sbrk+0x64>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a9e:	4b07      	ldr	r3, [pc, #28]	@ (8003abc <_sbrk+0x64>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	4a05      	ldr	r2, [pc, #20]	@ (8003abc <_sbrk+0x64>)
 8003aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20020000 	.word	0x20020000
 8003ab8:	00000400 	.word	0x00000400
 8003abc:	20000348 	.word	0x20000348
 8003ac0:	200004a0 	.word	0x200004a0

08003ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ac8:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <SystemInit+0x20>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ace:	4a05      	ldr	r2, [pc, #20]	@ (8003ae4 <SystemInit+0x20>)
 8003ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003aec:	f7ff ffea 	bl	8003ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003af0:	480c      	ldr	r0, [pc, #48]	@ (8003b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003af2:	490d      	ldr	r1, [pc, #52]	@ (8003b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003af4:	4a0d      	ldr	r2, [pc, #52]	@ (8003b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003af8:	e002      	b.n	8003b00 <LoopCopyDataInit>

08003afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003afe:	3304      	adds	r3, #4

08003b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b04:	d3f9      	bcc.n	8003afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b06:	4a0a      	ldr	r2, [pc, #40]	@ (8003b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b08:	4c0a      	ldr	r4, [pc, #40]	@ (8003b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b0c:	e001      	b.n	8003b12 <LoopFillZerobss>

08003b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b10:	3204      	adds	r2, #4

08003b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b14:	d3fb      	bcc.n	8003b0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003b16:	f003 ffdf 	bl	8007ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b1a:	f7ff f85f 	bl	8002bdc <main>
  bx  lr    
 8003b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b28:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003b2c:	0800a9b4 	.word	0x0800a9b4
  ldr r2, =_sbss
 8003b30:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003b34:	2000049c 	.word	0x2000049c

08003b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b38:	e7fe      	b.n	8003b38 <ADC_IRQHandler>
	...

08003b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b40:	4b0e      	ldr	r3, [pc, #56]	@ (8003b7c <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	@ (8003b7c <HAL_Init+0x40>)
 8003b46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <HAL_Init+0x40>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <HAL_Init+0x40>)
 8003b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b58:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <HAL_Init+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a07      	ldr	r2, [pc, #28]	@ (8003b7c <HAL_Init+0x40>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b64:	2003      	movs	r0, #3
 8003b66:	f000 f931 	bl	8003dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b6a:	200f      	movs	r0, #15
 8003b6c:	f000 f808 	bl	8003b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b70:	f7ff fd80 	bl	8003674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00

08003b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b88:	4b12      	ldr	r3, [pc, #72]	@ (8003bd4 <HAL_InitTick+0x54>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <HAL_InitTick+0x58>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	4619      	mov	r1, r3
 8003b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f93b 	bl	8003e1a <HAL_SYSTICK_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00e      	b.n	8003bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b0f      	cmp	r3, #15
 8003bb2:	d80a      	bhi.n	8003bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	f000 f911 	bl	8003de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc0:	4a06      	ldr	r2, [pc, #24]	@ (8003bdc <HAL_InitTick+0x5c>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	2000000c 	.word	0x2000000c
 8003bdc:	20000008 	.word	0x20000008

08003be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be4:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <HAL_IncTick+0x20>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_IncTick+0x24>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a04      	ldr	r2, [pc, #16]	@ (8003c04 <HAL_IncTick+0x24>)
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	2000000c 	.word	0x2000000c
 8003c04:	2000034c 	.word	0x2000034c

08003c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	@ (8003c1c <HAL_GetTick+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	2000034c 	.word	0x2000034c

08003c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c28:	f7ff ffee 	bl	8003c08 <HAL_GetTick>
 8003c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d005      	beq.n	8003c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c64 <HAL_Delay+0x44>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c46:	bf00      	nop
 8003c48:	f7ff ffde 	bl	8003c08 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d8f7      	bhi.n	8003c48 <HAL_Delay+0x28>
  {
  }
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	2000000c 	.word	0x2000000c

08003c68 <__NVIC_SetPriorityGrouping>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c84:	4013      	ands	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c9a:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <__NVIC_SetPriorityGrouping+0x44>)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	60d3      	str	r3, [r2, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <__NVIC_GetPriorityGrouping>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb4:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 0307 	and.w	r3, r3, #7
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <__NVIC_SetPriority>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	6039      	str	r1, [r7, #0]
 8003cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	db0a      	blt.n	8003cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	490c      	ldr	r1, [pc, #48]	@ (8003d18 <__NVIC_SetPriority+0x4c>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	0112      	lsls	r2, r2, #4
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	440b      	add	r3, r1
 8003cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003cf4:	e00a      	b.n	8003d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4908      	ldr	r1, [pc, #32]	@ (8003d1c <__NVIC_SetPriority+0x50>)
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	3b04      	subs	r3, #4
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	440b      	add	r3, r1
 8003d0a:	761a      	strb	r2, [r3, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000e100 	.word	0xe000e100
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <NVIC_EncodePriority>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	@ 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f1c3 0307 	rsb	r3, r3, #7
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	bf28      	it	cs
 8003d3e:	2304      	movcs	r3, #4
 8003d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3304      	adds	r3, #4
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d902      	bls.n	8003d50 <NVIC_EncodePriority+0x30>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3b03      	subs	r3, #3
 8003d4e:	e000      	b.n	8003d52 <NVIC_EncodePriority+0x32>
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	401a      	ands	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d68:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	43d9      	mvns	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	4313      	orrs	r3, r2
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3724      	adds	r7, #36	@ 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d98:	d301      	bcc.n	8003d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e00f      	b.n	8003dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc8 <SysTick_Config+0x40>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da6:	210f      	movs	r1, #15
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	f7ff ff8e 	bl	8003ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <SysTick_Config+0x40>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db6:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <SysTick_Config+0x40>)
 8003db8:	2207      	movs	r2, #7
 8003dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	e000e010 	.word	0xe000e010

08003dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff47 	bl	8003c68 <__NVIC_SetPriorityGrouping>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df4:	f7ff ff5c 	bl	8003cb0 <__NVIC_GetPriorityGrouping>
 8003df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7ff ff8e 	bl	8003d20 <NVIC_EncodePriority>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff5d 	bl	8003ccc <__NVIC_SetPriority>
}
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ffb0 	bl	8003d88 <SysTick_Config>
 8003e28:	4603      	mov	r3, r0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b089      	sub	sp, #36	@ 0x24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	e16b      	b.n	8004128 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e50:	2201      	movs	r2, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	f040 815a 	bne.w	8004122 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d005      	beq.n	8003e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d130      	bne.n	8003ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	2203      	movs	r2, #3
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 0201 	and.w	r2, r3, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d017      	beq.n	8003f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d123      	bne.n	8003f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	08da      	lsrs	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3208      	adds	r2, #8
 8003f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	220f      	movs	r2, #15
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	08da      	lsrs	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3208      	adds	r2, #8
 8003f72:	69b9      	ldr	r1, [r7, #24]
 8003f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2203      	movs	r2, #3
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0203 	and.w	r2, r3, #3
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80b4 	beq.w	8004122 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	4b60      	ldr	r3, [pc, #384]	@ (8004140 <HAL_GPIO_Init+0x30c>)
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	4a5f      	ldr	r2, [pc, #380]	@ (8004140 <HAL_GPIO_Init+0x30c>)
 8003fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fca:	4b5d      	ldr	r3, [pc, #372]	@ (8004140 <HAL_GPIO_Init+0x30c>)
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fd6:	4a5b      	ldr	r2, [pc, #364]	@ (8004144 <HAL_GPIO_Init+0x310>)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	3302      	adds	r3, #2
 8003fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	220f      	movs	r2, #15
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a52      	ldr	r2, [pc, #328]	@ (8004148 <HAL_GPIO_Init+0x314>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d02b      	beq.n	800405a <HAL_GPIO_Init+0x226>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a51      	ldr	r2, [pc, #324]	@ (800414c <HAL_GPIO_Init+0x318>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d025      	beq.n	8004056 <HAL_GPIO_Init+0x222>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a50      	ldr	r2, [pc, #320]	@ (8004150 <HAL_GPIO_Init+0x31c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01f      	beq.n	8004052 <HAL_GPIO_Init+0x21e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a4f      	ldr	r2, [pc, #316]	@ (8004154 <HAL_GPIO_Init+0x320>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d019      	beq.n	800404e <HAL_GPIO_Init+0x21a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a4e      	ldr	r2, [pc, #312]	@ (8004158 <HAL_GPIO_Init+0x324>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_GPIO_Init+0x216>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a4d      	ldr	r2, [pc, #308]	@ (800415c <HAL_GPIO_Init+0x328>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00d      	beq.n	8004046 <HAL_GPIO_Init+0x212>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4c      	ldr	r2, [pc, #304]	@ (8004160 <HAL_GPIO_Init+0x32c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <HAL_GPIO_Init+0x20e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4b      	ldr	r2, [pc, #300]	@ (8004164 <HAL_GPIO_Init+0x330>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_GPIO_Init+0x20a>
 800403a:	2307      	movs	r3, #7
 800403c:	e00e      	b.n	800405c <HAL_GPIO_Init+0x228>
 800403e:	2308      	movs	r3, #8
 8004040:	e00c      	b.n	800405c <HAL_GPIO_Init+0x228>
 8004042:	2306      	movs	r3, #6
 8004044:	e00a      	b.n	800405c <HAL_GPIO_Init+0x228>
 8004046:	2305      	movs	r3, #5
 8004048:	e008      	b.n	800405c <HAL_GPIO_Init+0x228>
 800404a:	2304      	movs	r3, #4
 800404c:	e006      	b.n	800405c <HAL_GPIO_Init+0x228>
 800404e:	2303      	movs	r3, #3
 8004050:	e004      	b.n	800405c <HAL_GPIO_Init+0x228>
 8004052:	2302      	movs	r3, #2
 8004054:	e002      	b.n	800405c <HAL_GPIO_Init+0x228>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_GPIO_Init+0x228>
 800405a:	2300      	movs	r3, #0
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	f002 0203 	and.w	r2, r2, #3
 8004062:	0092      	lsls	r2, r2, #2
 8004064:	4093      	lsls	r3, r2
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4313      	orrs	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800406c:	4935      	ldr	r1, [pc, #212]	@ (8004144 <HAL_GPIO_Init+0x310>)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	3302      	adds	r3, #2
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800407a:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <HAL_GPIO_Init+0x334>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800409e:	4a32      	ldr	r2, [pc, #200]	@ (8004168 <HAL_GPIO_Init+0x334>)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040a4:	4b30      	ldr	r3, [pc, #192]	@ (8004168 <HAL_GPIO_Init+0x334>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040c8:	4a27      	ldr	r2, [pc, #156]	@ (8004168 <HAL_GPIO_Init+0x334>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040ce:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <HAL_GPIO_Init+0x334>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004168 <HAL_GPIO_Init+0x334>)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <HAL_GPIO_Init+0x334>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800411c:	4a12      	ldr	r2, [pc, #72]	@ (8004168 <HAL_GPIO_Init+0x334>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3301      	adds	r3, #1
 8004126:	61fb      	str	r3, [r7, #28]
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b0f      	cmp	r3, #15
 800412c:	f67f ae90 	bls.w	8003e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	3724      	adds	r7, #36	@ 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40023800 	.word	0x40023800
 8004144:	40013800 	.word	0x40013800
 8004148:	40020000 	.word	0x40020000
 800414c:	40020400 	.word	0x40020400
 8004150:	40020800 	.word	0x40020800
 8004154:	40020c00 	.word	0x40020c00
 8004158:	40021000 	.word	0x40021000
 800415c:	40021400 	.word	0x40021400
 8004160:	40021800 	.word	0x40021800
 8004164:	40021c00 	.word	0x40021c00
 8004168:	40013c00 	.word	0x40013c00

0800416c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e12b      	b.n	80043d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fa96 	bl	80036c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2224      	movs	r2, #36	@ 0x24
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041d0:	f001 fc60 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 80041d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4a81      	ldr	r2, [pc, #516]	@ (80043e0 <HAL_I2C_Init+0x274>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d807      	bhi.n	80041f0 <HAL_I2C_Init+0x84>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a80      	ldr	r2, [pc, #512]	@ (80043e4 <HAL_I2C_Init+0x278>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	bf94      	ite	ls
 80041e8:	2301      	movls	r3, #1
 80041ea:	2300      	movhi	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e006      	b.n	80041fe <HAL_I2C_Init+0x92>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a7d      	ldr	r2, [pc, #500]	@ (80043e8 <HAL_I2C_Init+0x27c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	bf94      	ite	ls
 80041f8:	2301      	movls	r3, #1
 80041fa:	2300      	movhi	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0e7      	b.n	80043d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a78      	ldr	r2, [pc, #480]	@ (80043ec <HAL_I2C_Init+0x280>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	0c9b      	lsrs	r3, r3, #18
 8004210:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a6a      	ldr	r2, [pc, #424]	@ (80043e0 <HAL_I2C_Init+0x274>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d802      	bhi.n	8004240 <HAL_I2C_Init+0xd4>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3301      	adds	r3, #1
 800423e:	e009      	b.n	8004254 <HAL_I2C_Init+0xe8>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	4a69      	ldr	r2, [pc, #420]	@ (80043f0 <HAL_I2C_Init+0x284>)
 800424c:	fba2 2303 	umull	r2, r3, r2, r3
 8004250:	099b      	lsrs	r3, r3, #6
 8004252:	3301      	adds	r3, #1
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	430b      	orrs	r3, r1
 800425a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004266:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	495c      	ldr	r1, [pc, #368]	@ (80043e0 <HAL_I2C_Init+0x274>)
 8004270:	428b      	cmp	r3, r1
 8004272:	d819      	bhi.n	80042a8 <HAL_I2C_Init+0x13c>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1e59      	subs	r1, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004282:	1c59      	adds	r1, r3, #1
 8004284:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004288:	400b      	ands	r3, r1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_I2C_Init+0x138>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1e59      	subs	r1, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	fbb1 f3f3 	udiv	r3, r1, r3
 800429c:	3301      	adds	r3, #1
 800429e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a2:	e051      	b.n	8004348 <HAL_I2C_Init+0x1dc>
 80042a4:	2304      	movs	r3, #4
 80042a6:	e04f      	b.n	8004348 <HAL_I2C_Init+0x1dc>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d111      	bne.n	80042d4 <HAL_I2C_Init+0x168>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1e58      	subs	r0, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	440b      	add	r3, r1
 80042be:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c2:	3301      	adds	r3, #1
 80042c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e012      	b.n	80042fa <HAL_I2C_Init+0x18e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1e58      	subs	r0, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	0099      	lsls	r1, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ea:	3301      	adds	r3, #1
 80042ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Init+0x196>
 80042fe:	2301      	movs	r3, #1
 8004300:	e022      	b.n	8004348 <HAL_I2C_Init+0x1dc>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10e      	bne.n	8004328 <HAL_I2C_Init+0x1bc>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1e58      	subs	r0, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6859      	ldr	r1, [r3, #4]
 8004312:	460b      	mov	r3, r1
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	440b      	add	r3, r1
 8004318:	fbb0 f3f3 	udiv	r3, r0, r3
 800431c:	3301      	adds	r3, #1
 800431e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004326:	e00f      	b.n	8004348 <HAL_I2C_Init+0x1dc>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	1e58      	subs	r0, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6859      	ldr	r1, [r3, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	0099      	lsls	r1, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	fbb0 f3f3 	udiv	r3, r0, r3
 800433e:	3301      	adds	r3, #1
 8004340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004344:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	6809      	ldr	r1, [r1, #0]
 800434c:	4313      	orrs	r3, r2
 800434e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004376:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6911      	ldr	r1, [r2, #16]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68d2      	ldr	r2, [r2, #12]
 8004382:	4311      	orrs	r1, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	430b      	orrs	r3, r1
 800438a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	000186a0 	.word	0x000186a0
 80043e4:	001e847f 	.word	0x001e847f
 80043e8:	003d08ff 	.word	0x003d08ff
 80043ec:	431bde83 	.word	0x431bde83
 80043f0:	10624dd3 	.word	0x10624dd3

080043f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	461a      	mov	r2, r3
 8004402:	4603      	mov	r3, r0
 8004404:	817b      	strh	r3, [r7, #10]
 8004406:	460b      	mov	r3, r1
 8004408:	813b      	strh	r3, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800440e:	f7ff fbfb 	bl	8003c08 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b20      	cmp	r3, #32
 800441e:	f040 80d9 	bne.w	80045d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	2319      	movs	r3, #25
 8004428:	2201      	movs	r2, #1
 800442a:	496d      	ldr	r1, [pc, #436]	@ (80045e0 <HAL_I2C_Mem_Write+0x1ec>)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fc8b 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
 800443a:	e0cc      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_I2C_Mem_Write+0x56>
 8004446:	2302      	movs	r3, #2
 8004448:	e0c5      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d007      	beq.n	8004470 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800447e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2221      	movs	r2, #33	@ 0x21
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2240      	movs	r2, #64	@ 0x40
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a3a      	ldr	r2, [r7, #32]
 800449a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a4d      	ldr	r2, [pc, #308]	@ (80045e4 <HAL_I2C_Mem_Write+0x1f0>)
 80044b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044b2:	88f8      	ldrh	r0, [r7, #6]
 80044b4:	893a      	ldrh	r2, [r7, #8]
 80044b6:	8979      	ldrh	r1, [r7, #10]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	4603      	mov	r3, r0
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fac2 	bl	8004a4c <I2C_RequestMemoryWrite>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d052      	beq.n	8004574 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e081      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fd50 	bl	8004f7c <I2C_WaitOnTXEFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d107      	bne.n	80044fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e06b      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	781a      	ldrb	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d11b      	bne.n	8004574 <HAL_I2C_Mem_Write+0x180>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004540:	2b00      	cmp	r3, #0
 8004542:	d017      	beq.n	8004574 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1aa      	bne.n	80044d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 fd43 	bl	800500c <I2C_WaitOnBTFFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00d      	beq.n	80045a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	2b04      	cmp	r3, #4
 8004592:	d107      	bne.n	80045a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e016      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045d4:	2302      	movs	r3, #2
  }
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	00100002 	.word	0x00100002
 80045e4:	ffff0000 	.word	0xffff0000

080045e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08c      	sub	sp, #48	@ 0x30
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	4608      	mov	r0, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	461a      	mov	r2, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	817b      	strh	r3, [r7, #10]
 80045fa:	460b      	mov	r3, r1
 80045fc:	813b      	strh	r3, [r7, #8]
 80045fe:	4613      	mov	r3, r2
 8004600:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004602:	f7ff fb01 	bl	8003c08 <HAL_GetTick>
 8004606:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b20      	cmp	r3, #32
 8004612:	f040 8214 	bne.w	8004a3e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2319      	movs	r3, #25
 800461c:	2201      	movs	r2, #1
 800461e:	497b      	ldr	r1, [pc, #492]	@ (800480c <HAL_I2C_Mem_Read+0x224>)
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fb91 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800462c:	2302      	movs	r3, #2
 800462e:	e207      	b.n	8004a40 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_I2C_Mem_Read+0x56>
 800463a:	2302      	movs	r3, #2
 800463c:	e200      	b.n	8004a40 <HAL_I2C_Mem_Read+0x458>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d007      	beq.n	8004664 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2222      	movs	r2, #34	@ 0x22
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2240      	movs	r2, #64	@ 0x40
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800468e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004694:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004810 <HAL_I2C_Mem_Read+0x228>)
 80046a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046a6:	88f8      	ldrh	r0, [r7, #6]
 80046a8:	893a      	ldrh	r2, [r7, #8]
 80046aa:	8979      	ldrh	r1, [r7, #10]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	4603      	mov	r3, r0
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fa5e 	bl	8004b78 <I2C_RequestMemoryRead>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e1bc      	b.n	8004a40 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d113      	bne.n	80046f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ce:	2300      	movs	r3, #0
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e190      	b.n	8004a18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d11b      	bne.n	8004736 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800470c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e170      	b.n	8004a18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473a:	2b02      	cmp	r3, #2
 800473c:	d11b      	bne.n	8004776 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800475c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475e:	2300      	movs	r3, #0
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	e150      	b.n	8004a18 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800478c:	e144      	b.n	8004a18 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004792:	2b03      	cmp	r3, #3
 8004794:	f200 80f1 	bhi.w	800497a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479c:	2b01      	cmp	r3, #1
 800479e:	d123      	bne.n	80047e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fc79 	bl	800509c <I2C_WaitOnRXNEFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e145      	b.n	8004a40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047e6:	e117      	b.n	8004a18 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d14e      	bne.n	800488e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f6:	2200      	movs	r2, #0
 80047f8:	4906      	ldr	r1, [pc, #24]	@ (8004814 <HAL_I2C_Mem_Read+0x22c>)
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 faa4 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e11a      	b.n	8004a40 <HAL_I2C_Mem_Read+0x458>
 800480a:	bf00      	nop
 800480c:	00100002 	.word	0x00100002
 8004810:	ffff0000 	.word	0xffff0000
 8004814:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800488c:	e0c4      	b.n	8004a18 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004894:	2200      	movs	r2, #0
 8004896:	496c      	ldr	r1, [pc, #432]	@ (8004a48 <HAL_I2C_Mem_Read+0x460>)
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fa55 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0cb      	b.n	8004a40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f0:	2200      	movs	r2, #0
 80048f2:	4955      	ldr	r1, [pc, #340]	@ (8004a48 <HAL_I2C_Mem_Read+0x460>)
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fa27 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e09d      	b.n	8004a40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004978:	e04e      	b.n	8004a18 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800497a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800497c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fb8c 	bl	800509c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e058      	b.n	8004a40 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d124      	bne.n	8004a18 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d107      	bne.n	80049e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f47f aeb6 	bne.w	800478e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3728      	adds	r7, #40	@ 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	00010004 	.word	0x00010004

08004a4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	817b      	strh	r3, [r7, #10]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	813b      	strh	r3, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f960 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a9c:	d103      	bne.n	8004aa6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e05f      	b.n	8004b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ab8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	6a3a      	ldr	r2, [r7, #32]
 8004abe:	492d      	ldr	r1, [pc, #180]	@ (8004b74 <I2C_RequestMemoryWrite+0x128>)
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f9bb 	bl	8004e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e04c      	b.n	8004b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae8:	6a39      	ldr	r1, [r7, #32]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fa46 	bl	8004f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00d      	beq.n	8004b12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d107      	bne.n	8004b0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e02b      	b.n	8004b6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	611a      	str	r2, [r3, #16]
 8004b22:	e021      	b.n	8004b68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b34:	6a39      	ldr	r1, [r7, #32]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fa20 	bl	8004f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d107      	bne.n	8004b5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e005      	b.n	8004b6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b5e:	893b      	ldrh	r3, [r7, #8]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	00010002 	.word	0x00010002

08004b78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	4608      	mov	r0, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	817b      	strh	r3, [r7, #10]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	813b      	strh	r3, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ba0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f8c2 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd8:	d103      	bne.n	8004be2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004be0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e0aa      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004be6:	897b      	ldrh	r3, [r7, #10]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	6a3a      	ldr	r2, [r7, #32]
 8004bfa:	4952      	ldr	r1, [pc, #328]	@ (8004d44 <I2C_RequestMemoryRead+0x1cc>)
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f91d 	bl	8004e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e097      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c24:	6a39      	ldr	r1, [r7, #32]
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f9a8 	bl	8004f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d107      	bne.n	8004c4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e076      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c54:	893b      	ldrh	r3, [r7, #8]
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	611a      	str	r2, [r3, #16]
 8004c5e:	e021      	b.n	8004ca4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c60:	893b      	ldrh	r3, [r7, #8]
 8004c62:	0a1b      	lsrs	r3, r3, #8
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c70:	6a39      	ldr	r1, [r7, #32]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f982 	bl	8004f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d107      	bne.n	8004c96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e050      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c9a:	893b      	ldrh	r3, [r7, #8]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca6:	6a39      	ldr	r1, [r7, #32]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f967 	bl	8004f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d107      	bne.n	8004ccc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e035      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f82b 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00d      	beq.n	8004d14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d06:	d103      	bne.n	8004d10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e013      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d14:	897b      	ldrh	r3, [r7, #10]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	6a3a      	ldr	r2, [r7, #32]
 8004d28:	4906      	ldr	r1, [pc, #24]	@ (8004d44 <I2C_RequestMemoryRead+0x1cc>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f886 	bl	8004e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	00010002 	.word	0x00010002

08004d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d58:	e048      	b.n	8004dec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d044      	beq.n	8004dec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d62:	f7fe ff51 	bl	8003c08 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d302      	bcc.n	8004d78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d139      	bne.n	8004dec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	0c1b      	lsrs	r3, r3, #16
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d10d      	bne.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	43da      	mvns	r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	e00c      	b.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	43da      	mvns	r2, r3
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	4013      	ands	r3, r2
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	bf0c      	ite	eq
 8004db0:	2301      	moveq	r3, #1
 8004db2:	2300      	movne	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d116      	bne.n	8004dec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e023      	b.n	8004e34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10d      	bne.n	8004e12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	e00c      	b.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	43da      	mvns	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d093      	beq.n	8004d5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e4a:	e071      	b.n	8004f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e5a:	d123      	bne.n	8004ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	f043 0204 	orr.w	r2, r3, #4
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e067      	b.n	8004f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d041      	beq.n	8004f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eac:	f7fe feac 	bl	8003c08 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d136      	bne.n	8004f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	0c1b      	lsrs	r3, r3, #16
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d10c      	bne.n	8004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	43da      	mvns	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	bf14      	ite	ne
 8004ede:	2301      	movne	r3, #1
 8004ee0:	2300      	moveq	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	e00b      	b.n	8004efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	43da      	mvns	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf14      	ite	ne
 8004ef8:	2301      	movne	r3, #1
 8004efa:	2300      	moveq	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	f043 0220 	orr.w	r2, r3, #32
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e021      	b.n	8004f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	0c1b      	lsrs	r3, r3, #16
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d10c      	bne.n	8004f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	43da      	mvns	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4013      	ands	r3, r2
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bf14      	ite	ne
 8004f4c:	2301      	movne	r3, #1
 8004f4e:	2300      	moveq	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	e00b      	b.n	8004f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	43da      	mvns	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bf14      	ite	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	2300      	moveq	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f47f af6d 	bne.w	8004e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f88:	e034      	b.n	8004ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f8e3 	bl	8005156 <I2C_IsAcknowledgeFailed>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e034      	b.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d028      	beq.n	8004ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa2:	f7fe fe31 	bl	8003c08 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d302      	bcc.n	8004fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d11d      	bne.n	8004ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc2:	2b80      	cmp	r3, #128	@ 0x80
 8004fc4:	d016      	beq.n	8004ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	f043 0220 	orr.w	r2, r3, #32
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e007      	b.n	8005004 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffe:	2b80      	cmp	r3, #128	@ 0x80
 8005000:	d1c3      	bne.n	8004f8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005018:	e034      	b.n	8005084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f89b 	bl	8005156 <I2C_IsAcknowledgeFailed>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e034      	b.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d028      	beq.n	8005084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005032:	f7fe fde9 	bl	8003c08 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d11d      	bne.n	8005084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d016      	beq.n	8005084 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e007      	b.n	8005094 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b04      	cmp	r3, #4
 8005090:	d1c3      	bne.n	800501a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050a8:	e049      	b.n	800513e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d119      	bne.n	80050ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0210 	mvn.w	r2, #16
 80050c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e030      	b.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ec:	f7fe fd8c 	bl	8003c08 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d11d      	bne.n	800513e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510c:	2b40      	cmp	r3, #64	@ 0x40
 800510e:	d016      	beq.n	800513e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e007      	b.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b40      	cmp	r3, #64	@ 0x40
 800514a:	d1ae      	bne.n	80050aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800516c:	d11b      	bne.n	80051a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005176:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	f043 0204 	orr.w	r2, r3, #4
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e267      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d075      	beq.n	80052be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051d2:	4b88      	ldr	r3, [pc, #544]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d00c      	beq.n	80051f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051de:	4b85      	ldr	r3, [pc, #532]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d112      	bne.n	8005210 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ea:	4b82      	ldr	r3, [pc, #520]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051f6:	d10b      	bne.n	8005210 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f8:	4b7e      	ldr	r3, [pc, #504]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d05b      	beq.n	80052bc <HAL_RCC_OscConfig+0x108>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d157      	bne.n	80052bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e242      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005218:	d106      	bne.n	8005228 <HAL_RCC_OscConfig+0x74>
 800521a:	4b76      	ldr	r3, [pc, #472]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a75      	ldr	r2, [pc, #468]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e01d      	b.n	8005264 <HAL_RCC_OscConfig+0xb0>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005230:	d10c      	bne.n	800524c <HAL_RCC_OscConfig+0x98>
 8005232:	4b70      	ldr	r3, [pc, #448]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6f      	ldr	r2, [pc, #444]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	4b6d      	ldr	r3, [pc, #436]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6c      	ldr	r2, [pc, #432]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e00b      	b.n	8005264 <HAL_RCC_OscConfig+0xb0>
 800524c:	4b69      	ldr	r3, [pc, #420]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a68      	ldr	r2, [pc, #416]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	4b66      	ldr	r3, [pc, #408]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a65      	ldr	r2, [pc, #404]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 800525e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d013      	beq.n	8005294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526c:	f7fe fccc 	bl	8003c08 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005274:	f7fe fcc8 	bl	8003c08 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b64      	cmp	r3, #100	@ 0x64
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e207      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005286:	4b5b      	ldr	r3, [pc, #364]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0xc0>
 8005292:	e014      	b.n	80052be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005294:	f7fe fcb8 	bl	8003c08 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800529c:	f7fe fcb4 	bl	8003c08 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b64      	cmp	r3, #100	@ 0x64
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e1f3      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ae:	4b51      	ldr	r3, [pc, #324]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0xe8>
 80052ba:	e000      	b.n	80052be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d063      	beq.n	8005392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052ca:	4b4a      	ldr	r3, [pc, #296]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052d6:	4b47      	ldr	r3, [pc, #284]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d11c      	bne.n	800531c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052e2:	4b44      	ldr	r3, [pc, #272]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d116      	bne.n	800531c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ee:	4b41      	ldr	r3, [pc, #260]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_RCC_OscConfig+0x152>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d001      	beq.n	8005306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e1c7      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005306:	4b3b      	ldr	r3, [pc, #236]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4937      	ldr	r1, [pc, #220]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005316:	4313      	orrs	r3, r2
 8005318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800531a:	e03a      	b.n	8005392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005324:	4b34      	ldr	r3, [pc, #208]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532a:	f7fe fc6d 	bl	8003c08 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005332:	f7fe fc69 	bl	8003c08 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e1a8      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005344:	4b2b      	ldr	r3, [pc, #172]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005350:	4b28      	ldr	r3, [pc, #160]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4925      	ldr	r1, [pc, #148]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005360:	4313      	orrs	r3, r2
 8005362:	600b      	str	r3, [r1, #0]
 8005364:	e015      	b.n	8005392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005366:	4b24      	ldr	r3, [pc, #144]	@ (80053f8 <HAL_RCC_OscConfig+0x244>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fe fc4c 	bl	8003c08 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005374:	f7fe fc48 	bl	8003c08 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e187      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005386:	4b1b      	ldr	r3, [pc, #108]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d036      	beq.n	800540c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d016      	beq.n	80053d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a6:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <HAL_RCC_OscConfig+0x248>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ac:	f7fe fc2c 	bl	8003c08 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b4:	f7fe fc28 	bl	8003c08 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e167      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053c6:	4b0b      	ldr	r3, [pc, #44]	@ (80053f4 <HAL_RCC_OscConfig+0x240>)
 80053c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0x200>
 80053d2:	e01b      	b.n	800540c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d4:	4b09      	ldr	r3, [pc, #36]	@ (80053fc <HAL_RCC_OscConfig+0x248>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053da:	f7fe fc15 	bl	8003c08 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e0:	e00e      	b.n	8005400 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053e2:	f7fe fc11 	bl	8003c08 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d907      	bls.n	8005400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e150      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
 80053f4:	40023800 	.word	0x40023800
 80053f8:	42470000 	.word	0x42470000
 80053fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005400:	4b88      	ldr	r3, [pc, #544]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 8005402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1ea      	bne.n	80053e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8097 	beq.w	8005548 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800541a:	2300      	movs	r3, #0
 800541c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800541e:	4b81      	ldr	r3, [pc, #516]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10f      	bne.n	800544a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	4b7d      	ldr	r3, [pc, #500]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	4a7c      	ldr	r2, [pc, #496]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 8005434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005438:	6413      	str	r3, [r2, #64]	@ 0x40
 800543a:	4b7a      	ldr	r3, [pc, #488]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005446:	2301      	movs	r3, #1
 8005448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544a:	4b77      	ldr	r3, [pc, #476]	@ (8005628 <HAL_RCC_OscConfig+0x474>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d118      	bne.n	8005488 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005456:	4b74      	ldr	r3, [pc, #464]	@ (8005628 <HAL_RCC_OscConfig+0x474>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a73      	ldr	r2, [pc, #460]	@ (8005628 <HAL_RCC_OscConfig+0x474>)
 800545c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005462:	f7fe fbd1 	bl	8003c08 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546a:	f7fe fbcd 	bl	8003c08 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e10c      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547c:	4b6a      	ldr	r3, [pc, #424]	@ (8005628 <HAL_RCC_OscConfig+0x474>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f0      	beq.n	800546a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d106      	bne.n	800549e <HAL_RCC_OscConfig+0x2ea>
 8005490:	4b64      	ldr	r3, [pc, #400]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 8005492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005494:	4a63      	ldr	r2, [pc, #396]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	6713      	str	r3, [r2, #112]	@ 0x70
 800549c:	e01c      	b.n	80054d8 <HAL_RCC_OscConfig+0x324>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	d10c      	bne.n	80054c0 <HAL_RCC_OscConfig+0x30c>
 80054a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 80054a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 80054ac:	f043 0304 	orr.w	r3, r3, #4
 80054b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80054b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80054be:	e00b      	b.n	80054d8 <HAL_RCC_OscConfig+0x324>
 80054c0:	4b58      	ldr	r3, [pc, #352]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 80054c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c4:	4a57      	ldr	r2, [pc, #348]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 80054c6:	f023 0301 	bic.w	r3, r3, #1
 80054ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80054cc:	4b55      	ldr	r3, [pc, #340]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d0:	4a54      	ldr	r2, [pc, #336]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 80054d2:	f023 0304 	bic.w	r3, r3, #4
 80054d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d015      	beq.n	800550c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e0:	f7fe fb92 	bl	8003c08 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e6:	e00a      	b.n	80054fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e8:	f7fe fb8e 	bl	8003c08 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e0cb      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fe:	4b49      	ldr	r3, [pc, #292]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0ee      	beq.n	80054e8 <HAL_RCC_OscConfig+0x334>
 800550a:	e014      	b.n	8005536 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800550c:	f7fe fb7c 	bl	8003c08 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005512:	e00a      	b.n	800552a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005514:	f7fe fb78 	bl	8003c08 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005522:	4293      	cmp	r3, r2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e0b5      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800552a:	4b3e      	ldr	r3, [pc, #248]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1ee      	bne.n	8005514 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d105      	bne.n	8005548 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800553c:	4b39      	ldr	r3, [pc, #228]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 800553e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005540:	4a38      	ldr	r2, [pc, #224]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 8005542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005546:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80a1 	beq.w	8005694 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005552:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b08      	cmp	r3, #8
 800555c:	d05c      	beq.n	8005618 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d141      	bne.n	80055ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005566:	4b31      	ldr	r3, [pc, #196]	@ (800562c <HAL_RCC_OscConfig+0x478>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fe fb4c 	bl	8003c08 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005574:	f7fe fb48 	bl	8003c08 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e087      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005586:	4b27      	ldr	r3, [pc, #156]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69da      	ldr	r2, [r3, #28]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a0:	019b      	lsls	r3, r3, #6
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	3b01      	subs	r3, #1
 80055ac:	041b      	lsls	r3, r3, #16
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	061b      	lsls	r3, r3, #24
 80055b6:	491b      	ldr	r1, [pc, #108]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055bc:	4b1b      	ldr	r3, [pc, #108]	@ (800562c <HAL_RCC_OscConfig+0x478>)
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c2:	f7fe fb21 	bl	8003c08 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ca:	f7fe fb1d 	bl	8003c08 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e05c      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055dc:	4b11      	ldr	r3, [pc, #68]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCC_OscConfig+0x416>
 80055e8:	e054      	b.n	8005694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ea:	4b10      	ldr	r3, [pc, #64]	@ (800562c <HAL_RCC_OscConfig+0x478>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f0:	f7fe fb0a 	bl	8003c08 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f8:	f7fe fb06 	bl	8003c08 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e045      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560a:	4b06      	ldr	r3, [pc, #24]	@ (8005624 <HAL_RCC_OscConfig+0x470>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x444>
 8005616:	e03d      	b.n	8005694 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d107      	bne.n	8005630 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e038      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
 8005624:	40023800 	.word	0x40023800
 8005628:	40007000 	.word	0x40007000
 800562c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005630:	4b1b      	ldr	r3, [pc, #108]	@ (80056a0 <HAL_RCC_OscConfig+0x4ec>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d028      	beq.n	8005690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005648:	429a      	cmp	r2, r3
 800564a:	d121      	bne.n	8005690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005656:	429a      	cmp	r2, r3
 8005658:	d11a      	bne.n	8005690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005660:	4013      	ands	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005668:	4293      	cmp	r3, r2
 800566a:	d111      	bne.n	8005690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	3b01      	subs	r3, #1
 800567a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800567c:	429a      	cmp	r2, r3
 800567e:	d107      	bne.n	8005690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800568c:	429a      	cmp	r2, r3
 800568e:	d001      	beq.n	8005694 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40023800 	.word	0x40023800

080056a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0cc      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056b8:	4b68      	ldr	r3, [pc, #416]	@ (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d90c      	bls.n	80056e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c6:	4b65      	ldr	r3, [pc, #404]	@ (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ce:	4b63      	ldr	r3, [pc, #396]	@ (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0b8      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d020      	beq.n	800572e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f8:	4b59      	ldr	r3, [pc, #356]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a58      	ldr	r2, [pc, #352]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005702:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005710:	4b53      	ldr	r3, [pc, #332]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4a52      	ldr	r2, [pc, #328]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800571a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800571c:	4b50      	ldr	r3, [pc, #320]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	494d      	ldr	r1, [pc, #308]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d044      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d107      	bne.n	8005752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	4b47      	ldr	r3, [pc, #284]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d119      	bne.n	8005782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e07f      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d003      	beq.n	8005762 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800575e:	2b03      	cmp	r3, #3
 8005760:	d107      	bne.n	8005772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005762:	4b3f      	ldr	r3, [pc, #252]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e06f      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005772:	4b3b      	ldr	r3, [pc, #236]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e067      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005782:	4b37      	ldr	r3, [pc, #220]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f023 0203 	bic.w	r2, r3, #3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	4934      	ldr	r1, [pc, #208]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	4313      	orrs	r3, r2
 8005792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005794:	f7fe fa38 	bl	8003c08 <HAL_GetTick>
 8005798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800579c:	f7fe fa34 	bl	8003c08 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e04f      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 020c 	and.w	r2, r3, #12
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d1eb      	bne.n	800579c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057c4:	4b25      	ldr	r3, [pc, #148]	@ (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d20c      	bcs.n	80057ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d2:	4b22      	ldr	r3, [pc, #136]	@ (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	4b20      	ldr	r3, [pc, #128]	@ (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e032      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057f8:	4b19      	ldr	r3, [pc, #100]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4916      	ldr	r1, [pc, #88]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	4313      	orrs	r3, r2
 8005808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005816:	4b12      	ldr	r3, [pc, #72]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	490e      	ldr	r1, [pc, #56]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	4313      	orrs	r3, r2
 8005828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800582a:	f000 f821 	bl	8005870 <HAL_RCC_GetSysClockFreq>
 800582e:	4602      	mov	r2, r0
 8005830:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	490a      	ldr	r1, [pc, #40]	@ (8005864 <HAL_RCC_ClockConfig+0x1c0>)
 800583c:	5ccb      	ldrb	r3, [r1, r3]
 800583e:	fa22 f303 	lsr.w	r3, r2, r3
 8005842:	4a09      	ldr	r2, [pc, #36]	@ (8005868 <HAL_RCC_ClockConfig+0x1c4>)
 8005844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005846:	4b09      	ldr	r3, [pc, #36]	@ (800586c <HAL_RCC_ClockConfig+0x1c8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe f998 	bl	8003b80 <HAL_InitTick>

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40023c00 	.word	0x40023c00
 8005860:	40023800 	.word	0x40023800
 8005864:	0800a5c8 	.word	0x0800a5c8
 8005868:	20000004 	.word	0x20000004
 800586c:	20000008 	.word	0x20000008

08005870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005874:	b094      	sub	sp, #80	@ 0x50
 8005876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005888:	4b79      	ldr	r3, [pc, #484]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x200>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 030c 	and.w	r3, r3, #12
 8005890:	2b08      	cmp	r3, #8
 8005892:	d00d      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005894:	2b08      	cmp	r3, #8
 8005896:	f200 80e1 	bhi.w	8005a5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0x34>
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d003      	beq.n	80058aa <HAL_RCC_GetSysClockFreq+0x3a>
 80058a2:	e0db      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058a4:	4b73      	ldr	r3, [pc, #460]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x204>)
 80058a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058a8:	e0db      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058aa:	4b73      	ldr	r3, [pc, #460]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x208>)
 80058ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058ae:	e0d8      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d063      	beq.n	800598e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	099b      	lsrs	r3, r3, #6
 80058cc:	2200      	movs	r2, #0
 80058ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058da:	2300      	movs	r3, #0
 80058dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80058de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80058e2:	4622      	mov	r2, r4
 80058e4:	462b      	mov	r3, r5
 80058e6:	f04f 0000 	mov.w	r0, #0
 80058ea:	f04f 0100 	mov.w	r1, #0
 80058ee:	0159      	lsls	r1, r3, #5
 80058f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058f4:	0150      	lsls	r0, r2, #5
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4621      	mov	r1, r4
 80058fc:	1a51      	subs	r1, r2, r1
 80058fe:	6139      	str	r1, [r7, #16]
 8005900:	4629      	mov	r1, r5
 8005902:	eb63 0301 	sbc.w	r3, r3, r1
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005914:	4659      	mov	r1, fp
 8005916:	018b      	lsls	r3, r1, #6
 8005918:	4651      	mov	r1, sl
 800591a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800591e:	4651      	mov	r1, sl
 8005920:	018a      	lsls	r2, r1, #6
 8005922:	4651      	mov	r1, sl
 8005924:	ebb2 0801 	subs.w	r8, r2, r1
 8005928:	4659      	mov	r1, fp
 800592a:	eb63 0901 	sbc.w	r9, r3, r1
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800593a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800593e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005942:	4690      	mov	r8, r2
 8005944:	4699      	mov	r9, r3
 8005946:	4623      	mov	r3, r4
 8005948:	eb18 0303 	adds.w	r3, r8, r3
 800594c:	60bb      	str	r3, [r7, #8]
 800594e:	462b      	mov	r3, r5
 8005950:	eb49 0303 	adc.w	r3, r9, r3
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005962:	4629      	mov	r1, r5
 8005964:	024b      	lsls	r3, r1, #9
 8005966:	4621      	mov	r1, r4
 8005968:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800596c:	4621      	mov	r1, r4
 800596e:	024a      	lsls	r2, r1, #9
 8005970:	4610      	mov	r0, r2
 8005972:	4619      	mov	r1, r3
 8005974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005976:	2200      	movs	r2, #0
 8005978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800597a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800597c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005980:	f7fb f912 	bl	8000ba8 <__aeabi_uldivmod>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4613      	mov	r3, r2
 800598a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800598c:	e058      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800598e:	4b38      	ldr	r3, [pc, #224]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	099b      	lsrs	r3, r3, #6
 8005994:	2200      	movs	r2, #0
 8005996:	4618      	mov	r0, r3
 8005998:	4611      	mov	r1, r2
 800599a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800599e:	623b      	str	r3, [r7, #32]
 80059a0:	2300      	movs	r3, #0
 80059a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059a8:	4642      	mov	r2, r8
 80059aa:	464b      	mov	r3, r9
 80059ac:	f04f 0000 	mov.w	r0, #0
 80059b0:	f04f 0100 	mov.w	r1, #0
 80059b4:	0159      	lsls	r1, r3, #5
 80059b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059ba:	0150      	lsls	r0, r2, #5
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4641      	mov	r1, r8
 80059c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80059c6:	4649      	mov	r1, r9
 80059c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059e0:	ebb2 040a 	subs.w	r4, r2, sl
 80059e4:	eb63 050b 	sbc.w	r5, r3, fp
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	00eb      	lsls	r3, r5, #3
 80059f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059f6:	00e2      	lsls	r2, r4, #3
 80059f8:	4614      	mov	r4, r2
 80059fa:	461d      	mov	r5, r3
 80059fc:	4643      	mov	r3, r8
 80059fe:	18e3      	adds	r3, r4, r3
 8005a00:	603b      	str	r3, [r7, #0]
 8005a02:	464b      	mov	r3, r9
 8005a04:	eb45 0303 	adc.w	r3, r5, r3
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a16:	4629      	mov	r1, r5
 8005a18:	028b      	lsls	r3, r1, #10
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a20:	4621      	mov	r1, r4
 8005a22:	028a      	lsls	r2, r1, #10
 8005a24:	4610      	mov	r0, r2
 8005a26:	4619      	mov	r1, r3
 8005a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	61fa      	str	r2, [r7, #28]
 8005a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a34:	f7fb f8b8 	bl	8000ba8 <__aeabi_uldivmod>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a40:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	0c1b      	lsrs	r3, r3, #16
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a5a:	e002      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a5c:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3750      	adds	r7, #80	@ 0x50
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800
 8005a74:	00f42400 	.word	0x00f42400
 8005a78:	007a1200 	.word	0x007a1200

08005a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a80:	4b03      	ldr	r3, [pc, #12]	@ (8005a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a82:	681b      	ldr	r3, [r3, #0]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20000004 	.word	0x20000004

08005a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a98:	f7ff fff0 	bl	8005a7c <HAL_RCC_GetHCLKFreq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4b05      	ldr	r3, [pc, #20]	@ (8005ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	0a9b      	lsrs	r3, r3, #10
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	4903      	ldr	r1, [pc, #12]	@ (8005ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	0800a5d8 	.word	0x0800a5d8

08005abc <LL_GPIO_SetPinMode>:
{
 8005abc:	b480      	push	{r7}
 8005abe:	b08b      	sub	sp, #44	@ 0x2c
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	fa93 f3a3 	rbit	r3, r3
 8005ad6:	613b      	str	r3, [r7, #16]
  return result;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005ae2:	2320      	movs	r3, #32
 8005ae4:	e003      	b.n	8005aee <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	fab3 f383 	clz	r3, r3
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	2103      	movs	r1, #3
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	43db      	mvns	r3, r3
 8005af8:	401a      	ands	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	fa93 f3a3 	rbit	r3, r3
 8005b04:	61fb      	str	r3, [r7, #28]
  return result;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005b10:	2320      	movs	r3, #32
 8005b12:	e003      	b.n	8005b1c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	fab3 f383 	clz	r3, r3
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	fa01 f303 	lsl.w	r3, r1, r3
 8005b24:	431a      	orrs	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	601a      	str	r2, [r3, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	372c      	adds	r7, #44	@ 0x2c
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <LL_GPIO_SetPinOutputType>:
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	431a      	orrs	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	605a      	str	r2, [r3, #4]
}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <LL_GPIO_SetPinSpeed>:
{
 8005b66:	b480      	push	{r7}
 8005b68:	b08b      	sub	sp, #44	@ 0x2c
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	fa93 f3a3 	rbit	r3, r3
 8005b80:	613b      	str	r3, [r7, #16]
  return result;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	e003      	b.n	8005b98 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	fab3 f383 	clz	r3, r3
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	2103      	movs	r1, #3
 8005b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	401a      	ands	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	fa93 f3a3 	rbit	r3, r3
 8005bae:	61fb      	str	r3, [r7, #28]
  return result;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005bba:	2320      	movs	r3, #32
 8005bbc:	e003      	b.n	8005bc6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	fab3 f383 	clz	r3, r3
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	609a      	str	r2, [r3, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	372c      	adds	r7, #44	@ 0x2c
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <LL_GPIO_SetPinPull>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	b08b      	sub	sp, #44	@ 0x2c
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	fa93 f3a3 	rbit	r3, r3
 8005bfa:	613b      	str	r3, [r7, #16]
  return result;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005c06:	2320      	movs	r3, #32
 8005c08:	e003      	b.n	8005c12 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	fab3 f383 	clz	r3, r3
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	2103      	movs	r1, #3
 8005c16:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	401a      	ands	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	fa93 f3a3 	rbit	r3, r3
 8005c28:	61fb      	str	r3, [r7, #28]
  return result;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005c34:	2320      	movs	r3, #32
 8005c36:	e003      	b.n	8005c40 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	fab3 f383 	clz	r3, r3
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	60da      	str	r2, [r3, #12]
}
 8005c4e:	bf00      	nop
 8005c50:	372c      	adds	r7, #44	@ 0x2c
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <LL_GPIO_SetAFPin_0_7>:
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b08b      	sub	sp, #44	@ 0x2c
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a1a      	ldr	r2, [r3, #32]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	fa93 f3a3 	rbit	r3, r3
 8005c74:	613b      	str	r3, [r7, #16]
  return result;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005c80:	2320      	movs	r3, #32
 8005c82:	e003      	b.n	8005c8c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	fab3 f383 	clz	r3, r3
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	210f      	movs	r1, #15
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	fa93 f3a3 	rbit	r3, r3
 8005ca2:	61fb      	str	r3, [r7, #28]
  return result;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005cae:	2320      	movs	r3, #32
 8005cb0:	e003      	b.n	8005cba <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	fab3 f383 	clz	r3, r3
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	621a      	str	r2, [r3, #32]
}
 8005cc8:	bf00      	nop
 8005cca:	372c      	adds	r7, #44	@ 0x2c
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <LL_GPIO_SetAFPin_8_15>:
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b08b      	sub	sp, #44	@ 0x2c
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	fa93 f3a3 	rbit	r3, r3
 8005cf0:	613b      	str	r3, [r7, #16]
  return result;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	e003      	b.n	8005d08 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	fab3 f383 	clz	r3, r3
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	210f      	movs	r1, #15
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	401a      	ands	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	0a1b      	lsrs	r3, r3, #8
 8005d18:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	fa93 f3a3 	rbit	r3, r3
 8005d20:	61fb      	str	r3, [r7, #28]
  return result;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	e003      	b.n	8005d38 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d32:	fab3 f383 	clz	r3, r3
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8005d46:	bf00      	nop
 8005d48:	372c      	adds	r7, #44	@ 0x2c
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b08a      	sub	sp, #40	@ 0x28
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	fa93 f3a3 	rbit	r3, r3
 8005d70:	617b      	str	r3, [r7, #20]
  return result;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <LL_GPIO_Init+0x2e>
    return 32U;
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	e003      	b.n	8005d88 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	fab3 f383 	clz	r3, r3
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005d8a:	e057      	b.n	8005e3c <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	2101      	movs	r1, #1
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	4013      	ands	r3, r2
 8005d9a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d049      	beq.n	8005e36 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d003      	beq.n	8005db2 <LL_GPIO_Init+0x60>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d10d      	bne.n	8005dce <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	461a      	mov	r2, r3
 8005db8:	6a39      	ldr	r1, [r7, #32]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff fed3 	bl	8005b66 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6a39      	ldr	r1, [r7, #32]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff feb4 	bl	8005b36 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6a39      	ldr	r1, [r7, #32]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff ff02 	bl	8005be0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d121      	bne.n	8005e28 <LL_GPIO_Init+0xd6>
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	fa93 f3a3 	rbit	r3, r3
 8005dee:	60bb      	str	r3, [r7, #8]
  return result;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <LL_GPIO_Init+0xac>
    return 32U;
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	e003      	b.n	8005e06 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	fab3 f383 	clz	r3, r3
 8005e04:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005e06:	2b07      	cmp	r3, #7
 8005e08:	d807      	bhi.n	8005e1a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	6a39      	ldr	r1, [r7, #32]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff ff21 	bl	8005c5a <LL_GPIO_SetAFPin_0_7>
 8005e18:	e006      	b.n	8005e28 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6a39      	ldr	r1, [r7, #32]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff ff56 	bl	8005cd4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	6a39      	ldr	r1, [r7, #32]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fe43 	bl	8005abc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	3301      	adds	r3, #1
 8005e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	fa22 f303 	lsr.w	r3, r2, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1a0      	bne.n	8005d8c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3728      	adds	r7, #40	@ 0x28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e58:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <LL_RCC_GetSysClkSource+0x18>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 030c 	and.w	r3, r3, #12
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800

08005e70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e74:	4b04      	ldr	r3, [pc, #16]	@ (8005e88 <LL_RCC_GetAHBPrescaler+0x18>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40023800 	.word	0x40023800

08005e8c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005e90:	4b04      	ldr	r3, [pc, #16]	@ (8005ea4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40023800 	.word	0x40023800

08005ea8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005eac:	4b04      	ldr	r3, [pc, #16]	@ (8005ec0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40023800 	.word	0x40023800

08005ec4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005ec8:	4b04      	ldr	r3, [pc, #16]	@ (8005edc <LL_RCC_PLL_GetMainSource+0x18>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40023800 	.word	0x40023800

08005ee0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005ee4:	4b04      	ldr	r3, [pc, #16]	@ (8005ef8 <LL_RCC_PLL_GetN+0x18>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	099b      	lsrs	r3, r3, #6
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	40023800 	.word	0x40023800

08005efc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005f00:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <LL_RCC_PLL_GetP+0x18>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800

08005f18 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005f1c:	4b04      	ldr	r3, [pc, #16]	@ (8005f30 <LL_RCC_PLL_GetDivider+0x18>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40023800 	.word	0x40023800

08005f34 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005f3c:	f000 f820 	bl	8005f80 <RCC_GetSystemClockFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f840 	bl	8005fd0 <RCC_GetHCLKClockFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f84e 	bl	8005ffc <RCC_GetPCLK1ClockFreq>
 8005f60:	4602      	mov	r2, r0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 f85a 	bl	8006024 <RCC_GetPCLK2ClockFreq>
 8005f70:	4602      	mov	r2, r0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60da      	str	r2, [r3, #12]
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005f8a:	f7ff ff63 	bl	8005e54 <LL_RCC_GetSysClkSource>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d00c      	beq.n	8005fae <RCC_GetSystemClockFreq+0x2e>
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d80f      	bhi.n	8005fb8 <RCC_GetSystemClockFreq+0x38>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <RCC_GetSystemClockFreq+0x22>
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d003      	beq.n	8005fa8 <RCC_GetSystemClockFreq+0x28>
 8005fa0:	e00a      	b.n	8005fb8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005fa2:	4b09      	ldr	r3, [pc, #36]	@ (8005fc8 <RCC_GetSystemClockFreq+0x48>)
 8005fa4:	607b      	str	r3, [r7, #4]
      break;
 8005fa6:	e00a      	b.n	8005fbe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005fa8:	4b08      	ldr	r3, [pc, #32]	@ (8005fcc <RCC_GetSystemClockFreq+0x4c>)
 8005faa:	607b      	str	r3, [r7, #4]
      break;
 8005fac:	e007      	b.n	8005fbe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005fae:	2008      	movs	r0, #8
 8005fb0:	f000 f84c 	bl	800604c <RCC_PLL_GetFreqDomain_SYS>
 8005fb4:	6078      	str	r0, [r7, #4]
      break;
 8005fb6:	e002      	b.n	8005fbe <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005fb8:	4b03      	ldr	r3, [pc, #12]	@ (8005fc8 <RCC_GetSystemClockFreq+0x48>)
 8005fba:	607b      	str	r3, [r7, #4]
      break;
 8005fbc:	bf00      	nop
  }

  return frequency;
 8005fbe:	687b      	ldr	r3, [r7, #4]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	00f42400 	.word	0x00f42400
 8005fcc:	007a1200 	.word	0x007a1200

08005fd0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005fd8:	f7ff ff4a 	bl	8005e70 <LL_RCC_GetAHBPrescaler>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	4a04      	ldr	r2, [pc, #16]	@ (8005ff8 <RCC_GetHCLKClockFreq+0x28>)
 8005fe6:	5cd3      	ldrb	r3, [r2, r3]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	40d3      	lsrs	r3, r2
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	0800a5c8 	.word	0x0800a5c8

08005ffc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006004:	f7ff ff42 	bl	8005e8c <LL_RCC_GetAPB1Prescaler>
 8006008:	4603      	mov	r3, r0
 800600a:	0a9b      	lsrs	r3, r3, #10
 800600c:	4a04      	ldr	r2, [pc, #16]	@ (8006020 <RCC_GetPCLK1ClockFreq+0x24>)
 800600e:	5cd3      	ldrb	r3, [r2, r3]
 8006010:	461a      	mov	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	40d3      	lsrs	r3, r2
}
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	0800a5d8 	.word	0x0800a5d8

08006024 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800602c:	f7ff ff3c 	bl	8005ea8 <LL_RCC_GetAPB2Prescaler>
 8006030:	4603      	mov	r3, r0
 8006032:	0b5b      	lsrs	r3, r3, #13
 8006034:	4a04      	ldr	r2, [pc, #16]	@ (8006048 <RCC_GetPCLK2ClockFreq+0x24>)
 8006036:	5cd3      	ldrb	r3, [r2, r3]
 8006038:	461a      	mov	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	40d3      	lsrs	r3, r2
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	0800a5d8 	.word	0x0800a5d8

0800604c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006060:	f7ff ff30 	bl	8005ec4 <LL_RCC_PLL_GetMainSource>
 8006064:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d004      	beq.n	8006076 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006072:	d003      	beq.n	800607c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8006074:	e005      	b.n	8006082 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006076:	4b12      	ldr	r3, [pc, #72]	@ (80060c0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006078:	617b      	str	r3, [r7, #20]
      break;
 800607a:	e005      	b.n	8006088 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800607c:	4b11      	ldr	r3, [pc, #68]	@ (80060c4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800607e:	617b      	str	r3, [r7, #20]
      break;
 8006080:	e002      	b.n	8006088 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8006082:	4b0f      	ldr	r3, [pc, #60]	@ (80060c0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006084:	617b      	str	r3, [r7, #20]
      break;
 8006086:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b08      	cmp	r3, #8
 800608c:	d113      	bne.n	80060b6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800608e:	f7ff ff43 	bl	8005f18 <LL_RCC_PLL_GetDivider>
 8006092:	4602      	mov	r2, r0
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	fbb3 f4f2 	udiv	r4, r3, r2
 800609a:	f7ff ff21 	bl	8005ee0 <LL_RCC_PLL_GetN>
 800609e:	4603      	mov	r3, r0
 80060a0:	fb03 f404 	mul.w	r4, r3, r4
 80060a4:	f7ff ff2a 	bl	8005efc <LL_RCC_PLL_GetP>
 80060a8:	4603      	mov	r3, r0
 80060aa:	0c1b      	lsrs	r3, r3, #16
 80060ac:	3301      	adds	r3, #1
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	fbb4 f3f3 	udiv	r3, r4, r3
 80060b4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80060b6:	693b      	ldr	r3, [r7, #16]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd90      	pop	{r4, r7, pc}
 80060c0:	00f42400 	.word	0x00f42400
 80060c4:	007a1200 	.word	0x007a1200

080060c8 <LL_SPI_IsEnabled>:
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d8:	2b40      	cmp	r3, #64	@ 0x40
 80060da:	d101      	bne.n	80060e0 <LL_SPI_IsEnabled+0x18>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <LL_SPI_IsEnabled+0x1a>
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <LL_SPI_SetCRCPolynomial>:
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	611a      	str	r2, [r3, #16]
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff ffd3 	bl	80060c8 <LL_SPI_IsEnabled>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d139      	bne.n	800619c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006130:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	6811      	ldr	r1, [r2, #0]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	6852      	ldr	r2, [r2, #4]
 800613c:	4311      	orrs	r1, r2
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	6892      	ldr	r2, [r2, #8]
 8006142:	4311      	orrs	r1, r2
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	68d2      	ldr	r2, [r2, #12]
 8006148:	4311      	orrs	r1, r2
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	6912      	ldr	r2, [r2, #16]
 800614e:	4311      	orrs	r1, r2
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	6952      	ldr	r2, [r2, #20]
 8006154:	4311      	orrs	r1, r2
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	6992      	ldr	r2, [r2, #24]
 800615a:	4311      	orrs	r1, r2
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	69d2      	ldr	r2, [r2, #28]
 8006160:	4311      	orrs	r1, r2
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	6a12      	ldr	r2, [r2, #32]
 8006166:	430a      	orrs	r2, r1
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f023 0204 	bic.w	r2, r3, #4
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	0c1b      	lsrs	r3, r3, #16
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618a:	d105      	bne.n	8006198 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff ffab 	bl	80060ee <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	61da      	str	r2, [r3, #28]
  return status;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <LL_TIM_SetPrescaler>:
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_TIM_SetAutoReload>:
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_TIM_SetRepetitionCounter>:
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <LL_TIM_OC_SetCompareCH1>:
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <LL_TIM_OC_SetCompareCH2>:
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <LL_TIM_OC_SetCompareCH3>:
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <LL_TIM_OC_SetCompareCH4>:
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	f043 0201 	orr.w	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	615a      	str	r2, [r3, #20]
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a3d      	ldr	r2, [pc, #244]	@ (80063a0 <LL_TIM_Init+0x108>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d013      	beq.n	80062d8 <LL_TIM_Init+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b6:	d00f      	beq.n	80062d8 <LL_TIM_Init+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a3a      	ldr	r2, [pc, #232]	@ (80063a4 <LL_TIM_Init+0x10c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00b      	beq.n	80062d8 <LL_TIM_Init+0x40>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a39      	ldr	r2, [pc, #228]	@ (80063a8 <LL_TIM_Init+0x110>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d007      	beq.n	80062d8 <LL_TIM_Init+0x40>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a38      	ldr	r2, [pc, #224]	@ (80063ac <LL_TIM_Init+0x114>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <LL_TIM_Init+0x40>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a37      	ldr	r2, [pc, #220]	@ (80063b0 <LL_TIM_Init+0x118>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d106      	bne.n	80062e6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2d      	ldr	r2, [pc, #180]	@ (80063a0 <LL_TIM_Init+0x108>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d02b      	beq.n	8006346 <LL_TIM_Init+0xae>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f4:	d027      	beq.n	8006346 <LL_TIM_Init+0xae>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	@ (80063a4 <LL_TIM_Init+0x10c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d023      	beq.n	8006346 <LL_TIM_Init+0xae>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a29      	ldr	r2, [pc, #164]	@ (80063a8 <LL_TIM_Init+0x110>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01f      	beq.n	8006346 <LL_TIM_Init+0xae>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a28      	ldr	r2, [pc, #160]	@ (80063ac <LL_TIM_Init+0x114>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d01b      	beq.n	8006346 <LL_TIM_Init+0xae>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a27      	ldr	r2, [pc, #156]	@ (80063b0 <LL_TIM_Init+0x118>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d017      	beq.n	8006346 <LL_TIM_Init+0xae>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a26      	ldr	r2, [pc, #152]	@ (80063b4 <LL_TIM_Init+0x11c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <LL_TIM_Init+0xae>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a25      	ldr	r2, [pc, #148]	@ (80063b8 <LL_TIM_Init+0x120>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00f      	beq.n	8006346 <LL_TIM_Init+0xae>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a24      	ldr	r2, [pc, #144]	@ (80063bc <LL_TIM_Init+0x124>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00b      	beq.n	8006346 <LL_TIM_Init+0xae>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a23      	ldr	r2, [pc, #140]	@ (80063c0 <LL_TIM_Init+0x128>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d007      	beq.n	8006346 <LL_TIM_Init+0xae>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a22      	ldr	r2, [pc, #136]	@ (80063c4 <LL_TIM_Init+0x12c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <LL_TIM_Init+0xae>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a21      	ldr	r2, [pc, #132]	@ (80063c8 <LL_TIM_Init+0x130>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d106      	bne.n	8006354 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff ff34 	bl	80061ce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff ff20 	bl	80061b2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a0a      	ldr	r2, [pc, #40]	@ (80063a0 <LL_TIM_Init+0x108>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d003      	beq.n	8006382 <LL_TIM_Init+0xea>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a0c      	ldr	r2, [pc, #48]	@ (80063b0 <LL_TIM_Init+0x118>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d105      	bne.n	800638e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ff2e 	bl	80061ea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff ff71 	bl	8006276 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40000400 	.word	0x40000400
 80063a8:	40000800 	.word	0x40000800
 80063ac:	40000c00 	.word	0x40000c00
 80063b0:	40010400 	.word	0x40010400
 80063b4:	40014000 	.word	0x40014000
 80063b8:	40014400 	.word	0x40014400
 80063bc:	40014800 	.word	0x40014800
 80063c0:	40001800 	.word	0x40001800
 80063c4:	40001c00 	.word	0x40001c00
 80063c8:	40002000 	.word	0x40002000

080063cc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e2:	d027      	beq.n	8006434 <LL_TIM_OC_Init+0x68>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ea:	d82a      	bhi.n	8006442 <LL_TIM_OC_Init+0x76>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f2:	d018      	beq.n	8006426 <LL_TIM_OC_Init+0x5a>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fa:	d822      	bhi.n	8006442 <LL_TIM_OC_Init+0x76>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d003      	beq.n	800640a <LL_TIM_OC_Init+0x3e>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b10      	cmp	r3, #16
 8006406:	d007      	beq.n	8006418 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8006408:	e01b      	b.n	8006442 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 f81f 	bl	8006450 <OC1Config>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]
      break;
 8006416:	e015      	b.n	8006444 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f884 	bl	8006528 <OC2Config>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]
      break;
 8006424:	e00e      	b.n	8006444 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f8ed 	bl	8006608 <OC3Config>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]
      break;
 8006432:	e007      	b.n	8006444 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 f956 	bl	80066e8 <OC4Config>
 800643c:	4603      	mov	r3, r0
 800643e:	75fb      	strb	r3, [r7, #23]
      break;
 8006440:	e000      	b.n	8006444 <LL_TIM_OC_Init+0x78>
      break;
 8006442:	bf00      	nop
  }

  return result;
 8006444:	7dfb      	ldrb	r3, [r7, #23]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f023 0201 	bic.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0303 	bic.w	r3, r3, #3
 800647e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f023 0202 	bic.w	r2, r3, #2
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f023 0201 	bic.w	r2, r3, #1
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006520 <OC1Config+0xd0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d003      	beq.n	80064ba <OC1Config+0x6a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006524 <OC1Config+0xd4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d11e      	bne.n	80064f8 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f023 0208 	bic.w	r2, r3, #8
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 0204 	bic.w	r2, r3, #4
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff fe7b 	bl	8006206 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40010000 	.word	0x40010000
 8006524:	40010400 	.word	0x40010400

08006528 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f023 0210 	bic.w	r2, r3, #16
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	021b      	lsls	r3, r3, #8
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 0220 	bic.w	r2, r3, #32
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f023 0210 	bic.w	r2, r3, #16
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a1d      	ldr	r2, [pc, #116]	@ (8006600 <OC2Config+0xd8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <OC2Config+0x70>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a1c      	ldr	r2, [pc, #112]	@ (8006604 <OC2Config+0xdc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d11f      	bne.n	80065d8 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	019b      	lsls	r3, r3, #6
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	019b      	lsls	r3, r3, #6
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fe19 	bl	8006222 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40010000 	.word	0x40010000
 8006604:	40010400 	.word	0x40010400

08006608 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1d      	ldr	r2, [pc, #116]	@ (80066e0 <OC3Config+0xd8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <OC3Config+0x6e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a1c      	ldr	r2, [pc, #112]	@ (80066e4 <OC3Config+0xdc>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d11f      	bne.n	80066b6 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	029b      	lsls	r3, r3, #10
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	015b      	lsls	r3, r3, #5
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff fdb8 	bl	800623e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40010400 	.word	0x40010400

080066e8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	031b      	lsls	r3, r3, #12
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	031b      	lsls	r3, r3, #12
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a11      	ldr	r2, [pc, #68]	@ (8006790 <OC4Config+0xa8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <OC4Config+0x70>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a10      	ldr	r2, [pc, #64]	@ (8006794 <OC4Config+0xac>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d107      	bne.n	8006768 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	019b      	lsls	r3, r3, #6
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff fd6d 	bl	800625a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40010000 	.word	0x40010000
 8006794:	40010400 	.word	0x40010400

08006798 <LL_USART_IsEnabled>:
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ac:	bf0c      	ite	eq
 80067ae:	2301      	moveq	r3, #1
 80067b0:	2300      	movne	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <LL_USART_SetStopBitsLength>:
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	611a      	str	r2, [r3, #16]
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <LL_USART_SetHWFlowCtrl>:
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	615a      	str	r2, [r3, #20]
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <LL_USART_SetBaudRate>:
{
 800680c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006810:	b0c0      	sub	sp, #256	@ 0x100
 8006812:	af00      	add	r7, sp, #0
 8006814:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006818:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800681c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8006820:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800682c:	f040 810c 	bne.w	8006a48 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006830:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006834:	2200      	movs	r2, #0
 8006836:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800683a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800683e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	1891      	adds	r1, r2, r2
 8006848:	6639      	str	r1, [r7, #96]	@ 0x60
 800684a:	415b      	adcs	r3, r3
 800684c:	667b      	str	r3, [r7, #100]	@ 0x64
 800684e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006852:	4621      	mov	r1, r4
 8006854:	eb12 0801 	adds.w	r8, r2, r1
 8006858:	4629      	mov	r1, r5
 800685a:	eb43 0901 	adc.w	r9, r3, r1
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800686a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800686e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006872:	4690      	mov	r8, r2
 8006874:	4699      	mov	r9, r3
 8006876:	4623      	mov	r3, r4
 8006878:	eb18 0303 	adds.w	r3, r8, r3
 800687c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006880:	462b      	mov	r3, r5
 8006882:	eb49 0303 	adc.w	r3, r9, r3
 8006886:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800688a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800688e:	2200      	movs	r2, #0
 8006890:	469a      	mov	sl, r3
 8006892:	4693      	mov	fp, r2
 8006894:	eb1a 030a 	adds.w	r3, sl, sl
 8006898:	65bb      	str	r3, [r7, #88]	@ 0x58
 800689a:	eb4b 030b 	adc.w	r3, fp, fp
 800689e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80068a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80068a8:	f7fa f97e 	bl	8000ba8 <__aeabi_uldivmod>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4b64      	ldr	r3, [pc, #400]	@ (8006a44 <LL_USART_SetBaudRate+0x238>)
 80068b2:	fba3 2302 	umull	r2, r3, r3, r2
 80068b6:	095b      	lsrs	r3, r3, #5
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	b29c      	uxth	r4, r3
 80068be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068c8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068cc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80068d0:	4642      	mov	r2, r8
 80068d2:	464b      	mov	r3, r9
 80068d4:	1891      	adds	r1, r2, r2
 80068d6:	6539      	str	r1, [r7, #80]	@ 0x50
 80068d8:	415b      	adcs	r3, r3
 80068da:	657b      	str	r3, [r7, #84]	@ 0x54
 80068dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068e0:	4641      	mov	r1, r8
 80068e2:	1851      	adds	r1, r2, r1
 80068e4:	64b9      	str	r1, [r7, #72]	@ 0x48
 80068e6:	4649      	mov	r1, r9
 80068e8:	414b      	adcs	r3, r1
 80068ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80068f8:	4659      	mov	r1, fp
 80068fa:	00cb      	lsls	r3, r1, #3
 80068fc:	4651      	mov	r1, sl
 80068fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006902:	4651      	mov	r1, sl
 8006904:	00ca      	lsls	r2, r1, #3
 8006906:	4610      	mov	r0, r2
 8006908:	4619      	mov	r1, r3
 800690a:	4603      	mov	r3, r0
 800690c:	4642      	mov	r2, r8
 800690e:	189b      	adds	r3, r3, r2
 8006910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006914:	464b      	mov	r3, r9
 8006916:	460a      	mov	r2, r1
 8006918:	eb42 0303 	adc.w	r3, r2, r3
 800691c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006920:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006924:	2200      	movs	r2, #0
 8006926:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800692a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800692e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006932:	460b      	mov	r3, r1
 8006934:	18db      	adds	r3, r3, r3
 8006936:	643b      	str	r3, [r7, #64]	@ 0x40
 8006938:	4613      	mov	r3, r2
 800693a:	eb42 0303 	adc.w	r3, r2, r3
 800693e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006940:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006944:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8006948:	f7fa f92e 	bl	8000ba8 <__aeabi_uldivmod>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4611      	mov	r1, r2
 8006952:	4b3c      	ldr	r3, [pc, #240]	@ (8006a44 <LL_USART_SetBaudRate+0x238>)
 8006954:	fba3 2301 	umull	r2, r3, r3, r1
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	2264      	movs	r2, #100	@ 0x64
 800695c:	fb02 f303 	mul.w	r3, r2, r3
 8006960:	1acb      	subs	r3, r1, r3
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006968:	4b36      	ldr	r3, [pc, #216]	@ (8006a44 <LL_USART_SetBaudRate+0x238>)
 800696a:	fba3 2302 	umull	r2, r3, r3, r2
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	b29b      	uxth	r3, r3
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	b29b      	uxth	r3, r3
 8006976:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800697a:	b29b      	uxth	r3, r3
 800697c:	4423      	add	r3, r4
 800697e:	b29c      	uxth	r4, r3
 8006980:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006984:	2200      	movs	r2, #0
 8006986:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800698a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800698e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8006992:	4642      	mov	r2, r8
 8006994:	464b      	mov	r3, r9
 8006996:	1891      	adds	r1, r2, r2
 8006998:	63b9      	str	r1, [r7, #56]	@ 0x38
 800699a:	415b      	adcs	r3, r3
 800699c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800699e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069a2:	4641      	mov	r1, r8
 80069a4:	1851      	adds	r1, r2, r1
 80069a6:	6339      	str	r1, [r7, #48]	@ 0x30
 80069a8:	4649      	mov	r1, r9
 80069aa:	414b      	adcs	r3, r1
 80069ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80069ba:	4659      	mov	r1, fp
 80069bc:	00cb      	lsls	r3, r1, #3
 80069be:	4651      	mov	r1, sl
 80069c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069c4:	4651      	mov	r1, sl
 80069c6:	00ca      	lsls	r2, r1, #3
 80069c8:	4610      	mov	r0, r2
 80069ca:	4619      	mov	r1, r3
 80069cc:	4603      	mov	r3, r0
 80069ce:	4642      	mov	r2, r8
 80069d0:	189b      	adds	r3, r3, r2
 80069d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069d6:	464b      	mov	r3, r9
 80069d8:	460a      	mov	r2, r1
 80069da:	eb42 0303 	adc.w	r3, r2, r3
 80069de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80069e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069ec:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80069f0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80069f4:	460b      	mov	r3, r1
 80069f6:	18db      	adds	r3, r3, r3
 80069f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069fa:	4613      	mov	r3, r2
 80069fc:	eb42 0303 	adc.w	r3, r2, r3
 8006a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a06:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8006a0a:	f7fa f8cd 	bl	8000ba8 <__aeabi_uldivmod>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4b0c      	ldr	r3, [pc, #48]	@ (8006a44 <LL_USART_SetBaudRate+0x238>)
 8006a14:	fba3 1302 	umull	r1, r3, r3, r2
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	2164      	movs	r1, #100	@ 0x64
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	3332      	adds	r3, #50	@ 0x32
 8006a26:	4a07      	ldr	r2, [pc, #28]	@ (8006a44 <LL_USART_SetBaudRate+0x238>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	4423      	add	r3, r4
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a40:	609a      	str	r2, [r3, #8]
}
 8006a42:	e108      	b.n	8006c56 <LL_USART_SetBaudRate+0x44a>
 8006a44:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006a48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a52:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a56:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8006a5a:	4642      	mov	r2, r8
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	1891      	adds	r1, r2, r2
 8006a60:	6239      	str	r1, [r7, #32]
 8006a62:	415b      	adcs	r3, r3
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a6a:	4641      	mov	r1, r8
 8006a6c:	1854      	adds	r4, r2, r1
 8006a6e:	4649      	mov	r1, r9
 8006a70:	eb43 0501 	adc.w	r5, r3, r1
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	00eb      	lsls	r3, r5, #3
 8006a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a82:	00e2      	lsls	r2, r4, #3
 8006a84:	4614      	mov	r4, r2
 8006a86:	461d      	mov	r5, r3
 8006a88:	4643      	mov	r3, r8
 8006a8a:	18e3      	adds	r3, r4, r3
 8006a8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a90:	464b      	mov	r3, r9
 8006a92:	eb45 0303 	adc.w	r3, r5, r3
 8006a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006a9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006aa4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	008b      	lsls	r3, r1, #2
 8006ab8:	4621      	mov	r1, r4
 8006aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006abe:	4621      	mov	r1, r4
 8006ac0:	008a      	lsls	r2, r1, #2
 8006ac2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8006ac6:	f7fa f86f 	bl	8000ba8 <__aeabi_uldivmod>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4b65      	ldr	r3, [pc, #404]	@ (8006c64 <LL_USART_SetBaudRate+0x458>)
 8006ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	b29c      	uxth	r4, r3
 8006adc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ae6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006aea:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8006aee:	4642      	mov	r2, r8
 8006af0:	464b      	mov	r3, r9
 8006af2:	1891      	adds	r1, r2, r2
 8006af4:	61b9      	str	r1, [r7, #24]
 8006af6:	415b      	adcs	r3, r3
 8006af8:	61fb      	str	r3, [r7, #28]
 8006afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006afe:	4641      	mov	r1, r8
 8006b00:	1851      	adds	r1, r2, r1
 8006b02:	6139      	str	r1, [r7, #16]
 8006b04:	4649      	mov	r1, r9
 8006b06:	414b      	adcs	r3, r1
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b16:	4659      	mov	r1, fp
 8006b18:	00cb      	lsls	r3, r1, #3
 8006b1a:	4651      	mov	r1, sl
 8006b1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b20:	4651      	mov	r1, sl
 8006b22:	00ca      	lsls	r2, r1, #3
 8006b24:	4610      	mov	r0, r2
 8006b26:	4619      	mov	r1, r3
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4642      	mov	r2, r8
 8006b2c:	189b      	adds	r3, r3, r2
 8006b2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b32:	464b      	mov	r3, r9
 8006b34:	460a      	mov	r2, r1
 8006b36:	eb42 0303 	adc.w	r3, r2, r3
 8006b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b48:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8006b58:	4649      	mov	r1, r9
 8006b5a:	008b      	lsls	r3, r1, #2
 8006b5c:	4641      	mov	r1, r8
 8006b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b62:	4641      	mov	r1, r8
 8006b64:	008a      	lsls	r2, r1, #2
 8006b66:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006b6a:	f7fa f81d 	bl	8000ba8 <__aeabi_uldivmod>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4611      	mov	r1, r2
 8006b74:	4b3b      	ldr	r3, [pc, #236]	@ (8006c64 <LL_USART_SetBaudRate+0x458>)
 8006b76:	fba3 2301 	umull	r2, r3, r3, r1
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	2264      	movs	r2, #100	@ 0x64
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	1acb      	subs	r3, r1, r3
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	3332      	adds	r3, #50	@ 0x32
 8006b88:	4a36      	ldr	r2, [pc, #216]	@ (8006c64 <LL_USART_SetBaudRate+0x458>)
 8006b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4423      	add	r3, r4
 8006b9a:	b29c      	uxth	r4, r3
 8006b9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ba4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ba6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006baa:	4642      	mov	r2, r8
 8006bac:	464b      	mov	r3, r9
 8006bae:	1891      	adds	r1, r2, r2
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	415b      	adcs	r3, r3
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bba:	4641      	mov	r1, r8
 8006bbc:	1851      	adds	r1, r2, r1
 8006bbe:	6039      	str	r1, [r7, #0]
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	414b      	adcs	r3, r1
 8006bc4:	607b      	str	r3, [r7, #4]
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bd2:	4659      	mov	r1, fp
 8006bd4:	00cb      	lsls	r3, r1, #3
 8006bd6:	4651      	mov	r1, sl
 8006bd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bdc:	4651      	mov	r1, sl
 8006bde:	00ca      	lsls	r2, r1, #3
 8006be0:	4610      	mov	r0, r2
 8006be2:	4619      	mov	r1, r3
 8006be4:	4603      	mov	r3, r0
 8006be6:	4642      	mov	r2, r8
 8006be8:	189b      	adds	r3, r3, r2
 8006bea:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bec:	464b      	mov	r3, r9
 8006bee:	460a      	mov	r2, r1
 8006bf0:	eb42 0303 	adc.w	r3, r2, r3
 8006bf4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006bf6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	008b      	lsls	r3, r1, #2
 8006c10:	4641      	mov	r1, r8
 8006c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c16:	4641      	mov	r1, r8
 8006c18:	008a      	lsls	r2, r1, #2
 8006c1a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006c1e:	f7f9 ffc3 	bl	8000ba8 <__aeabi_uldivmod>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4b0f      	ldr	r3, [pc, #60]	@ (8006c64 <LL_USART_SetBaudRate+0x458>)
 8006c28:	fba3 1302 	umull	r1, r3, r3, r2
 8006c2c:	095b      	lsrs	r3, r3, #5
 8006c2e:	2164      	movs	r1, #100	@ 0x64
 8006c30:	fb01 f303 	mul.w	r3, r1, r3
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	3332      	adds	r3, #50	@ 0x32
 8006c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c64 <LL_USART_SetBaudRate+0x458>)
 8006c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4423      	add	r3, r4
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c54:	609a      	str	r2, [r3, #8]
}
 8006c56:	bf00      	nop
 8006c58:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c62:	bf00      	nop
 8006c64:	51eb851f 	.word	0x51eb851f

08006c68 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff fd8c 	bl	8006798 <LL_USART_IsEnabled>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d15e      	bne.n	8006d44 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006c8e:	f023 030c 	bic.w	r3, r3, #12
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	6851      	ldr	r1, [r2, #4]
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	68d2      	ldr	r2, [r2, #12]
 8006c9a:	4311      	orrs	r1, r2
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	6912      	ldr	r2, [r2, #16]
 8006ca0:	4311      	orrs	r1, r2
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	6992      	ldr	r2, [r2, #24]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff fd83 	bl	80067c0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fd90 	bl	80067e6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006cc6:	f107 0308 	add.w	r3, r7, #8
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff f932 	bl	8005f34 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d50 <LL_USART_Init+0xe8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d102      	bne.n	8006cde <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e021      	b.n	8006d22 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d54 <LL_USART_Init+0xec>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d102      	bne.n	8006cec <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	e01a      	b.n	8006d22 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a1a      	ldr	r2, [pc, #104]	@ (8006d58 <LL_USART_Init+0xf0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d102      	bne.n	8006cfa <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	e013      	b.n	8006d22 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a17      	ldr	r2, [pc, #92]	@ (8006d5c <LL_USART_Init+0xf4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d102      	bne.n	8006d08 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	e00c      	b.n	8006d22 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a15      	ldr	r2, [pc, #84]	@ (8006d60 <LL_USART_Init+0xf8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d102      	bne.n	8006d16 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	e005      	b.n	8006d22 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a12      	ldr	r2, [pc, #72]	@ (8006d64 <LL_USART_Init+0xfc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d101      	bne.n	8006d22 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00d      	beq.n	8006d44 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8006d30:	2300      	movs	r3, #0
 8006d32:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8006d3c:	69b9      	ldr	r1, [r7, #24]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fd64 	bl	800680c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40011000 	.word	0x40011000
 8006d54:	40004400 	.word	0x40004400
 8006d58:	40004800 	.word	0x40004800
 8006d5c:	40011400 	.word	0x40011400
 8006d60:	40004c00 	.word	0x40004c00
 8006d64:	40005000 	.word	0x40005000

08006d68 <__cvt>:
 8006d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	ec57 6b10 	vmov	r6, r7, d0
 8006d70:	2f00      	cmp	r7, #0
 8006d72:	460c      	mov	r4, r1
 8006d74:	4619      	mov	r1, r3
 8006d76:	463b      	mov	r3, r7
 8006d78:	bfbb      	ittet	lt
 8006d7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d7e:	461f      	movlt	r7, r3
 8006d80:	2300      	movge	r3, #0
 8006d82:	232d      	movlt	r3, #45	@ 0x2d
 8006d84:	700b      	strb	r3, [r1, #0]
 8006d86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006d8c:	4691      	mov	r9, r2
 8006d8e:	f023 0820 	bic.w	r8, r3, #32
 8006d92:	bfbc      	itt	lt
 8006d94:	4632      	movlt	r2, r6
 8006d96:	4616      	movlt	r6, r2
 8006d98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d9c:	d005      	beq.n	8006daa <__cvt+0x42>
 8006d9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006da2:	d100      	bne.n	8006da6 <__cvt+0x3e>
 8006da4:	3401      	adds	r4, #1
 8006da6:	2102      	movs	r1, #2
 8006da8:	e000      	b.n	8006dac <__cvt+0x44>
 8006daa:	2103      	movs	r1, #3
 8006dac:	ab03      	add	r3, sp, #12
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	ab02      	add	r3, sp, #8
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	ec47 6b10 	vmov	d0, r6, r7
 8006db8:	4653      	mov	r3, sl
 8006dba:	4622      	mov	r2, r4
 8006dbc:	f000 ff3c 	bl	8007c38 <_dtoa_r>
 8006dc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	d119      	bne.n	8006dfc <__cvt+0x94>
 8006dc8:	f019 0f01 	tst.w	r9, #1
 8006dcc:	d00e      	beq.n	8006dec <__cvt+0x84>
 8006dce:	eb00 0904 	add.w	r9, r0, r4
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	4639      	mov	r1, r7
 8006dda:	f7f9 fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dde:	b108      	cbz	r0, 8006de4 <__cvt+0x7c>
 8006de0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006de4:	2230      	movs	r2, #48	@ 0x30
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	454b      	cmp	r3, r9
 8006dea:	d31e      	bcc.n	8006e2a <__cvt+0xc2>
 8006dec:	9b03      	ldr	r3, [sp, #12]
 8006dee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006df0:	1b5b      	subs	r3, r3, r5
 8006df2:	4628      	mov	r0, r5
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	b004      	add	sp, #16
 8006df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e00:	eb00 0904 	add.w	r9, r0, r4
 8006e04:	d1e5      	bne.n	8006dd2 <__cvt+0x6a>
 8006e06:	7803      	ldrb	r3, [r0, #0]
 8006e08:	2b30      	cmp	r3, #48	@ 0x30
 8006e0a:	d10a      	bne.n	8006e22 <__cvt+0xba>
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2300      	movs	r3, #0
 8006e10:	4630      	mov	r0, r6
 8006e12:	4639      	mov	r1, r7
 8006e14:	f7f9 fe58 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e18:	b918      	cbnz	r0, 8006e22 <__cvt+0xba>
 8006e1a:	f1c4 0401 	rsb	r4, r4, #1
 8006e1e:	f8ca 4000 	str.w	r4, [sl]
 8006e22:	f8da 3000 	ldr.w	r3, [sl]
 8006e26:	4499      	add	r9, r3
 8006e28:	e7d3      	b.n	8006dd2 <__cvt+0x6a>
 8006e2a:	1c59      	adds	r1, r3, #1
 8006e2c:	9103      	str	r1, [sp, #12]
 8006e2e:	701a      	strb	r2, [r3, #0]
 8006e30:	e7d9      	b.n	8006de6 <__cvt+0x7e>

08006e32 <__exponent>:
 8006e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e34:	2900      	cmp	r1, #0
 8006e36:	bfba      	itte	lt
 8006e38:	4249      	neglt	r1, r1
 8006e3a:	232d      	movlt	r3, #45	@ 0x2d
 8006e3c:	232b      	movge	r3, #43	@ 0x2b
 8006e3e:	2909      	cmp	r1, #9
 8006e40:	7002      	strb	r2, [r0, #0]
 8006e42:	7043      	strb	r3, [r0, #1]
 8006e44:	dd29      	ble.n	8006e9a <__exponent+0x68>
 8006e46:	f10d 0307 	add.w	r3, sp, #7
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	270a      	movs	r7, #10
 8006e4e:	461a      	mov	r2, r3
 8006e50:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e54:	fb07 1416 	mls	r4, r7, r6, r1
 8006e58:	3430      	adds	r4, #48	@ 0x30
 8006e5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e5e:	460c      	mov	r4, r1
 8006e60:	2c63      	cmp	r4, #99	@ 0x63
 8006e62:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e66:	4631      	mov	r1, r6
 8006e68:	dcf1      	bgt.n	8006e4e <__exponent+0x1c>
 8006e6a:	3130      	adds	r1, #48	@ 0x30
 8006e6c:	1e94      	subs	r4, r2, #2
 8006e6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e72:	1c41      	adds	r1, r0, #1
 8006e74:	4623      	mov	r3, r4
 8006e76:	42ab      	cmp	r3, r5
 8006e78:	d30a      	bcc.n	8006e90 <__exponent+0x5e>
 8006e7a:	f10d 0309 	add.w	r3, sp, #9
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	42ac      	cmp	r4, r5
 8006e82:	bf88      	it	hi
 8006e84:	2300      	movhi	r3, #0
 8006e86:	3302      	adds	r3, #2
 8006e88:	4403      	add	r3, r0
 8006e8a:	1a18      	subs	r0, r3, r0
 8006e8c:	b003      	add	sp, #12
 8006e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006e94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006e98:	e7ed      	b.n	8006e76 <__exponent+0x44>
 8006e9a:	2330      	movs	r3, #48	@ 0x30
 8006e9c:	3130      	adds	r1, #48	@ 0x30
 8006e9e:	7083      	strb	r3, [r0, #2]
 8006ea0:	70c1      	strb	r1, [r0, #3]
 8006ea2:	1d03      	adds	r3, r0, #4
 8006ea4:	e7f1      	b.n	8006e8a <__exponent+0x58>
	...

08006ea8 <_printf_float>:
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	b08d      	sub	sp, #52	@ 0x34
 8006eae:	460c      	mov	r4, r1
 8006eb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006eb4:	4616      	mov	r6, r2
 8006eb6:	461f      	mov	r7, r3
 8006eb8:	4605      	mov	r5, r0
 8006eba:	f000 fdbd 	bl	8007a38 <_localeconv_r>
 8006ebe:	6803      	ldr	r3, [r0, #0]
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7f9 f9d4 	bl	8000270 <strlen>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed0:	9005      	str	r0, [sp, #20]
 8006ed2:	3307      	adds	r3, #7
 8006ed4:	f023 0307 	bic.w	r3, r3, #7
 8006ed8:	f103 0208 	add.w	r2, r3, #8
 8006edc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ee0:	f8d4 b000 	ldr.w	fp, [r4]
 8006ee4:	f8c8 2000 	str.w	r2, [r8]
 8006ee8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ef0:	9307      	str	r3, [sp, #28]
 8006ef2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ef6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006efe:	4b9c      	ldr	r3, [pc, #624]	@ (8007170 <_printf_float+0x2c8>)
 8006f00:	f04f 32ff 	mov.w	r2, #4294967295
 8006f04:	f7f9 fe12 	bl	8000b2c <__aeabi_dcmpun>
 8006f08:	bb70      	cbnz	r0, 8006f68 <_printf_float+0xc0>
 8006f0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f0e:	4b98      	ldr	r3, [pc, #608]	@ (8007170 <_printf_float+0x2c8>)
 8006f10:	f04f 32ff 	mov.w	r2, #4294967295
 8006f14:	f7f9 fdec 	bl	8000af0 <__aeabi_dcmple>
 8006f18:	bb30      	cbnz	r0, 8006f68 <_printf_float+0xc0>
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4649      	mov	r1, r9
 8006f22:	f7f9 fddb 	bl	8000adc <__aeabi_dcmplt>
 8006f26:	b110      	cbz	r0, 8006f2e <_printf_float+0x86>
 8006f28:	232d      	movs	r3, #45	@ 0x2d
 8006f2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f2e:	4a91      	ldr	r2, [pc, #580]	@ (8007174 <_printf_float+0x2cc>)
 8006f30:	4b91      	ldr	r3, [pc, #580]	@ (8007178 <_printf_float+0x2d0>)
 8006f32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f36:	bf8c      	ite	hi
 8006f38:	4690      	movhi	r8, r2
 8006f3a:	4698      	movls	r8, r3
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	6123      	str	r3, [r4, #16]
 8006f40:	f02b 0304 	bic.w	r3, fp, #4
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	f04f 0900 	mov.w	r9, #0
 8006f4a:	9700      	str	r7, [sp, #0]
 8006f4c:	4633      	mov	r3, r6
 8006f4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f50:	4621      	mov	r1, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 f9d2 	bl	80072fc <_printf_common>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f040 808d 	bne.w	8007078 <_printf_float+0x1d0>
 8006f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f62:	b00d      	add	sp, #52	@ 0x34
 8006f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	4649      	mov	r1, r9
 8006f70:	f7f9 fddc 	bl	8000b2c <__aeabi_dcmpun>
 8006f74:	b140      	cbz	r0, 8006f88 <_printf_float+0xe0>
 8006f76:	464b      	mov	r3, r9
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	bfbc      	itt	lt
 8006f7c:	232d      	movlt	r3, #45	@ 0x2d
 8006f7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f82:	4a7e      	ldr	r2, [pc, #504]	@ (800717c <_printf_float+0x2d4>)
 8006f84:	4b7e      	ldr	r3, [pc, #504]	@ (8007180 <_printf_float+0x2d8>)
 8006f86:	e7d4      	b.n	8006f32 <_printf_float+0x8a>
 8006f88:	6863      	ldr	r3, [r4, #4]
 8006f8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006f8e:	9206      	str	r2, [sp, #24]
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	d13b      	bne.n	800700c <_printf_float+0x164>
 8006f94:	2306      	movs	r3, #6
 8006f96:	6063      	str	r3, [r4, #4]
 8006f98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	6022      	str	r2, [r4, #0]
 8006fa0:	9303      	str	r3, [sp, #12]
 8006fa2:	ab0a      	add	r3, sp, #40	@ 0x28
 8006fa4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006fa8:	ab09      	add	r3, sp, #36	@ 0x24
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	6861      	ldr	r1, [r4, #4]
 8006fae:	ec49 8b10 	vmov	d0, r8, r9
 8006fb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f7ff fed6 	bl	8006d68 <__cvt>
 8006fbc:	9b06      	ldr	r3, [sp, #24]
 8006fbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fc0:	2b47      	cmp	r3, #71	@ 0x47
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	d129      	bne.n	800701a <_printf_float+0x172>
 8006fc6:	1cc8      	adds	r0, r1, #3
 8006fc8:	db02      	blt.n	8006fd0 <_printf_float+0x128>
 8006fca:	6863      	ldr	r3, [r4, #4]
 8006fcc:	4299      	cmp	r1, r3
 8006fce:	dd41      	ble.n	8007054 <_printf_float+0x1ac>
 8006fd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fd4:	fa5f fa8a 	uxtb.w	sl, sl
 8006fd8:	3901      	subs	r1, #1
 8006fda:	4652      	mov	r2, sl
 8006fdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006fe0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fe2:	f7ff ff26 	bl	8006e32 <__exponent>
 8006fe6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fe8:	1813      	adds	r3, r2, r0
 8006fea:	2a01      	cmp	r2, #1
 8006fec:	4681      	mov	r9, r0
 8006fee:	6123      	str	r3, [r4, #16]
 8006ff0:	dc02      	bgt.n	8006ff8 <_printf_float+0x150>
 8006ff2:	6822      	ldr	r2, [r4, #0]
 8006ff4:	07d2      	lsls	r2, r2, #31
 8006ff6:	d501      	bpl.n	8006ffc <_printf_float+0x154>
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0a2      	beq.n	8006f4a <_printf_float+0xa2>
 8007004:	232d      	movs	r3, #45	@ 0x2d
 8007006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800700a:	e79e      	b.n	8006f4a <_printf_float+0xa2>
 800700c:	9a06      	ldr	r2, [sp, #24]
 800700e:	2a47      	cmp	r2, #71	@ 0x47
 8007010:	d1c2      	bne.n	8006f98 <_printf_float+0xf0>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1c0      	bne.n	8006f98 <_printf_float+0xf0>
 8007016:	2301      	movs	r3, #1
 8007018:	e7bd      	b.n	8006f96 <_printf_float+0xee>
 800701a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800701e:	d9db      	bls.n	8006fd8 <_printf_float+0x130>
 8007020:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007024:	d118      	bne.n	8007058 <_printf_float+0x1b0>
 8007026:	2900      	cmp	r1, #0
 8007028:	6863      	ldr	r3, [r4, #4]
 800702a:	dd0b      	ble.n	8007044 <_printf_float+0x19c>
 800702c:	6121      	str	r1, [r4, #16]
 800702e:	b913      	cbnz	r3, 8007036 <_printf_float+0x18e>
 8007030:	6822      	ldr	r2, [r4, #0]
 8007032:	07d0      	lsls	r0, r2, #31
 8007034:	d502      	bpl.n	800703c <_printf_float+0x194>
 8007036:	3301      	adds	r3, #1
 8007038:	440b      	add	r3, r1
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800703e:	f04f 0900 	mov.w	r9, #0
 8007042:	e7db      	b.n	8006ffc <_printf_float+0x154>
 8007044:	b913      	cbnz	r3, 800704c <_printf_float+0x1a4>
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	07d2      	lsls	r2, r2, #31
 800704a:	d501      	bpl.n	8007050 <_printf_float+0x1a8>
 800704c:	3302      	adds	r3, #2
 800704e:	e7f4      	b.n	800703a <_printf_float+0x192>
 8007050:	2301      	movs	r3, #1
 8007052:	e7f2      	b.n	800703a <_printf_float+0x192>
 8007054:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800705a:	4299      	cmp	r1, r3
 800705c:	db05      	blt.n	800706a <_printf_float+0x1c2>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	6121      	str	r1, [r4, #16]
 8007062:	07d8      	lsls	r0, r3, #31
 8007064:	d5ea      	bpl.n	800703c <_printf_float+0x194>
 8007066:	1c4b      	adds	r3, r1, #1
 8007068:	e7e7      	b.n	800703a <_printf_float+0x192>
 800706a:	2900      	cmp	r1, #0
 800706c:	bfd4      	ite	le
 800706e:	f1c1 0202 	rsble	r2, r1, #2
 8007072:	2201      	movgt	r2, #1
 8007074:	4413      	add	r3, r2
 8007076:	e7e0      	b.n	800703a <_printf_float+0x192>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	055a      	lsls	r2, r3, #21
 800707c:	d407      	bmi.n	800708e <_printf_float+0x1e6>
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	4642      	mov	r2, r8
 8007082:	4631      	mov	r1, r6
 8007084:	4628      	mov	r0, r5
 8007086:	47b8      	blx	r7
 8007088:	3001      	adds	r0, #1
 800708a:	d12b      	bne.n	80070e4 <_printf_float+0x23c>
 800708c:	e767      	b.n	8006f5e <_printf_float+0xb6>
 800708e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007092:	f240 80dd 	bls.w	8007250 <_printf_float+0x3a8>
 8007096:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800709a:	2200      	movs	r2, #0
 800709c:	2300      	movs	r3, #0
 800709e:	f7f9 fd13 	bl	8000ac8 <__aeabi_dcmpeq>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d033      	beq.n	800710e <_printf_float+0x266>
 80070a6:	4a37      	ldr	r2, [pc, #220]	@ (8007184 <_printf_float+0x2dc>)
 80070a8:	2301      	movs	r3, #1
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f af54 	beq.w	8006f5e <_printf_float+0xb6>
 80070b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80070ba:	4543      	cmp	r3, r8
 80070bc:	db02      	blt.n	80070c4 <_printf_float+0x21c>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	07d8      	lsls	r0, r3, #31
 80070c2:	d50f      	bpl.n	80070e4 <_printf_float+0x23c>
 80070c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f af45 	beq.w	8006f5e <_printf_float+0xb6>
 80070d4:	f04f 0900 	mov.w	r9, #0
 80070d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80070dc:	f104 0a1a 	add.w	sl, r4, #26
 80070e0:	45c8      	cmp	r8, r9
 80070e2:	dc09      	bgt.n	80070f8 <_printf_float+0x250>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	079b      	lsls	r3, r3, #30
 80070e8:	f100 8103 	bmi.w	80072f2 <_printf_float+0x44a>
 80070ec:	68e0      	ldr	r0, [r4, #12]
 80070ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070f0:	4298      	cmp	r0, r3
 80070f2:	bfb8      	it	lt
 80070f4:	4618      	movlt	r0, r3
 80070f6:	e734      	b.n	8006f62 <_printf_float+0xba>
 80070f8:	2301      	movs	r3, #1
 80070fa:	4652      	mov	r2, sl
 80070fc:	4631      	mov	r1, r6
 80070fe:	4628      	mov	r0, r5
 8007100:	47b8      	blx	r7
 8007102:	3001      	adds	r0, #1
 8007104:	f43f af2b 	beq.w	8006f5e <_printf_float+0xb6>
 8007108:	f109 0901 	add.w	r9, r9, #1
 800710c:	e7e8      	b.n	80070e0 <_printf_float+0x238>
 800710e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007110:	2b00      	cmp	r3, #0
 8007112:	dc39      	bgt.n	8007188 <_printf_float+0x2e0>
 8007114:	4a1b      	ldr	r2, [pc, #108]	@ (8007184 <_printf_float+0x2dc>)
 8007116:	2301      	movs	r3, #1
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	f43f af1d 	beq.w	8006f5e <_printf_float+0xb6>
 8007124:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007128:	ea59 0303 	orrs.w	r3, r9, r3
 800712c:	d102      	bne.n	8007134 <_printf_float+0x28c>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	07d9      	lsls	r1, r3, #31
 8007132:	d5d7      	bpl.n	80070e4 <_printf_float+0x23c>
 8007134:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007138:	4631      	mov	r1, r6
 800713a:	4628      	mov	r0, r5
 800713c:	47b8      	blx	r7
 800713e:	3001      	adds	r0, #1
 8007140:	f43f af0d 	beq.w	8006f5e <_printf_float+0xb6>
 8007144:	f04f 0a00 	mov.w	sl, #0
 8007148:	f104 0b1a 	add.w	fp, r4, #26
 800714c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800714e:	425b      	negs	r3, r3
 8007150:	4553      	cmp	r3, sl
 8007152:	dc01      	bgt.n	8007158 <_printf_float+0x2b0>
 8007154:	464b      	mov	r3, r9
 8007156:	e793      	b.n	8007080 <_printf_float+0x1d8>
 8007158:	2301      	movs	r3, #1
 800715a:	465a      	mov	r2, fp
 800715c:	4631      	mov	r1, r6
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	f43f aefb 	beq.w	8006f5e <_printf_float+0xb6>
 8007168:	f10a 0a01 	add.w	sl, sl, #1
 800716c:	e7ee      	b.n	800714c <_printf_float+0x2a4>
 800716e:	bf00      	nop
 8007170:	7fefffff 	.word	0x7fefffff
 8007174:	0800a5e4 	.word	0x0800a5e4
 8007178:	0800a5e0 	.word	0x0800a5e0
 800717c:	0800a5ec 	.word	0x0800a5ec
 8007180:	0800a5e8 	.word	0x0800a5e8
 8007184:	0800a5f0 	.word	0x0800a5f0
 8007188:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800718a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800718e:	4553      	cmp	r3, sl
 8007190:	bfa8      	it	ge
 8007192:	4653      	movge	r3, sl
 8007194:	2b00      	cmp	r3, #0
 8007196:	4699      	mov	r9, r3
 8007198:	dc36      	bgt.n	8007208 <_printf_float+0x360>
 800719a:	f04f 0b00 	mov.w	fp, #0
 800719e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071a2:	f104 021a 	add.w	r2, r4, #26
 80071a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071a8:	9306      	str	r3, [sp, #24]
 80071aa:	eba3 0309 	sub.w	r3, r3, r9
 80071ae:	455b      	cmp	r3, fp
 80071b0:	dc31      	bgt.n	8007216 <_printf_float+0x36e>
 80071b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b4:	459a      	cmp	sl, r3
 80071b6:	dc3a      	bgt.n	800722e <_printf_float+0x386>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	07da      	lsls	r2, r3, #31
 80071bc:	d437      	bmi.n	800722e <_printf_float+0x386>
 80071be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c0:	ebaa 0903 	sub.w	r9, sl, r3
 80071c4:	9b06      	ldr	r3, [sp, #24]
 80071c6:	ebaa 0303 	sub.w	r3, sl, r3
 80071ca:	4599      	cmp	r9, r3
 80071cc:	bfa8      	it	ge
 80071ce:	4699      	movge	r9, r3
 80071d0:	f1b9 0f00 	cmp.w	r9, #0
 80071d4:	dc33      	bgt.n	800723e <_printf_float+0x396>
 80071d6:	f04f 0800 	mov.w	r8, #0
 80071da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071de:	f104 0b1a 	add.w	fp, r4, #26
 80071e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e4:	ebaa 0303 	sub.w	r3, sl, r3
 80071e8:	eba3 0309 	sub.w	r3, r3, r9
 80071ec:	4543      	cmp	r3, r8
 80071ee:	f77f af79 	ble.w	80070e4 <_printf_float+0x23c>
 80071f2:	2301      	movs	r3, #1
 80071f4:	465a      	mov	r2, fp
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	f43f aeae 	beq.w	8006f5e <_printf_float+0xb6>
 8007202:	f108 0801 	add.w	r8, r8, #1
 8007206:	e7ec      	b.n	80071e2 <_printf_float+0x33a>
 8007208:	4642      	mov	r2, r8
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	d1c2      	bne.n	800719a <_printf_float+0x2f2>
 8007214:	e6a3      	b.n	8006f5e <_printf_float+0xb6>
 8007216:	2301      	movs	r3, #1
 8007218:	4631      	mov	r1, r6
 800721a:	4628      	mov	r0, r5
 800721c:	9206      	str	r2, [sp, #24]
 800721e:	47b8      	blx	r7
 8007220:	3001      	adds	r0, #1
 8007222:	f43f ae9c 	beq.w	8006f5e <_printf_float+0xb6>
 8007226:	9a06      	ldr	r2, [sp, #24]
 8007228:	f10b 0b01 	add.w	fp, fp, #1
 800722c:	e7bb      	b.n	80071a6 <_printf_float+0x2fe>
 800722e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007232:	4631      	mov	r1, r6
 8007234:	4628      	mov	r0, r5
 8007236:	47b8      	blx	r7
 8007238:	3001      	adds	r0, #1
 800723a:	d1c0      	bne.n	80071be <_printf_float+0x316>
 800723c:	e68f      	b.n	8006f5e <_printf_float+0xb6>
 800723e:	9a06      	ldr	r2, [sp, #24]
 8007240:	464b      	mov	r3, r9
 8007242:	4442      	add	r2, r8
 8007244:	4631      	mov	r1, r6
 8007246:	4628      	mov	r0, r5
 8007248:	47b8      	blx	r7
 800724a:	3001      	adds	r0, #1
 800724c:	d1c3      	bne.n	80071d6 <_printf_float+0x32e>
 800724e:	e686      	b.n	8006f5e <_printf_float+0xb6>
 8007250:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007254:	f1ba 0f01 	cmp.w	sl, #1
 8007258:	dc01      	bgt.n	800725e <_printf_float+0x3b6>
 800725a:	07db      	lsls	r3, r3, #31
 800725c:	d536      	bpl.n	80072cc <_printf_float+0x424>
 800725e:	2301      	movs	r3, #1
 8007260:	4642      	mov	r2, r8
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	f43f ae78 	beq.w	8006f5e <_printf_float+0xb6>
 800726e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	f43f ae70 	beq.w	8006f5e <_printf_float+0xb6>
 800727e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007282:	2200      	movs	r2, #0
 8007284:	2300      	movs	r3, #0
 8007286:	f10a 3aff 	add.w	sl, sl, #4294967295
 800728a:	f7f9 fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800728e:	b9c0      	cbnz	r0, 80072c2 <_printf_float+0x41a>
 8007290:	4653      	mov	r3, sl
 8007292:	f108 0201 	add.w	r2, r8, #1
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	d10c      	bne.n	80072ba <_printf_float+0x412>
 80072a0:	e65d      	b.n	8006f5e <_printf_float+0xb6>
 80072a2:	2301      	movs	r3, #1
 80072a4:	465a      	mov	r2, fp
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	f43f ae56 	beq.w	8006f5e <_printf_float+0xb6>
 80072b2:	f108 0801 	add.w	r8, r8, #1
 80072b6:	45d0      	cmp	r8, sl
 80072b8:	dbf3      	blt.n	80072a2 <_printf_float+0x3fa>
 80072ba:	464b      	mov	r3, r9
 80072bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80072c0:	e6df      	b.n	8007082 <_printf_float+0x1da>
 80072c2:	f04f 0800 	mov.w	r8, #0
 80072c6:	f104 0b1a 	add.w	fp, r4, #26
 80072ca:	e7f4      	b.n	80072b6 <_printf_float+0x40e>
 80072cc:	2301      	movs	r3, #1
 80072ce:	4642      	mov	r2, r8
 80072d0:	e7e1      	b.n	8007296 <_printf_float+0x3ee>
 80072d2:	2301      	movs	r3, #1
 80072d4:	464a      	mov	r2, r9
 80072d6:	4631      	mov	r1, r6
 80072d8:	4628      	mov	r0, r5
 80072da:	47b8      	blx	r7
 80072dc:	3001      	adds	r0, #1
 80072de:	f43f ae3e 	beq.w	8006f5e <_printf_float+0xb6>
 80072e2:	f108 0801 	add.w	r8, r8, #1
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072ea:	1a5b      	subs	r3, r3, r1
 80072ec:	4543      	cmp	r3, r8
 80072ee:	dcf0      	bgt.n	80072d2 <_printf_float+0x42a>
 80072f0:	e6fc      	b.n	80070ec <_printf_float+0x244>
 80072f2:	f04f 0800 	mov.w	r8, #0
 80072f6:	f104 0919 	add.w	r9, r4, #25
 80072fa:	e7f4      	b.n	80072e6 <_printf_float+0x43e>

080072fc <_printf_common>:
 80072fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007300:	4616      	mov	r6, r2
 8007302:	4698      	mov	r8, r3
 8007304:	688a      	ldr	r2, [r1, #8]
 8007306:	690b      	ldr	r3, [r1, #16]
 8007308:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800730c:	4293      	cmp	r3, r2
 800730e:	bfb8      	it	lt
 8007310:	4613      	movlt	r3, r2
 8007312:	6033      	str	r3, [r6, #0]
 8007314:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007318:	4607      	mov	r7, r0
 800731a:	460c      	mov	r4, r1
 800731c:	b10a      	cbz	r2, 8007322 <_printf_common+0x26>
 800731e:	3301      	adds	r3, #1
 8007320:	6033      	str	r3, [r6, #0]
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	0699      	lsls	r1, r3, #26
 8007326:	bf42      	ittt	mi
 8007328:	6833      	ldrmi	r3, [r6, #0]
 800732a:	3302      	addmi	r3, #2
 800732c:	6033      	strmi	r3, [r6, #0]
 800732e:	6825      	ldr	r5, [r4, #0]
 8007330:	f015 0506 	ands.w	r5, r5, #6
 8007334:	d106      	bne.n	8007344 <_printf_common+0x48>
 8007336:	f104 0a19 	add.w	sl, r4, #25
 800733a:	68e3      	ldr	r3, [r4, #12]
 800733c:	6832      	ldr	r2, [r6, #0]
 800733e:	1a9b      	subs	r3, r3, r2
 8007340:	42ab      	cmp	r3, r5
 8007342:	dc26      	bgt.n	8007392 <_printf_common+0x96>
 8007344:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	3b00      	subs	r3, #0
 800734c:	bf18      	it	ne
 800734e:	2301      	movne	r3, #1
 8007350:	0692      	lsls	r2, r2, #26
 8007352:	d42b      	bmi.n	80073ac <_printf_common+0xb0>
 8007354:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007358:	4641      	mov	r1, r8
 800735a:	4638      	mov	r0, r7
 800735c:	47c8      	blx	r9
 800735e:	3001      	adds	r0, #1
 8007360:	d01e      	beq.n	80073a0 <_printf_common+0xa4>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	6922      	ldr	r2, [r4, #16]
 8007366:	f003 0306 	and.w	r3, r3, #6
 800736a:	2b04      	cmp	r3, #4
 800736c:	bf02      	ittt	eq
 800736e:	68e5      	ldreq	r5, [r4, #12]
 8007370:	6833      	ldreq	r3, [r6, #0]
 8007372:	1aed      	subeq	r5, r5, r3
 8007374:	68a3      	ldr	r3, [r4, #8]
 8007376:	bf0c      	ite	eq
 8007378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800737c:	2500      	movne	r5, #0
 800737e:	4293      	cmp	r3, r2
 8007380:	bfc4      	itt	gt
 8007382:	1a9b      	subgt	r3, r3, r2
 8007384:	18ed      	addgt	r5, r5, r3
 8007386:	2600      	movs	r6, #0
 8007388:	341a      	adds	r4, #26
 800738a:	42b5      	cmp	r5, r6
 800738c:	d11a      	bne.n	80073c4 <_printf_common+0xc8>
 800738e:	2000      	movs	r0, #0
 8007390:	e008      	b.n	80073a4 <_printf_common+0xa8>
 8007392:	2301      	movs	r3, #1
 8007394:	4652      	mov	r2, sl
 8007396:	4641      	mov	r1, r8
 8007398:	4638      	mov	r0, r7
 800739a:	47c8      	blx	r9
 800739c:	3001      	adds	r0, #1
 800739e:	d103      	bne.n	80073a8 <_printf_common+0xac>
 80073a0:	f04f 30ff 	mov.w	r0, #4294967295
 80073a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a8:	3501      	adds	r5, #1
 80073aa:	e7c6      	b.n	800733a <_printf_common+0x3e>
 80073ac:	18e1      	adds	r1, r4, r3
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	2030      	movs	r0, #48	@ 0x30
 80073b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073b6:	4422      	add	r2, r4
 80073b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073c0:	3302      	adds	r3, #2
 80073c2:	e7c7      	b.n	8007354 <_printf_common+0x58>
 80073c4:	2301      	movs	r3, #1
 80073c6:	4622      	mov	r2, r4
 80073c8:	4641      	mov	r1, r8
 80073ca:	4638      	mov	r0, r7
 80073cc:	47c8      	blx	r9
 80073ce:	3001      	adds	r0, #1
 80073d0:	d0e6      	beq.n	80073a0 <_printf_common+0xa4>
 80073d2:	3601      	adds	r6, #1
 80073d4:	e7d9      	b.n	800738a <_printf_common+0x8e>
	...

080073d8 <_printf_i>:
 80073d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073dc:	7e0f      	ldrb	r7, [r1, #24]
 80073de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073e0:	2f78      	cmp	r7, #120	@ 0x78
 80073e2:	4691      	mov	r9, r2
 80073e4:	4680      	mov	r8, r0
 80073e6:	460c      	mov	r4, r1
 80073e8:	469a      	mov	sl, r3
 80073ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073ee:	d807      	bhi.n	8007400 <_printf_i+0x28>
 80073f0:	2f62      	cmp	r7, #98	@ 0x62
 80073f2:	d80a      	bhi.n	800740a <_printf_i+0x32>
 80073f4:	2f00      	cmp	r7, #0
 80073f6:	f000 80d1 	beq.w	800759c <_printf_i+0x1c4>
 80073fa:	2f58      	cmp	r7, #88	@ 0x58
 80073fc:	f000 80b8 	beq.w	8007570 <_printf_i+0x198>
 8007400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007404:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007408:	e03a      	b.n	8007480 <_printf_i+0xa8>
 800740a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800740e:	2b15      	cmp	r3, #21
 8007410:	d8f6      	bhi.n	8007400 <_printf_i+0x28>
 8007412:	a101      	add	r1, pc, #4	@ (adr r1, 8007418 <_printf_i+0x40>)
 8007414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007418:	08007471 	.word	0x08007471
 800741c:	08007485 	.word	0x08007485
 8007420:	08007401 	.word	0x08007401
 8007424:	08007401 	.word	0x08007401
 8007428:	08007401 	.word	0x08007401
 800742c:	08007401 	.word	0x08007401
 8007430:	08007485 	.word	0x08007485
 8007434:	08007401 	.word	0x08007401
 8007438:	08007401 	.word	0x08007401
 800743c:	08007401 	.word	0x08007401
 8007440:	08007401 	.word	0x08007401
 8007444:	08007583 	.word	0x08007583
 8007448:	080074af 	.word	0x080074af
 800744c:	0800753d 	.word	0x0800753d
 8007450:	08007401 	.word	0x08007401
 8007454:	08007401 	.word	0x08007401
 8007458:	080075a5 	.word	0x080075a5
 800745c:	08007401 	.word	0x08007401
 8007460:	080074af 	.word	0x080074af
 8007464:	08007401 	.word	0x08007401
 8007468:	08007401 	.word	0x08007401
 800746c:	08007545 	.word	0x08007545
 8007470:	6833      	ldr	r3, [r6, #0]
 8007472:	1d1a      	adds	r2, r3, #4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6032      	str	r2, [r6, #0]
 8007478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800747c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007480:	2301      	movs	r3, #1
 8007482:	e09c      	b.n	80075be <_printf_i+0x1e6>
 8007484:	6833      	ldr	r3, [r6, #0]
 8007486:	6820      	ldr	r0, [r4, #0]
 8007488:	1d19      	adds	r1, r3, #4
 800748a:	6031      	str	r1, [r6, #0]
 800748c:	0606      	lsls	r6, r0, #24
 800748e:	d501      	bpl.n	8007494 <_printf_i+0xbc>
 8007490:	681d      	ldr	r5, [r3, #0]
 8007492:	e003      	b.n	800749c <_printf_i+0xc4>
 8007494:	0645      	lsls	r5, r0, #25
 8007496:	d5fb      	bpl.n	8007490 <_printf_i+0xb8>
 8007498:	f9b3 5000 	ldrsh.w	r5, [r3]
 800749c:	2d00      	cmp	r5, #0
 800749e:	da03      	bge.n	80074a8 <_printf_i+0xd0>
 80074a0:	232d      	movs	r3, #45	@ 0x2d
 80074a2:	426d      	negs	r5, r5
 80074a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074a8:	4858      	ldr	r0, [pc, #352]	@ (800760c <_printf_i+0x234>)
 80074aa:	230a      	movs	r3, #10
 80074ac:	e011      	b.n	80074d2 <_printf_i+0xfa>
 80074ae:	6821      	ldr	r1, [r4, #0]
 80074b0:	6833      	ldr	r3, [r6, #0]
 80074b2:	0608      	lsls	r0, r1, #24
 80074b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80074b8:	d402      	bmi.n	80074c0 <_printf_i+0xe8>
 80074ba:	0649      	lsls	r1, r1, #25
 80074bc:	bf48      	it	mi
 80074be:	b2ad      	uxthmi	r5, r5
 80074c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80074c2:	4852      	ldr	r0, [pc, #328]	@ (800760c <_printf_i+0x234>)
 80074c4:	6033      	str	r3, [r6, #0]
 80074c6:	bf14      	ite	ne
 80074c8:	230a      	movne	r3, #10
 80074ca:	2308      	moveq	r3, #8
 80074cc:	2100      	movs	r1, #0
 80074ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074d2:	6866      	ldr	r6, [r4, #4]
 80074d4:	60a6      	str	r6, [r4, #8]
 80074d6:	2e00      	cmp	r6, #0
 80074d8:	db05      	blt.n	80074e6 <_printf_i+0x10e>
 80074da:	6821      	ldr	r1, [r4, #0]
 80074dc:	432e      	orrs	r6, r5
 80074de:	f021 0104 	bic.w	r1, r1, #4
 80074e2:	6021      	str	r1, [r4, #0]
 80074e4:	d04b      	beq.n	800757e <_printf_i+0x1a6>
 80074e6:	4616      	mov	r6, r2
 80074e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80074ec:	fb03 5711 	mls	r7, r3, r1, r5
 80074f0:	5dc7      	ldrb	r7, [r0, r7]
 80074f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074f6:	462f      	mov	r7, r5
 80074f8:	42bb      	cmp	r3, r7
 80074fa:	460d      	mov	r5, r1
 80074fc:	d9f4      	bls.n	80074e8 <_printf_i+0x110>
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d10b      	bne.n	800751a <_printf_i+0x142>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	07df      	lsls	r7, r3, #31
 8007506:	d508      	bpl.n	800751a <_printf_i+0x142>
 8007508:	6923      	ldr	r3, [r4, #16]
 800750a:	6861      	ldr	r1, [r4, #4]
 800750c:	4299      	cmp	r1, r3
 800750e:	bfde      	ittt	le
 8007510:	2330      	movle	r3, #48	@ 0x30
 8007512:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007516:	f106 36ff 	addle.w	r6, r6, #4294967295
 800751a:	1b92      	subs	r2, r2, r6
 800751c:	6122      	str	r2, [r4, #16]
 800751e:	f8cd a000 	str.w	sl, [sp]
 8007522:	464b      	mov	r3, r9
 8007524:	aa03      	add	r2, sp, #12
 8007526:	4621      	mov	r1, r4
 8007528:	4640      	mov	r0, r8
 800752a:	f7ff fee7 	bl	80072fc <_printf_common>
 800752e:	3001      	adds	r0, #1
 8007530:	d14a      	bne.n	80075c8 <_printf_i+0x1f0>
 8007532:	f04f 30ff 	mov.w	r0, #4294967295
 8007536:	b004      	add	sp, #16
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	f043 0320 	orr.w	r3, r3, #32
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	4832      	ldr	r0, [pc, #200]	@ (8007610 <_printf_i+0x238>)
 8007546:	2778      	movs	r7, #120	@ 0x78
 8007548:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	6831      	ldr	r1, [r6, #0]
 8007550:	061f      	lsls	r7, r3, #24
 8007552:	f851 5b04 	ldr.w	r5, [r1], #4
 8007556:	d402      	bmi.n	800755e <_printf_i+0x186>
 8007558:	065f      	lsls	r7, r3, #25
 800755a:	bf48      	it	mi
 800755c:	b2ad      	uxthmi	r5, r5
 800755e:	6031      	str	r1, [r6, #0]
 8007560:	07d9      	lsls	r1, r3, #31
 8007562:	bf44      	itt	mi
 8007564:	f043 0320 	orrmi.w	r3, r3, #32
 8007568:	6023      	strmi	r3, [r4, #0]
 800756a:	b11d      	cbz	r5, 8007574 <_printf_i+0x19c>
 800756c:	2310      	movs	r3, #16
 800756e:	e7ad      	b.n	80074cc <_printf_i+0xf4>
 8007570:	4826      	ldr	r0, [pc, #152]	@ (800760c <_printf_i+0x234>)
 8007572:	e7e9      	b.n	8007548 <_printf_i+0x170>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	f023 0320 	bic.w	r3, r3, #32
 800757a:	6023      	str	r3, [r4, #0]
 800757c:	e7f6      	b.n	800756c <_printf_i+0x194>
 800757e:	4616      	mov	r6, r2
 8007580:	e7bd      	b.n	80074fe <_printf_i+0x126>
 8007582:	6833      	ldr	r3, [r6, #0]
 8007584:	6825      	ldr	r5, [r4, #0]
 8007586:	6961      	ldr	r1, [r4, #20]
 8007588:	1d18      	adds	r0, r3, #4
 800758a:	6030      	str	r0, [r6, #0]
 800758c:	062e      	lsls	r6, r5, #24
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	d501      	bpl.n	8007596 <_printf_i+0x1be>
 8007592:	6019      	str	r1, [r3, #0]
 8007594:	e002      	b.n	800759c <_printf_i+0x1c4>
 8007596:	0668      	lsls	r0, r5, #25
 8007598:	d5fb      	bpl.n	8007592 <_printf_i+0x1ba>
 800759a:	8019      	strh	r1, [r3, #0]
 800759c:	2300      	movs	r3, #0
 800759e:	6123      	str	r3, [r4, #16]
 80075a0:	4616      	mov	r6, r2
 80075a2:	e7bc      	b.n	800751e <_printf_i+0x146>
 80075a4:	6833      	ldr	r3, [r6, #0]
 80075a6:	1d1a      	adds	r2, r3, #4
 80075a8:	6032      	str	r2, [r6, #0]
 80075aa:	681e      	ldr	r6, [r3, #0]
 80075ac:	6862      	ldr	r2, [r4, #4]
 80075ae:	2100      	movs	r1, #0
 80075b0:	4630      	mov	r0, r6
 80075b2:	f7f8 fe0d 	bl	80001d0 <memchr>
 80075b6:	b108      	cbz	r0, 80075bc <_printf_i+0x1e4>
 80075b8:	1b80      	subs	r0, r0, r6
 80075ba:	6060      	str	r0, [r4, #4]
 80075bc:	6863      	ldr	r3, [r4, #4]
 80075be:	6123      	str	r3, [r4, #16]
 80075c0:	2300      	movs	r3, #0
 80075c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c6:	e7aa      	b.n	800751e <_printf_i+0x146>
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	4632      	mov	r2, r6
 80075cc:	4649      	mov	r1, r9
 80075ce:	4640      	mov	r0, r8
 80075d0:	47d0      	blx	sl
 80075d2:	3001      	adds	r0, #1
 80075d4:	d0ad      	beq.n	8007532 <_printf_i+0x15a>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	079b      	lsls	r3, r3, #30
 80075da:	d413      	bmi.n	8007604 <_printf_i+0x22c>
 80075dc:	68e0      	ldr	r0, [r4, #12]
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	4298      	cmp	r0, r3
 80075e2:	bfb8      	it	lt
 80075e4:	4618      	movlt	r0, r3
 80075e6:	e7a6      	b.n	8007536 <_printf_i+0x15e>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4632      	mov	r2, r6
 80075ec:	4649      	mov	r1, r9
 80075ee:	4640      	mov	r0, r8
 80075f0:	47d0      	blx	sl
 80075f2:	3001      	adds	r0, #1
 80075f4:	d09d      	beq.n	8007532 <_printf_i+0x15a>
 80075f6:	3501      	adds	r5, #1
 80075f8:	68e3      	ldr	r3, [r4, #12]
 80075fa:	9903      	ldr	r1, [sp, #12]
 80075fc:	1a5b      	subs	r3, r3, r1
 80075fe:	42ab      	cmp	r3, r5
 8007600:	dcf2      	bgt.n	80075e8 <_printf_i+0x210>
 8007602:	e7eb      	b.n	80075dc <_printf_i+0x204>
 8007604:	2500      	movs	r5, #0
 8007606:	f104 0619 	add.w	r6, r4, #25
 800760a:	e7f5      	b.n	80075f8 <_printf_i+0x220>
 800760c:	0800a5f2 	.word	0x0800a5f2
 8007610:	0800a603 	.word	0x0800a603

08007614 <std>:
 8007614:	2300      	movs	r3, #0
 8007616:	b510      	push	{r4, lr}
 8007618:	4604      	mov	r4, r0
 800761a:	e9c0 3300 	strd	r3, r3, [r0]
 800761e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007622:	6083      	str	r3, [r0, #8]
 8007624:	8181      	strh	r1, [r0, #12]
 8007626:	6643      	str	r3, [r0, #100]	@ 0x64
 8007628:	81c2      	strh	r2, [r0, #14]
 800762a:	6183      	str	r3, [r0, #24]
 800762c:	4619      	mov	r1, r3
 800762e:	2208      	movs	r2, #8
 8007630:	305c      	adds	r0, #92	@ 0x5c
 8007632:	f000 f9f9 	bl	8007a28 <memset>
 8007636:	4b0d      	ldr	r3, [pc, #52]	@ (800766c <std+0x58>)
 8007638:	6263      	str	r3, [r4, #36]	@ 0x24
 800763a:	4b0d      	ldr	r3, [pc, #52]	@ (8007670 <std+0x5c>)
 800763c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800763e:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <std+0x60>)
 8007640:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007642:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <std+0x64>)
 8007644:	6323      	str	r3, [r4, #48]	@ 0x30
 8007646:	4b0d      	ldr	r3, [pc, #52]	@ (800767c <std+0x68>)
 8007648:	6224      	str	r4, [r4, #32]
 800764a:	429c      	cmp	r4, r3
 800764c:	d006      	beq.n	800765c <std+0x48>
 800764e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007652:	4294      	cmp	r4, r2
 8007654:	d002      	beq.n	800765c <std+0x48>
 8007656:	33d0      	adds	r3, #208	@ 0xd0
 8007658:	429c      	cmp	r4, r3
 800765a:	d105      	bne.n	8007668 <std+0x54>
 800765c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007664:	f000 ba5c 	b.w	8007b20 <__retarget_lock_init_recursive>
 8007668:	bd10      	pop	{r4, pc}
 800766a:	bf00      	nop
 800766c:	08007879 	.word	0x08007879
 8007670:	0800789b 	.word	0x0800789b
 8007674:	080078d3 	.word	0x080078d3
 8007678:	080078f7 	.word	0x080078f7
 800767c:	20000350 	.word	0x20000350

08007680 <stdio_exit_handler>:
 8007680:	4a02      	ldr	r2, [pc, #8]	@ (800768c <stdio_exit_handler+0xc>)
 8007682:	4903      	ldr	r1, [pc, #12]	@ (8007690 <stdio_exit_handler+0x10>)
 8007684:	4803      	ldr	r0, [pc, #12]	@ (8007694 <stdio_exit_handler+0x14>)
 8007686:	f000 b869 	b.w	800775c <_fwalk_sglue>
 800768a:	bf00      	nop
 800768c:	20000010 	.word	0x20000010
 8007690:	08009459 	.word	0x08009459
 8007694:	20000020 	.word	0x20000020

08007698 <cleanup_stdio>:
 8007698:	6841      	ldr	r1, [r0, #4]
 800769a:	4b0c      	ldr	r3, [pc, #48]	@ (80076cc <cleanup_stdio+0x34>)
 800769c:	4299      	cmp	r1, r3
 800769e:	b510      	push	{r4, lr}
 80076a0:	4604      	mov	r4, r0
 80076a2:	d001      	beq.n	80076a8 <cleanup_stdio+0x10>
 80076a4:	f001 fed8 	bl	8009458 <_fflush_r>
 80076a8:	68a1      	ldr	r1, [r4, #8]
 80076aa:	4b09      	ldr	r3, [pc, #36]	@ (80076d0 <cleanup_stdio+0x38>)
 80076ac:	4299      	cmp	r1, r3
 80076ae:	d002      	beq.n	80076b6 <cleanup_stdio+0x1e>
 80076b0:	4620      	mov	r0, r4
 80076b2:	f001 fed1 	bl	8009458 <_fflush_r>
 80076b6:	68e1      	ldr	r1, [r4, #12]
 80076b8:	4b06      	ldr	r3, [pc, #24]	@ (80076d4 <cleanup_stdio+0x3c>)
 80076ba:	4299      	cmp	r1, r3
 80076bc:	d004      	beq.n	80076c8 <cleanup_stdio+0x30>
 80076be:	4620      	mov	r0, r4
 80076c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c4:	f001 bec8 	b.w	8009458 <_fflush_r>
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	bf00      	nop
 80076cc:	20000350 	.word	0x20000350
 80076d0:	200003b8 	.word	0x200003b8
 80076d4:	20000420 	.word	0x20000420

080076d8 <global_stdio_init.part.0>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	4b0b      	ldr	r3, [pc, #44]	@ (8007708 <global_stdio_init.part.0+0x30>)
 80076dc:	4c0b      	ldr	r4, [pc, #44]	@ (800770c <global_stdio_init.part.0+0x34>)
 80076de:	4a0c      	ldr	r2, [pc, #48]	@ (8007710 <global_stdio_init.part.0+0x38>)
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	4620      	mov	r0, r4
 80076e4:	2200      	movs	r2, #0
 80076e6:	2104      	movs	r1, #4
 80076e8:	f7ff ff94 	bl	8007614 <std>
 80076ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076f0:	2201      	movs	r2, #1
 80076f2:	2109      	movs	r1, #9
 80076f4:	f7ff ff8e 	bl	8007614 <std>
 80076f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076fc:	2202      	movs	r2, #2
 80076fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007702:	2112      	movs	r1, #18
 8007704:	f7ff bf86 	b.w	8007614 <std>
 8007708:	20000488 	.word	0x20000488
 800770c:	20000350 	.word	0x20000350
 8007710:	08007681 	.word	0x08007681

08007714 <__sfp_lock_acquire>:
 8007714:	4801      	ldr	r0, [pc, #4]	@ (800771c <__sfp_lock_acquire+0x8>)
 8007716:	f000 ba04 	b.w	8007b22 <__retarget_lock_acquire_recursive>
 800771a:	bf00      	nop
 800771c:	20000491 	.word	0x20000491

08007720 <__sfp_lock_release>:
 8007720:	4801      	ldr	r0, [pc, #4]	@ (8007728 <__sfp_lock_release+0x8>)
 8007722:	f000 b9ff 	b.w	8007b24 <__retarget_lock_release_recursive>
 8007726:	bf00      	nop
 8007728:	20000491 	.word	0x20000491

0800772c <__sinit>:
 800772c:	b510      	push	{r4, lr}
 800772e:	4604      	mov	r4, r0
 8007730:	f7ff fff0 	bl	8007714 <__sfp_lock_acquire>
 8007734:	6a23      	ldr	r3, [r4, #32]
 8007736:	b11b      	cbz	r3, 8007740 <__sinit+0x14>
 8007738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800773c:	f7ff bff0 	b.w	8007720 <__sfp_lock_release>
 8007740:	4b04      	ldr	r3, [pc, #16]	@ (8007754 <__sinit+0x28>)
 8007742:	6223      	str	r3, [r4, #32]
 8007744:	4b04      	ldr	r3, [pc, #16]	@ (8007758 <__sinit+0x2c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1f5      	bne.n	8007738 <__sinit+0xc>
 800774c:	f7ff ffc4 	bl	80076d8 <global_stdio_init.part.0>
 8007750:	e7f2      	b.n	8007738 <__sinit+0xc>
 8007752:	bf00      	nop
 8007754:	08007699 	.word	0x08007699
 8007758:	20000488 	.word	0x20000488

0800775c <_fwalk_sglue>:
 800775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007760:	4607      	mov	r7, r0
 8007762:	4688      	mov	r8, r1
 8007764:	4614      	mov	r4, r2
 8007766:	2600      	movs	r6, #0
 8007768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800776c:	f1b9 0901 	subs.w	r9, r9, #1
 8007770:	d505      	bpl.n	800777e <_fwalk_sglue+0x22>
 8007772:	6824      	ldr	r4, [r4, #0]
 8007774:	2c00      	cmp	r4, #0
 8007776:	d1f7      	bne.n	8007768 <_fwalk_sglue+0xc>
 8007778:	4630      	mov	r0, r6
 800777a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800777e:	89ab      	ldrh	r3, [r5, #12]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d907      	bls.n	8007794 <_fwalk_sglue+0x38>
 8007784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007788:	3301      	adds	r3, #1
 800778a:	d003      	beq.n	8007794 <_fwalk_sglue+0x38>
 800778c:	4629      	mov	r1, r5
 800778e:	4638      	mov	r0, r7
 8007790:	47c0      	blx	r8
 8007792:	4306      	orrs	r6, r0
 8007794:	3568      	adds	r5, #104	@ 0x68
 8007796:	e7e9      	b.n	800776c <_fwalk_sglue+0x10>

08007798 <iprintf>:
 8007798:	b40f      	push	{r0, r1, r2, r3}
 800779a:	b507      	push	{r0, r1, r2, lr}
 800779c:	4906      	ldr	r1, [pc, #24]	@ (80077b8 <iprintf+0x20>)
 800779e:	ab04      	add	r3, sp, #16
 80077a0:	6808      	ldr	r0, [r1, #0]
 80077a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a6:	6881      	ldr	r1, [r0, #8]
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	f001 fcb9 	bl	8009120 <_vfiprintf_r>
 80077ae:	b003      	add	sp, #12
 80077b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b4:	b004      	add	sp, #16
 80077b6:	4770      	bx	lr
 80077b8:	2000001c 	.word	0x2000001c

080077bc <_puts_r>:
 80077bc:	6a03      	ldr	r3, [r0, #32]
 80077be:	b570      	push	{r4, r5, r6, lr}
 80077c0:	6884      	ldr	r4, [r0, #8]
 80077c2:	4605      	mov	r5, r0
 80077c4:	460e      	mov	r6, r1
 80077c6:	b90b      	cbnz	r3, 80077cc <_puts_r+0x10>
 80077c8:	f7ff ffb0 	bl	800772c <__sinit>
 80077cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077ce:	07db      	lsls	r3, r3, #31
 80077d0:	d405      	bmi.n	80077de <_puts_r+0x22>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	0598      	lsls	r0, r3, #22
 80077d6:	d402      	bmi.n	80077de <_puts_r+0x22>
 80077d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077da:	f000 f9a2 	bl	8007b22 <__retarget_lock_acquire_recursive>
 80077de:	89a3      	ldrh	r3, [r4, #12]
 80077e0:	0719      	lsls	r1, r3, #28
 80077e2:	d502      	bpl.n	80077ea <_puts_r+0x2e>
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d135      	bne.n	8007856 <_puts_r+0x9a>
 80077ea:	4621      	mov	r1, r4
 80077ec:	4628      	mov	r0, r5
 80077ee:	f000 f8c5 	bl	800797c <__swsetup_r>
 80077f2:	b380      	cbz	r0, 8007856 <_puts_r+0x9a>
 80077f4:	f04f 35ff 	mov.w	r5, #4294967295
 80077f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077fa:	07da      	lsls	r2, r3, #31
 80077fc:	d405      	bmi.n	800780a <_puts_r+0x4e>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	059b      	lsls	r3, r3, #22
 8007802:	d402      	bmi.n	800780a <_puts_r+0x4e>
 8007804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007806:	f000 f98d 	bl	8007b24 <__retarget_lock_release_recursive>
 800780a:	4628      	mov	r0, r5
 800780c:	bd70      	pop	{r4, r5, r6, pc}
 800780e:	2b00      	cmp	r3, #0
 8007810:	da04      	bge.n	800781c <_puts_r+0x60>
 8007812:	69a2      	ldr	r2, [r4, #24]
 8007814:	429a      	cmp	r2, r3
 8007816:	dc17      	bgt.n	8007848 <_puts_r+0x8c>
 8007818:	290a      	cmp	r1, #10
 800781a:	d015      	beq.n	8007848 <_puts_r+0x8c>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	6022      	str	r2, [r4, #0]
 8007822:	7019      	strb	r1, [r3, #0]
 8007824:	68a3      	ldr	r3, [r4, #8]
 8007826:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800782a:	3b01      	subs	r3, #1
 800782c:	60a3      	str	r3, [r4, #8]
 800782e:	2900      	cmp	r1, #0
 8007830:	d1ed      	bne.n	800780e <_puts_r+0x52>
 8007832:	2b00      	cmp	r3, #0
 8007834:	da11      	bge.n	800785a <_puts_r+0x9e>
 8007836:	4622      	mov	r2, r4
 8007838:	210a      	movs	r1, #10
 800783a:	4628      	mov	r0, r5
 800783c:	f000 f85f 	bl	80078fe <__swbuf_r>
 8007840:	3001      	adds	r0, #1
 8007842:	d0d7      	beq.n	80077f4 <_puts_r+0x38>
 8007844:	250a      	movs	r5, #10
 8007846:	e7d7      	b.n	80077f8 <_puts_r+0x3c>
 8007848:	4622      	mov	r2, r4
 800784a:	4628      	mov	r0, r5
 800784c:	f000 f857 	bl	80078fe <__swbuf_r>
 8007850:	3001      	adds	r0, #1
 8007852:	d1e7      	bne.n	8007824 <_puts_r+0x68>
 8007854:	e7ce      	b.n	80077f4 <_puts_r+0x38>
 8007856:	3e01      	subs	r6, #1
 8007858:	e7e4      	b.n	8007824 <_puts_r+0x68>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	6022      	str	r2, [r4, #0]
 8007860:	220a      	movs	r2, #10
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	e7ee      	b.n	8007844 <_puts_r+0x88>
	...

08007868 <puts>:
 8007868:	4b02      	ldr	r3, [pc, #8]	@ (8007874 <puts+0xc>)
 800786a:	4601      	mov	r1, r0
 800786c:	6818      	ldr	r0, [r3, #0]
 800786e:	f7ff bfa5 	b.w	80077bc <_puts_r>
 8007872:	bf00      	nop
 8007874:	2000001c 	.word	0x2000001c

08007878 <__sread>:
 8007878:	b510      	push	{r4, lr}
 800787a:	460c      	mov	r4, r1
 800787c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007880:	f000 f900 	bl	8007a84 <_read_r>
 8007884:	2800      	cmp	r0, #0
 8007886:	bfab      	itete	ge
 8007888:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800788a:	89a3      	ldrhlt	r3, [r4, #12]
 800788c:	181b      	addge	r3, r3, r0
 800788e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007892:	bfac      	ite	ge
 8007894:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007896:	81a3      	strhlt	r3, [r4, #12]
 8007898:	bd10      	pop	{r4, pc}

0800789a <__swrite>:
 800789a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800789e:	461f      	mov	r7, r3
 80078a0:	898b      	ldrh	r3, [r1, #12]
 80078a2:	05db      	lsls	r3, r3, #23
 80078a4:	4605      	mov	r5, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	4616      	mov	r6, r2
 80078aa:	d505      	bpl.n	80078b8 <__swrite+0x1e>
 80078ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b0:	2302      	movs	r3, #2
 80078b2:	2200      	movs	r2, #0
 80078b4:	f000 f8d4 	bl	8007a60 <_lseek_r>
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078c2:	81a3      	strh	r3, [r4, #12]
 80078c4:	4632      	mov	r2, r6
 80078c6:	463b      	mov	r3, r7
 80078c8:	4628      	mov	r0, r5
 80078ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ce:	f000 b8eb 	b.w	8007aa8 <_write_r>

080078d2 <__sseek>:
 80078d2:	b510      	push	{r4, lr}
 80078d4:	460c      	mov	r4, r1
 80078d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078da:	f000 f8c1 	bl	8007a60 <_lseek_r>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	bf15      	itete	ne
 80078e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078ee:	81a3      	strheq	r3, [r4, #12]
 80078f0:	bf18      	it	ne
 80078f2:	81a3      	strhne	r3, [r4, #12]
 80078f4:	bd10      	pop	{r4, pc}

080078f6 <__sclose>:
 80078f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fa:	f000 b8a1 	b.w	8007a40 <_close_r>

080078fe <__swbuf_r>:
 80078fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007900:	460e      	mov	r6, r1
 8007902:	4614      	mov	r4, r2
 8007904:	4605      	mov	r5, r0
 8007906:	b118      	cbz	r0, 8007910 <__swbuf_r+0x12>
 8007908:	6a03      	ldr	r3, [r0, #32]
 800790a:	b90b      	cbnz	r3, 8007910 <__swbuf_r+0x12>
 800790c:	f7ff ff0e 	bl	800772c <__sinit>
 8007910:	69a3      	ldr	r3, [r4, #24]
 8007912:	60a3      	str	r3, [r4, #8]
 8007914:	89a3      	ldrh	r3, [r4, #12]
 8007916:	071a      	lsls	r2, r3, #28
 8007918:	d501      	bpl.n	800791e <__swbuf_r+0x20>
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	b943      	cbnz	r3, 8007930 <__swbuf_r+0x32>
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f000 f82b 	bl	800797c <__swsetup_r>
 8007926:	b118      	cbz	r0, 8007930 <__swbuf_r+0x32>
 8007928:	f04f 37ff 	mov.w	r7, #4294967295
 800792c:	4638      	mov	r0, r7
 800792e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	6922      	ldr	r2, [r4, #16]
 8007934:	1a98      	subs	r0, r3, r2
 8007936:	6963      	ldr	r3, [r4, #20]
 8007938:	b2f6      	uxtb	r6, r6
 800793a:	4283      	cmp	r3, r0
 800793c:	4637      	mov	r7, r6
 800793e:	dc05      	bgt.n	800794c <__swbuf_r+0x4e>
 8007940:	4621      	mov	r1, r4
 8007942:	4628      	mov	r0, r5
 8007944:	f001 fd88 	bl	8009458 <_fflush_r>
 8007948:	2800      	cmp	r0, #0
 800794a:	d1ed      	bne.n	8007928 <__swbuf_r+0x2a>
 800794c:	68a3      	ldr	r3, [r4, #8]
 800794e:	3b01      	subs	r3, #1
 8007950:	60a3      	str	r3, [r4, #8]
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	6022      	str	r2, [r4, #0]
 8007958:	701e      	strb	r6, [r3, #0]
 800795a:	6962      	ldr	r2, [r4, #20]
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	429a      	cmp	r2, r3
 8007960:	d004      	beq.n	800796c <__swbuf_r+0x6e>
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	07db      	lsls	r3, r3, #31
 8007966:	d5e1      	bpl.n	800792c <__swbuf_r+0x2e>
 8007968:	2e0a      	cmp	r6, #10
 800796a:	d1df      	bne.n	800792c <__swbuf_r+0x2e>
 800796c:	4621      	mov	r1, r4
 800796e:	4628      	mov	r0, r5
 8007970:	f001 fd72 	bl	8009458 <_fflush_r>
 8007974:	2800      	cmp	r0, #0
 8007976:	d0d9      	beq.n	800792c <__swbuf_r+0x2e>
 8007978:	e7d6      	b.n	8007928 <__swbuf_r+0x2a>
	...

0800797c <__swsetup_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4b29      	ldr	r3, [pc, #164]	@ (8007a24 <__swsetup_r+0xa8>)
 8007980:	4605      	mov	r5, r0
 8007982:	6818      	ldr	r0, [r3, #0]
 8007984:	460c      	mov	r4, r1
 8007986:	b118      	cbz	r0, 8007990 <__swsetup_r+0x14>
 8007988:	6a03      	ldr	r3, [r0, #32]
 800798a:	b90b      	cbnz	r3, 8007990 <__swsetup_r+0x14>
 800798c:	f7ff fece 	bl	800772c <__sinit>
 8007990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007994:	0719      	lsls	r1, r3, #28
 8007996:	d422      	bmi.n	80079de <__swsetup_r+0x62>
 8007998:	06da      	lsls	r2, r3, #27
 800799a:	d407      	bmi.n	80079ac <__swsetup_r+0x30>
 800799c:	2209      	movs	r2, #9
 800799e:	602a      	str	r2, [r5, #0]
 80079a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295
 80079aa:	e033      	b.n	8007a14 <__swsetup_r+0x98>
 80079ac:	0758      	lsls	r0, r3, #29
 80079ae:	d512      	bpl.n	80079d6 <__swsetup_r+0x5a>
 80079b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079b2:	b141      	cbz	r1, 80079c6 <__swsetup_r+0x4a>
 80079b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079b8:	4299      	cmp	r1, r3
 80079ba:	d002      	beq.n	80079c2 <__swsetup_r+0x46>
 80079bc:	4628      	mov	r0, r5
 80079be:	f000 ff0b 	bl	80087d8 <_free_r>
 80079c2:	2300      	movs	r3, #0
 80079c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	2300      	movs	r3, #0
 80079d0:	6063      	str	r3, [r4, #4]
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f043 0308 	orr.w	r3, r3, #8
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	6923      	ldr	r3, [r4, #16]
 80079e0:	b94b      	cbnz	r3, 80079f6 <__swsetup_r+0x7a>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ec:	d003      	beq.n	80079f6 <__swsetup_r+0x7a>
 80079ee:	4621      	mov	r1, r4
 80079f0:	4628      	mov	r0, r5
 80079f2:	f001 fd7f 	bl	80094f4 <__smakebuf_r>
 80079f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fa:	f013 0201 	ands.w	r2, r3, #1
 80079fe:	d00a      	beq.n	8007a16 <__swsetup_r+0x9a>
 8007a00:	2200      	movs	r2, #0
 8007a02:	60a2      	str	r2, [r4, #8]
 8007a04:	6962      	ldr	r2, [r4, #20]
 8007a06:	4252      	negs	r2, r2
 8007a08:	61a2      	str	r2, [r4, #24]
 8007a0a:	6922      	ldr	r2, [r4, #16]
 8007a0c:	b942      	cbnz	r2, 8007a20 <__swsetup_r+0xa4>
 8007a0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a12:	d1c5      	bne.n	80079a0 <__swsetup_r+0x24>
 8007a14:	bd38      	pop	{r3, r4, r5, pc}
 8007a16:	0799      	lsls	r1, r3, #30
 8007a18:	bf58      	it	pl
 8007a1a:	6962      	ldrpl	r2, [r4, #20]
 8007a1c:	60a2      	str	r2, [r4, #8]
 8007a1e:	e7f4      	b.n	8007a0a <__swsetup_r+0x8e>
 8007a20:	2000      	movs	r0, #0
 8007a22:	e7f7      	b.n	8007a14 <__swsetup_r+0x98>
 8007a24:	2000001c 	.word	0x2000001c

08007a28 <memset>:
 8007a28:	4402      	add	r2, r0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d100      	bne.n	8007a32 <memset+0xa>
 8007a30:	4770      	bx	lr
 8007a32:	f803 1b01 	strb.w	r1, [r3], #1
 8007a36:	e7f9      	b.n	8007a2c <memset+0x4>

08007a38 <_localeconv_r>:
 8007a38:	4800      	ldr	r0, [pc, #0]	@ (8007a3c <_localeconv_r+0x4>)
 8007a3a:	4770      	bx	lr
 8007a3c:	2000015c 	.word	0x2000015c

08007a40 <_close_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d06      	ldr	r5, [pc, #24]	@ (8007a5c <_close_r+0x1c>)
 8007a44:	2300      	movs	r3, #0
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7fb ffd0 	bl	80039f0 <_close>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_close_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_close_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	2000048c 	.word	0x2000048c

08007a60 <_lseek_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d07      	ldr	r5, [pc, #28]	@ (8007a80 <_lseek_r+0x20>)
 8007a64:	4604      	mov	r4, r0
 8007a66:	4608      	mov	r0, r1
 8007a68:	4611      	mov	r1, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	602a      	str	r2, [r5, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f7fb ffe5 	bl	8003a3e <_lseek>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_lseek_r+0x1e>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_lseek_r+0x1e>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	2000048c 	.word	0x2000048c

08007a84 <_read_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4d07      	ldr	r5, [pc, #28]	@ (8007aa4 <_read_r+0x20>)
 8007a88:	4604      	mov	r4, r0
 8007a8a:	4608      	mov	r0, r1
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	602a      	str	r2, [r5, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	f7fb ff8f 	bl	80039b6 <_read>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_read_r+0x1e>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_read_r+0x1e>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	2000048c 	.word	0x2000048c

08007aa8 <_write_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d07      	ldr	r5, [pc, #28]	@ (8007ac8 <_write_r+0x20>)
 8007aac:	4604      	mov	r4, r0
 8007aae:	4608      	mov	r0, r1
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	602a      	str	r2, [r5, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f7fb f86e 	bl	8002b98 <_write>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d102      	bne.n	8007ac6 <_write_r+0x1e>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	b103      	cbz	r3, 8007ac6 <_write_r+0x1e>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	2000048c 	.word	0x2000048c

08007acc <__errno>:
 8007acc:	4b01      	ldr	r3, [pc, #4]	@ (8007ad4 <__errno+0x8>)
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	2000001c 	.word	0x2000001c

08007ad8 <__libc_init_array>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	4d0d      	ldr	r5, [pc, #52]	@ (8007b10 <__libc_init_array+0x38>)
 8007adc:	4c0d      	ldr	r4, [pc, #52]	@ (8007b14 <__libc_init_array+0x3c>)
 8007ade:	1b64      	subs	r4, r4, r5
 8007ae0:	10a4      	asrs	r4, r4, #2
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	42a6      	cmp	r6, r4
 8007ae6:	d109      	bne.n	8007afc <__libc_init_array+0x24>
 8007ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8007b18 <__libc_init_array+0x40>)
 8007aea:	4c0c      	ldr	r4, [pc, #48]	@ (8007b1c <__libc_init_array+0x44>)
 8007aec:	f002 fc80 	bl	800a3f0 <_init>
 8007af0:	1b64      	subs	r4, r4, r5
 8007af2:	10a4      	asrs	r4, r4, #2
 8007af4:	2600      	movs	r6, #0
 8007af6:	42a6      	cmp	r6, r4
 8007af8:	d105      	bne.n	8007b06 <__libc_init_array+0x2e>
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b00:	4798      	blx	r3
 8007b02:	3601      	adds	r6, #1
 8007b04:	e7ee      	b.n	8007ae4 <__libc_init_array+0xc>
 8007b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0a:	4798      	blx	r3
 8007b0c:	3601      	adds	r6, #1
 8007b0e:	e7f2      	b.n	8007af6 <__libc_init_array+0x1e>
 8007b10:	0800a9ac 	.word	0x0800a9ac
 8007b14:	0800a9ac 	.word	0x0800a9ac
 8007b18:	0800a9ac 	.word	0x0800a9ac
 8007b1c:	0800a9b0 	.word	0x0800a9b0

08007b20 <__retarget_lock_init_recursive>:
 8007b20:	4770      	bx	lr

08007b22 <__retarget_lock_acquire_recursive>:
 8007b22:	4770      	bx	lr

08007b24 <__retarget_lock_release_recursive>:
 8007b24:	4770      	bx	lr

08007b26 <quorem>:
 8007b26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	6903      	ldr	r3, [r0, #16]
 8007b2c:	690c      	ldr	r4, [r1, #16]
 8007b2e:	42a3      	cmp	r3, r4
 8007b30:	4607      	mov	r7, r0
 8007b32:	db7e      	blt.n	8007c32 <quorem+0x10c>
 8007b34:	3c01      	subs	r4, #1
 8007b36:	f101 0814 	add.w	r8, r1, #20
 8007b3a:	00a3      	lsls	r3, r4, #2
 8007b3c:	f100 0514 	add.w	r5, r0, #20
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b50:	3301      	adds	r3, #1
 8007b52:	429a      	cmp	r2, r3
 8007b54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b58:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b5c:	d32e      	bcc.n	8007bbc <quorem+0x96>
 8007b5e:	f04f 0a00 	mov.w	sl, #0
 8007b62:	46c4      	mov	ip, r8
 8007b64:	46ae      	mov	lr, r5
 8007b66:	46d3      	mov	fp, sl
 8007b68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b6c:	b298      	uxth	r0, r3
 8007b6e:	fb06 a000 	mla	r0, r6, r0, sl
 8007b72:	0c02      	lsrs	r2, r0, #16
 8007b74:	0c1b      	lsrs	r3, r3, #16
 8007b76:	fb06 2303 	mla	r3, r6, r3, r2
 8007b7a:	f8de 2000 	ldr.w	r2, [lr]
 8007b7e:	b280      	uxth	r0, r0
 8007b80:	b292      	uxth	r2, r2
 8007b82:	1a12      	subs	r2, r2, r0
 8007b84:	445a      	add	r2, fp
 8007b86:	f8de 0000 	ldr.w	r0, [lr]
 8007b8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b94:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b98:	b292      	uxth	r2, r2
 8007b9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b9e:	45e1      	cmp	r9, ip
 8007ba0:	f84e 2b04 	str.w	r2, [lr], #4
 8007ba4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ba8:	d2de      	bcs.n	8007b68 <quorem+0x42>
 8007baa:	9b00      	ldr	r3, [sp, #0]
 8007bac:	58eb      	ldr	r3, [r5, r3]
 8007bae:	b92b      	cbnz	r3, 8007bbc <quorem+0x96>
 8007bb0:	9b01      	ldr	r3, [sp, #4]
 8007bb2:	3b04      	subs	r3, #4
 8007bb4:	429d      	cmp	r5, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	d32f      	bcc.n	8007c1a <quorem+0xf4>
 8007bba:	613c      	str	r4, [r7, #16]
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f001 f97d 	bl	8008ebc <__mcmp>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	db25      	blt.n	8007c12 <quorem+0xec>
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	2000      	movs	r0, #0
 8007bca:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bce:	f8d1 c000 	ldr.w	ip, [r1]
 8007bd2:	fa1f fe82 	uxth.w	lr, r2
 8007bd6:	fa1f f38c 	uxth.w	r3, ip
 8007bda:	eba3 030e 	sub.w	r3, r3, lr
 8007bde:	4403      	add	r3, r0
 8007be0:	0c12      	lsrs	r2, r2, #16
 8007be2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007be6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bf0:	45c1      	cmp	r9, r8
 8007bf2:	f841 3b04 	str.w	r3, [r1], #4
 8007bf6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007bfa:	d2e6      	bcs.n	8007bca <quorem+0xa4>
 8007bfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c04:	b922      	cbnz	r2, 8007c10 <quorem+0xea>
 8007c06:	3b04      	subs	r3, #4
 8007c08:	429d      	cmp	r5, r3
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	d30b      	bcc.n	8007c26 <quorem+0x100>
 8007c0e:	613c      	str	r4, [r7, #16]
 8007c10:	3601      	adds	r6, #1
 8007c12:	4630      	mov	r0, r6
 8007c14:	b003      	add	sp, #12
 8007c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	3b04      	subs	r3, #4
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	d1cb      	bne.n	8007bba <quorem+0x94>
 8007c22:	3c01      	subs	r4, #1
 8007c24:	e7c6      	b.n	8007bb4 <quorem+0x8e>
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	3b04      	subs	r3, #4
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	d1ef      	bne.n	8007c0e <quorem+0xe8>
 8007c2e:	3c01      	subs	r4, #1
 8007c30:	e7ea      	b.n	8007c08 <quorem+0xe2>
 8007c32:	2000      	movs	r0, #0
 8007c34:	e7ee      	b.n	8007c14 <quorem+0xee>
	...

08007c38 <_dtoa_r>:
 8007c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	69c7      	ldr	r7, [r0, #28]
 8007c3e:	b097      	sub	sp, #92	@ 0x5c
 8007c40:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007c44:	ec55 4b10 	vmov	r4, r5, d0
 8007c48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007c4a:	9107      	str	r1, [sp, #28]
 8007c4c:	4681      	mov	r9, r0
 8007c4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c50:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c52:	b97f      	cbnz	r7, 8007c74 <_dtoa_r+0x3c>
 8007c54:	2010      	movs	r0, #16
 8007c56:	f000 fe09 	bl	800886c <malloc>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007c60:	b920      	cbnz	r0, 8007c6c <_dtoa_r+0x34>
 8007c62:	4ba9      	ldr	r3, [pc, #676]	@ (8007f08 <_dtoa_r+0x2d0>)
 8007c64:	21ef      	movs	r1, #239	@ 0xef
 8007c66:	48a9      	ldr	r0, [pc, #676]	@ (8007f0c <_dtoa_r+0x2d4>)
 8007c68:	f001 fcc0 	bl	80095ec <__assert_func>
 8007c6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c70:	6007      	str	r7, [r0, #0]
 8007c72:	60c7      	str	r7, [r0, #12]
 8007c74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c78:	6819      	ldr	r1, [r3, #0]
 8007c7a:	b159      	cbz	r1, 8007c94 <_dtoa_r+0x5c>
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	604a      	str	r2, [r1, #4]
 8007c80:	2301      	movs	r3, #1
 8007c82:	4093      	lsls	r3, r2
 8007c84:	608b      	str	r3, [r1, #8]
 8007c86:	4648      	mov	r0, r9
 8007c88:	f000 fee6 	bl	8008a58 <_Bfree>
 8007c8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	1e2b      	subs	r3, r5, #0
 8007c96:	bfb9      	ittee	lt
 8007c98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c9c:	9305      	strlt	r3, [sp, #20]
 8007c9e:	2300      	movge	r3, #0
 8007ca0:	6033      	strge	r3, [r6, #0]
 8007ca2:	9f05      	ldr	r7, [sp, #20]
 8007ca4:	4b9a      	ldr	r3, [pc, #616]	@ (8007f10 <_dtoa_r+0x2d8>)
 8007ca6:	bfbc      	itt	lt
 8007ca8:	2201      	movlt	r2, #1
 8007caa:	6032      	strlt	r2, [r6, #0]
 8007cac:	43bb      	bics	r3, r7
 8007cae:	d112      	bne.n	8007cd6 <_dtoa_r+0x9e>
 8007cb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007cb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cbc:	4323      	orrs	r3, r4
 8007cbe:	f000 855a 	beq.w	8008776 <_dtoa_r+0xb3e>
 8007cc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cc4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007f24 <_dtoa_r+0x2ec>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 855c 	beq.w	8008786 <_dtoa_r+0xb4e>
 8007cce:	f10a 0303 	add.w	r3, sl, #3
 8007cd2:	f000 bd56 	b.w	8008782 <_dtoa_r+0xb4a>
 8007cd6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	ec51 0b17 	vmov	r0, r1, d7
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007ce6:	f7f8 feef 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cea:	4680      	mov	r8, r0
 8007cec:	b158      	cbz	r0, 8007d06 <_dtoa_r+0xce>
 8007cee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cf6:	b113      	cbz	r3, 8007cfe <_dtoa_r+0xc6>
 8007cf8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007cfa:	4b86      	ldr	r3, [pc, #536]	@ (8007f14 <_dtoa_r+0x2dc>)
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007f28 <_dtoa_r+0x2f0>
 8007d02:	f000 bd40 	b.w	8008786 <_dtoa_r+0xb4e>
 8007d06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007d0a:	aa14      	add	r2, sp, #80	@ 0x50
 8007d0c:	a915      	add	r1, sp, #84	@ 0x54
 8007d0e:	4648      	mov	r0, r9
 8007d10:	f001 f984 	bl	800901c <__d2b>
 8007d14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d18:	9002      	str	r0, [sp, #8]
 8007d1a:	2e00      	cmp	r6, #0
 8007d1c:	d078      	beq.n	8007e10 <_dtoa_r+0x1d8>
 8007d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d38:	4619      	mov	r1, r3
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	4b76      	ldr	r3, [pc, #472]	@ (8007f18 <_dtoa_r+0x2e0>)
 8007d3e:	f7f8 faa3 	bl	8000288 <__aeabi_dsub>
 8007d42:	a36b      	add	r3, pc, #428	@ (adr r3, 8007ef0 <_dtoa_r+0x2b8>)
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	f7f8 fc56 	bl	80005f8 <__aeabi_dmul>
 8007d4c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007ef8 <_dtoa_r+0x2c0>)
 8007d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d52:	f7f8 fa9b 	bl	800028c <__adddf3>
 8007d56:	4604      	mov	r4, r0
 8007d58:	4630      	mov	r0, r6
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	f7f8 fbe2 	bl	8000524 <__aeabi_i2d>
 8007d60:	a367      	add	r3, pc, #412	@ (adr r3, 8007f00 <_dtoa_r+0x2c8>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	f7f8 fc47 	bl	80005f8 <__aeabi_dmul>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fa8b 	bl	800028c <__adddf3>
 8007d76:	4604      	mov	r4, r0
 8007d78:	460d      	mov	r5, r1
 8007d7a:	f7f8 feed 	bl	8000b58 <__aeabi_d2iz>
 8007d7e:	2200      	movs	r2, #0
 8007d80:	4607      	mov	r7, r0
 8007d82:	2300      	movs	r3, #0
 8007d84:	4620      	mov	r0, r4
 8007d86:	4629      	mov	r1, r5
 8007d88:	f7f8 fea8 	bl	8000adc <__aeabi_dcmplt>
 8007d8c:	b140      	cbz	r0, 8007da0 <_dtoa_r+0x168>
 8007d8e:	4638      	mov	r0, r7
 8007d90:	f7f8 fbc8 	bl	8000524 <__aeabi_i2d>
 8007d94:	4622      	mov	r2, r4
 8007d96:	462b      	mov	r3, r5
 8007d98:	f7f8 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d9c:	b900      	cbnz	r0, 8007da0 <_dtoa_r+0x168>
 8007d9e:	3f01      	subs	r7, #1
 8007da0:	2f16      	cmp	r7, #22
 8007da2:	d852      	bhi.n	8007e4a <_dtoa_r+0x212>
 8007da4:	4b5d      	ldr	r3, [pc, #372]	@ (8007f1c <_dtoa_r+0x2e4>)
 8007da6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007db2:	f7f8 fe93 	bl	8000adc <__aeabi_dcmplt>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d049      	beq.n	8007e4e <_dtoa_r+0x216>
 8007dba:	3f01      	subs	r7, #1
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007dc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007dc2:	1b9b      	subs	r3, r3, r6
 8007dc4:	1e5a      	subs	r2, r3, #1
 8007dc6:	bf45      	ittet	mi
 8007dc8:	f1c3 0301 	rsbmi	r3, r3, #1
 8007dcc:	9300      	strmi	r3, [sp, #0]
 8007dce:	2300      	movpl	r3, #0
 8007dd0:	2300      	movmi	r3, #0
 8007dd2:	9206      	str	r2, [sp, #24]
 8007dd4:	bf54      	ite	pl
 8007dd6:	9300      	strpl	r3, [sp, #0]
 8007dd8:	9306      	strmi	r3, [sp, #24]
 8007dda:	2f00      	cmp	r7, #0
 8007ddc:	db39      	blt.n	8007e52 <_dtoa_r+0x21a>
 8007dde:	9b06      	ldr	r3, [sp, #24]
 8007de0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007de2:	443b      	add	r3, r7
 8007de4:	9306      	str	r3, [sp, #24]
 8007de6:	2300      	movs	r3, #0
 8007de8:	9308      	str	r3, [sp, #32]
 8007dea:	9b07      	ldr	r3, [sp, #28]
 8007dec:	2b09      	cmp	r3, #9
 8007dee:	d863      	bhi.n	8007eb8 <_dtoa_r+0x280>
 8007df0:	2b05      	cmp	r3, #5
 8007df2:	bfc4      	itt	gt
 8007df4:	3b04      	subgt	r3, #4
 8007df6:	9307      	strgt	r3, [sp, #28]
 8007df8:	9b07      	ldr	r3, [sp, #28]
 8007dfa:	f1a3 0302 	sub.w	r3, r3, #2
 8007dfe:	bfcc      	ite	gt
 8007e00:	2400      	movgt	r4, #0
 8007e02:	2401      	movle	r4, #1
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d863      	bhi.n	8007ed0 <_dtoa_r+0x298>
 8007e08:	e8df f003 	tbb	[pc, r3]
 8007e0c:	2b375452 	.word	0x2b375452
 8007e10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e14:	441e      	add	r6, r3
 8007e16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	bfc1      	itttt	gt
 8007e1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e22:	409f      	lslgt	r7, r3
 8007e24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e28:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e2c:	bfd6      	itet	le
 8007e2e:	f1c3 0320 	rsble	r3, r3, #32
 8007e32:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e36:	fa04 f003 	lslle.w	r0, r4, r3
 8007e3a:	f7f8 fb63 	bl	8000504 <__aeabi_ui2d>
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e44:	3e01      	subs	r6, #1
 8007e46:	9212      	str	r2, [sp, #72]	@ 0x48
 8007e48:	e776      	b.n	8007d38 <_dtoa_r+0x100>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e7b7      	b.n	8007dbe <_dtoa_r+0x186>
 8007e4e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007e50:	e7b6      	b.n	8007dc0 <_dtoa_r+0x188>
 8007e52:	9b00      	ldr	r3, [sp, #0]
 8007e54:	1bdb      	subs	r3, r3, r7
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	427b      	negs	r3, r7
 8007e5a:	9308      	str	r3, [sp, #32]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e60:	e7c3      	b.n	8007dea <_dtoa_r+0x1b2>
 8007e62:	2301      	movs	r3, #1
 8007e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e68:	eb07 0b03 	add.w	fp, r7, r3
 8007e6c:	f10b 0301 	add.w	r3, fp, #1
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	bfb8      	it	lt
 8007e76:	2301      	movlt	r3, #1
 8007e78:	e006      	b.n	8007e88 <_dtoa_r+0x250>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	dd28      	ble.n	8007ed6 <_dtoa_r+0x29e>
 8007e84:	469b      	mov	fp, r3
 8007e86:	9303      	str	r3, [sp, #12]
 8007e88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	2204      	movs	r2, #4
 8007e90:	f102 0514 	add.w	r5, r2, #20
 8007e94:	429d      	cmp	r5, r3
 8007e96:	d926      	bls.n	8007ee6 <_dtoa_r+0x2ae>
 8007e98:	6041      	str	r1, [r0, #4]
 8007e9a:	4648      	mov	r0, r9
 8007e9c:	f000 fd9c 	bl	80089d8 <_Balloc>
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d142      	bne.n	8007f2c <_dtoa_r+0x2f4>
 8007ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f20 <_dtoa_r+0x2e8>)
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	f240 11af 	movw	r1, #431	@ 0x1af
 8007eae:	e6da      	b.n	8007c66 <_dtoa_r+0x2e>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e7e3      	b.n	8007e7c <_dtoa_r+0x244>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e7d5      	b.n	8007e64 <_dtoa_r+0x22c>
 8007eb8:	2401      	movs	r4, #1
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9307      	str	r3, [sp, #28]
 8007ebe:	9409      	str	r4, [sp, #36]	@ 0x24
 8007ec0:	f04f 3bff 	mov.w	fp, #4294967295
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8cd b00c 	str.w	fp, [sp, #12]
 8007eca:	2312      	movs	r3, #18
 8007ecc:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ece:	e7db      	b.n	8007e88 <_dtoa_r+0x250>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ed4:	e7f4      	b.n	8007ec0 <_dtoa_r+0x288>
 8007ed6:	f04f 0b01 	mov.w	fp, #1
 8007eda:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ede:	465b      	mov	r3, fp
 8007ee0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007ee4:	e7d0      	b.n	8007e88 <_dtoa_r+0x250>
 8007ee6:	3101      	adds	r1, #1
 8007ee8:	0052      	lsls	r2, r2, #1
 8007eea:	e7d1      	b.n	8007e90 <_dtoa_r+0x258>
 8007eec:	f3af 8000 	nop.w
 8007ef0:	636f4361 	.word	0x636f4361
 8007ef4:	3fd287a7 	.word	0x3fd287a7
 8007ef8:	8b60c8b3 	.word	0x8b60c8b3
 8007efc:	3fc68a28 	.word	0x3fc68a28
 8007f00:	509f79fb 	.word	0x509f79fb
 8007f04:	3fd34413 	.word	0x3fd34413
 8007f08:	0800a621 	.word	0x0800a621
 8007f0c:	0800a638 	.word	0x0800a638
 8007f10:	7ff00000 	.word	0x7ff00000
 8007f14:	0800a5f1 	.word	0x0800a5f1
 8007f18:	3ff80000 	.word	0x3ff80000
 8007f1c:	0800a788 	.word	0x0800a788
 8007f20:	0800a690 	.word	0x0800a690
 8007f24:	0800a61d 	.word	0x0800a61d
 8007f28:	0800a5f0 	.word	0x0800a5f0
 8007f2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f30:	6018      	str	r0, [r3, #0]
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	2b0e      	cmp	r3, #14
 8007f36:	f200 80a1 	bhi.w	800807c <_dtoa_r+0x444>
 8007f3a:	2c00      	cmp	r4, #0
 8007f3c:	f000 809e 	beq.w	800807c <_dtoa_r+0x444>
 8007f40:	2f00      	cmp	r7, #0
 8007f42:	dd33      	ble.n	8007fac <_dtoa_r+0x374>
 8007f44:	4b9c      	ldr	r3, [pc, #624]	@ (80081b8 <_dtoa_r+0x580>)
 8007f46:	f007 020f 	and.w	r2, r7, #15
 8007f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f4e:	ed93 7b00 	vldr	d7, [r3]
 8007f52:	05f8      	lsls	r0, r7, #23
 8007f54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007f58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f5c:	d516      	bpl.n	8007f8c <_dtoa_r+0x354>
 8007f5e:	4b97      	ldr	r3, [pc, #604]	@ (80081bc <_dtoa_r+0x584>)
 8007f60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f68:	f7f8 fc70 	bl	800084c <__aeabi_ddiv>
 8007f6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f70:	f004 040f 	and.w	r4, r4, #15
 8007f74:	2603      	movs	r6, #3
 8007f76:	4d91      	ldr	r5, [pc, #580]	@ (80081bc <_dtoa_r+0x584>)
 8007f78:	b954      	cbnz	r4, 8007f90 <_dtoa_r+0x358>
 8007f7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f82:	f7f8 fc63 	bl	800084c <__aeabi_ddiv>
 8007f86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f8a:	e028      	b.n	8007fde <_dtoa_r+0x3a6>
 8007f8c:	2602      	movs	r6, #2
 8007f8e:	e7f2      	b.n	8007f76 <_dtoa_r+0x33e>
 8007f90:	07e1      	lsls	r1, r4, #31
 8007f92:	d508      	bpl.n	8007fa6 <_dtoa_r+0x36e>
 8007f94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f9c:	f7f8 fb2c 	bl	80005f8 <__aeabi_dmul>
 8007fa0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007fa4:	3601      	adds	r6, #1
 8007fa6:	1064      	asrs	r4, r4, #1
 8007fa8:	3508      	adds	r5, #8
 8007faa:	e7e5      	b.n	8007f78 <_dtoa_r+0x340>
 8007fac:	f000 80af 	beq.w	800810e <_dtoa_r+0x4d6>
 8007fb0:	427c      	negs	r4, r7
 8007fb2:	4b81      	ldr	r3, [pc, #516]	@ (80081b8 <_dtoa_r+0x580>)
 8007fb4:	4d81      	ldr	r5, [pc, #516]	@ (80081bc <_dtoa_r+0x584>)
 8007fb6:	f004 020f 	and.w	r2, r4, #15
 8007fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007fc6:	f7f8 fb17 	bl	80005f8 <__aeabi_dmul>
 8007fca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fce:	1124      	asrs	r4, r4, #4
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2602      	movs	r6, #2
 8007fd4:	2c00      	cmp	r4, #0
 8007fd6:	f040 808f 	bne.w	80080f8 <_dtoa_r+0x4c0>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1d3      	bne.n	8007f86 <_dtoa_r+0x34e>
 8007fde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007fe0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8094 	beq.w	8008112 <_dtoa_r+0x4da>
 8007fea:	4b75      	ldr	r3, [pc, #468]	@ (80081c0 <_dtoa_r+0x588>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	4620      	mov	r0, r4
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7f8 fd73 	bl	8000adc <__aeabi_dcmplt>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f000 808b 	beq.w	8008112 <_dtoa_r+0x4da>
 8007ffc:	9b03      	ldr	r3, [sp, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 8087 	beq.w	8008112 <_dtoa_r+0x4da>
 8008004:	f1bb 0f00 	cmp.w	fp, #0
 8008008:	dd34      	ble.n	8008074 <_dtoa_r+0x43c>
 800800a:	4620      	mov	r0, r4
 800800c:	4b6d      	ldr	r3, [pc, #436]	@ (80081c4 <_dtoa_r+0x58c>)
 800800e:	2200      	movs	r2, #0
 8008010:	4629      	mov	r1, r5
 8008012:	f7f8 faf1 	bl	80005f8 <__aeabi_dmul>
 8008016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800801a:	f107 38ff 	add.w	r8, r7, #4294967295
 800801e:	3601      	adds	r6, #1
 8008020:	465c      	mov	r4, fp
 8008022:	4630      	mov	r0, r6
 8008024:	f7f8 fa7e 	bl	8000524 <__aeabi_i2d>
 8008028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802c:	f7f8 fae4 	bl	80005f8 <__aeabi_dmul>
 8008030:	4b65      	ldr	r3, [pc, #404]	@ (80081c8 <_dtoa_r+0x590>)
 8008032:	2200      	movs	r2, #0
 8008034:	f7f8 f92a 	bl	800028c <__adddf3>
 8008038:	4605      	mov	r5, r0
 800803a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800803e:	2c00      	cmp	r4, #0
 8008040:	d16a      	bne.n	8008118 <_dtoa_r+0x4e0>
 8008042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008046:	4b61      	ldr	r3, [pc, #388]	@ (80081cc <_dtoa_r+0x594>)
 8008048:	2200      	movs	r2, #0
 800804a:	f7f8 f91d 	bl	8000288 <__aeabi_dsub>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008056:	462a      	mov	r2, r5
 8008058:	4633      	mov	r3, r6
 800805a:	f7f8 fd5d 	bl	8000b18 <__aeabi_dcmpgt>
 800805e:	2800      	cmp	r0, #0
 8008060:	f040 8298 	bne.w	8008594 <_dtoa_r+0x95c>
 8008064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008068:	462a      	mov	r2, r5
 800806a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800806e:	f7f8 fd35 	bl	8000adc <__aeabi_dcmplt>
 8008072:	bb38      	cbnz	r0, 80080c4 <_dtoa_r+0x48c>
 8008074:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008078:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800807c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800807e:	2b00      	cmp	r3, #0
 8008080:	f2c0 8157 	blt.w	8008332 <_dtoa_r+0x6fa>
 8008084:	2f0e      	cmp	r7, #14
 8008086:	f300 8154 	bgt.w	8008332 <_dtoa_r+0x6fa>
 800808a:	4b4b      	ldr	r3, [pc, #300]	@ (80081b8 <_dtoa_r+0x580>)
 800808c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008090:	ed93 7b00 	vldr	d7, [r3]
 8008094:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008096:	2b00      	cmp	r3, #0
 8008098:	ed8d 7b00 	vstr	d7, [sp]
 800809c:	f280 80e5 	bge.w	800826a <_dtoa_r+0x632>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f300 80e1 	bgt.w	800826a <_dtoa_r+0x632>
 80080a8:	d10c      	bne.n	80080c4 <_dtoa_r+0x48c>
 80080aa:	4b48      	ldr	r3, [pc, #288]	@ (80081cc <_dtoa_r+0x594>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	ec51 0b17 	vmov	r0, r1, d7
 80080b2:	f7f8 faa1 	bl	80005f8 <__aeabi_dmul>
 80080b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ba:	f7f8 fd23 	bl	8000b04 <__aeabi_dcmpge>
 80080be:	2800      	cmp	r0, #0
 80080c0:	f000 8266 	beq.w	8008590 <_dtoa_r+0x958>
 80080c4:	2400      	movs	r4, #0
 80080c6:	4625      	mov	r5, r4
 80080c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080ca:	4656      	mov	r6, sl
 80080cc:	ea6f 0803 	mvn.w	r8, r3
 80080d0:	2700      	movs	r7, #0
 80080d2:	4621      	mov	r1, r4
 80080d4:	4648      	mov	r0, r9
 80080d6:	f000 fcbf 	bl	8008a58 <_Bfree>
 80080da:	2d00      	cmp	r5, #0
 80080dc:	f000 80bd 	beq.w	800825a <_dtoa_r+0x622>
 80080e0:	b12f      	cbz	r7, 80080ee <_dtoa_r+0x4b6>
 80080e2:	42af      	cmp	r7, r5
 80080e4:	d003      	beq.n	80080ee <_dtoa_r+0x4b6>
 80080e6:	4639      	mov	r1, r7
 80080e8:	4648      	mov	r0, r9
 80080ea:	f000 fcb5 	bl	8008a58 <_Bfree>
 80080ee:	4629      	mov	r1, r5
 80080f0:	4648      	mov	r0, r9
 80080f2:	f000 fcb1 	bl	8008a58 <_Bfree>
 80080f6:	e0b0      	b.n	800825a <_dtoa_r+0x622>
 80080f8:	07e2      	lsls	r2, r4, #31
 80080fa:	d505      	bpl.n	8008108 <_dtoa_r+0x4d0>
 80080fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008100:	f7f8 fa7a 	bl	80005f8 <__aeabi_dmul>
 8008104:	3601      	adds	r6, #1
 8008106:	2301      	movs	r3, #1
 8008108:	1064      	asrs	r4, r4, #1
 800810a:	3508      	adds	r5, #8
 800810c:	e762      	b.n	8007fd4 <_dtoa_r+0x39c>
 800810e:	2602      	movs	r6, #2
 8008110:	e765      	b.n	8007fde <_dtoa_r+0x3a6>
 8008112:	9c03      	ldr	r4, [sp, #12]
 8008114:	46b8      	mov	r8, r7
 8008116:	e784      	b.n	8008022 <_dtoa_r+0x3ea>
 8008118:	4b27      	ldr	r3, [pc, #156]	@ (80081b8 <_dtoa_r+0x580>)
 800811a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800811c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008120:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008124:	4454      	add	r4, sl
 8008126:	2900      	cmp	r1, #0
 8008128:	d054      	beq.n	80081d4 <_dtoa_r+0x59c>
 800812a:	4929      	ldr	r1, [pc, #164]	@ (80081d0 <_dtoa_r+0x598>)
 800812c:	2000      	movs	r0, #0
 800812e:	f7f8 fb8d 	bl	800084c <__aeabi_ddiv>
 8008132:	4633      	mov	r3, r6
 8008134:	462a      	mov	r2, r5
 8008136:	f7f8 f8a7 	bl	8000288 <__aeabi_dsub>
 800813a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800813e:	4656      	mov	r6, sl
 8008140:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008144:	f7f8 fd08 	bl	8000b58 <__aeabi_d2iz>
 8008148:	4605      	mov	r5, r0
 800814a:	f7f8 f9eb 	bl	8000524 <__aeabi_i2d>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008156:	f7f8 f897 	bl	8000288 <__aeabi_dsub>
 800815a:	3530      	adds	r5, #48	@ 0x30
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008164:	f806 5b01 	strb.w	r5, [r6], #1
 8008168:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800816c:	f7f8 fcb6 	bl	8000adc <__aeabi_dcmplt>
 8008170:	2800      	cmp	r0, #0
 8008172:	d172      	bne.n	800825a <_dtoa_r+0x622>
 8008174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008178:	4911      	ldr	r1, [pc, #68]	@ (80081c0 <_dtoa_r+0x588>)
 800817a:	2000      	movs	r0, #0
 800817c:	f7f8 f884 	bl	8000288 <__aeabi_dsub>
 8008180:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008184:	f7f8 fcaa 	bl	8000adc <__aeabi_dcmplt>
 8008188:	2800      	cmp	r0, #0
 800818a:	f040 80b4 	bne.w	80082f6 <_dtoa_r+0x6be>
 800818e:	42a6      	cmp	r6, r4
 8008190:	f43f af70 	beq.w	8008074 <_dtoa_r+0x43c>
 8008194:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008198:	4b0a      	ldr	r3, [pc, #40]	@ (80081c4 <_dtoa_r+0x58c>)
 800819a:	2200      	movs	r2, #0
 800819c:	f7f8 fa2c 	bl	80005f8 <__aeabi_dmul>
 80081a0:	4b08      	ldr	r3, [pc, #32]	@ (80081c4 <_dtoa_r+0x58c>)
 80081a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081a6:	2200      	movs	r2, #0
 80081a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ac:	f7f8 fa24 	bl	80005f8 <__aeabi_dmul>
 80081b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081b4:	e7c4      	b.n	8008140 <_dtoa_r+0x508>
 80081b6:	bf00      	nop
 80081b8:	0800a788 	.word	0x0800a788
 80081bc:	0800a760 	.word	0x0800a760
 80081c0:	3ff00000 	.word	0x3ff00000
 80081c4:	40240000 	.word	0x40240000
 80081c8:	401c0000 	.word	0x401c0000
 80081cc:	40140000 	.word	0x40140000
 80081d0:	3fe00000 	.word	0x3fe00000
 80081d4:	4631      	mov	r1, r6
 80081d6:	4628      	mov	r0, r5
 80081d8:	f7f8 fa0e 	bl	80005f8 <__aeabi_dmul>
 80081dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80081e2:	4656      	mov	r6, sl
 80081e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081e8:	f7f8 fcb6 	bl	8000b58 <__aeabi_d2iz>
 80081ec:	4605      	mov	r5, r0
 80081ee:	f7f8 f999 	bl	8000524 <__aeabi_i2d>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081fa:	f7f8 f845 	bl	8000288 <__aeabi_dsub>
 80081fe:	3530      	adds	r5, #48	@ 0x30
 8008200:	f806 5b01 	strb.w	r5, [r6], #1
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	42a6      	cmp	r6, r4
 800820a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800820e:	f04f 0200 	mov.w	r2, #0
 8008212:	d124      	bne.n	800825e <_dtoa_r+0x626>
 8008214:	4baf      	ldr	r3, [pc, #700]	@ (80084d4 <_dtoa_r+0x89c>)
 8008216:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800821a:	f7f8 f837 	bl	800028c <__adddf3>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008226:	f7f8 fc77 	bl	8000b18 <__aeabi_dcmpgt>
 800822a:	2800      	cmp	r0, #0
 800822c:	d163      	bne.n	80082f6 <_dtoa_r+0x6be>
 800822e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008232:	49a8      	ldr	r1, [pc, #672]	@ (80084d4 <_dtoa_r+0x89c>)
 8008234:	2000      	movs	r0, #0
 8008236:	f7f8 f827 	bl	8000288 <__aeabi_dsub>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008242:	f7f8 fc4b 	bl	8000adc <__aeabi_dcmplt>
 8008246:	2800      	cmp	r0, #0
 8008248:	f43f af14 	beq.w	8008074 <_dtoa_r+0x43c>
 800824c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800824e:	1e73      	subs	r3, r6, #1
 8008250:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008252:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008256:	2b30      	cmp	r3, #48	@ 0x30
 8008258:	d0f8      	beq.n	800824c <_dtoa_r+0x614>
 800825a:	4647      	mov	r7, r8
 800825c:	e03b      	b.n	80082d6 <_dtoa_r+0x69e>
 800825e:	4b9e      	ldr	r3, [pc, #632]	@ (80084d8 <_dtoa_r+0x8a0>)
 8008260:	f7f8 f9ca 	bl	80005f8 <__aeabi_dmul>
 8008264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008268:	e7bc      	b.n	80081e4 <_dtoa_r+0x5ac>
 800826a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800826e:	4656      	mov	r6, sl
 8008270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008274:	4620      	mov	r0, r4
 8008276:	4629      	mov	r1, r5
 8008278:	f7f8 fae8 	bl	800084c <__aeabi_ddiv>
 800827c:	f7f8 fc6c 	bl	8000b58 <__aeabi_d2iz>
 8008280:	4680      	mov	r8, r0
 8008282:	f7f8 f94f 	bl	8000524 <__aeabi_i2d>
 8008286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800828a:	f7f8 f9b5 	bl	80005f8 <__aeabi_dmul>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800829a:	f7f7 fff5 	bl	8000288 <__aeabi_dsub>
 800829e:	f806 4b01 	strb.w	r4, [r6], #1
 80082a2:	9d03      	ldr	r5, [sp, #12]
 80082a4:	eba6 040a 	sub.w	r4, r6, sl
 80082a8:	42a5      	cmp	r5, r4
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	d133      	bne.n	8008318 <_dtoa_r+0x6e0>
 80082b0:	f7f7 ffec 	bl	800028c <__adddf3>
 80082b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082b8:	4604      	mov	r4, r0
 80082ba:	460d      	mov	r5, r1
 80082bc:	f7f8 fc2c 	bl	8000b18 <__aeabi_dcmpgt>
 80082c0:	b9c0      	cbnz	r0, 80082f4 <_dtoa_r+0x6bc>
 80082c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082c6:	4620      	mov	r0, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	f7f8 fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80082ce:	b110      	cbz	r0, 80082d6 <_dtoa_r+0x69e>
 80082d0:	f018 0f01 	tst.w	r8, #1
 80082d4:	d10e      	bne.n	80082f4 <_dtoa_r+0x6bc>
 80082d6:	9902      	ldr	r1, [sp, #8]
 80082d8:	4648      	mov	r0, r9
 80082da:	f000 fbbd 	bl	8008a58 <_Bfree>
 80082de:	2300      	movs	r3, #0
 80082e0:	7033      	strb	r3, [r6, #0]
 80082e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082e4:	3701      	adds	r7, #1
 80082e6:	601f      	str	r7, [r3, #0]
 80082e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 824b 	beq.w	8008786 <_dtoa_r+0xb4e>
 80082f0:	601e      	str	r6, [r3, #0]
 80082f2:	e248      	b.n	8008786 <_dtoa_r+0xb4e>
 80082f4:	46b8      	mov	r8, r7
 80082f6:	4633      	mov	r3, r6
 80082f8:	461e      	mov	r6, r3
 80082fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082fe:	2a39      	cmp	r2, #57	@ 0x39
 8008300:	d106      	bne.n	8008310 <_dtoa_r+0x6d8>
 8008302:	459a      	cmp	sl, r3
 8008304:	d1f8      	bne.n	80082f8 <_dtoa_r+0x6c0>
 8008306:	2230      	movs	r2, #48	@ 0x30
 8008308:	f108 0801 	add.w	r8, r8, #1
 800830c:	f88a 2000 	strb.w	r2, [sl]
 8008310:	781a      	ldrb	r2, [r3, #0]
 8008312:	3201      	adds	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	e7a0      	b.n	800825a <_dtoa_r+0x622>
 8008318:	4b6f      	ldr	r3, [pc, #444]	@ (80084d8 <_dtoa_r+0x8a0>)
 800831a:	2200      	movs	r2, #0
 800831c:	f7f8 f96c 	bl	80005f8 <__aeabi_dmul>
 8008320:	2200      	movs	r2, #0
 8008322:	2300      	movs	r3, #0
 8008324:	4604      	mov	r4, r0
 8008326:	460d      	mov	r5, r1
 8008328:	f7f8 fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 800832c:	2800      	cmp	r0, #0
 800832e:	d09f      	beq.n	8008270 <_dtoa_r+0x638>
 8008330:	e7d1      	b.n	80082d6 <_dtoa_r+0x69e>
 8008332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008334:	2a00      	cmp	r2, #0
 8008336:	f000 80ea 	beq.w	800850e <_dtoa_r+0x8d6>
 800833a:	9a07      	ldr	r2, [sp, #28]
 800833c:	2a01      	cmp	r2, #1
 800833e:	f300 80cd 	bgt.w	80084dc <_dtoa_r+0x8a4>
 8008342:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008344:	2a00      	cmp	r2, #0
 8008346:	f000 80c1 	beq.w	80084cc <_dtoa_r+0x894>
 800834a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800834e:	9c08      	ldr	r4, [sp, #32]
 8008350:	9e00      	ldr	r6, [sp, #0]
 8008352:	9a00      	ldr	r2, [sp, #0]
 8008354:	441a      	add	r2, r3
 8008356:	9200      	str	r2, [sp, #0]
 8008358:	9a06      	ldr	r2, [sp, #24]
 800835a:	2101      	movs	r1, #1
 800835c:	441a      	add	r2, r3
 800835e:	4648      	mov	r0, r9
 8008360:	9206      	str	r2, [sp, #24]
 8008362:	f000 fc2d 	bl	8008bc0 <__i2b>
 8008366:	4605      	mov	r5, r0
 8008368:	b166      	cbz	r6, 8008384 <_dtoa_r+0x74c>
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	2b00      	cmp	r3, #0
 800836e:	dd09      	ble.n	8008384 <_dtoa_r+0x74c>
 8008370:	42b3      	cmp	r3, r6
 8008372:	9a00      	ldr	r2, [sp, #0]
 8008374:	bfa8      	it	ge
 8008376:	4633      	movge	r3, r6
 8008378:	1ad2      	subs	r2, r2, r3
 800837a:	9200      	str	r2, [sp, #0]
 800837c:	9a06      	ldr	r2, [sp, #24]
 800837e:	1af6      	subs	r6, r6, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	9306      	str	r3, [sp, #24]
 8008384:	9b08      	ldr	r3, [sp, #32]
 8008386:	b30b      	cbz	r3, 80083cc <_dtoa_r+0x794>
 8008388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 80c6 	beq.w	800851c <_dtoa_r+0x8e4>
 8008390:	2c00      	cmp	r4, #0
 8008392:	f000 80c0 	beq.w	8008516 <_dtoa_r+0x8de>
 8008396:	4629      	mov	r1, r5
 8008398:	4622      	mov	r2, r4
 800839a:	4648      	mov	r0, r9
 800839c:	f000 fcc8 	bl	8008d30 <__pow5mult>
 80083a0:	9a02      	ldr	r2, [sp, #8]
 80083a2:	4601      	mov	r1, r0
 80083a4:	4605      	mov	r5, r0
 80083a6:	4648      	mov	r0, r9
 80083a8:	f000 fc20 	bl	8008bec <__multiply>
 80083ac:	9902      	ldr	r1, [sp, #8]
 80083ae:	4680      	mov	r8, r0
 80083b0:	4648      	mov	r0, r9
 80083b2:	f000 fb51 	bl	8008a58 <_Bfree>
 80083b6:	9b08      	ldr	r3, [sp, #32]
 80083b8:	1b1b      	subs	r3, r3, r4
 80083ba:	9308      	str	r3, [sp, #32]
 80083bc:	f000 80b1 	beq.w	8008522 <_dtoa_r+0x8ea>
 80083c0:	9a08      	ldr	r2, [sp, #32]
 80083c2:	4641      	mov	r1, r8
 80083c4:	4648      	mov	r0, r9
 80083c6:	f000 fcb3 	bl	8008d30 <__pow5mult>
 80083ca:	9002      	str	r0, [sp, #8]
 80083cc:	2101      	movs	r1, #1
 80083ce:	4648      	mov	r0, r9
 80083d0:	f000 fbf6 	bl	8008bc0 <__i2b>
 80083d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083d6:	4604      	mov	r4, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 81d8 	beq.w	800878e <_dtoa_r+0xb56>
 80083de:	461a      	mov	r2, r3
 80083e0:	4601      	mov	r1, r0
 80083e2:	4648      	mov	r0, r9
 80083e4:	f000 fca4 	bl	8008d30 <__pow5mult>
 80083e8:	9b07      	ldr	r3, [sp, #28]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	4604      	mov	r4, r0
 80083ee:	f300 809f 	bgt.w	8008530 <_dtoa_r+0x8f8>
 80083f2:	9b04      	ldr	r3, [sp, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f040 8097 	bne.w	8008528 <_dtoa_r+0x8f0>
 80083fa:	9b05      	ldr	r3, [sp, #20]
 80083fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008400:	2b00      	cmp	r3, #0
 8008402:	f040 8093 	bne.w	800852c <_dtoa_r+0x8f4>
 8008406:	9b05      	ldr	r3, [sp, #20]
 8008408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800840c:	0d1b      	lsrs	r3, r3, #20
 800840e:	051b      	lsls	r3, r3, #20
 8008410:	b133      	cbz	r3, 8008420 <_dtoa_r+0x7e8>
 8008412:	9b00      	ldr	r3, [sp, #0]
 8008414:	3301      	adds	r3, #1
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	9b06      	ldr	r3, [sp, #24]
 800841a:	3301      	adds	r3, #1
 800841c:	9306      	str	r3, [sp, #24]
 800841e:	2301      	movs	r3, #1
 8008420:	9308      	str	r3, [sp, #32]
 8008422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 81b8 	beq.w	800879a <_dtoa_r+0xb62>
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008430:	6918      	ldr	r0, [r3, #16]
 8008432:	f000 fb79 	bl	8008b28 <__hi0bits>
 8008436:	f1c0 0020 	rsb	r0, r0, #32
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	4418      	add	r0, r3
 800843e:	f010 001f 	ands.w	r0, r0, #31
 8008442:	f000 8082 	beq.w	800854a <_dtoa_r+0x912>
 8008446:	f1c0 0320 	rsb	r3, r0, #32
 800844a:	2b04      	cmp	r3, #4
 800844c:	dd73      	ble.n	8008536 <_dtoa_r+0x8fe>
 800844e:	9b00      	ldr	r3, [sp, #0]
 8008450:	f1c0 001c 	rsb	r0, r0, #28
 8008454:	4403      	add	r3, r0
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	9b06      	ldr	r3, [sp, #24]
 800845a:	4403      	add	r3, r0
 800845c:	4406      	add	r6, r0
 800845e:	9306      	str	r3, [sp, #24]
 8008460:	9b00      	ldr	r3, [sp, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	dd05      	ble.n	8008472 <_dtoa_r+0x83a>
 8008466:	9902      	ldr	r1, [sp, #8]
 8008468:	461a      	mov	r2, r3
 800846a:	4648      	mov	r0, r9
 800846c:	f000 fcba 	bl	8008de4 <__lshift>
 8008470:	9002      	str	r0, [sp, #8]
 8008472:	9b06      	ldr	r3, [sp, #24]
 8008474:	2b00      	cmp	r3, #0
 8008476:	dd05      	ble.n	8008484 <_dtoa_r+0x84c>
 8008478:	4621      	mov	r1, r4
 800847a:	461a      	mov	r2, r3
 800847c:	4648      	mov	r0, r9
 800847e:	f000 fcb1 	bl	8008de4 <__lshift>
 8008482:	4604      	mov	r4, r0
 8008484:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008486:	2b00      	cmp	r3, #0
 8008488:	d061      	beq.n	800854e <_dtoa_r+0x916>
 800848a:	9802      	ldr	r0, [sp, #8]
 800848c:	4621      	mov	r1, r4
 800848e:	f000 fd15 	bl	8008ebc <__mcmp>
 8008492:	2800      	cmp	r0, #0
 8008494:	da5b      	bge.n	800854e <_dtoa_r+0x916>
 8008496:	2300      	movs	r3, #0
 8008498:	9902      	ldr	r1, [sp, #8]
 800849a:	220a      	movs	r2, #10
 800849c:	4648      	mov	r0, r9
 800849e:	f000 fafd 	bl	8008a9c <__multadd>
 80084a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a4:	9002      	str	r0, [sp, #8]
 80084a6:	f107 38ff 	add.w	r8, r7, #4294967295
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 8177 	beq.w	800879e <_dtoa_r+0xb66>
 80084b0:	4629      	mov	r1, r5
 80084b2:	2300      	movs	r3, #0
 80084b4:	220a      	movs	r2, #10
 80084b6:	4648      	mov	r0, r9
 80084b8:	f000 faf0 	bl	8008a9c <__multadd>
 80084bc:	f1bb 0f00 	cmp.w	fp, #0
 80084c0:	4605      	mov	r5, r0
 80084c2:	dc6f      	bgt.n	80085a4 <_dtoa_r+0x96c>
 80084c4:	9b07      	ldr	r3, [sp, #28]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	dc49      	bgt.n	800855e <_dtoa_r+0x926>
 80084ca:	e06b      	b.n	80085a4 <_dtoa_r+0x96c>
 80084cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80084d2:	e73c      	b.n	800834e <_dtoa_r+0x716>
 80084d4:	3fe00000 	.word	0x3fe00000
 80084d8:	40240000 	.word	0x40240000
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	1e5c      	subs	r4, r3, #1
 80084e0:	9b08      	ldr	r3, [sp, #32]
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	db09      	blt.n	80084fa <_dtoa_r+0x8c2>
 80084e6:	1b1c      	subs	r4, r3, r4
 80084e8:	9b03      	ldr	r3, [sp, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f6bf af30 	bge.w	8008350 <_dtoa_r+0x718>
 80084f0:	9b00      	ldr	r3, [sp, #0]
 80084f2:	9a03      	ldr	r2, [sp, #12]
 80084f4:	1a9e      	subs	r6, r3, r2
 80084f6:	2300      	movs	r3, #0
 80084f8:	e72b      	b.n	8008352 <_dtoa_r+0x71a>
 80084fa:	9b08      	ldr	r3, [sp, #32]
 80084fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084fe:	9408      	str	r4, [sp, #32]
 8008500:	1ae3      	subs	r3, r4, r3
 8008502:	441a      	add	r2, r3
 8008504:	9e00      	ldr	r6, [sp, #0]
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	920d      	str	r2, [sp, #52]	@ 0x34
 800850a:	2400      	movs	r4, #0
 800850c:	e721      	b.n	8008352 <_dtoa_r+0x71a>
 800850e:	9c08      	ldr	r4, [sp, #32]
 8008510:	9e00      	ldr	r6, [sp, #0]
 8008512:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008514:	e728      	b.n	8008368 <_dtoa_r+0x730>
 8008516:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800851a:	e751      	b.n	80083c0 <_dtoa_r+0x788>
 800851c:	9a08      	ldr	r2, [sp, #32]
 800851e:	9902      	ldr	r1, [sp, #8]
 8008520:	e750      	b.n	80083c4 <_dtoa_r+0x78c>
 8008522:	f8cd 8008 	str.w	r8, [sp, #8]
 8008526:	e751      	b.n	80083cc <_dtoa_r+0x794>
 8008528:	2300      	movs	r3, #0
 800852a:	e779      	b.n	8008420 <_dtoa_r+0x7e8>
 800852c:	9b04      	ldr	r3, [sp, #16]
 800852e:	e777      	b.n	8008420 <_dtoa_r+0x7e8>
 8008530:	2300      	movs	r3, #0
 8008532:	9308      	str	r3, [sp, #32]
 8008534:	e779      	b.n	800842a <_dtoa_r+0x7f2>
 8008536:	d093      	beq.n	8008460 <_dtoa_r+0x828>
 8008538:	9a00      	ldr	r2, [sp, #0]
 800853a:	331c      	adds	r3, #28
 800853c:	441a      	add	r2, r3
 800853e:	9200      	str	r2, [sp, #0]
 8008540:	9a06      	ldr	r2, [sp, #24]
 8008542:	441a      	add	r2, r3
 8008544:	441e      	add	r6, r3
 8008546:	9206      	str	r2, [sp, #24]
 8008548:	e78a      	b.n	8008460 <_dtoa_r+0x828>
 800854a:	4603      	mov	r3, r0
 800854c:	e7f4      	b.n	8008538 <_dtoa_r+0x900>
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	46b8      	mov	r8, r7
 8008554:	dc20      	bgt.n	8008598 <_dtoa_r+0x960>
 8008556:	469b      	mov	fp, r3
 8008558:	9b07      	ldr	r3, [sp, #28]
 800855a:	2b02      	cmp	r3, #2
 800855c:	dd1e      	ble.n	800859c <_dtoa_r+0x964>
 800855e:	f1bb 0f00 	cmp.w	fp, #0
 8008562:	f47f adb1 	bne.w	80080c8 <_dtoa_r+0x490>
 8008566:	4621      	mov	r1, r4
 8008568:	465b      	mov	r3, fp
 800856a:	2205      	movs	r2, #5
 800856c:	4648      	mov	r0, r9
 800856e:	f000 fa95 	bl	8008a9c <__multadd>
 8008572:	4601      	mov	r1, r0
 8008574:	4604      	mov	r4, r0
 8008576:	9802      	ldr	r0, [sp, #8]
 8008578:	f000 fca0 	bl	8008ebc <__mcmp>
 800857c:	2800      	cmp	r0, #0
 800857e:	f77f ada3 	ble.w	80080c8 <_dtoa_r+0x490>
 8008582:	4656      	mov	r6, sl
 8008584:	2331      	movs	r3, #49	@ 0x31
 8008586:	f806 3b01 	strb.w	r3, [r6], #1
 800858a:	f108 0801 	add.w	r8, r8, #1
 800858e:	e59f      	b.n	80080d0 <_dtoa_r+0x498>
 8008590:	9c03      	ldr	r4, [sp, #12]
 8008592:	46b8      	mov	r8, r7
 8008594:	4625      	mov	r5, r4
 8008596:	e7f4      	b.n	8008582 <_dtoa_r+0x94a>
 8008598:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800859c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8101 	beq.w	80087a6 <_dtoa_r+0xb6e>
 80085a4:	2e00      	cmp	r6, #0
 80085a6:	dd05      	ble.n	80085b4 <_dtoa_r+0x97c>
 80085a8:	4629      	mov	r1, r5
 80085aa:	4632      	mov	r2, r6
 80085ac:	4648      	mov	r0, r9
 80085ae:	f000 fc19 	bl	8008de4 <__lshift>
 80085b2:	4605      	mov	r5, r0
 80085b4:	9b08      	ldr	r3, [sp, #32]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d05c      	beq.n	8008674 <_dtoa_r+0xa3c>
 80085ba:	6869      	ldr	r1, [r5, #4]
 80085bc:	4648      	mov	r0, r9
 80085be:	f000 fa0b 	bl	80089d8 <_Balloc>
 80085c2:	4606      	mov	r6, r0
 80085c4:	b928      	cbnz	r0, 80085d2 <_dtoa_r+0x99a>
 80085c6:	4b82      	ldr	r3, [pc, #520]	@ (80087d0 <_dtoa_r+0xb98>)
 80085c8:	4602      	mov	r2, r0
 80085ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80085ce:	f7ff bb4a 	b.w	8007c66 <_dtoa_r+0x2e>
 80085d2:	692a      	ldr	r2, [r5, #16]
 80085d4:	3202      	adds	r2, #2
 80085d6:	0092      	lsls	r2, r2, #2
 80085d8:	f105 010c 	add.w	r1, r5, #12
 80085dc:	300c      	adds	r0, #12
 80085de:	f000 fff7 	bl	80095d0 <memcpy>
 80085e2:	2201      	movs	r2, #1
 80085e4:	4631      	mov	r1, r6
 80085e6:	4648      	mov	r0, r9
 80085e8:	f000 fbfc 	bl	8008de4 <__lshift>
 80085ec:	f10a 0301 	add.w	r3, sl, #1
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	eb0a 030b 	add.w	r3, sl, fp
 80085f6:	9308      	str	r3, [sp, #32]
 80085f8:	9b04      	ldr	r3, [sp, #16]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	462f      	mov	r7, r5
 8008600:	9306      	str	r3, [sp, #24]
 8008602:	4605      	mov	r5, r0
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	9802      	ldr	r0, [sp, #8]
 8008608:	4621      	mov	r1, r4
 800860a:	f103 3bff 	add.w	fp, r3, #4294967295
 800860e:	f7ff fa8a 	bl	8007b26 <quorem>
 8008612:	4603      	mov	r3, r0
 8008614:	3330      	adds	r3, #48	@ 0x30
 8008616:	9003      	str	r0, [sp, #12]
 8008618:	4639      	mov	r1, r7
 800861a:	9802      	ldr	r0, [sp, #8]
 800861c:	9309      	str	r3, [sp, #36]	@ 0x24
 800861e:	f000 fc4d 	bl	8008ebc <__mcmp>
 8008622:	462a      	mov	r2, r5
 8008624:	9004      	str	r0, [sp, #16]
 8008626:	4621      	mov	r1, r4
 8008628:	4648      	mov	r0, r9
 800862a:	f000 fc63 	bl	8008ef4 <__mdiff>
 800862e:	68c2      	ldr	r2, [r0, #12]
 8008630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008632:	4606      	mov	r6, r0
 8008634:	bb02      	cbnz	r2, 8008678 <_dtoa_r+0xa40>
 8008636:	4601      	mov	r1, r0
 8008638:	9802      	ldr	r0, [sp, #8]
 800863a:	f000 fc3f 	bl	8008ebc <__mcmp>
 800863e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008640:	4602      	mov	r2, r0
 8008642:	4631      	mov	r1, r6
 8008644:	4648      	mov	r0, r9
 8008646:	920c      	str	r2, [sp, #48]	@ 0x30
 8008648:	9309      	str	r3, [sp, #36]	@ 0x24
 800864a:	f000 fa05 	bl	8008a58 <_Bfree>
 800864e:	9b07      	ldr	r3, [sp, #28]
 8008650:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008652:	9e00      	ldr	r6, [sp, #0]
 8008654:	ea42 0103 	orr.w	r1, r2, r3
 8008658:	9b06      	ldr	r3, [sp, #24]
 800865a:	4319      	orrs	r1, r3
 800865c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800865e:	d10d      	bne.n	800867c <_dtoa_r+0xa44>
 8008660:	2b39      	cmp	r3, #57	@ 0x39
 8008662:	d027      	beq.n	80086b4 <_dtoa_r+0xa7c>
 8008664:	9a04      	ldr	r2, [sp, #16]
 8008666:	2a00      	cmp	r2, #0
 8008668:	dd01      	ble.n	800866e <_dtoa_r+0xa36>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	3331      	adds	r3, #49	@ 0x31
 800866e:	f88b 3000 	strb.w	r3, [fp]
 8008672:	e52e      	b.n	80080d2 <_dtoa_r+0x49a>
 8008674:	4628      	mov	r0, r5
 8008676:	e7b9      	b.n	80085ec <_dtoa_r+0x9b4>
 8008678:	2201      	movs	r2, #1
 800867a:	e7e2      	b.n	8008642 <_dtoa_r+0xa0a>
 800867c:	9904      	ldr	r1, [sp, #16]
 800867e:	2900      	cmp	r1, #0
 8008680:	db04      	blt.n	800868c <_dtoa_r+0xa54>
 8008682:	9807      	ldr	r0, [sp, #28]
 8008684:	4301      	orrs	r1, r0
 8008686:	9806      	ldr	r0, [sp, #24]
 8008688:	4301      	orrs	r1, r0
 800868a:	d120      	bne.n	80086ce <_dtoa_r+0xa96>
 800868c:	2a00      	cmp	r2, #0
 800868e:	ddee      	ble.n	800866e <_dtoa_r+0xa36>
 8008690:	9902      	ldr	r1, [sp, #8]
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	2201      	movs	r2, #1
 8008696:	4648      	mov	r0, r9
 8008698:	f000 fba4 	bl	8008de4 <__lshift>
 800869c:	4621      	mov	r1, r4
 800869e:	9002      	str	r0, [sp, #8]
 80086a0:	f000 fc0c 	bl	8008ebc <__mcmp>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	9b00      	ldr	r3, [sp, #0]
 80086a8:	dc02      	bgt.n	80086b0 <_dtoa_r+0xa78>
 80086aa:	d1e0      	bne.n	800866e <_dtoa_r+0xa36>
 80086ac:	07da      	lsls	r2, r3, #31
 80086ae:	d5de      	bpl.n	800866e <_dtoa_r+0xa36>
 80086b0:	2b39      	cmp	r3, #57	@ 0x39
 80086b2:	d1da      	bne.n	800866a <_dtoa_r+0xa32>
 80086b4:	2339      	movs	r3, #57	@ 0x39
 80086b6:	f88b 3000 	strb.w	r3, [fp]
 80086ba:	4633      	mov	r3, r6
 80086bc:	461e      	mov	r6, r3
 80086be:	3b01      	subs	r3, #1
 80086c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086c4:	2a39      	cmp	r2, #57	@ 0x39
 80086c6:	d04e      	beq.n	8008766 <_dtoa_r+0xb2e>
 80086c8:	3201      	adds	r2, #1
 80086ca:	701a      	strb	r2, [r3, #0]
 80086cc:	e501      	b.n	80080d2 <_dtoa_r+0x49a>
 80086ce:	2a00      	cmp	r2, #0
 80086d0:	dd03      	ble.n	80086da <_dtoa_r+0xaa2>
 80086d2:	2b39      	cmp	r3, #57	@ 0x39
 80086d4:	d0ee      	beq.n	80086b4 <_dtoa_r+0xa7c>
 80086d6:	3301      	adds	r3, #1
 80086d8:	e7c9      	b.n	800866e <_dtoa_r+0xa36>
 80086da:	9a00      	ldr	r2, [sp, #0]
 80086dc:	9908      	ldr	r1, [sp, #32]
 80086de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086e2:	428a      	cmp	r2, r1
 80086e4:	d028      	beq.n	8008738 <_dtoa_r+0xb00>
 80086e6:	9902      	ldr	r1, [sp, #8]
 80086e8:	2300      	movs	r3, #0
 80086ea:	220a      	movs	r2, #10
 80086ec:	4648      	mov	r0, r9
 80086ee:	f000 f9d5 	bl	8008a9c <__multadd>
 80086f2:	42af      	cmp	r7, r5
 80086f4:	9002      	str	r0, [sp, #8]
 80086f6:	f04f 0300 	mov.w	r3, #0
 80086fa:	f04f 020a 	mov.w	r2, #10
 80086fe:	4639      	mov	r1, r7
 8008700:	4648      	mov	r0, r9
 8008702:	d107      	bne.n	8008714 <_dtoa_r+0xadc>
 8008704:	f000 f9ca 	bl	8008a9c <__multadd>
 8008708:	4607      	mov	r7, r0
 800870a:	4605      	mov	r5, r0
 800870c:	9b00      	ldr	r3, [sp, #0]
 800870e:	3301      	adds	r3, #1
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	e777      	b.n	8008604 <_dtoa_r+0x9cc>
 8008714:	f000 f9c2 	bl	8008a9c <__multadd>
 8008718:	4629      	mov	r1, r5
 800871a:	4607      	mov	r7, r0
 800871c:	2300      	movs	r3, #0
 800871e:	220a      	movs	r2, #10
 8008720:	4648      	mov	r0, r9
 8008722:	f000 f9bb 	bl	8008a9c <__multadd>
 8008726:	4605      	mov	r5, r0
 8008728:	e7f0      	b.n	800870c <_dtoa_r+0xad4>
 800872a:	f1bb 0f00 	cmp.w	fp, #0
 800872e:	bfcc      	ite	gt
 8008730:	465e      	movgt	r6, fp
 8008732:	2601      	movle	r6, #1
 8008734:	4456      	add	r6, sl
 8008736:	2700      	movs	r7, #0
 8008738:	9902      	ldr	r1, [sp, #8]
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	2201      	movs	r2, #1
 800873e:	4648      	mov	r0, r9
 8008740:	f000 fb50 	bl	8008de4 <__lshift>
 8008744:	4621      	mov	r1, r4
 8008746:	9002      	str	r0, [sp, #8]
 8008748:	f000 fbb8 	bl	8008ebc <__mcmp>
 800874c:	2800      	cmp	r0, #0
 800874e:	dcb4      	bgt.n	80086ba <_dtoa_r+0xa82>
 8008750:	d102      	bne.n	8008758 <_dtoa_r+0xb20>
 8008752:	9b00      	ldr	r3, [sp, #0]
 8008754:	07db      	lsls	r3, r3, #31
 8008756:	d4b0      	bmi.n	80086ba <_dtoa_r+0xa82>
 8008758:	4633      	mov	r3, r6
 800875a:	461e      	mov	r6, r3
 800875c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008760:	2a30      	cmp	r2, #48	@ 0x30
 8008762:	d0fa      	beq.n	800875a <_dtoa_r+0xb22>
 8008764:	e4b5      	b.n	80080d2 <_dtoa_r+0x49a>
 8008766:	459a      	cmp	sl, r3
 8008768:	d1a8      	bne.n	80086bc <_dtoa_r+0xa84>
 800876a:	2331      	movs	r3, #49	@ 0x31
 800876c:	f108 0801 	add.w	r8, r8, #1
 8008770:	f88a 3000 	strb.w	r3, [sl]
 8008774:	e4ad      	b.n	80080d2 <_dtoa_r+0x49a>
 8008776:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008778:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80087d4 <_dtoa_r+0xb9c>
 800877c:	b11b      	cbz	r3, 8008786 <_dtoa_r+0xb4e>
 800877e:	f10a 0308 	add.w	r3, sl, #8
 8008782:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008784:	6013      	str	r3, [r2, #0]
 8008786:	4650      	mov	r0, sl
 8008788:	b017      	add	sp, #92	@ 0x5c
 800878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878e:	9b07      	ldr	r3, [sp, #28]
 8008790:	2b01      	cmp	r3, #1
 8008792:	f77f ae2e 	ble.w	80083f2 <_dtoa_r+0x7ba>
 8008796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008798:	9308      	str	r3, [sp, #32]
 800879a:	2001      	movs	r0, #1
 800879c:	e64d      	b.n	800843a <_dtoa_r+0x802>
 800879e:	f1bb 0f00 	cmp.w	fp, #0
 80087a2:	f77f aed9 	ble.w	8008558 <_dtoa_r+0x920>
 80087a6:	4656      	mov	r6, sl
 80087a8:	9802      	ldr	r0, [sp, #8]
 80087aa:	4621      	mov	r1, r4
 80087ac:	f7ff f9bb 	bl	8007b26 <quorem>
 80087b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80087b4:	f806 3b01 	strb.w	r3, [r6], #1
 80087b8:	eba6 020a 	sub.w	r2, r6, sl
 80087bc:	4593      	cmp	fp, r2
 80087be:	ddb4      	ble.n	800872a <_dtoa_r+0xaf2>
 80087c0:	9902      	ldr	r1, [sp, #8]
 80087c2:	2300      	movs	r3, #0
 80087c4:	220a      	movs	r2, #10
 80087c6:	4648      	mov	r0, r9
 80087c8:	f000 f968 	bl	8008a9c <__multadd>
 80087cc:	9002      	str	r0, [sp, #8]
 80087ce:	e7eb      	b.n	80087a8 <_dtoa_r+0xb70>
 80087d0:	0800a690 	.word	0x0800a690
 80087d4:	0800a614 	.word	0x0800a614

080087d8 <_free_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4605      	mov	r5, r0
 80087dc:	2900      	cmp	r1, #0
 80087de:	d041      	beq.n	8008864 <_free_r+0x8c>
 80087e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e4:	1f0c      	subs	r4, r1, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bfb8      	it	lt
 80087ea:	18e4      	addlt	r4, r4, r3
 80087ec:	f000 f8e8 	bl	80089c0 <__malloc_lock>
 80087f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008868 <_free_r+0x90>)
 80087f2:	6813      	ldr	r3, [r2, #0]
 80087f4:	b933      	cbnz	r3, 8008804 <_free_r+0x2c>
 80087f6:	6063      	str	r3, [r4, #4]
 80087f8:	6014      	str	r4, [r2, #0]
 80087fa:	4628      	mov	r0, r5
 80087fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008800:	f000 b8e4 	b.w	80089cc <__malloc_unlock>
 8008804:	42a3      	cmp	r3, r4
 8008806:	d908      	bls.n	800881a <_free_r+0x42>
 8008808:	6820      	ldr	r0, [r4, #0]
 800880a:	1821      	adds	r1, r4, r0
 800880c:	428b      	cmp	r3, r1
 800880e:	bf01      	itttt	eq
 8008810:	6819      	ldreq	r1, [r3, #0]
 8008812:	685b      	ldreq	r3, [r3, #4]
 8008814:	1809      	addeq	r1, r1, r0
 8008816:	6021      	streq	r1, [r4, #0]
 8008818:	e7ed      	b.n	80087f6 <_free_r+0x1e>
 800881a:	461a      	mov	r2, r3
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	b10b      	cbz	r3, 8008824 <_free_r+0x4c>
 8008820:	42a3      	cmp	r3, r4
 8008822:	d9fa      	bls.n	800881a <_free_r+0x42>
 8008824:	6811      	ldr	r1, [r2, #0]
 8008826:	1850      	adds	r0, r2, r1
 8008828:	42a0      	cmp	r0, r4
 800882a:	d10b      	bne.n	8008844 <_free_r+0x6c>
 800882c:	6820      	ldr	r0, [r4, #0]
 800882e:	4401      	add	r1, r0
 8008830:	1850      	adds	r0, r2, r1
 8008832:	4283      	cmp	r3, r0
 8008834:	6011      	str	r1, [r2, #0]
 8008836:	d1e0      	bne.n	80087fa <_free_r+0x22>
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	6053      	str	r3, [r2, #4]
 800883e:	4408      	add	r0, r1
 8008840:	6010      	str	r0, [r2, #0]
 8008842:	e7da      	b.n	80087fa <_free_r+0x22>
 8008844:	d902      	bls.n	800884c <_free_r+0x74>
 8008846:	230c      	movs	r3, #12
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	e7d6      	b.n	80087fa <_free_r+0x22>
 800884c:	6820      	ldr	r0, [r4, #0]
 800884e:	1821      	adds	r1, r4, r0
 8008850:	428b      	cmp	r3, r1
 8008852:	bf04      	itt	eq
 8008854:	6819      	ldreq	r1, [r3, #0]
 8008856:	685b      	ldreq	r3, [r3, #4]
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	bf04      	itt	eq
 800885c:	1809      	addeq	r1, r1, r0
 800885e:	6021      	streq	r1, [r4, #0]
 8008860:	6054      	str	r4, [r2, #4]
 8008862:	e7ca      	b.n	80087fa <_free_r+0x22>
 8008864:	bd38      	pop	{r3, r4, r5, pc}
 8008866:	bf00      	nop
 8008868:	20000498 	.word	0x20000498

0800886c <malloc>:
 800886c:	4b02      	ldr	r3, [pc, #8]	@ (8008878 <malloc+0xc>)
 800886e:	4601      	mov	r1, r0
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	f000 b825 	b.w	80088c0 <_malloc_r>
 8008876:	bf00      	nop
 8008878:	2000001c 	.word	0x2000001c

0800887c <sbrk_aligned>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4e0f      	ldr	r6, [pc, #60]	@ (80088bc <sbrk_aligned+0x40>)
 8008880:	460c      	mov	r4, r1
 8008882:	6831      	ldr	r1, [r6, #0]
 8008884:	4605      	mov	r5, r0
 8008886:	b911      	cbnz	r1, 800888e <sbrk_aligned+0x12>
 8008888:	f000 fe92 	bl	80095b0 <_sbrk_r>
 800888c:	6030      	str	r0, [r6, #0]
 800888e:	4621      	mov	r1, r4
 8008890:	4628      	mov	r0, r5
 8008892:	f000 fe8d 	bl	80095b0 <_sbrk_r>
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	d103      	bne.n	80088a2 <sbrk_aligned+0x26>
 800889a:	f04f 34ff 	mov.w	r4, #4294967295
 800889e:	4620      	mov	r0, r4
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	1cc4      	adds	r4, r0, #3
 80088a4:	f024 0403 	bic.w	r4, r4, #3
 80088a8:	42a0      	cmp	r0, r4
 80088aa:	d0f8      	beq.n	800889e <sbrk_aligned+0x22>
 80088ac:	1a21      	subs	r1, r4, r0
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 fe7e 	bl	80095b0 <_sbrk_r>
 80088b4:	3001      	adds	r0, #1
 80088b6:	d1f2      	bne.n	800889e <sbrk_aligned+0x22>
 80088b8:	e7ef      	b.n	800889a <sbrk_aligned+0x1e>
 80088ba:	bf00      	nop
 80088bc:	20000494 	.word	0x20000494

080088c0 <_malloc_r>:
 80088c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c4:	1ccd      	adds	r5, r1, #3
 80088c6:	f025 0503 	bic.w	r5, r5, #3
 80088ca:	3508      	adds	r5, #8
 80088cc:	2d0c      	cmp	r5, #12
 80088ce:	bf38      	it	cc
 80088d0:	250c      	movcc	r5, #12
 80088d2:	2d00      	cmp	r5, #0
 80088d4:	4606      	mov	r6, r0
 80088d6:	db01      	blt.n	80088dc <_malloc_r+0x1c>
 80088d8:	42a9      	cmp	r1, r5
 80088da:	d904      	bls.n	80088e6 <_malloc_r+0x26>
 80088dc:	230c      	movs	r3, #12
 80088de:	6033      	str	r3, [r6, #0]
 80088e0:	2000      	movs	r0, #0
 80088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089bc <_malloc_r+0xfc>
 80088ea:	f000 f869 	bl	80089c0 <__malloc_lock>
 80088ee:	f8d8 3000 	ldr.w	r3, [r8]
 80088f2:	461c      	mov	r4, r3
 80088f4:	bb44      	cbnz	r4, 8008948 <_malloc_r+0x88>
 80088f6:	4629      	mov	r1, r5
 80088f8:	4630      	mov	r0, r6
 80088fa:	f7ff ffbf 	bl	800887c <sbrk_aligned>
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	4604      	mov	r4, r0
 8008902:	d158      	bne.n	80089b6 <_malloc_r+0xf6>
 8008904:	f8d8 4000 	ldr.w	r4, [r8]
 8008908:	4627      	mov	r7, r4
 800890a:	2f00      	cmp	r7, #0
 800890c:	d143      	bne.n	8008996 <_malloc_r+0xd6>
 800890e:	2c00      	cmp	r4, #0
 8008910:	d04b      	beq.n	80089aa <_malloc_r+0xea>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	4639      	mov	r1, r7
 8008916:	4630      	mov	r0, r6
 8008918:	eb04 0903 	add.w	r9, r4, r3
 800891c:	f000 fe48 	bl	80095b0 <_sbrk_r>
 8008920:	4581      	cmp	r9, r0
 8008922:	d142      	bne.n	80089aa <_malloc_r+0xea>
 8008924:	6821      	ldr	r1, [r4, #0]
 8008926:	1a6d      	subs	r5, r5, r1
 8008928:	4629      	mov	r1, r5
 800892a:	4630      	mov	r0, r6
 800892c:	f7ff ffa6 	bl	800887c <sbrk_aligned>
 8008930:	3001      	adds	r0, #1
 8008932:	d03a      	beq.n	80089aa <_malloc_r+0xea>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	442b      	add	r3, r5
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	f8d8 3000 	ldr.w	r3, [r8]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	bb62      	cbnz	r2, 800899c <_malloc_r+0xdc>
 8008942:	f8c8 7000 	str.w	r7, [r8]
 8008946:	e00f      	b.n	8008968 <_malloc_r+0xa8>
 8008948:	6822      	ldr	r2, [r4, #0]
 800894a:	1b52      	subs	r2, r2, r5
 800894c:	d420      	bmi.n	8008990 <_malloc_r+0xd0>
 800894e:	2a0b      	cmp	r2, #11
 8008950:	d917      	bls.n	8008982 <_malloc_r+0xc2>
 8008952:	1961      	adds	r1, r4, r5
 8008954:	42a3      	cmp	r3, r4
 8008956:	6025      	str	r5, [r4, #0]
 8008958:	bf18      	it	ne
 800895a:	6059      	strne	r1, [r3, #4]
 800895c:	6863      	ldr	r3, [r4, #4]
 800895e:	bf08      	it	eq
 8008960:	f8c8 1000 	streq.w	r1, [r8]
 8008964:	5162      	str	r2, [r4, r5]
 8008966:	604b      	str	r3, [r1, #4]
 8008968:	4630      	mov	r0, r6
 800896a:	f000 f82f 	bl	80089cc <__malloc_unlock>
 800896e:	f104 000b 	add.w	r0, r4, #11
 8008972:	1d23      	adds	r3, r4, #4
 8008974:	f020 0007 	bic.w	r0, r0, #7
 8008978:	1ac2      	subs	r2, r0, r3
 800897a:	bf1c      	itt	ne
 800897c:	1a1b      	subne	r3, r3, r0
 800897e:	50a3      	strne	r3, [r4, r2]
 8008980:	e7af      	b.n	80088e2 <_malloc_r+0x22>
 8008982:	6862      	ldr	r2, [r4, #4]
 8008984:	42a3      	cmp	r3, r4
 8008986:	bf0c      	ite	eq
 8008988:	f8c8 2000 	streq.w	r2, [r8]
 800898c:	605a      	strne	r2, [r3, #4]
 800898e:	e7eb      	b.n	8008968 <_malloc_r+0xa8>
 8008990:	4623      	mov	r3, r4
 8008992:	6864      	ldr	r4, [r4, #4]
 8008994:	e7ae      	b.n	80088f4 <_malloc_r+0x34>
 8008996:	463c      	mov	r4, r7
 8008998:	687f      	ldr	r7, [r7, #4]
 800899a:	e7b6      	b.n	800890a <_malloc_r+0x4a>
 800899c:	461a      	mov	r2, r3
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	d1fb      	bne.n	800899c <_malloc_r+0xdc>
 80089a4:	2300      	movs	r3, #0
 80089a6:	6053      	str	r3, [r2, #4]
 80089a8:	e7de      	b.n	8008968 <_malloc_r+0xa8>
 80089aa:	230c      	movs	r3, #12
 80089ac:	6033      	str	r3, [r6, #0]
 80089ae:	4630      	mov	r0, r6
 80089b0:	f000 f80c 	bl	80089cc <__malloc_unlock>
 80089b4:	e794      	b.n	80088e0 <_malloc_r+0x20>
 80089b6:	6005      	str	r5, [r0, #0]
 80089b8:	e7d6      	b.n	8008968 <_malloc_r+0xa8>
 80089ba:	bf00      	nop
 80089bc:	20000498 	.word	0x20000498

080089c0 <__malloc_lock>:
 80089c0:	4801      	ldr	r0, [pc, #4]	@ (80089c8 <__malloc_lock+0x8>)
 80089c2:	f7ff b8ae 	b.w	8007b22 <__retarget_lock_acquire_recursive>
 80089c6:	bf00      	nop
 80089c8:	20000490 	.word	0x20000490

080089cc <__malloc_unlock>:
 80089cc:	4801      	ldr	r0, [pc, #4]	@ (80089d4 <__malloc_unlock+0x8>)
 80089ce:	f7ff b8a9 	b.w	8007b24 <__retarget_lock_release_recursive>
 80089d2:	bf00      	nop
 80089d4:	20000490 	.word	0x20000490

080089d8 <_Balloc>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	69c6      	ldr	r6, [r0, #28]
 80089dc:	4604      	mov	r4, r0
 80089de:	460d      	mov	r5, r1
 80089e0:	b976      	cbnz	r6, 8008a00 <_Balloc+0x28>
 80089e2:	2010      	movs	r0, #16
 80089e4:	f7ff ff42 	bl	800886c <malloc>
 80089e8:	4602      	mov	r2, r0
 80089ea:	61e0      	str	r0, [r4, #28]
 80089ec:	b920      	cbnz	r0, 80089f8 <_Balloc+0x20>
 80089ee:	4b18      	ldr	r3, [pc, #96]	@ (8008a50 <_Balloc+0x78>)
 80089f0:	4818      	ldr	r0, [pc, #96]	@ (8008a54 <_Balloc+0x7c>)
 80089f2:	216b      	movs	r1, #107	@ 0x6b
 80089f4:	f000 fdfa 	bl	80095ec <__assert_func>
 80089f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089fc:	6006      	str	r6, [r0, #0]
 80089fe:	60c6      	str	r6, [r0, #12]
 8008a00:	69e6      	ldr	r6, [r4, #28]
 8008a02:	68f3      	ldr	r3, [r6, #12]
 8008a04:	b183      	cbz	r3, 8008a28 <_Balloc+0x50>
 8008a06:	69e3      	ldr	r3, [r4, #28]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a0e:	b9b8      	cbnz	r0, 8008a40 <_Balloc+0x68>
 8008a10:	2101      	movs	r1, #1
 8008a12:	fa01 f605 	lsl.w	r6, r1, r5
 8008a16:	1d72      	adds	r2, r6, #5
 8008a18:	0092      	lsls	r2, r2, #2
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 fe04 	bl	8009628 <_calloc_r>
 8008a20:	b160      	cbz	r0, 8008a3c <_Balloc+0x64>
 8008a22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a26:	e00e      	b.n	8008a46 <_Balloc+0x6e>
 8008a28:	2221      	movs	r2, #33	@ 0x21
 8008a2a:	2104      	movs	r1, #4
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f000 fdfb 	bl	8009628 <_calloc_r>
 8008a32:	69e3      	ldr	r3, [r4, #28]
 8008a34:	60f0      	str	r0, [r6, #12]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e4      	bne.n	8008a06 <_Balloc+0x2e>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	6802      	ldr	r2, [r0, #0]
 8008a42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a46:	2300      	movs	r3, #0
 8008a48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a4c:	e7f7      	b.n	8008a3e <_Balloc+0x66>
 8008a4e:	bf00      	nop
 8008a50:	0800a621 	.word	0x0800a621
 8008a54:	0800a6a1 	.word	0x0800a6a1

08008a58 <_Bfree>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	69c6      	ldr	r6, [r0, #28]
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	460c      	mov	r4, r1
 8008a60:	b976      	cbnz	r6, 8008a80 <_Bfree+0x28>
 8008a62:	2010      	movs	r0, #16
 8008a64:	f7ff ff02 	bl	800886c <malloc>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	61e8      	str	r0, [r5, #28]
 8008a6c:	b920      	cbnz	r0, 8008a78 <_Bfree+0x20>
 8008a6e:	4b09      	ldr	r3, [pc, #36]	@ (8008a94 <_Bfree+0x3c>)
 8008a70:	4809      	ldr	r0, [pc, #36]	@ (8008a98 <_Bfree+0x40>)
 8008a72:	218f      	movs	r1, #143	@ 0x8f
 8008a74:	f000 fdba 	bl	80095ec <__assert_func>
 8008a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a7c:	6006      	str	r6, [r0, #0]
 8008a7e:	60c6      	str	r6, [r0, #12]
 8008a80:	b13c      	cbz	r4, 8008a92 <_Bfree+0x3a>
 8008a82:	69eb      	ldr	r3, [r5, #28]
 8008a84:	6862      	ldr	r2, [r4, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a8c:	6021      	str	r1, [r4, #0]
 8008a8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a92:	bd70      	pop	{r4, r5, r6, pc}
 8008a94:	0800a621 	.word	0x0800a621
 8008a98:	0800a6a1 	.word	0x0800a6a1

08008a9c <__multadd>:
 8008a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	690d      	ldr	r5, [r1, #16]
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	461e      	mov	r6, r3
 8008aa8:	f101 0c14 	add.w	ip, r1, #20
 8008aac:	2000      	movs	r0, #0
 8008aae:	f8dc 3000 	ldr.w	r3, [ip]
 8008ab2:	b299      	uxth	r1, r3
 8008ab4:	fb02 6101 	mla	r1, r2, r1, r6
 8008ab8:	0c1e      	lsrs	r6, r3, #16
 8008aba:	0c0b      	lsrs	r3, r1, #16
 8008abc:	fb02 3306 	mla	r3, r2, r6, r3
 8008ac0:	b289      	uxth	r1, r1
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ac8:	4285      	cmp	r5, r0
 8008aca:	f84c 1b04 	str.w	r1, [ip], #4
 8008ace:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ad2:	dcec      	bgt.n	8008aae <__multadd+0x12>
 8008ad4:	b30e      	cbz	r6, 8008b1a <__multadd+0x7e>
 8008ad6:	68a3      	ldr	r3, [r4, #8]
 8008ad8:	42ab      	cmp	r3, r5
 8008ada:	dc19      	bgt.n	8008b10 <__multadd+0x74>
 8008adc:	6861      	ldr	r1, [r4, #4]
 8008ade:	4638      	mov	r0, r7
 8008ae0:	3101      	adds	r1, #1
 8008ae2:	f7ff ff79 	bl	80089d8 <_Balloc>
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	b928      	cbnz	r0, 8008af6 <__multadd+0x5a>
 8008aea:	4602      	mov	r2, r0
 8008aec:	4b0c      	ldr	r3, [pc, #48]	@ (8008b20 <__multadd+0x84>)
 8008aee:	480d      	ldr	r0, [pc, #52]	@ (8008b24 <__multadd+0x88>)
 8008af0:	21ba      	movs	r1, #186	@ 0xba
 8008af2:	f000 fd7b 	bl	80095ec <__assert_func>
 8008af6:	6922      	ldr	r2, [r4, #16]
 8008af8:	3202      	adds	r2, #2
 8008afa:	f104 010c 	add.w	r1, r4, #12
 8008afe:	0092      	lsls	r2, r2, #2
 8008b00:	300c      	adds	r0, #12
 8008b02:	f000 fd65 	bl	80095d0 <memcpy>
 8008b06:	4621      	mov	r1, r4
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7ff ffa5 	bl	8008a58 <_Bfree>
 8008b0e:	4644      	mov	r4, r8
 8008b10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b14:	3501      	adds	r5, #1
 8008b16:	615e      	str	r6, [r3, #20]
 8008b18:	6125      	str	r5, [r4, #16]
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b20:	0800a690 	.word	0x0800a690
 8008b24:	0800a6a1 	.word	0x0800a6a1

08008b28 <__hi0bits>:
 8008b28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	bf36      	itet	cc
 8008b30:	0403      	lslcc	r3, r0, #16
 8008b32:	2000      	movcs	r0, #0
 8008b34:	2010      	movcc	r0, #16
 8008b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b3a:	bf3c      	itt	cc
 8008b3c:	021b      	lslcc	r3, r3, #8
 8008b3e:	3008      	addcc	r0, #8
 8008b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b44:	bf3c      	itt	cc
 8008b46:	011b      	lslcc	r3, r3, #4
 8008b48:	3004      	addcc	r0, #4
 8008b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b4e:	bf3c      	itt	cc
 8008b50:	009b      	lslcc	r3, r3, #2
 8008b52:	3002      	addcc	r0, #2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	db05      	blt.n	8008b64 <__hi0bits+0x3c>
 8008b58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b5c:	f100 0001 	add.w	r0, r0, #1
 8008b60:	bf08      	it	eq
 8008b62:	2020      	moveq	r0, #32
 8008b64:	4770      	bx	lr

08008b66 <__lo0bits>:
 8008b66:	6803      	ldr	r3, [r0, #0]
 8008b68:	4602      	mov	r2, r0
 8008b6a:	f013 0007 	ands.w	r0, r3, #7
 8008b6e:	d00b      	beq.n	8008b88 <__lo0bits+0x22>
 8008b70:	07d9      	lsls	r1, r3, #31
 8008b72:	d421      	bmi.n	8008bb8 <__lo0bits+0x52>
 8008b74:	0798      	lsls	r0, r3, #30
 8008b76:	bf49      	itett	mi
 8008b78:	085b      	lsrmi	r3, r3, #1
 8008b7a:	089b      	lsrpl	r3, r3, #2
 8008b7c:	2001      	movmi	r0, #1
 8008b7e:	6013      	strmi	r3, [r2, #0]
 8008b80:	bf5c      	itt	pl
 8008b82:	6013      	strpl	r3, [r2, #0]
 8008b84:	2002      	movpl	r0, #2
 8008b86:	4770      	bx	lr
 8008b88:	b299      	uxth	r1, r3
 8008b8a:	b909      	cbnz	r1, 8008b90 <__lo0bits+0x2a>
 8008b8c:	0c1b      	lsrs	r3, r3, #16
 8008b8e:	2010      	movs	r0, #16
 8008b90:	b2d9      	uxtb	r1, r3
 8008b92:	b909      	cbnz	r1, 8008b98 <__lo0bits+0x32>
 8008b94:	3008      	adds	r0, #8
 8008b96:	0a1b      	lsrs	r3, r3, #8
 8008b98:	0719      	lsls	r1, r3, #28
 8008b9a:	bf04      	itt	eq
 8008b9c:	091b      	lsreq	r3, r3, #4
 8008b9e:	3004      	addeq	r0, #4
 8008ba0:	0799      	lsls	r1, r3, #30
 8008ba2:	bf04      	itt	eq
 8008ba4:	089b      	lsreq	r3, r3, #2
 8008ba6:	3002      	addeq	r0, #2
 8008ba8:	07d9      	lsls	r1, r3, #31
 8008baa:	d403      	bmi.n	8008bb4 <__lo0bits+0x4e>
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	f100 0001 	add.w	r0, r0, #1
 8008bb2:	d003      	beq.n	8008bbc <__lo0bits+0x56>
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	4770      	bx	lr
 8008bb8:	2000      	movs	r0, #0
 8008bba:	4770      	bx	lr
 8008bbc:	2020      	movs	r0, #32
 8008bbe:	4770      	bx	lr

08008bc0 <__i2b>:
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	f7ff ff07 	bl	80089d8 <_Balloc>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	b928      	cbnz	r0, 8008bda <__i2b+0x1a>
 8008bce:	4b05      	ldr	r3, [pc, #20]	@ (8008be4 <__i2b+0x24>)
 8008bd0:	4805      	ldr	r0, [pc, #20]	@ (8008be8 <__i2b+0x28>)
 8008bd2:	f240 1145 	movw	r1, #325	@ 0x145
 8008bd6:	f000 fd09 	bl	80095ec <__assert_func>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	6144      	str	r4, [r0, #20]
 8008bde:	6103      	str	r3, [r0, #16]
 8008be0:	bd10      	pop	{r4, pc}
 8008be2:	bf00      	nop
 8008be4:	0800a690 	.word	0x0800a690
 8008be8:	0800a6a1 	.word	0x0800a6a1

08008bec <__multiply>:
 8008bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf0:	4617      	mov	r7, r2
 8008bf2:	690a      	ldr	r2, [r1, #16]
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	bfa8      	it	ge
 8008bfa:	463b      	movge	r3, r7
 8008bfc:	4689      	mov	r9, r1
 8008bfe:	bfa4      	itt	ge
 8008c00:	460f      	movge	r7, r1
 8008c02:	4699      	movge	r9, r3
 8008c04:	693d      	ldr	r5, [r7, #16]
 8008c06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	eb05 060a 	add.w	r6, r5, sl
 8008c12:	42b3      	cmp	r3, r6
 8008c14:	b085      	sub	sp, #20
 8008c16:	bfb8      	it	lt
 8008c18:	3101      	addlt	r1, #1
 8008c1a:	f7ff fedd 	bl	80089d8 <_Balloc>
 8008c1e:	b930      	cbnz	r0, 8008c2e <__multiply+0x42>
 8008c20:	4602      	mov	r2, r0
 8008c22:	4b41      	ldr	r3, [pc, #260]	@ (8008d28 <__multiply+0x13c>)
 8008c24:	4841      	ldr	r0, [pc, #260]	@ (8008d2c <__multiply+0x140>)
 8008c26:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c2a:	f000 fcdf 	bl	80095ec <__assert_func>
 8008c2e:	f100 0414 	add.w	r4, r0, #20
 8008c32:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008c36:	4623      	mov	r3, r4
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4573      	cmp	r3, lr
 8008c3c:	d320      	bcc.n	8008c80 <__multiply+0x94>
 8008c3e:	f107 0814 	add.w	r8, r7, #20
 8008c42:	f109 0114 	add.w	r1, r9, #20
 8008c46:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008c4a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008c4e:	9302      	str	r3, [sp, #8]
 8008c50:	1beb      	subs	r3, r5, r7
 8008c52:	3b15      	subs	r3, #21
 8008c54:	f023 0303 	bic.w	r3, r3, #3
 8008c58:	3304      	adds	r3, #4
 8008c5a:	3715      	adds	r7, #21
 8008c5c:	42bd      	cmp	r5, r7
 8008c5e:	bf38      	it	cc
 8008c60:	2304      	movcc	r3, #4
 8008c62:	9301      	str	r3, [sp, #4]
 8008c64:	9b02      	ldr	r3, [sp, #8]
 8008c66:	9103      	str	r1, [sp, #12]
 8008c68:	428b      	cmp	r3, r1
 8008c6a:	d80c      	bhi.n	8008c86 <__multiply+0x9a>
 8008c6c:	2e00      	cmp	r6, #0
 8008c6e:	dd03      	ble.n	8008c78 <__multiply+0x8c>
 8008c70:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d055      	beq.n	8008d24 <__multiply+0x138>
 8008c78:	6106      	str	r6, [r0, #16]
 8008c7a:	b005      	add	sp, #20
 8008c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c80:	f843 2b04 	str.w	r2, [r3], #4
 8008c84:	e7d9      	b.n	8008c3a <__multiply+0x4e>
 8008c86:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c8a:	f1ba 0f00 	cmp.w	sl, #0
 8008c8e:	d01f      	beq.n	8008cd0 <__multiply+0xe4>
 8008c90:	46c4      	mov	ip, r8
 8008c92:	46a1      	mov	r9, r4
 8008c94:	2700      	movs	r7, #0
 8008c96:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c9a:	f8d9 3000 	ldr.w	r3, [r9]
 8008c9e:	fa1f fb82 	uxth.w	fp, r2
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ca8:	443b      	add	r3, r7
 8008caa:	f8d9 7000 	ldr.w	r7, [r9]
 8008cae:	0c12      	lsrs	r2, r2, #16
 8008cb0:	0c3f      	lsrs	r7, r7, #16
 8008cb2:	fb0a 7202 	mla	r2, sl, r2, r7
 8008cb6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cc0:	4565      	cmp	r5, ip
 8008cc2:	f849 3b04 	str.w	r3, [r9], #4
 8008cc6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008cca:	d8e4      	bhi.n	8008c96 <__multiply+0xaa>
 8008ccc:	9b01      	ldr	r3, [sp, #4]
 8008cce:	50e7      	str	r7, [r4, r3]
 8008cd0:	9b03      	ldr	r3, [sp, #12]
 8008cd2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008cd6:	3104      	adds	r1, #4
 8008cd8:	f1b9 0f00 	cmp.w	r9, #0
 8008cdc:	d020      	beq.n	8008d20 <__multiply+0x134>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	4647      	mov	r7, r8
 8008ce2:	46a4      	mov	ip, r4
 8008ce4:	f04f 0a00 	mov.w	sl, #0
 8008ce8:	f8b7 b000 	ldrh.w	fp, [r7]
 8008cec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008cf0:	fb09 220b 	mla	r2, r9, fp, r2
 8008cf4:	4452      	add	r2, sl
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cfc:	f84c 3b04 	str.w	r3, [ip], #4
 8008d00:	f857 3b04 	ldr.w	r3, [r7], #4
 8008d04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d08:	f8bc 3000 	ldrh.w	r3, [ip]
 8008d0c:	fb09 330a 	mla	r3, r9, sl, r3
 8008d10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008d14:	42bd      	cmp	r5, r7
 8008d16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d1a:	d8e5      	bhi.n	8008ce8 <__multiply+0xfc>
 8008d1c:	9a01      	ldr	r2, [sp, #4]
 8008d1e:	50a3      	str	r3, [r4, r2]
 8008d20:	3404      	adds	r4, #4
 8008d22:	e79f      	b.n	8008c64 <__multiply+0x78>
 8008d24:	3e01      	subs	r6, #1
 8008d26:	e7a1      	b.n	8008c6c <__multiply+0x80>
 8008d28:	0800a690 	.word	0x0800a690
 8008d2c:	0800a6a1 	.word	0x0800a6a1

08008d30 <__pow5mult>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	4615      	mov	r5, r2
 8008d36:	f012 0203 	ands.w	r2, r2, #3
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	460e      	mov	r6, r1
 8008d3e:	d007      	beq.n	8008d50 <__pow5mult+0x20>
 8008d40:	4c25      	ldr	r4, [pc, #148]	@ (8008dd8 <__pow5mult+0xa8>)
 8008d42:	3a01      	subs	r2, #1
 8008d44:	2300      	movs	r3, #0
 8008d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d4a:	f7ff fea7 	bl	8008a9c <__multadd>
 8008d4e:	4606      	mov	r6, r0
 8008d50:	10ad      	asrs	r5, r5, #2
 8008d52:	d03d      	beq.n	8008dd0 <__pow5mult+0xa0>
 8008d54:	69fc      	ldr	r4, [r7, #28]
 8008d56:	b97c      	cbnz	r4, 8008d78 <__pow5mult+0x48>
 8008d58:	2010      	movs	r0, #16
 8008d5a:	f7ff fd87 	bl	800886c <malloc>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	61f8      	str	r0, [r7, #28]
 8008d62:	b928      	cbnz	r0, 8008d70 <__pow5mult+0x40>
 8008d64:	4b1d      	ldr	r3, [pc, #116]	@ (8008ddc <__pow5mult+0xac>)
 8008d66:	481e      	ldr	r0, [pc, #120]	@ (8008de0 <__pow5mult+0xb0>)
 8008d68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d6c:	f000 fc3e 	bl	80095ec <__assert_func>
 8008d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d74:	6004      	str	r4, [r0, #0]
 8008d76:	60c4      	str	r4, [r0, #12]
 8008d78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d80:	b94c      	cbnz	r4, 8008d96 <__pow5mult+0x66>
 8008d82:	f240 2171 	movw	r1, #625	@ 0x271
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7ff ff1a 	bl	8008bc0 <__i2b>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d92:	4604      	mov	r4, r0
 8008d94:	6003      	str	r3, [r0, #0]
 8008d96:	f04f 0900 	mov.w	r9, #0
 8008d9a:	07eb      	lsls	r3, r5, #31
 8008d9c:	d50a      	bpl.n	8008db4 <__pow5mult+0x84>
 8008d9e:	4631      	mov	r1, r6
 8008da0:	4622      	mov	r2, r4
 8008da2:	4638      	mov	r0, r7
 8008da4:	f7ff ff22 	bl	8008bec <__multiply>
 8008da8:	4631      	mov	r1, r6
 8008daa:	4680      	mov	r8, r0
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff fe53 	bl	8008a58 <_Bfree>
 8008db2:	4646      	mov	r6, r8
 8008db4:	106d      	asrs	r5, r5, #1
 8008db6:	d00b      	beq.n	8008dd0 <__pow5mult+0xa0>
 8008db8:	6820      	ldr	r0, [r4, #0]
 8008dba:	b938      	cbnz	r0, 8008dcc <__pow5mult+0x9c>
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f7ff ff13 	bl	8008bec <__multiply>
 8008dc6:	6020      	str	r0, [r4, #0]
 8008dc8:	f8c0 9000 	str.w	r9, [r0]
 8008dcc:	4604      	mov	r4, r0
 8008dce:	e7e4      	b.n	8008d9a <__pow5mult+0x6a>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd6:	bf00      	nop
 8008dd8:	0800a754 	.word	0x0800a754
 8008ddc:	0800a621 	.word	0x0800a621
 8008de0:	0800a6a1 	.word	0x0800a6a1

08008de4 <__lshift>:
 8008de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de8:	460c      	mov	r4, r1
 8008dea:	6849      	ldr	r1, [r1, #4]
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	4607      	mov	r7, r0
 8008df6:	4691      	mov	r9, r2
 8008df8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dfc:	f108 0601 	add.w	r6, r8, #1
 8008e00:	42b3      	cmp	r3, r6
 8008e02:	db0b      	blt.n	8008e1c <__lshift+0x38>
 8008e04:	4638      	mov	r0, r7
 8008e06:	f7ff fde7 	bl	80089d8 <_Balloc>
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	b948      	cbnz	r0, 8008e22 <__lshift+0x3e>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	4b28      	ldr	r3, [pc, #160]	@ (8008eb4 <__lshift+0xd0>)
 8008e12:	4829      	ldr	r0, [pc, #164]	@ (8008eb8 <__lshift+0xd4>)
 8008e14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e18:	f000 fbe8 	bl	80095ec <__assert_func>
 8008e1c:	3101      	adds	r1, #1
 8008e1e:	005b      	lsls	r3, r3, #1
 8008e20:	e7ee      	b.n	8008e00 <__lshift+0x1c>
 8008e22:	2300      	movs	r3, #0
 8008e24:	f100 0114 	add.w	r1, r0, #20
 8008e28:	f100 0210 	add.w	r2, r0, #16
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	4553      	cmp	r3, sl
 8008e30:	db33      	blt.n	8008e9a <__lshift+0xb6>
 8008e32:	6920      	ldr	r0, [r4, #16]
 8008e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e38:	f104 0314 	add.w	r3, r4, #20
 8008e3c:	f019 091f 	ands.w	r9, r9, #31
 8008e40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e48:	d02b      	beq.n	8008ea2 <__lshift+0xbe>
 8008e4a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e4e:	468a      	mov	sl, r1
 8008e50:	2200      	movs	r2, #0
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	fa00 f009 	lsl.w	r0, r0, r9
 8008e58:	4310      	orrs	r0, r2
 8008e5a:	f84a 0b04 	str.w	r0, [sl], #4
 8008e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e62:	459c      	cmp	ip, r3
 8008e64:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e68:	d8f3      	bhi.n	8008e52 <__lshift+0x6e>
 8008e6a:	ebac 0304 	sub.w	r3, ip, r4
 8008e6e:	3b15      	subs	r3, #21
 8008e70:	f023 0303 	bic.w	r3, r3, #3
 8008e74:	3304      	adds	r3, #4
 8008e76:	f104 0015 	add.w	r0, r4, #21
 8008e7a:	4560      	cmp	r0, ip
 8008e7c:	bf88      	it	hi
 8008e7e:	2304      	movhi	r3, #4
 8008e80:	50ca      	str	r2, [r1, r3]
 8008e82:	b10a      	cbz	r2, 8008e88 <__lshift+0xa4>
 8008e84:	f108 0602 	add.w	r6, r8, #2
 8008e88:	3e01      	subs	r6, #1
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	612e      	str	r6, [r5, #16]
 8008e8e:	4621      	mov	r1, r4
 8008e90:	f7ff fde2 	bl	8008a58 <_Bfree>
 8008e94:	4628      	mov	r0, r5
 8008e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	e7c5      	b.n	8008e2e <__lshift+0x4a>
 8008ea2:	3904      	subs	r1, #4
 8008ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008eac:	459c      	cmp	ip, r3
 8008eae:	d8f9      	bhi.n	8008ea4 <__lshift+0xc0>
 8008eb0:	e7ea      	b.n	8008e88 <__lshift+0xa4>
 8008eb2:	bf00      	nop
 8008eb4:	0800a690 	.word	0x0800a690
 8008eb8:	0800a6a1 	.word	0x0800a6a1

08008ebc <__mcmp>:
 8008ebc:	690a      	ldr	r2, [r1, #16]
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6900      	ldr	r0, [r0, #16]
 8008ec2:	1a80      	subs	r0, r0, r2
 8008ec4:	b530      	push	{r4, r5, lr}
 8008ec6:	d10e      	bne.n	8008ee6 <__mcmp+0x2a>
 8008ec8:	3314      	adds	r3, #20
 8008eca:	3114      	adds	r1, #20
 8008ecc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ed0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ed4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008edc:	4295      	cmp	r5, r2
 8008ede:	d003      	beq.n	8008ee8 <__mcmp+0x2c>
 8008ee0:	d205      	bcs.n	8008eee <__mcmp+0x32>
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	bd30      	pop	{r4, r5, pc}
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	d3f3      	bcc.n	8008ed4 <__mcmp+0x18>
 8008eec:	e7fb      	b.n	8008ee6 <__mcmp+0x2a>
 8008eee:	2001      	movs	r0, #1
 8008ef0:	e7f9      	b.n	8008ee6 <__mcmp+0x2a>
	...

08008ef4 <__mdiff>:
 8008ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	4689      	mov	r9, r1
 8008efa:	4606      	mov	r6, r0
 8008efc:	4611      	mov	r1, r2
 8008efe:	4648      	mov	r0, r9
 8008f00:	4614      	mov	r4, r2
 8008f02:	f7ff ffdb 	bl	8008ebc <__mcmp>
 8008f06:	1e05      	subs	r5, r0, #0
 8008f08:	d112      	bne.n	8008f30 <__mdiff+0x3c>
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7ff fd63 	bl	80089d8 <_Balloc>
 8008f12:	4602      	mov	r2, r0
 8008f14:	b928      	cbnz	r0, 8008f22 <__mdiff+0x2e>
 8008f16:	4b3f      	ldr	r3, [pc, #252]	@ (8009014 <__mdiff+0x120>)
 8008f18:	f240 2137 	movw	r1, #567	@ 0x237
 8008f1c:	483e      	ldr	r0, [pc, #248]	@ (8009018 <__mdiff+0x124>)
 8008f1e:	f000 fb65 	bl	80095ec <__assert_func>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f28:	4610      	mov	r0, r2
 8008f2a:	b003      	add	sp, #12
 8008f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f30:	bfbc      	itt	lt
 8008f32:	464b      	movlt	r3, r9
 8008f34:	46a1      	movlt	r9, r4
 8008f36:	4630      	mov	r0, r6
 8008f38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f3c:	bfba      	itte	lt
 8008f3e:	461c      	movlt	r4, r3
 8008f40:	2501      	movlt	r5, #1
 8008f42:	2500      	movge	r5, #0
 8008f44:	f7ff fd48 	bl	80089d8 <_Balloc>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	b918      	cbnz	r0, 8008f54 <__mdiff+0x60>
 8008f4c:	4b31      	ldr	r3, [pc, #196]	@ (8009014 <__mdiff+0x120>)
 8008f4e:	f240 2145 	movw	r1, #581	@ 0x245
 8008f52:	e7e3      	b.n	8008f1c <__mdiff+0x28>
 8008f54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f58:	6926      	ldr	r6, [r4, #16]
 8008f5a:	60c5      	str	r5, [r0, #12]
 8008f5c:	f109 0310 	add.w	r3, r9, #16
 8008f60:	f109 0514 	add.w	r5, r9, #20
 8008f64:	f104 0e14 	add.w	lr, r4, #20
 8008f68:	f100 0b14 	add.w	fp, r0, #20
 8008f6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	46d9      	mov	r9, fp
 8008f78:	f04f 0c00 	mov.w	ip, #0
 8008f7c:	9b01      	ldr	r3, [sp, #4]
 8008f7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	fa1f f38a 	uxth.w	r3, sl
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	b283      	uxth	r3, r0
 8008f90:	1acb      	subs	r3, r1, r3
 8008f92:	0c00      	lsrs	r0, r0, #16
 8008f94:	4463      	add	r3, ip
 8008f96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008fa4:	4576      	cmp	r6, lr
 8008fa6:	f849 3b04 	str.w	r3, [r9], #4
 8008faa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fae:	d8e5      	bhi.n	8008f7c <__mdiff+0x88>
 8008fb0:	1b33      	subs	r3, r6, r4
 8008fb2:	3b15      	subs	r3, #21
 8008fb4:	f023 0303 	bic.w	r3, r3, #3
 8008fb8:	3415      	adds	r4, #21
 8008fba:	3304      	adds	r3, #4
 8008fbc:	42a6      	cmp	r6, r4
 8008fbe:	bf38      	it	cc
 8008fc0:	2304      	movcc	r3, #4
 8008fc2:	441d      	add	r5, r3
 8008fc4:	445b      	add	r3, fp
 8008fc6:	461e      	mov	r6, r3
 8008fc8:	462c      	mov	r4, r5
 8008fca:	4544      	cmp	r4, r8
 8008fcc:	d30e      	bcc.n	8008fec <__mdiff+0xf8>
 8008fce:	f108 0103 	add.w	r1, r8, #3
 8008fd2:	1b49      	subs	r1, r1, r5
 8008fd4:	f021 0103 	bic.w	r1, r1, #3
 8008fd8:	3d03      	subs	r5, #3
 8008fda:	45a8      	cmp	r8, r5
 8008fdc:	bf38      	it	cc
 8008fde:	2100      	movcc	r1, #0
 8008fe0:	440b      	add	r3, r1
 8008fe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fe6:	b191      	cbz	r1, 800900e <__mdiff+0x11a>
 8008fe8:	6117      	str	r7, [r2, #16]
 8008fea:	e79d      	b.n	8008f28 <__mdiff+0x34>
 8008fec:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ff0:	46e6      	mov	lr, ip
 8008ff2:	0c08      	lsrs	r0, r1, #16
 8008ff4:	fa1c fc81 	uxtah	ip, ip, r1
 8008ff8:	4471      	add	r1, lr
 8008ffa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ffe:	b289      	uxth	r1, r1
 8009000:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009004:	f846 1b04 	str.w	r1, [r6], #4
 8009008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800900c:	e7dd      	b.n	8008fca <__mdiff+0xd6>
 800900e:	3f01      	subs	r7, #1
 8009010:	e7e7      	b.n	8008fe2 <__mdiff+0xee>
 8009012:	bf00      	nop
 8009014:	0800a690 	.word	0x0800a690
 8009018:	0800a6a1 	.word	0x0800a6a1

0800901c <__d2b>:
 800901c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009020:	460f      	mov	r7, r1
 8009022:	2101      	movs	r1, #1
 8009024:	ec59 8b10 	vmov	r8, r9, d0
 8009028:	4616      	mov	r6, r2
 800902a:	f7ff fcd5 	bl	80089d8 <_Balloc>
 800902e:	4604      	mov	r4, r0
 8009030:	b930      	cbnz	r0, 8009040 <__d2b+0x24>
 8009032:	4602      	mov	r2, r0
 8009034:	4b23      	ldr	r3, [pc, #140]	@ (80090c4 <__d2b+0xa8>)
 8009036:	4824      	ldr	r0, [pc, #144]	@ (80090c8 <__d2b+0xac>)
 8009038:	f240 310f 	movw	r1, #783	@ 0x30f
 800903c:	f000 fad6 	bl	80095ec <__assert_func>
 8009040:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009048:	b10d      	cbz	r5, 800904e <__d2b+0x32>
 800904a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	f1b8 0300 	subs.w	r3, r8, #0
 8009054:	d023      	beq.n	800909e <__d2b+0x82>
 8009056:	4668      	mov	r0, sp
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	f7ff fd84 	bl	8008b66 <__lo0bits>
 800905e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009062:	b1d0      	cbz	r0, 800909a <__d2b+0x7e>
 8009064:	f1c0 0320 	rsb	r3, r0, #32
 8009068:	fa02 f303 	lsl.w	r3, r2, r3
 800906c:	430b      	orrs	r3, r1
 800906e:	40c2      	lsrs	r2, r0
 8009070:	6163      	str	r3, [r4, #20]
 8009072:	9201      	str	r2, [sp, #4]
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	61a3      	str	r3, [r4, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	bf0c      	ite	eq
 800907c:	2201      	moveq	r2, #1
 800907e:	2202      	movne	r2, #2
 8009080:	6122      	str	r2, [r4, #16]
 8009082:	b1a5      	cbz	r5, 80090ae <__d2b+0x92>
 8009084:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009088:	4405      	add	r5, r0
 800908a:	603d      	str	r5, [r7, #0]
 800908c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009090:	6030      	str	r0, [r6, #0]
 8009092:	4620      	mov	r0, r4
 8009094:	b003      	add	sp, #12
 8009096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800909a:	6161      	str	r1, [r4, #20]
 800909c:	e7ea      	b.n	8009074 <__d2b+0x58>
 800909e:	a801      	add	r0, sp, #4
 80090a0:	f7ff fd61 	bl	8008b66 <__lo0bits>
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	6163      	str	r3, [r4, #20]
 80090a8:	3020      	adds	r0, #32
 80090aa:	2201      	movs	r2, #1
 80090ac:	e7e8      	b.n	8009080 <__d2b+0x64>
 80090ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80090b6:	6038      	str	r0, [r7, #0]
 80090b8:	6918      	ldr	r0, [r3, #16]
 80090ba:	f7ff fd35 	bl	8008b28 <__hi0bits>
 80090be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090c2:	e7e5      	b.n	8009090 <__d2b+0x74>
 80090c4:	0800a690 	.word	0x0800a690
 80090c8:	0800a6a1 	.word	0x0800a6a1

080090cc <__sfputc_r>:
 80090cc:	6893      	ldr	r3, [r2, #8]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	b410      	push	{r4}
 80090d4:	6093      	str	r3, [r2, #8]
 80090d6:	da08      	bge.n	80090ea <__sfputc_r+0x1e>
 80090d8:	6994      	ldr	r4, [r2, #24]
 80090da:	42a3      	cmp	r3, r4
 80090dc:	db01      	blt.n	80090e2 <__sfputc_r+0x16>
 80090de:	290a      	cmp	r1, #10
 80090e0:	d103      	bne.n	80090ea <__sfputc_r+0x1e>
 80090e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090e6:	f7fe bc0a 	b.w	80078fe <__swbuf_r>
 80090ea:	6813      	ldr	r3, [r2, #0]
 80090ec:	1c58      	adds	r0, r3, #1
 80090ee:	6010      	str	r0, [r2, #0]
 80090f0:	7019      	strb	r1, [r3, #0]
 80090f2:	4608      	mov	r0, r1
 80090f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <__sfputs_r>:
 80090fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fc:	4606      	mov	r6, r0
 80090fe:	460f      	mov	r7, r1
 8009100:	4614      	mov	r4, r2
 8009102:	18d5      	adds	r5, r2, r3
 8009104:	42ac      	cmp	r4, r5
 8009106:	d101      	bne.n	800910c <__sfputs_r+0x12>
 8009108:	2000      	movs	r0, #0
 800910a:	e007      	b.n	800911c <__sfputs_r+0x22>
 800910c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009110:	463a      	mov	r2, r7
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ffda 	bl	80090cc <__sfputc_r>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d1f3      	bne.n	8009104 <__sfputs_r+0xa>
 800911c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009120 <_vfiprintf_r>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	460d      	mov	r5, r1
 8009126:	b09d      	sub	sp, #116	@ 0x74
 8009128:	4614      	mov	r4, r2
 800912a:	4698      	mov	r8, r3
 800912c:	4606      	mov	r6, r0
 800912e:	b118      	cbz	r0, 8009138 <_vfiprintf_r+0x18>
 8009130:	6a03      	ldr	r3, [r0, #32]
 8009132:	b90b      	cbnz	r3, 8009138 <_vfiprintf_r+0x18>
 8009134:	f7fe fafa 	bl	800772c <__sinit>
 8009138:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800913a:	07d9      	lsls	r1, r3, #31
 800913c:	d405      	bmi.n	800914a <_vfiprintf_r+0x2a>
 800913e:	89ab      	ldrh	r3, [r5, #12]
 8009140:	059a      	lsls	r2, r3, #22
 8009142:	d402      	bmi.n	800914a <_vfiprintf_r+0x2a>
 8009144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009146:	f7fe fcec 	bl	8007b22 <__retarget_lock_acquire_recursive>
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	071b      	lsls	r3, r3, #28
 800914e:	d501      	bpl.n	8009154 <_vfiprintf_r+0x34>
 8009150:	692b      	ldr	r3, [r5, #16]
 8009152:	b99b      	cbnz	r3, 800917c <_vfiprintf_r+0x5c>
 8009154:	4629      	mov	r1, r5
 8009156:	4630      	mov	r0, r6
 8009158:	f7fe fc10 	bl	800797c <__swsetup_r>
 800915c:	b170      	cbz	r0, 800917c <_vfiprintf_r+0x5c>
 800915e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009160:	07dc      	lsls	r4, r3, #31
 8009162:	d504      	bpl.n	800916e <_vfiprintf_r+0x4e>
 8009164:	f04f 30ff 	mov.w	r0, #4294967295
 8009168:	b01d      	add	sp, #116	@ 0x74
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	89ab      	ldrh	r3, [r5, #12]
 8009170:	0598      	lsls	r0, r3, #22
 8009172:	d4f7      	bmi.n	8009164 <_vfiprintf_r+0x44>
 8009174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009176:	f7fe fcd5 	bl	8007b24 <__retarget_lock_release_recursive>
 800917a:	e7f3      	b.n	8009164 <_vfiprintf_r+0x44>
 800917c:	2300      	movs	r3, #0
 800917e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009180:	2320      	movs	r3, #32
 8009182:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009186:	f8cd 800c 	str.w	r8, [sp, #12]
 800918a:	2330      	movs	r3, #48	@ 0x30
 800918c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800933c <_vfiprintf_r+0x21c>
 8009190:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009194:	f04f 0901 	mov.w	r9, #1
 8009198:	4623      	mov	r3, r4
 800919a:	469a      	mov	sl, r3
 800919c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091a0:	b10a      	cbz	r2, 80091a6 <_vfiprintf_r+0x86>
 80091a2:	2a25      	cmp	r2, #37	@ 0x25
 80091a4:	d1f9      	bne.n	800919a <_vfiprintf_r+0x7a>
 80091a6:	ebba 0b04 	subs.w	fp, sl, r4
 80091aa:	d00b      	beq.n	80091c4 <_vfiprintf_r+0xa4>
 80091ac:	465b      	mov	r3, fp
 80091ae:	4622      	mov	r2, r4
 80091b0:	4629      	mov	r1, r5
 80091b2:	4630      	mov	r0, r6
 80091b4:	f7ff ffa1 	bl	80090fa <__sfputs_r>
 80091b8:	3001      	adds	r0, #1
 80091ba:	f000 80a7 	beq.w	800930c <_vfiprintf_r+0x1ec>
 80091be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c0:	445a      	add	r2, fp
 80091c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80091c4:	f89a 3000 	ldrb.w	r3, [sl]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 809f 	beq.w	800930c <_vfiprintf_r+0x1ec>
 80091ce:	2300      	movs	r3, #0
 80091d0:	f04f 32ff 	mov.w	r2, #4294967295
 80091d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d8:	f10a 0a01 	add.w	sl, sl, #1
 80091dc:	9304      	str	r3, [sp, #16]
 80091de:	9307      	str	r3, [sp, #28]
 80091e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80091e6:	4654      	mov	r4, sl
 80091e8:	2205      	movs	r2, #5
 80091ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ee:	4853      	ldr	r0, [pc, #332]	@ (800933c <_vfiprintf_r+0x21c>)
 80091f0:	f7f6 ffee 	bl	80001d0 <memchr>
 80091f4:	9a04      	ldr	r2, [sp, #16]
 80091f6:	b9d8      	cbnz	r0, 8009230 <_vfiprintf_r+0x110>
 80091f8:	06d1      	lsls	r1, r2, #27
 80091fa:	bf44      	itt	mi
 80091fc:	2320      	movmi	r3, #32
 80091fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009202:	0713      	lsls	r3, r2, #28
 8009204:	bf44      	itt	mi
 8009206:	232b      	movmi	r3, #43	@ 0x2b
 8009208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800920c:	f89a 3000 	ldrb.w	r3, [sl]
 8009210:	2b2a      	cmp	r3, #42	@ 0x2a
 8009212:	d015      	beq.n	8009240 <_vfiprintf_r+0x120>
 8009214:	9a07      	ldr	r2, [sp, #28]
 8009216:	4654      	mov	r4, sl
 8009218:	2000      	movs	r0, #0
 800921a:	f04f 0c0a 	mov.w	ip, #10
 800921e:	4621      	mov	r1, r4
 8009220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009224:	3b30      	subs	r3, #48	@ 0x30
 8009226:	2b09      	cmp	r3, #9
 8009228:	d94b      	bls.n	80092c2 <_vfiprintf_r+0x1a2>
 800922a:	b1b0      	cbz	r0, 800925a <_vfiprintf_r+0x13a>
 800922c:	9207      	str	r2, [sp, #28]
 800922e:	e014      	b.n	800925a <_vfiprintf_r+0x13a>
 8009230:	eba0 0308 	sub.w	r3, r0, r8
 8009234:	fa09 f303 	lsl.w	r3, r9, r3
 8009238:	4313      	orrs	r3, r2
 800923a:	9304      	str	r3, [sp, #16]
 800923c:	46a2      	mov	sl, r4
 800923e:	e7d2      	b.n	80091e6 <_vfiprintf_r+0xc6>
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	1d19      	adds	r1, r3, #4
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	9103      	str	r1, [sp, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	bfbb      	ittet	lt
 800924c:	425b      	neglt	r3, r3
 800924e:	f042 0202 	orrlt.w	r2, r2, #2
 8009252:	9307      	strge	r3, [sp, #28]
 8009254:	9307      	strlt	r3, [sp, #28]
 8009256:	bfb8      	it	lt
 8009258:	9204      	strlt	r2, [sp, #16]
 800925a:	7823      	ldrb	r3, [r4, #0]
 800925c:	2b2e      	cmp	r3, #46	@ 0x2e
 800925e:	d10a      	bne.n	8009276 <_vfiprintf_r+0x156>
 8009260:	7863      	ldrb	r3, [r4, #1]
 8009262:	2b2a      	cmp	r3, #42	@ 0x2a
 8009264:	d132      	bne.n	80092cc <_vfiprintf_r+0x1ac>
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	1d1a      	adds	r2, r3, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	9203      	str	r2, [sp, #12]
 800926e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009272:	3402      	adds	r4, #2
 8009274:	9305      	str	r3, [sp, #20]
 8009276:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800934c <_vfiprintf_r+0x22c>
 800927a:	7821      	ldrb	r1, [r4, #0]
 800927c:	2203      	movs	r2, #3
 800927e:	4650      	mov	r0, sl
 8009280:	f7f6 ffa6 	bl	80001d0 <memchr>
 8009284:	b138      	cbz	r0, 8009296 <_vfiprintf_r+0x176>
 8009286:	9b04      	ldr	r3, [sp, #16]
 8009288:	eba0 000a 	sub.w	r0, r0, sl
 800928c:	2240      	movs	r2, #64	@ 0x40
 800928e:	4082      	lsls	r2, r0
 8009290:	4313      	orrs	r3, r2
 8009292:	3401      	adds	r4, #1
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929a:	4829      	ldr	r0, [pc, #164]	@ (8009340 <_vfiprintf_r+0x220>)
 800929c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092a0:	2206      	movs	r2, #6
 80092a2:	f7f6 ff95 	bl	80001d0 <memchr>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d03f      	beq.n	800932a <_vfiprintf_r+0x20a>
 80092aa:	4b26      	ldr	r3, [pc, #152]	@ (8009344 <_vfiprintf_r+0x224>)
 80092ac:	bb1b      	cbnz	r3, 80092f6 <_vfiprintf_r+0x1d6>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	3307      	adds	r3, #7
 80092b2:	f023 0307 	bic.w	r3, r3, #7
 80092b6:	3308      	adds	r3, #8
 80092b8:	9303      	str	r3, [sp, #12]
 80092ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092bc:	443b      	add	r3, r7
 80092be:	9309      	str	r3, [sp, #36]	@ 0x24
 80092c0:	e76a      	b.n	8009198 <_vfiprintf_r+0x78>
 80092c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80092c6:	460c      	mov	r4, r1
 80092c8:	2001      	movs	r0, #1
 80092ca:	e7a8      	b.n	800921e <_vfiprintf_r+0xfe>
 80092cc:	2300      	movs	r3, #0
 80092ce:	3401      	adds	r4, #1
 80092d0:	9305      	str	r3, [sp, #20]
 80092d2:	4619      	mov	r1, r3
 80092d4:	f04f 0c0a 	mov.w	ip, #10
 80092d8:	4620      	mov	r0, r4
 80092da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092de:	3a30      	subs	r2, #48	@ 0x30
 80092e0:	2a09      	cmp	r2, #9
 80092e2:	d903      	bls.n	80092ec <_vfiprintf_r+0x1cc>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0c6      	beq.n	8009276 <_vfiprintf_r+0x156>
 80092e8:	9105      	str	r1, [sp, #20]
 80092ea:	e7c4      	b.n	8009276 <_vfiprintf_r+0x156>
 80092ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80092f0:	4604      	mov	r4, r0
 80092f2:	2301      	movs	r3, #1
 80092f4:	e7f0      	b.n	80092d8 <_vfiprintf_r+0x1b8>
 80092f6:	ab03      	add	r3, sp, #12
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	462a      	mov	r2, r5
 80092fc:	4b12      	ldr	r3, [pc, #72]	@ (8009348 <_vfiprintf_r+0x228>)
 80092fe:	a904      	add	r1, sp, #16
 8009300:	4630      	mov	r0, r6
 8009302:	f7fd fdd1 	bl	8006ea8 <_printf_float>
 8009306:	4607      	mov	r7, r0
 8009308:	1c78      	adds	r0, r7, #1
 800930a:	d1d6      	bne.n	80092ba <_vfiprintf_r+0x19a>
 800930c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800930e:	07d9      	lsls	r1, r3, #31
 8009310:	d405      	bmi.n	800931e <_vfiprintf_r+0x1fe>
 8009312:	89ab      	ldrh	r3, [r5, #12]
 8009314:	059a      	lsls	r2, r3, #22
 8009316:	d402      	bmi.n	800931e <_vfiprintf_r+0x1fe>
 8009318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800931a:	f7fe fc03 	bl	8007b24 <__retarget_lock_release_recursive>
 800931e:	89ab      	ldrh	r3, [r5, #12]
 8009320:	065b      	lsls	r3, r3, #25
 8009322:	f53f af1f 	bmi.w	8009164 <_vfiprintf_r+0x44>
 8009326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009328:	e71e      	b.n	8009168 <_vfiprintf_r+0x48>
 800932a:	ab03      	add	r3, sp, #12
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	462a      	mov	r2, r5
 8009330:	4b05      	ldr	r3, [pc, #20]	@ (8009348 <_vfiprintf_r+0x228>)
 8009332:	a904      	add	r1, sp, #16
 8009334:	4630      	mov	r0, r6
 8009336:	f7fe f84f 	bl	80073d8 <_printf_i>
 800933a:	e7e4      	b.n	8009306 <_vfiprintf_r+0x1e6>
 800933c:	0800a6fa 	.word	0x0800a6fa
 8009340:	0800a704 	.word	0x0800a704
 8009344:	08006ea9 	.word	0x08006ea9
 8009348:	080090fb 	.word	0x080090fb
 800934c:	0800a700 	.word	0x0800a700

08009350 <__sflush_r>:
 8009350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009358:	0716      	lsls	r6, r2, #28
 800935a:	4605      	mov	r5, r0
 800935c:	460c      	mov	r4, r1
 800935e:	d454      	bmi.n	800940a <__sflush_r+0xba>
 8009360:	684b      	ldr	r3, [r1, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	dc02      	bgt.n	800936c <__sflush_r+0x1c>
 8009366:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	dd48      	ble.n	80093fe <__sflush_r+0xae>
 800936c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800936e:	2e00      	cmp	r6, #0
 8009370:	d045      	beq.n	80093fe <__sflush_r+0xae>
 8009372:	2300      	movs	r3, #0
 8009374:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009378:	682f      	ldr	r7, [r5, #0]
 800937a:	6a21      	ldr	r1, [r4, #32]
 800937c:	602b      	str	r3, [r5, #0]
 800937e:	d030      	beq.n	80093e2 <__sflush_r+0x92>
 8009380:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	0759      	lsls	r1, r3, #29
 8009386:	d505      	bpl.n	8009394 <__sflush_r+0x44>
 8009388:	6863      	ldr	r3, [r4, #4]
 800938a:	1ad2      	subs	r2, r2, r3
 800938c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800938e:	b10b      	cbz	r3, 8009394 <__sflush_r+0x44>
 8009390:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009392:	1ad2      	subs	r2, r2, r3
 8009394:	2300      	movs	r3, #0
 8009396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009398:	6a21      	ldr	r1, [r4, #32]
 800939a:	4628      	mov	r0, r5
 800939c:	47b0      	blx	r6
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	d106      	bne.n	80093b2 <__sflush_r+0x62>
 80093a4:	6829      	ldr	r1, [r5, #0]
 80093a6:	291d      	cmp	r1, #29
 80093a8:	d82b      	bhi.n	8009402 <__sflush_r+0xb2>
 80093aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009454 <__sflush_r+0x104>)
 80093ac:	40ca      	lsrs	r2, r1
 80093ae:	07d6      	lsls	r6, r2, #31
 80093b0:	d527      	bpl.n	8009402 <__sflush_r+0xb2>
 80093b2:	2200      	movs	r2, #0
 80093b4:	6062      	str	r2, [r4, #4]
 80093b6:	04d9      	lsls	r1, r3, #19
 80093b8:	6922      	ldr	r2, [r4, #16]
 80093ba:	6022      	str	r2, [r4, #0]
 80093bc:	d504      	bpl.n	80093c8 <__sflush_r+0x78>
 80093be:	1c42      	adds	r2, r0, #1
 80093c0:	d101      	bne.n	80093c6 <__sflush_r+0x76>
 80093c2:	682b      	ldr	r3, [r5, #0]
 80093c4:	b903      	cbnz	r3, 80093c8 <__sflush_r+0x78>
 80093c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80093c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093ca:	602f      	str	r7, [r5, #0]
 80093cc:	b1b9      	cbz	r1, 80093fe <__sflush_r+0xae>
 80093ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093d2:	4299      	cmp	r1, r3
 80093d4:	d002      	beq.n	80093dc <__sflush_r+0x8c>
 80093d6:	4628      	mov	r0, r5
 80093d8:	f7ff f9fe 	bl	80087d8 <_free_r>
 80093dc:	2300      	movs	r3, #0
 80093de:	6363      	str	r3, [r4, #52]	@ 0x34
 80093e0:	e00d      	b.n	80093fe <__sflush_r+0xae>
 80093e2:	2301      	movs	r3, #1
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b0      	blx	r6
 80093e8:	4602      	mov	r2, r0
 80093ea:	1c50      	adds	r0, r2, #1
 80093ec:	d1c9      	bne.n	8009382 <__sflush_r+0x32>
 80093ee:	682b      	ldr	r3, [r5, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0c6      	beq.n	8009382 <__sflush_r+0x32>
 80093f4:	2b1d      	cmp	r3, #29
 80093f6:	d001      	beq.n	80093fc <__sflush_r+0xac>
 80093f8:	2b16      	cmp	r3, #22
 80093fa:	d11e      	bne.n	800943a <__sflush_r+0xea>
 80093fc:	602f      	str	r7, [r5, #0]
 80093fe:	2000      	movs	r0, #0
 8009400:	e022      	b.n	8009448 <__sflush_r+0xf8>
 8009402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009406:	b21b      	sxth	r3, r3
 8009408:	e01b      	b.n	8009442 <__sflush_r+0xf2>
 800940a:	690f      	ldr	r7, [r1, #16]
 800940c:	2f00      	cmp	r7, #0
 800940e:	d0f6      	beq.n	80093fe <__sflush_r+0xae>
 8009410:	0793      	lsls	r3, r2, #30
 8009412:	680e      	ldr	r6, [r1, #0]
 8009414:	bf08      	it	eq
 8009416:	694b      	ldreq	r3, [r1, #20]
 8009418:	600f      	str	r7, [r1, #0]
 800941a:	bf18      	it	ne
 800941c:	2300      	movne	r3, #0
 800941e:	eba6 0807 	sub.w	r8, r6, r7
 8009422:	608b      	str	r3, [r1, #8]
 8009424:	f1b8 0f00 	cmp.w	r8, #0
 8009428:	dde9      	ble.n	80093fe <__sflush_r+0xae>
 800942a:	6a21      	ldr	r1, [r4, #32]
 800942c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800942e:	4643      	mov	r3, r8
 8009430:	463a      	mov	r2, r7
 8009432:	4628      	mov	r0, r5
 8009434:	47b0      	blx	r6
 8009436:	2800      	cmp	r0, #0
 8009438:	dc08      	bgt.n	800944c <__sflush_r+0xfc>
 800943a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800943e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	f04f 30ff 	mov.w	r0, #4294967295
 8009448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800944c:	4407      	add	r7, r0
 800944e:	eba8 0800 	sub.w	r8, r8, r0
 8009452:	e7e7      	b.n	8009424 <__sflush_r+0xd4>
 8009454:	20400001 	.word	0x20400001

08009458 <_fflush_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	690b      	ldr	r3, [r1, #16]
 800945c:	4605      	mov	r5, r0
 800945e:	460c      	mov	r4, r1
 8009460:	b913      	cbnz	r3, 8009468 <_fflush_r+0x10>
 8009462:	2500      	movs	r5, #0
 8009464:	4628      	mov	r0, r5
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	b118      	cbz	r0, 8009472 <_fflush_r+0x1a>
 800946a:	6a03      	ldr	r3, [r0, #32]
 800946c:	b90b      	cbnz	r3, 8009472 <_fflush_r+0x1a>
 800946e:	f7fe f95d 	bl	800772c <__sinit>
 8009472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d0f3      	beq.n	8009462 <_fflush_r+0xa>
 800947a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800947c:	07d0      	lsls	r0, r2, #31
 800947e:	d404      	bmi.n	800948a <_fflush_r+0x32>
 8009480:	0599      	lsls	r1, r3, #22
 8009482:	d402      	bmi.n	800948a <_fflush_r+0x32>
 8009484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009486:	f7fe fb4c 	bl	8007b22 <__retarget_lock_acquire_recursive>
 800948a:	4628      	mov	r0, r5
 800948c:	4621      	mov	r1, r4
 800948e:	f7ff ff5f 	bl	8009350 <__sflush_r>
 8009492:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009494:	07da      	lsls	r2, r3, #31
 8009496:	4605      	mov	r5, r0
 8009498:	d4e4      	bmi.n	8009464 <_fflush_r+0xc>
 800949a:	89a3      	ldrh	r3, [r4, #12]
 800949c:	059b      	lsls	r3, r3, #22
 800949e:	d4e1      	bmi.n	8009464 <_fflush_r+0xc>
 80094a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094a2:	f7fe fb3f 	bl	8007b24 <__retarget_lock_release_recursive>
 80094a6:	e7dd      	b.n	8009464 <_fflush_r+0xc>

080094a8 <__swhatbuf_r>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	460c      	mov	r4, r1
 80094ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b0:	2900      	cmp	r1, #0
 80094b2:	b096      	sub	sp, #88	@ 0x58
 80094b4:	4615      	mov	r5, r2
 80094b6:	461e      	mov	r6, r3
 80094b8:	da0d      	bge.n	80094d6 <__swhatbuf_r+0x2e>
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094c0:	f04f 0100 	mov.w	r1, #0
 80094c4:	bf14      	ite	ne
 80094c6:	2340      	movne	r3, #64	@ 0x40
 80094c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094cc:	2000      	movs	r0, #0
 80094ce:	6031      	str	r1, [r6, #0]
 80094d0:	602b      	str	r3, [r5, #0]
 80094d2:	b016      	add	sp, #88	@ 0x58
 80094d4:	bd70      	pop	{r4, r5, r6, pc}
 80094d6:	466a      	mov	r2, sp
 80094d8:	f000 f848 	bl	800956c <_fstat_r>
 80094dc:	2800      	cmp	r0, #0
 80094de:	dbec      	blt.n	80094ba <__swhatbuf_r+0x12>
 80094e0:	9901      	ldr	r1, [sp, #4]
 80094e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80094e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80094ea:	4259      	negs	r1, r3
 80094ec:	4159      	adcs	r1, r3
 80094ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094f2:	e7eb      	b.n	80094cc <__swhatbuf_r+0x24>

080094f4 <__smakebuf_r>:
 80094f4:	898b      	ldrh	r3, [r1, #12]
 80094f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094f8:	079d      	lsls	r5, r3, #30
 80094fa:	4606      	mov	r6, r0
 80094fc:	460c      	mov	r4, r1
 80094fe:	d507      	bpl.n	8009510 <__smakebuf_r+0x1c>
 8009500:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	6123      	str	r3, [r4, #16]
 8009508:	2301      	movs	r3, #1
 800950a:	6163      	str	r3, [r4, #20]
 800950c:	b003      	add	sp, #12
 800950e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009510:	ab01      	add	r3, sp, #4
 8009512:	466a      	mov	r2, sp
 8009514:	f7ff ffc8 	bl	80094a8 <__swhatbuf_r>
 8009518:	9f00      	ldr	r7, [sp, #0]
 800951a:	4605      	mov	r5, r0
 800951c:	4639      	mov	r1, r7
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff f9ce 	bl	80088c0 <_malloc_r>
 8009524:	b948      	cbnz	r0, 800953a <__smakebuf_r+0x46>
 8009526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800952a:	059a      	lsls	r2, r3, #22
 800952c:	d4ee      	bmi.n	800950c <__smakebuf_r+0x18>
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	f043 0302 	orr.w	r3, r3, #2
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	e7e2      	b.n	8009500 <__smakebuf_r+0xc>
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	6020      	str	r0, [r4, #0]
 800953e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009542:	81a3      	strh	r3, [r4, #12]
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800954a:	b15b      	cbz	r3, 8009564 <__smakebuf_r+0x70>
 800954c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009550:	4630      	mov	r0, r6
 8009552:	f000 f81d 	bl	8009590 <_isatty_r>
 8009556:	b128      	cbz	r0, 8009564 <__smakebuf_r+0x70>
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	f023 0303 	bic.w	r3, r3, #3
 800955e:	f043 0301 	orr.w	r3, r3, #1
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	431d      	orrs	r5, r3
 8009568:	81a5      	strh	r5, [r4, #12]
 800956a:	e7cf      	b.n	800950c <__smakebuf_r+0x18>

0800956c <_fstat_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d07      	ldr	r5, [pc, #28]	@ (800958c <_fstat_r+0x20>)
 8009570:	2300      	movs	r3, #0
 8009572:	4604      	mov	r4, r0
 8009574:	4608      	mov	r0, r1
 8009576:	4611      	mov	r1, r2
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	f7fa fa45 	bl	8003a08 <_fstat>
 800957e:	1c43      	adds	r3, r0, #1
 8009580:	d102      	bne.n	8009588 <_fstat_r+0x1c>
 8009582:	682b      	ldr	r3, [r5, #0]
 8009584:	b103      	cbz	r3, 8009588 <_fstat_r+0x1c>
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	bd38      	pop	{r3, r4, r5, pc}
 800958a:	bf00      	nop
 800958c:	2000048c 	.word	0x2000048c

08009590 <_isatty_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d06      	ldr	r5, [pc, #24]	@ (80095ac <_isatty_r+0x1c>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	602b      	str	r3, [r5, #0]
 800959c:	f7fa fa44 	bl	8003a28 <_isatty>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_isatty_r+0x1a>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_isatty_r+0x1a>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	2000048c 	.word	0x2000048c

080095b0 <_sbrk_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4d06      	ldr	r5, [pc, #24]	@ (80095cc <_sbrk_r+0x1c>)
 80095b4:	2300      	movs	r3, #0
 80095b6:	4604      	mov	r4, r0
 80095b8:	4608      	mov	r0, r1
 80095ba:	602b      	str	r3, [r5, #0]
 80095bc:	f7fa fa4c 	bl	8003a58 <_sbrk>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_sbrk_r+0x1a>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_sbrk_r+0x1a>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	2000048c 	.word	0x2000048c

080095d0 <memcpy>:
 80095d0:	440a      	add	r2, r1
 80095d2:	4291      	cmp	r1, r2
 80095d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095d8:	d100      	bne.n	80095dc <memcpy+0xc>
 80095da:	4770      	bx	lr
 80095dc:	b510      	push	{r4, lr}
 80095de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095e6:	4291      	cmp	r1, r2
 80095e8:	d1f9      	bne.n	80095de <memcpy+0xe>
 80095ea:	bd10      	pop	{r4, pc}

080095ec <__assert_func>:
 80095ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ee:	4614      	mov	r4, r2
 80095f0:	461a      	mov	r2, r3
 80095f2:	4b09      	ldr	r3, [pc, #36]	@ (8009618 <__assert_func+0x2c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4605      	mov	r5, r0
 80095f8:	68d8      	ldr	r0, [r3, #12]
 80095fa:	b14c      	cbz	r4, 8009610 <__assert_func+0x24>
 80095fc:	4b07      	ldr	r3, [pc, #28]	@ (800961c <__assert_func+0x30>)
 80095fe:	9100      	str	r1, [sp, #0]
 8009600:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009604:	4906      	ldr	r1, [pc, #24]	@ (8009620 <__assert_func+0x34>)
 8009606:	462b      	mov	r3, r5
 8009608:	f000 f842 	bl	8009690 <fiprintf>
 800960c:	f000 f852 	bl	80096b4 <abort>
 8009610:	4b04      	ldr	r3, [pc, #16]	@ (8009624 <__assert_func+0x38>)
 8009612:	461c      	mov	r4, r3
 8009614:	e7f3      	b.n	80095fe <__assert_func+0x12>
 8009616:	bf00      	nop
 8009618:	2000001c 	.word	0x2000001c
 800961c:	0800a715 	.word	0x0800a715
 8009620:	0800a722 	.word	0x0800a722
 8009624:	0800a750 	.word	0x0800a750

08009628 <_calloc_r>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	fba1 5402 	umull	r5, r4, r1, r2
 800962e:	b934      	cbnz	r4, 800963e <_calloc_r+0x16>
 8009630:	4629      	mov	r1, r5
 8009632:	f7ff f945 	bl	80088c0 <_malloc_r>
 8009636:	4606      	mov	r6, r0
 8009638:	b928      	cbnz	r0, 8009646 <_calloc_r+0x1e>
 800963a:	4630      	mov	r0, r6
 800963c:	bd70      	pop	{r4, r5, r6, pc}
 800963e:	220c      	movs	r2, #12
 8009640:	6002      	str	r2, [r0, #0]
 8009642:	2600      	movs	r6, #0
 8009644:	e7f9      	b.n	800963a <_calloc_r+0x12>
 8009646:	462a      	mov	r2, r5
 8009648:	4621      	mov	r1, r4
 800964a:	f7fe f9ed 	bl	8007a28 <memset>
 800964e:	e7f4      	b.n	800963a <_calloc_r+0x12>

08009650 <__ascii_mbtowc>:
 8009650:	b082      	sub	sp, #8
 8009652:	b901      	cbnz	r1, 8009656 <__ascii_mbtowc+0x6>
 8009654:	a901      	add	r1, sp, #4
 8009656:	b142      	cbz	r2, 800966a <__ascii_mbtowc+0x1a>
 8009658:	b14b      	cbz	r3, 800966e <__ascii_mbtowc+0x1e>
 800965a:	7813      	ldrb	r3, [r2, #0]
 800965c:	600b      	str	r3, [r1, #0]
 800965e:	7812      	ldrb	r2, [r2, #0]
 8009660:	1e10      	subs	r0, r2, #0
 8009662:	bf18      	it	ne
 8009664:	2001      	movne	r0, #1
 8009666:	b002      	add	sp, #8
 8009668:	4770      	bx	lr
 800966a:	4610      	mov	r0, r2
 800966c:	e7fb      	b.n	8009666 <__ascii_mbtowc+0x16>
 800966e:	f06f 0001 	mvn.w	r0, #1
 8009672:	e7f8      	b.n	8009666 <__ascii_mbtowc+0x16>

08009674 <__ascii_wctomb>:
 8009674:	4603      	mov	r3, r0
 8009676:	4608      	mov	r0, r1
 8009678:	b141      	cbz	r1, 800968c <__ascii_wctomb+0x18>
 800967a:	2aff      	cmp	r2, #255	@ 0xff
 800967c:	d904      	bls.n	8009688 <__ascii_wctomb+0x14>
 800967e:	228a      	movs	r2, #138	@ 0x8a
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	f04f 30ff 	mov.w	r0, #4294967295
 8009686:	4770      	bx	lr
 8009688:	700a      	strb	r2, [r1, #0]
 800968a:	2001      	movs	r0, #1
 800968c:	4770      	bx	lr
	...

08009690 <fiprintf>:
 8009690:	b40e      	push	{r1, r2, r3}
 8009692:	b503      	push	{r0, r1, lr}
 8009694:	4601      	mov	r1, r0
 8009696:	ab03      	add	r3, sp, #12
 8009698:	4805      	ldr	r0, [pc, #20]	@ (80096b0 <fiprintf+0x20>)
 800969a:	f853 2b04 	ldr.w	r2, [r3], #4
 800969e:	6800      	ldr	r0, [r0, #0]
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	f7ff fd3d 	bl	8009120 <_vfiprintf_r>
 80096a6:	b002      	add	sp, #8
 80096a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096ac:	b003      	add	sp, #12
 80096ae:	4770      	bx	lr
 80096b0:	2000001c 	.word	0x2000001c

080096b4 <abort>:
 80096b4:	b508      	push	{r3, lr}
 80096b6:	2006      	movs	r0, #6
 80096b8:	f000 f82c 	bl	8009714 <raise>
 80096bc:	2001      	movs	r0, #1
 80096be:	f7fa f96f 	bl	80039a0 <_exit>

080096c2 <_raise_r>:
 80096c2:	291f      	cmp	r1, #31
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4605      	mov	r5, r0
 80096c8:	460c      	mov	r4, r1
 80096ca:	d904      	bls.n	80096d6 <_raise_r+0x14>
 80096cc:	2316      	movs	r3, #22
 80096ce:	6003      	str	r3, [r0, #0]
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295
 80096d4:	bd38      	pop	{r3, r4, r5, pc}
 80096d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096d8:	b112      	cbz	r2, 80096e0 <_raise_r+0x1e>
 80096da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096de:	b94b      	cbnz	r3, 80096f4 <_raise_r+0x32>
 80096e0:	4628      	mov	r0, r5
 80096e2:	f000 f831 	bl	8009748 <_getpid_r>
 80096e6:	4622      	mov	r2, r4
 80096e8:	4601      	mov	r1, r0
 80096ea:	4628      	mov	r0, r5
 80096ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096f0:	f000 b818 	b.w	8009724 <_kill_r>
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d00a      	beq.n	800970e <_raise_r+0x4c>
 80096f8:	1c59      	adds	r1, r3, #1
 80096fa:	d103      	bne.n	8009704 <_raise_r+0x42>
 80096fc:	2316      	movs	r3, #22
 80096fe:	6003      	str	r3, [r0, #0]
 8009700:	2001      	movs	r0, #1
 8009702:	e7e7      	b.n	80096d4 <_raise_r+0x12>
 8009704:	2100      	movs	r1, #0
 8009706:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800970a:	4620      	mov	r0, r4
 800970c:	4798      	blx	r3
 800970e:	2000      	movs	r0, #0
 8009710:	e7e0      	b.n	80096d4 <_raise_r+0x12>
	...

08009714 <raise>:
 8009714:	4b02      	ldr	r3, [pc, #8]	@ (8009720 <raise+0xc>)
 8009716:	4601      	mov	r1, r0
 8009718:	6818      	ldr	r0, [r3, #0]
 800971a:	f7ff bfd2 	b.w	80096c2 <_raise_r>
 800971e:	bf00      	nop
 8009720:	2000001c 	.word	0x2000001c

08009724 <_kill_r>:
 8009724:	b538      	push	{r3, r4, r5, lr}
 8009726:	4d07      	ldr	r5, [pc, #28]	@ (8009744 <_kill_r+0x20>)
 8009728:	2300      	movs	r3, #0
 800972a:	4604      	mov	r4, r0
 800972c:	4608      	mov	r0, r1
 800972e:	4611      	mov	r1, r2
 8009730:	602b      	str	r3, [r5, #0]
 8009732:	f7fa f925 	bl	8003980 <_kill>
 8009736:	1c43      	adds	r3, r0, #1
 8009738:	d102      	bne.n	8009740 <_kill_r+0x1c>
 800973a:	682b      	ldr	r3, [r5, #0]
 800973c:	b103      	cbz	r3, 8009740 <_kill_r+0x1c>
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	bd38      	pop	{r3, r4, r5, pc}
 8009742:	bf00      	nop
 8009744:	2000048c 	.word	0x2000048c

08009748 <_getpid_r>:
 8009748:	f7fa b912 	b.w	8003970 <_getpid>

0800974c <asinf>:
 800974c:	b508      	push	{r3, lr}
 800974e:	ed2d 8b02 	vpush	{d8}
 8009752:	eeb0 8a40 	vmov.f32	s16, s0
 8009756:	f000 f895 	bl	8009884 <__ieee754_asinf>
 800975a:	eeb4 8a48 	vcmp.f32	s16, s16
 800975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009762:	eef0 8a40 	vmov.f32	s17, s0
 8009766:	d615      	bvs.n	8009794 <asinf+0x48>
 8009768:	eeb0 0a48 	vmov.f32	s0, s16
 800976c:	f000 f873 	bl	8009856 <fabsf>
 8009770:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009774:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977c:	dd0a      	ble.n	8009794 <asinf+0x48>
 800977e:	f7fe f9a5 	bl	8007acc <__errno>
 8009782:	ecbd 8b02 	vpop	{d8}
 8009786:	2321      	movs	r3, #33	@ 0x21
 8009788:	6003      	str	r3, [r0, #0]
 800978a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800978e:	4804      	ldr	r0, [pc, #16]	@ (80097a0 <asinf+0x54>)
 8009790:	f000 b872 	b.w	8009878 <nanf>
 8009794:	eeb0 0a68 	vmov.f32	s0, s17
 8009798:	ecbd 8b02 	vpop	{d8}
 800979c:	bd08      	pop	{r3, pc}
 800979e:	bf00      	nop
 80097a0:	0800a750 	.word	0x0800a750

080097a4 <atan2f>:
 80097a4:	f000 b952 	b.w	8009a4c <__ieee754_atan2f>

080097a8 <powf>:
 80097a8:	b508      	push	{r3, lr}
 80097aa:	ed2d 8b04 	vpush	{d8-d9}
 80097ae:	eeb0 8a60 	vmov.f32	s16, s1
 80097b2:	eeb0 9a40 	vmov.f32	s18, s0
 80097b6:	f000 f9e9 	bl	8009b8c <__ieee754_powf>
 80097ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80097be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c2:	eef0 8a40 	vmov.f32	s17, s0
 80097c6:	d63e      	bvs.n	8009846 <powf+0x9e>
 80097c8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80097cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d0:	d112      	bne.n	80097f8 <powf+0x50>
 80097d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80097d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097da:	d039      	beq.n	8009850 <powf+0xa8>
 80097dc:	eeb0 0a48 	vmov.f32	s0, s16
 80097e0:	f000 f840 	bl	8009864 <finitef>
 80097e4:	b378      	cbz	r0, 8009846 <powf+0x9e>
 80097e6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80097ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ee:	d52a      	bpl.n	8009846 <powf+0x9e>
 80097f0:	f7fe f96c 	bl	8007acc <__errno>
 80097f4:	2322      	movs	r3, #34	@ 0x22
 80097f6:	e014      	b.n	8009822 <powf+0x7a>
 80097f8:	f000 f834 	bl	8009864 <finitef>
 80097fc:	b998      	cbnz	r0, 8009826 <powf+0x7e>
 80097fe:	eeb0 0a49 	vmov.f32	s0, s18
 8009802:	f000 f82f 	bl	8009864 <finitef>
 8009806:	b170      	cbz	r0, 8009826 <powf+0x7e>
 8009808:	eeb0 0a48 	vmov.f32	s0, s16
 800980c:	f000 f82a 	bl	8009864 <finitef>
 8009810:	b148      	cbz	r0, 8009826 <powf+0x7e>
 8009812:	eef4 8a68 	vcmp.f32	s17, s17
 8009816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800981a:	d7e9      	bvc.n	80097f0 <powf+0x48>
 800981c:	f7fe f956 	bl	8007acc <__errno>
 8009820:	2321      	movs	r3, #33	@ 0x21
 8009822:	6003      	str	r3, [r0, #0]
 8009824:	e00f      	b.n	8009846 <powf+0x9e>
 8009826:	eef5 8a40 	vcmp.f32	s17, #0.0
 800982a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982e:	d10a      	bne.n	8009846 <powf+0x9e>
 8009830:	eeb0 0a49 	vmov.f32	s0, s18
 8009834:	f000 f816 	bl	8009864 <finitef>
 8009838:	b128      	cbz	r0, 8009846 <powf+0x9e>
 800983a:	eeb0 0a48 	vmov.f32	s0, s16
 800983e:	f000 f811 	bl	8009864 <finitef>
 8009842:	2800      	cmp	r0, #0
 8009844:	d1d4      	bne.n	80097f0 <powf+0x48>
 8009846:	eeb0 0a68 	vmov.f32	s0, s17
 800984a:	ecbd 8b04 	vpop	{d8-d9}
 800984e:	bd08      	pop	{r3, pc}
 8009850:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8009854:	e7f7      	b.n	8009846 <powf+0x9e>

08009856 <fabsf>:
 8009856:	ee10 3a10 	vmov	r3, s0
 800985a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800985e:	ee00 3a10 	vmov	s0, r3
 8009862:	4770      	bx	lr

08009864 <finitef>:
 8009864:	ee10 3a10 	vmov	r3, s0
 8009868:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800986c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009870:	bfac      	ite	ge
 8009872:	2000      	movge	r0, #0
 8009874:	2001      	movlt	r0, #1
 8009876:	4770      	bx	lr

08009878 <nanf>:
 8009878:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009880 <nanf+0x8>
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	7fc00000 	.word	0x7fc00000

08009884 <__ieee754_asinf>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	ee10 5a10 	vmov	r5, s0
 800988a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800988e:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8009892:	ed2d 8b04 	vpush	{d8-d9}
 8009896:	d10c      	bne.n	80098b2 <__ieee754_asinf+0x2e>
 8009898:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009a0c <__ieee754_asinf+0x188>
 800989c:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8009a10 <__ieee754_asinf+0x18c>
 80098a0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80098a4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80098a8:	eeb0 0a67 	vmov.f32	s0, s15
 80098ac:	ecbd 8b04 	vpop	{d8-d9}
 80098b0:	bd38      	pop	{r3, r4, r5, pc}
 80098b2:	d904      	bls.n	80098be <__ieee754_asinf+0x3a>
 80098b4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80098b8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80098bc:	e7f6      	b.n	80098ac <__ieee754_asinf+0x28>
 80098be:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80098c2:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80098c6:	d20b      	bcs.n	80098e0 <__ieee754_asinf+0x5c>
 80098c8:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80098cc:	d252      	bcs.n	8009974 <__ieee754_asinf+0xf0>
 80098ce:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8009a14 <__ieee754_asinf+0x190>
 80098d2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80098d6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80098da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098de:	dce5      	bgt.n	80098ac <__ieee754_asinf+0x28>
 80098e0:	f7ff ffb9 	bl	8009856 <fabsf>
 80098e4:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80098e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80098ec:	ee28 8a27 	vmul.f32	s16, s16, s15
 80098f0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8009a18 <__ieee754_asinf+0x194>
 80098f4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8009a1c <__ieee754_asinf+0x198>
 80098f8:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 8009a20 <__ieee754_asinf+0x19c>
 80098fc:	eea8 7a27 	vfma.f32	s14, s16, s15
 8009900:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8009a24 <__ieee754_asinf+0x1a0>
 8009904:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009908:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8009a28 <__ieee754_asinf+0x1a4>
 800990c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8009910:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8009a2c <__ieee754_asinf+0x1a8>
 8009914:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009918:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009a30 <__ieee754_asinf+0x1ac>
 800991c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8009920:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8009a34 <__ieee754_asinf+0x1b0>
 8009924:	eee8 7a07 	vfma.f32	s15, s16, s14
 8009928:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8009a38 <__ieee754_asinf+0x1b4>
 800992c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8009930:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8009a3c <__ieee754_asinf+0x1b8>
 8009934:	eee7 7a08 	vfma.f32	s15, s14, s16
 8009938:	eeb0 0a48 	vmov.f32	s0, s16
 800993c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8009940:	f000 fd52 	bl	800a3e8 <__ieee754_sqrtf>
 8009944:	4b3e      	ldr	r3, [pc, #248]	@ (8009a40 <__ieee754_asinf+0x1bc>)
 8009946:	ee29 9a08 	vmul.f32	s18, s18, s16
 800994a:	429c      	cmp	r4, r3
 800994c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8009950:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009954:	d93d      	bls.n	80099d2 <__ieee754_asinf+0x14e>
 8009956:	eea0 0a06 	vfma.f32	s0, s0, s12
 800995a:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8009a44 <__ieee754_asinf+0x1c0>
 800995e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8009962:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8009a10 <__ieee754_asinf+0x18c>
 8009966:	ee30 0a67 	vsub.f32	s0, s0, s15
 800996a:	2d00      	cmp	r5, #0
 800996c:	bfd8      	it	le
 800996e:	eeb1 0a40 	vnegle.f32	s0, s0
 8009972:	e79b      	b.n	80098ac <__ieee754_asinf+0x28>
 8009974:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009978:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8009a1c <__ieee754_asinf+0x198>
 800997c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009a18 <__ieee754_asinf+0x194>
 8009980:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8009a30 <__ieee754_asinf+0x1ac>
 8009984:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009988:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009a24 <__ieee754_asinf+0x1a0>
 800998c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009990:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8009a28 <__ieee754_asinf+0x1a4>
 8009994:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009998:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8009a2c <__ieee754_asinf+0x1a8>
 800999c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80099a0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8009a20 <__ieee754_asinf+0x19c>
 80099a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80099a8:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8009a34 <__ieee754_asinf+0x1b0>
 80099ac:	eee7 6a86 	vfma.f32	s13, s15, s12
 80099b0:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8009a38 <__ieee754_asinf+0x1b4>
 80099b4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80099b8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8009a3c <__ieee754_asinf+0x1b8>
 80099bc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80099c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80099c4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80099c8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80099cc:	eea0 0a27 	vfma.f32	s0, s0, s15
 80099d0:	e76c      	b.n	80098ac <__ieee754_asinf+0x28>
 80099d2:	ee10 3a10 	vmov	r3, s0
 80099d6:	f36f 030b 	bfc	r3, #0, #12
 80099da:	ee07 3a10 	vmov	s14, r3
 80099de:	eea7 8a47 	vfms.f32	s16, s14, s14
 80099e2:	ee70 5a00 	vadd.f32	s11, s0, s0
 80099e6:	ee30 0a07 	vadd.f32	s0, s0, s14
 80099ea:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009a0c <__ieee754_asinf+0x188>
 80099ee:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80099f2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8009a48 <__ieee754_asinf+0x1c4>
 80099f6:	eee5 7a66 	vfms.f32	s15, s10, s13
 80099fa:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80099fe:	eeb0 6a40 	vmov.f32	s12, s0
 8009a02:	eea7 6a66 	vfms.f32	s12, s14, s13
 8009a06:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009a0a:	e7ac      	b.n	8009966 <__ieee754_asinf+0xe2>
 8009a0c:	b33bbd2e 	.word	0xb33bbd2e
 8009a10:	3fc90fdb 	.word	0x3fc90fdb
 8009a14:	7149f2ca 	.word	0x7149f2ca
 8009a18:	3a4f7f04 	.word	0x3a4f7f04
 8009a1c:	3811ef08 	.word	0x3811ef08
 8009a20:	3e2aaaab 	.word	0x3e2aaaab
 8009a24:	bd241146 	.word	0xbd241146
 8009a28:	3e4e0aa8 	.word	0x3e4e0aa8
 8009a2c:	bea6b090 	.word	0xbea6b090
 8009a30:	3d9dc62e 	.word	0x3d9dc62e
 8009a34:	bf303361 	.word	0xbf303361
 8009a38:	4001572d 	.word	0x4001572d
 8009a3c:	c019d139 	.word	0xc019d139
 8009a40:	3f799999 	.word	0x3f799999
 8009a44:	333bbd2e 	.word	0x333bbd2e
 8009a48:	3f490fdb 	.word	0x3f490fdb

08009a4c <__ieee754_atan2f>:
 8009a4c:	ee10 2a90 	vmov	r2, s1
 8009a50:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8009a54:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	eef0 7a40 	vmov.f32	s15, s0
 8009a5e:	d806      	bhi.n	8009a6e <__ieee754_atan2f+0x22>
 8009a60:	ee10 0a10 	vmov	r0, s0
 8009a64:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009a68:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009a6c:	d904      	bls.n	8009a78 <__ieee754_atan2f+0x2c>
 8009a6e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009a72:	eeb0 0a67 	vmov.f32	s0, s15
 8009a76:	bd10      	pop	{r4, pc}
 8009a78:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8009a7c:	d103      	bne.n	8009a86 <__ieee754_atan2f+0x3a>
 8009a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a82:	f000 bb51 	b.w	800a128 <atanf>
 8009a86:	1794      	asrs	r4, r2, #30
 8009a88:	f004 0402 	and.w	r4, r4, #2
 8009a8c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009a90:	b943      	cbnz	r3, 8009aa4 <__ieee754_atan2f+0x58>
 8009a92:	2c02      	cmp	r4, #2
 8009a94:	d05e      	beq.n	8009b54 <__ieee754_atan2f+0x108>
 8009a96:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009b68 <__ieee754_atan2f+0x11c>
 8009a9a:	2c03      	cmp	r4, #3
 8009a9c:	bf08      	it	eq
 8009a9e:	eef0 7a47 	vmoveq.f32	s15, s14
 8009aa2:	e7e6      	b.n	8009a72 <__ieee754_atan2f+0x26>
 8009aa4:	b941      	cbnz	r1, 8009ab8 <__ieee754_atan2f+0x6c>
 8009aa6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8009b6c <__ieee754_atan2f+0x120>
 8009aaa:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009b70 <__ieee754_atan2f+0x124>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	bfa8      	it	ge
 8009ab2:	eef0 7a47 	vmovge.f32	s15, s14
 8009ab6:	e7dc      	b.n	8009a72 <__ieee754_atan2f+0x26>
 8009ab8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009abc:	d110      	bne.n	8009ae0 <__ieee754_atan2f+0x94>
 8009abe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009ac2:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ac6:	d107      	bne.n	8009ad8 <__ieee754_atan2f+0x8c>
 8009ac8:	2c02      	cmp	r4, #2
 8009aca:	d846      	bhi.n	8009b5a <__ieee754_atan2f+0x10e>
 8009acc:	4b29      	ldr	r3, [pc, #164]	@ (8009b74 <__ieee754_atan2f+0x128>)
 8009ace:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009ad2:	edd3 7a00 	vldr	s15, [r3]
 8009ad6:	e7cc      	b.n	8009a72 <__ieee754_atan2f+0x26>
 8009ad8:	2c02      	cmp	r4, #2
 8009ada:	d841      	bhi.n	8009b60 <__ieee754_atan2f+0x114>
 8009adc:	4b26      	ldr	r3, [pc, #152]	@ (8009b78 <__ieee754_atan2f+0x12c>)
 8009ade:	e7f6      	b.n	8009ace <__ieee754_atan2f+0x82>
 8009ae0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009ae4:	d0df      	beq.n	8009aa6 <__ieee754_atan2f+0x5a>
 8009ae6:	1a5b      	subs	r3, r3, r1
 8009ae8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8009aec:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009af0:	da1a      	bge.n	8009b28 <__ieee754_atan2f+0xdc>
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	da01      	bge.n	8009afa <__ieee754_atan2f+0xae>
 8009af6:	313c      	adds	r1, #60	@ 0x3c
 8009af8:	db19      	blt.n	8009b2e <__ieee754_atan2f+0xe2>
 8009afa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009afe:	f7ff feaa 	bl	8009856 <fabsf>
 8009b02:	f000 fb11 	bl	800a128 <atanf>
 8009b06:	eef0 7a40 	vmov.f32	s15, s0
 8009b0a:	2c01      	cmp	r4, #1
 8009b0c:	d012      	beq.n	8009b34 <__ieee754_atan2f+0xe8>
 8009b0e:	2c02      	cmp	r4, #2
 8009b10:	d017      	beq.n	8009b42 <__ieee754_atan2f+0xf6>
 8009b12:	2c00      	cmp	r4, #0
 8009b14:	d0ad      	beq.n	8009a72 <__ieee754_atan2f+0x26>
 8009b16:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009b7c <__ieee754_atan2f+0x130>
 8009b1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b1e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009b80 <__ieee754_atan2f+0x134>
 8009b22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b26:	e7a4      	b.n	8009a72 <__ieee754_atan2f+0x26>
 8009b28:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8009b70 <__ieee754_atan2f+0x124>
 8009b2c:	e7ed      	b.n	8009b0a <__ieee754_atan2f+0xbe>
 8009b2e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009b84 <__ieee754_atan2f+0x138>
 8009b32:	e7ea      	b.n	8009b0a <__ieee754_atan2f+0xbe>
 8009b34:	ee17 3a90 	vmov	r3, s15
 8009b38:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009b3c:	ee07 3a90 	vmov	s15, r3
 8009b40:	e797      	b.n	8009a72 <__ieee754_atan2f+0x26>
 8009b42:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009b7c <__ieee754_atan2f+0x130>
 8009b46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b4a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8009b80 <__ieee754_atan2f+0x134>
 8009b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b52:	e78e      	b.n	8009a72 <__ieee754_atan2f+0x26>
 8009b54:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8009b80 <__ieee754_atan2f+0x134>
 8009b58:	e78b      	b.n	8009a72 <__ieee754_atan2f+0x26>
 8009b5a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8009b88 <__ieee754_atan2f+0x13c>
 8009b5e:	e788      	b.n	8009a72 <__ieee754_atan2f+0x26>
 8009b60:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009b84 <__ieee754_atan2f+0x138>
 8009b64:	e785      	b.n	8009a72 <__ieee754_atan2f+0x26>
 8009b66:	bf00      	nop
 8009b68:	c0490fdb 	.word	0xc0490fdb
 8009b6c:	bfc90fdb 	.word	0xbfc90fdb
 8009b70:	3fc90fdb 	.word	0x3fc90fdb
 8009b74:	0800a960 	.word	0x0800a960
 8009b78:	0800a954 	.word	0x0800a954
 8009b7c:	33bbbd2e 	.word	0x33bbbd2e
 8009b80:	40490fdb 	.word	0x40490fdb
 8009b84:	00000000 	.word	0x00000000
 8009b88:	3f490fdb 	.word	0x3f490fdb

08009b8c <__ieee754_powf>:
 8009b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b90:	ee10 4a90 	vmov	r4, s1
 8009b94:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8009b98:	ed2d 8b02 	vpush	{d8}
 8009b9c:	ee10 6a10 	vmov	r6, s0
 8009ba0:	eeb0 8a40 	vmov.f32	s16, s0
 8009ba4:	eef0 8a60 	vmov.f32	s17, s1
 8009ba8:	d10c      	bne.n	8009bc4 <__ieee754_powf+0x38>
 8009baa:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8009bae:	0076      	lsls	r6, r6, #1
 8009bb0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009bb4:	f240 8274 	bls.w	800a0a0 <__ieee754_powf+0x514>
 8009bb8:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009bbc:	ecbd 8b02 	vpop	{d8}
 8009bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8009bc8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009bcc:	d802      	bhi.n	8009bd4 <__ieee754_powf+0x48>
 8009bce:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009bd2:	d908      	bls.n	8009be6 <__ieee754_powf+0x5a>
 8009bd4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009bd8:	d1ee      	bne.n	8009bb8 <__ieee754_powf+0x2c>
 8009bda:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009bde:	0064      	lsls	r4, r4, #1
 8009be0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009be4:	e7e6      	b.n	8009bb4 <__ieee754_powf+0x28>
 8009be6:	2e00      	cmp	r6, #0
 8009be8:	da1f      	bge.n	8009c2a <__ieee754_powf+0x9e>
 8009bea:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8009bee:	f080 8260 	bcs.w	800a0b2 <__ieee754_powf+0x526>
 8009bf2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009bf6:	d32f      	bcc.n	8009c58 <__ieee754_powf+0xcc>
 8009bf8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8009bfc:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009c00:	fa49 f503 	asr.w	r5, r9, r3
 8009c04:	fa05 f303 	lsl.w	r3, r5, r3
 8009c08:	454b      	cmp	r3, r9
 8009c0a:	d123      	bne.n	8009c54 <__ieee754_powf+0xc8>
 8009c0c:	f005 0501 	and.w	r5, r5, #1
 8009c10:	f1c5 0502 	rsb	r5, r5, #2
 8009c14:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009c18:	d11f      	bne.n	8009c5a <__ieee754_powf+0xce>
 8009c1a:	2c00      	cmp	r4, #0
 8009c1c:	f280 8246 	bge.w	800a0ac <__ieee754_powf+0x520>
 8009c20:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009c24:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009c28:	e7c8      	b.n	8009bbc <__ieee754_powf+0x30>
 8009c2a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009c2e:	d111      	bne.n	8009c54 <__ieee754_powf+0xc8>
 8009c30:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009c34:	f000 8234 	beq.w	800a0a0 <__ieee754_powf+0x514>
 8009c38:	d906      	bls.n	8009c48 <__ieee754_powf+0xbc>
 8009c3a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8009f50 <__ieee754_powf+0x3c4>
 8009c3e:	2c00      	cmp	r4, #0
 8009c40:	bfa8      	it	ge
 8009c42:	eeb0 0a68 	vmovge.f32	s0, s17
 8009c46:	e7b9      	b.n	8009bbc <__ieee754_powf+0x30>
 8009c48:	2c00      	cmp	r4, #0
 8009c4a:	f280 822c 	bge.w	800a0a6 <__ieee754_powf+0x51a>
 8009c4e:	eeb1 0a68 	vneg.f32	s0, s17
 8009c52:	e7b3      	b.n	8009bbc <__ieee754_powf+0x30>
 8009c54:	2500      	movs	r5, #0
 8009c56:	e7dd      	b.n	8009c14 <__ieee754_powf+0x88>
 8009c58:	2500      	movs	r5, #0
 8009c5a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009c5e:	d102      	bne.n	8009c66 <__ieee754_powf+0xda>
 8009c60:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009c64:	e7aa      	b.n	8009bbc <__ieee754_powf+0x30>
 8009c66:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8009c6a:	f040 8227 	bne.w	800a0bc <__ieee754_powf+0x530>
 8009c6e:	2e00      	cmp	r6, #0
 8009c70:	f2c0 8224 	blt.w	800a0bc <__ieee754_powf+0x530>
 8009c74:	eeb0 0a48 	vmov.f32	s0, s16
 8009c78:	ecbd 8b02 	vpop	{d8}
 8009c7c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c80:	f000 bbb2 	b.w	800a3e8 <__ieee754_sqrtf>
 8009c84:	2d01      	cmp	r5, #1
 8009c86:	d199      	bne.n	8009bbc <__ieee754_powf+0x30>
 8009c88:	eeb1 0a40 	vneg.f32	s0, s0
 8009c8c:	e796      	b.n	8009bbc <__ieee754_powf+0x30>
 8009c8e:	0ff0      	lsrs	r0, r6, #31
 8009c90:	3801      	subs	r0, #1
 8009c92:	ea55 0300 	orrs.w	r3, r5, r0
 8009c96:	d104      	bne.n	8009ca2 <__ieee754_powf+0x116>
 8009c98:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009c9c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009ca0:	e78c      	b.n	8009bbc <__ieee754_powf+0x30>
 8009ca2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8009ca6:	d96d      	bls.n	8009d84 <__ieee754_powf+0x1f8>
 8009ca8:	4baa      	ldr	r3, [pc, #680]	@ (8009f54 <__ieee754_powf+0x3c8>)
 8009caa:	4598      	cmp	r8, r3
 8009cac:	d808      	bhi.n	8009cc0 <__ieee754_powf+0x134>
 8009cae:	2c00      	cmp	r4, #0
 8009cb0:	da0b      	bge.n	8009cca <__ieee754_powf+0x13e>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	ecbd 8b02 	vpop	{d8}
 8009cb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cbc:	f000 bb8e 	b.w	800a3dc <__math_oflowf>
 8009cc0:	4ba5      	ldr	r3, [pc, #660]	@ (8009f58 <__ieee754_powf+0x3cc>)
 8009cc2:	4598      	cmp	r8, r3
 8009cc4:	d908      	bls.n	8009cd8 <__ieee754_powf+0x14c>
 8009cc6:	2c00      	cmp	r4, #0
 8009cc8:	dcf3      	bgt.n	8009cb2 <__ieee754_powf+0x126>
 8009cca:	2000      	movs	r0, #0
 8009ccc:	ecbd 8b02 	vpop	{d8}
 8009cd0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd4:	f000 bb7c 	b.w	800a3d0 <__math_uflowf>
 8009cd8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009cdc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009ce0:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8009f5c <__ieee754_powf+0x3d0>
 8009ce4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8009ce8:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009cec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009cf0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009cf4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009cf8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8009f60 <__ieee754_powf+0x3d4>
 8009cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d00:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8009f64 <__ieee754_powf+0x3d8>
 8009d04:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009d08:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8009f68 <__ieee754_powf+0x3dc>
 8009d0c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009d10:	eeb0 7a67 	vmov.f32	s14, s15
 8009d14:	eea0 7a26 	vfma.f32	s14, s0, s13
 8009d18:	ee17 3a10 	vmov	r3, s14
 8009d1c:	f36f 030b 	bfc	r3, #0, #12
 8009d20:	ee07 3a10 	vmov	s14, r3
 8009d24:	eeb0 6a47 	vmov.f32	s12, s14
 8009d28:	eea0 6a66 	vfms.f32	s12, s0, s13
 8009d2c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009d30:	3d01      	subs	r5, #1
 8009d32:	4305      	orrs	r5, r0
 8009d34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d38:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009d3c:	f36f 040b 	bfc	r4, #0, #12
 8009d40:	bf18      	it	ne
 8009d42:	eeb0 8a66 	vmovne.f32	s16, s13
 8009d46:	ee06 4a90 	vmov	s13, r4
 8009d4a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009d4e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8009d52:	ee67 7a26 	vmul.f32	s15, s14, s13
 8009d56:	eee6 0a07 	vfma.f32	s1, s12, s14
 8009d5a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009d5e:	ee17 1a10 	vmov	r1, s14
 8009d62:	2900      	cmp	r1, #0
 8009d64:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009d68:	f340 80dd 	ble.w	8009f26 <__ieee754_powf+0x39a>
 8009d6c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8009d70:	f240 80ca 	bls.w	8009f08 <__ieee754_powf+0x37c>
 8009d74:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7c:	bf4c      	ite	mi
 8009d7e:	2001      	movmi	r0, #1
 8009d80:	2000      	movpl	r0, #0
 8009d82:	e797      	b.n	8009cb4 <__ieee754_powf+0x128>
 8009d84:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009d88:	bf01      	itttt	eq
 8009d8a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8009f6c <__ieee754_powf+0x3e0>
 8009d8e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009d92:	f06f 0317 	mvneq.w	r3, #23
 8009d96:	ee17 7a90 	vmoveq	r7, s15
 8009d9a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8009d9e:	bf18      	it	ne
 8009da0:	2300      	movne	r3, #0
 8009da2:	3a7f      	subs	r2, #127	@ 0x7f
 8009da4:	441a      	add	r2, r3
 8009da6:	4b72      	ldr	r3, [pc, #456]	@ (8009f70 <__ieee754_powf+0x3e4>)
 8009da8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8009dac:	429f      	cmp	r7, r3
 8009dae:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8009db2:	dd06      	ble.n	8009dc2 <__ieee754_powf+0x236>
 8009db4:	4b6f      	ldr	r3, [pc, #444]	@ (8009f74 <__ieee754_powf+0x3e8>)
 8009db6:	429f      	cmp	r7, r3
 8009db8:	f340 80a4 	ble.w	8009f04 <__ieee754_powf+0x378>
 8009dbc:	3201      	adds	r2, #1
 8009dbe:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8009dc2:	2600      	movs	r6, #0
 8009dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8009f78 <__ieee754_powf+0x3ec>)
 8009dc6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8009dca:	ee07 1a10 	vmov	s14, r1
 8009dce:	edd3 5a00 	vldr	s11, [r3]
 8009dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8009f7c <__ieee754_powf+0x3f0>)
 8009dd4:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009dd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ddc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009de0:	1049      	asrs	r1, r1, #1
 8009de2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8009de6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8009dea:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8009dee:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009df2:	ee07 1a90 	vmov	s15, r1
 8009df6:	ee26 5a24 	vmul.f32	s10, s12, s9
 8009dfa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009dfe:	ee15 7a10 	vmov	r7, s10
 8009e02:	401f      	ands	r7, r3
 8009e04:	ee06 7a90 	vmov	s13, r7
 8009e08:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009e0c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009e10:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009e14:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009e18:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009f80 <__ieee754_powf+0x3f4>
 8009e1c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8009f84 <__ieee754_powf+0x3f8>
 8009e20:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009e24:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8009f88 <__ieee754_powf+0x3fc>
 8009e28:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009e2c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8009f5c <__ieee754_powf+0x3d0>
 8009e30:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009e34:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8009f8c <__ieee754_powf+0x400>
 8009e38:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009e3c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8009f90 <__ieee754_powf+0x404>
 8009e40:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009e44:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009e48:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009e4c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009e50:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009e54:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8009e58:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009e5c:	eef0 5a67 	vmov.f32	s11, s15
 8009e60:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009e64:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009e68:	ee15 1a90 	vmov	r1, s11
 8009e6c:	4019      	ands	r1, r3
 8009e6e:	ee05 1a90 	vmov	s11, r1
 8009e72:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009e76:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e7e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009e82:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009e86:	eeb0 6a67 	vmov.f32	s12, s15
 8009e8a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009e8e:	ee16 1a10 	vmov	r1, s12
 8009e92:	4019      	ands	r1, r3
 8009e94:	ee06 1a10 	vmov	s12, r1
 8009e98:	eeb0 7a46 	vmov.f32	s14, s12
 8009e9c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009ea0:	493c      	ldr	r1, [pc, #240]	@ (8009f94 <__ieee754_powf+0x408>)
 8009ea2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8009ea6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009eaa:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009f98 <__ieee754_powf+0x40c>
 8009eae:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8009f9c <__ieee754_powf+0x410>
 8009eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009eb6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8009fa0 <__ieee754_powf+0x414>
 8009eba:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009ebe:	ed91 7a00 	vldr	s14, [r1]
 8009ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ec6:	ee07 2a10 	vmov	s14, r2
 8009eca:	4a36      	ldr	r2, [pc, #216]	@ (8009fa4 <__ieee754_powf+0x418>)
 8009ecc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009ed0:	eeb0 7a67 	vmov.f32	s14, s15
 8009ed4:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009ed8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8009edc:	ed92 5a00 	vldr	s10, [r2]
 8009ee0:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009ee4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009ee8:	ee17 2a10 	vmov	r2, s14
 8009eec:	401a      	ands	r2, r3
 8009eee:	ee07 2a10 	vmov	s14, r2
 8009ef2:	ee77 6a66 	vsub.f32	s13, s14, s13
 8009ef6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009efa:	eee6 6a65 	vfms.f32	s13, s12, s11
 8009efe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f02:	e715      	b.n	8009d30 <__ieee754_powf+0x1a4>
 8009f04:	2601      	movs	r6, #1
 8009f06:	e75d      	b.n	8009dc4 <__ieee754_powf+0x238>
 8009f08:	d152      	bne.n	8009fb0 <__ieee754_powf+0x424>
 8009f0a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009fa8 <__ieee754_powf+0x41c>
 8009f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f12:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009f16:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1e:	f73f af29 	bgt.w	8009d74 <__ieee754_powf+0x1e8>
 8009f22:	2386      	movs	r3, #134	@ 0x86
 8009f24:	e048      	b.n	8009fb8 <__ieee754_powf+0x42c>
 8009f26:	4a21      	ldr	r2, [pc, #132]	@ (8009fac <__ieee754_powf+0x420>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d907      	bls.n	8009f3c <__ieee754_powf+0x3b0>
 8009f2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f34:	bf4c      	ite	mi
 8009f36:	2001      	movmi	r0, #1
 8009f38:	2000      	movpl	r0, #0
 8009f3a:	e6c7      	b.n	8009ccc <__ieee754_powf+0x140>
 8009f3c:	d138      	bne.n	8009fb0 <__ieee754_powf+0x424>
 8009f3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f42:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f4a:	dbea      	blt.n	8009f22 <__ieee754_powf+0x396>
 8009f4c:	e7ee      	b.n	8009f2c <__ieee754_powf+0x3a0>
 8009f4e:	bf00      	nop
 8009f50:	00000000 	.word	0x00000000
 8009f54:	3f7ffff3 	.word	0x3f7ffff3
 8009f58:	3f800007 	.word	0x3f800007
 8009f5c:	3eaaaaab 	.word	0x3eaaaaab
 8009f60:	3fb8aa00 	.word	0x3fb8aa00
 8009f64:	3fb8aa3b 	.word	0x3fb8aa3b
 8009f68:	36eca570 	.word	0x36eca570
 8009f6c:	4b800000 	.word	0x4b800000
 8009f70:	001cc471 	.word	0x001cc471
 8009f74:	005db3d6 	.word	0x005db3d6
 8009f78:	0800a97c 	.word	0x0800a97c
 8009f7c:	fffff000 	.word	0xfffff000
 8009f80:	3e6c3255 	.word	0x3e6c3255
 8009f84:	3e53f142 	.word	0x3e53f142
 8009f88:	3e8ba305 	.word	0x3e8ba305
 8009f8c:	3edb6db7 	.word	0x3edb6db7
 8009f90:	3f19999a 	.word	0x3f19999a
 8009f94:	0800a96c 	.word	0x0800a96c
 8009f98:	3f76384f 	.word	0x3f76384f
 8009f9c:	3f763800 	.word	0x3f763800
 8009fa0:	369dc3a0 	.word	0x369dc3a0
 8009fa4:	0800a974 	.word	0x0800a974
 8009fa8:	3338aa3c 	.word	0x3338aa3c
 8009fac:	43160000 	.word	0x43160000
 8009fb0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009fb4:	d96f      	bls.n	800a096 <__ieee754_powf+0x50a>
 8009fb6:	15db      	asrs	r3, r3, #23
 8009fb8:	3b7e      	subs	r3, #126	@ 0x7e
 8009fba:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009fbe:	4118      	asrs	r0, r3
 8009fc0:	4408      	add	r0, r1
 8009fc2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009fc6:	4a4e      	ldr	r2, [pc, #312]	@ (800a100 <__ieee754_powf+0x574>)
 8009fc8:	3b7f      	subs	r3, #127	@ 0x7f
 8009fca:	411a      	asrs	r2, r3
 8009fcc:	4002      	ands	r2, r0
 8009fce:	ee07 2a10 	vmov	s14, r2
 8009fd2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8009fd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8009fda:	f1c3 0317 	rsb	r3, r3, #23
 8009fde:	4118      	asrs	r0, r3
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fe6:	bfb8      	it	lt
 8009fe8:	4240      	neglt	r0, r0
 8009fea:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8009fee:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800a104 <__ieee754_powf+0x578>
 8009ff2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800a108 <__ieee754_powf+0x57c>
 8009ff6:	ee16 3a90 	vmov	r3, s13
 8009ffa:	f36f 030b 	bfc	r3, #0, #12
 8009ffe:	ee06 3a90 	vmov	s13, r3
 800a002:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a006:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a00a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a00e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800a10c <__ieee754_powf+0x580>
 800a012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a016:	eee0 7a87 	vfma.f32	s15, s1, s14
 800a01a:	eeb0 7a67 	vmov.f32	s14, s15
 800a01e:	eea6 7a86 	vfma.f32	s14, s13, s12
 800a022:	eef0 5a47 	vmov.f32	s11, s14
 800a026:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800a02a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800a02e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a032:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800a110 <__ieee754_powf+0x584>
 800a036:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800a114 <__ieee754_powf+0x588>
 800a03a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800a03e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800a118 <__ieee754_powf+0x58c>
 800a042:	eee6 5a26 	vfma.f32	s11, s12, s13
 800a046:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800a11c <__ieee754_powf+0x590>
 800a04a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800a04e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a120 <__ieee754_powf+0x594>
 800a052:	eee6 5a26 	vfma.f32	s11, s12, s13
 800a056:	eeb0 6a47 	vmov.f32	s12, s14
 800a05a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800a05e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a062:	ee67 5a06 	vmul.f32	s11, s14, s12
 800a066:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a06a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800a06e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800a072:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a076:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a07a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a07e:	ee10 3a10 	vmov	r3, s0
 800a082:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a086:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a08a:	da06      	bge.n	800a09a <__ieee754_powf+0x50e>
 800a08c:	f000 f920 	bl	800a2d0 <scalbnf>
 800a090:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a094:	e592      	b.n	8009bbc <__ieee754_powf+0x30>
 800a096:	2000      	movs	r0, #0
 800a098:	e7a7      	b.n	8009fea <__ieee754_powf+0x45e>
 800a09a:	ee00 3a10 	vmov	s0, r3
 800a09e:	e7f7      	b.n	800a090 <__ieee754_powf+0x504>
 800a0a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a0a4:	e58a      	b.n	8009bbc <__ieee754_powf+0x30>
 800a0a6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800a124 <__ieee754_powf+0x598>
 800a0aa:	e587      	b.n	8009bbc <__ieee754_powf+0x30>
 800a0ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a0b0:	e584      	b.n	8009bbc <__ieee754_powf+0x30>
 800a0b2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a0b6:	f43f adbb 	beq.w	8009c30 <__ieee754_powf+0xa4>
 800a0ba:	2502      	movs	r5, #2
 800a0bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a0c0:	f7ff fbc9 	bl	8009856 <fabsf>
 800a0c4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a0c8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a0cc:	4647      	mov	r7, r8
 800a0ce:	d003      	beq.n	800a0d8 <__ieee754_powf+0x54c>
 800a0d0:	f1b8 0f00 	cmp.w	r8, #0
 800a0d4:	f47f addb 	bne.w	8009c8e <__ieee754_powf+0x102>
 800a0d8:	2c00      	cmp	r4, #0
 800a0da:	bfbc      	itt	lt
 800a0dc:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800a0e0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a0e4:	2e00      	cmp	r6, #0
 800a0e6:	f6bf ad69 	bge.w	8009bbc <__ieee754_powf+0x30>
 800a0ea:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a0ee:	ea58 0805 	orrs.w	r8, r8, r5
 800a0f2:	f47f adc7 	bne.w	8009c84 <__ieee754_powf+0xf8>
 800a0f6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a0fa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a0fe:	e55d      	b.n	8009bbc <__ieee754_powf+0x30>
 800a100:	ff800000 	.word	0xff800000
 800a104:	3f317218 	.word	0x3f317218
 800a108:	3f317200 	.word	0x3f317200
 800a10c:	35bfbe8c 	.word	0x35bfbe8c
 800a110:	b5ddea0e 	.word	0xb5ddea0e
 800a114:	3331bb4c 	.word	0x3331bb4c
 800a118:	388ab355 	.word	0x388ab355
 800a11c:	bb360b61 	.word	0xbb360b61
 800a120:	3e2aaaab 	.word	0x3e2aaaab
 800a124:	00000000 	.word	0x00000000

0800a128 <atanf>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	ee10 5a10 	vmov	r5, s0
 800a12e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a132:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800a136:	eef0 7a40 	vmov.f32	s15, s0
 800a13a:	d310      	bcc.n	800a15e <atanf+0x36>
 800a13c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800a140:	d904      	bls.n	800a14c <atanf+0x24>
 800a142:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a146:	eeb0 0a67 	vmov.f32	s0, s15
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800a284 <atanf+0x15c>
 800a150:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800a288 <atanf+0x160>
 800a154:	2d00      	cmp	r5, #0
 800a156:	bfc8      	it	gt
 800a158:	eef0 7a47 	vmovgt.f32	s15, s14
 800a15c:	e7f3      	b.n	800a146 <atanf+0x1e>
 800a15e:	4b4b      	ldr	r3, [pc, #300]	@ (800a28c <atanf+0x164>)
 800a160:	429c      	cmp	r4, r3
 800a162:	d810      	bhi.n	800a186 <atanf+0x5e>
 800a164:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800a168:	d20a      	bcs.n	800a180 <atanf+0x58>
 800a16a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800a290 <atanf+0x168>
 800a16e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a176:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17e:	dce2      	bgt.n	800a146 <atanf+0x1e>
 800a180:	f04f 33ff 	mov.w	r3, #4294967295
 800a184:	e013      	b.n	800a1ae <atanf+0x86>
 800a186:	f7ff fb66 	bl	8009856 <fabsf>
 800a18a:	4b42      	ldr	r3, [pc, #264]	@ (800a294 <atanf+0x16c>)
 800a18c:	429c      	cmp	r4, r3
 800a18e:	d84f      	bhi.n	800a230 <atanf+0x108>
 800a190:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800a194:	429c      	cmp	r4, r3
 800a196:	d841      	bhi.n	800a21c <atanf+0xf4>
 800a198:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800a19c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a1a0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a1aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a1b4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800a298 <atanf+0x170>
 800a1b8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800a29c <atanf+0x174>
 800a1bc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800a2a0 <atanf+0x178>
 800a1c0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a1c4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a1c8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800a2a4 <atanf+0x17c>
 800a1cc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a1d0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800a2a8 <atanf+0x180>
 800a1d4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a1d8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a2ac <atanf+0x184>
 800a1dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a1e0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a2b0 <atanf+0x188>
 800a1e4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a1e8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800a2b4 <atanf+0x18c>
 800a1ec:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a1f0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a2b8 <atanf+0x190>
 800a1f4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a1f8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800a2bc <atanf+0x194>
 800a1fc:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a200:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800a2c0 <atanf+0x198>
 800a204:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a208:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a20c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a210:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a214:	d121      	bne.n	800a25a <atanf+0x132>
 800a216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a21a:	e794      	b.n	800a146 <atanf+0x1e>
 800a21c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a220:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a224:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a228:	2301      	movs	r3, #1
 800a22a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a22e:	e7be      	b.n	800a1ae <atanf+0x86>
 800a230:	4b24      	ldr	r3, [pc, #144]	@ (800a2c4 <atanf+0x19c>)
 800a232:	429c      	cmp	r4, r3
 800a234:	d80b      	bhi.n	800a24e <atanf+0x126>
 800a236:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800a23a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a23e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a242:	2302      	movs	r3, #2
 800a244:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a24c:	e7af      	b.n	800a1ae <atanf+0x86>
 800a24e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a252:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a256:	2303      	movs	r3, #3
 800a258:	e7a9      	b.n	800a1ae <atanf+0x86>
 800a25a:	4a1b      	ldr	r2, [pc, #108]	@ (800a2c8 <atanf+0x1a0>)
 800a25c:	491b      	ldr	r1, [pc, #108]	@ (800a2cc <atanf+0x1a4>)
 800a25e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a262:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a266:	edd3 6a00 	vldr	s13, [r3]
 800a26a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a26e:	2d00      	cmp	r5, #0
 800a270:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a274:	edd2 7a00 	vldr	s15, [r2]
 800a278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a27c:	bfb8      	it	lt
 800a27e:	eef1 7a67 	vneglt.f32	s15, s15
 800a282:	e760      	b.n	800a146 <atanf+0x1e>
 800a284:	bfc90fdb 	.word	0xbfc90fdb
 800a288:	3fc90fdb 	.word	0x3fc90fdb
 800a28c:	3edfffff 	.word	0x3edfffff
 800a290:	7149f2ca 	.word	0x7149f2ca
 800a294:	3f97ffff 	.word	0x3f97ffff
 800a298:	3c8569d7 	.word	0x3c8569d7
 800a29c:	3d4bda59 	.word	0x3d4bda59
 800a2a0:	bd6ef16b 	.word	0xbd6ef16b
 800a2a4:	3d886b35 	.word	0x3d886b35
 800a2a8:	3dba2e6e 	.word	0x3dba2e6e
 800a2ac:	3e124925 	.word	0x3e124925
 800a2b0:	3eaaaaab 	.word	0x3eaaaaab
 800a2b4:	bd15a221 	.word	0xbd15a221
 800a2b8:	bd9d8795 	.word	0xbd9d8795
 800a2bc:	bde38e38 	.word	0xbde38e38
 800a2c0:	be4ccccd 	.word	0xbe4ccccd
 800a2c4:	401bffff 	.word	0x401bffff
 800a2c8:	0800a994 	.word	0x0800a994
 800a2cc:	0800a984 	.word	0x0800a984

0800a2d0 <scalbnf>:
 800a2d0:	ee10 3a10 	vmov	r3, s0
 800a2d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a2d8:	d02b      	beq.n	800a332 <scalbnf+0x62>
 800a2da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a2de:	d302      	bcc.n	800a2e6 <scalbnf+0x16>
 800a2e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a2e4:	4770      	bx	lr
 800a2e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a2ea:	d123      	bne.n	800a334 <scalbnf+0x64>
 800a2ec:	4b24      	ldr	r3, [pc, #144]	@ (800a380 <scalbnf+0xb0>)
 800a2ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a384 <scalbnf+0xb4>
 800a2f2:	4298      	cmp	r0, r3
 800a2f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a2f8:	db17      	blt.n	800a32a <scalbnf+0x5a>
 800a2fa:	ee10 3a10 	vmov	r3, s0
 800a2fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a302:	3a19      	subs	r2, #25
 800a304:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a308:	4288      	cmp	r0, r1
 800a30a:	dd15      	ble.n	800a338 <scalbnf+0x68>
 800a30c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a388 <scalbnf+0xb8>
 800a310:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a38c <scalbnf+0xbc>
 800a314:	ee10 3a10 	vmov	r3, s0
 800a318:	eeb0 7a67 	vmov.f32	s14, s15
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	bfb8      	it	lt
 800a320:	eef0 7a66 	vmovlt.f32	s15, s13
 800a324:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a328:	4770      	bx	lr
 800a32a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a390 <scalbnf+0xc0>
 800a32e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a332:	4770      	bx	lr
 800a334:	0dd2      	lsrs	r2, r2, #23
 800a336:	e7e5      	b.n	800a304 <scalbnf+0x34>
 800a338:	4410      	add	r0, r2
 800a33a:	28fe      	cmp	r0, #254	@ 0xfe
 800a33c:	dce6      	bgt.n	800a30c <scalbnf+0x3c>
 800a33e:	2800      	cmp	r0, #0
 800a340:	dd06      	ble.n	800a350 <scalbnf+0x80>
 800a342:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a346:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a34a:	ee00 3a10 	vmov	s0, r3
 800a34e:	4770      	bx	lr
 800a350:	f110 0f16 	cmn.w	r0, #22
 800a354:	da09      	bge.n	800a36a <scalbnf+0x9a>
 800a356:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a390 <scalbnf+0xc0>
 800a35a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a394 <scalbnf+0xc4>
 800a35e:	ee10 3a10 	vmov	r3, s0
 800a362:	eeb0 7a67 	vmov.f32	s14, s15
 800a366:	2b00      	cmp	r3, #0
 800a368:	e7d9      	b.n	800a31e <scalbnf+0x4e>
 800a36a:	3019      	adds	r0, #25
 800a36c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a370:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a374:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a398 <scalbnf+0xc8>
 800a378:	ee07 3a90 	vmov	s15, r3
 800a37c:	e7d7      	b.n	800a32e <scalbnf+0x5e>
 800a37e:	bf00      	nop
 800a380:	ffff3cb0 	.word	0xffff3cb0
 800a384:	4c000000 	.word	0x4c000000
 800a388:	7149f2ca 	.word	0x7149f2ca
 800a38c:	f149f2ca 	.word	0xf149f2ca
 800a390:	0da24260 	.word	0x0da24260
 800a394:	8da24260 	.word	0x8da24260
 800a398:	33000000 	.word	0x33000000

0800a39c <with_errnof>:
 800a39c:	b510      	push	{r4, lr}
 800a39e:	ed2d 8b02 	vpush	{d8}
 800a3a2:	eeb0 8a40 	vmov.f32	s16, s0
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	f7fd fb90 	bl	8007acc <__errno>
 800a3ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a3b0:	ecbd 8b02 	vpop	{d8}
 800a3b4:	6004      	str	r4, [r0, #0]
 800a3b6:	bd10      	pop	{r4, pc}

0800a3b8 <xflowf>:
 800a3b8:	b130      	cbz	r0, 800a3c8 <xflowf+0x10>
 800a3ba:	eef1 7a40 	vneg.f32	s15, s0
 800a3be:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a3c2:	2022      	movs	r0, #34	@ 0x22
 800a3c4:	f7ff bfea 	b.w	800a39c <with_errnof>
 800a3c8:	eef0 7a40 	vmov.f32	s15, s0
 800a3cc:	e7f7      	b.n	800a3be <xflowf+0x6>
	...

0800a3d0 <__math_uflowf>:
 800a3d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a3d8 <__math_uflowf+0x8>
 800a3d4:	f7ff bff0 	b.w	800a3b8 <xflowf>
 800a3d8:	10000000 	.word	0x10000000

0800a3dc <__math_oflowf>:
 800a3dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a3e4 <__math_oflowf+0x8>
 800a3e0:	f7ff bfea 	b.w	800a3b8 <xflowf>
 800a3e4:	70000000 	.word	0x70000000

0800a3e8 <__ieee754_sqrtf>:
 800a3e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a3ec:	4770      	bx	lr
	...

0800a3f0 <_init>:
 800a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f2:	bf00      	nop
 800a3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f6:	bc08      	pop	{r3}
 800a3f8:	469e      	mov	lr, r3
 800a3fa:	4770      	bx	lr

0800a3fc <_fini>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	bf00      	nop
 800a400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a402:	bc08      	pop	{r3}
 800a404:	469e      	mov	lr, r3
 800a406:	4770      	bx	lr
