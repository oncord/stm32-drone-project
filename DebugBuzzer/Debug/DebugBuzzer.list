
DebugBuzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f48  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080020d0  080020d0  000030d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020f0  080020f0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080020f0  080020f0  000030f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020f8  080020f8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020f8  080020f8  000030f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020fc  080020fc  000030fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002100  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004e51  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001129  00000000  00000000  00008e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b0  00000000  00000000  00009fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000042a  00000000  00000000  0000a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f3bc  00000000  00000000  0000a992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005fce  00000000  00000000  00029d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000befcb  00000000  00000000  0002fd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eece7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001638  00000000  00000000  000eed2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  000f0364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080020b8 	.word	0x080020b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080020b8 	.word	0x080020b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f043 0201 	orr.w	r2, r3, #1
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	601a      	str	r2, [r3, #0]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6a1a      	ldr	r2, [r3, #32]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	431a      	orrs	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	621a      	str	r2, [r3, #32]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6a1a      	ldr	r2, [r3, #32]
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	43db      	mvns	r3, r3
 8000568:	401a      	ands	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	621a      	str	r2, [r3, #32]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d01c      	beq.n	80005c6 <LL_TIM_OC_EnableFast+0x4a>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d017      	beq.n	80005c2 <LL_TIM_OC_EnableFast+0x46>
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b10      	cmp	r3, #16
 8000596:	d012      	beq.n	80005be <LL_TIM_OC_EnableFast+0x42>
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2b40      	cmp	r3, #64	@ 0x40
 800059c:	d00d      	beq.n	80005ba <LL_TIM_OC_EnableFast+0x3e>
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80005a4:	d007      	beq.n	80005b6 <LL_TIM_OC_EnableFast+0x3a>
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005ac:	d101      	bne.n	80005b2 <LL_TIM_OC_EnableFast+0x36>
 80005ae:	2305      	movs	r3, #5
 80005b0:	e00a      	b.n	80005c8 <LL_TIM_OC_EnableFast+0x4c>
 80005b2:	2306      	movs	r3, #6
 80005b4:	e008      	b.n	80005c8 <LL_TIM_OC_EnableFast+0x4c>
 80005b6:	2304      	movs	r3, #4
 80005b8:	e006      	b.n	80005c8 <LL_TIM_OC_EnableFast+0x4c>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e004      	b.n	80005c8 <LL_TIM_OC_EnableFast+0x4c>
 80005be:	2302      	movs	r3, #2
 80005c0:	e002      	b.n	80005c8 <LL_TIM_OC_EnableFast+0x4c>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <LL_TIM_OC_EnableFast+0x4c>
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3318      	adds	r3, #24
 80005ce:	4619      	mov	r1, r3
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4a0a      	ldr	r2, [pc, #40]	@ (80005fc <LL_TIM_OC_EnableFast+0x80>)
 80005d4:	5cd3      	ldrb	r3, [r2, r3]
 80005d6:	440b      	add	r3, r1
 80005d8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4907      	ldr	r1, [pc, #28]	@ (8000600 <LL_TIM_OC_EnableFast+0x84>)
 80005e2:	5ccb      	ldrb	r3, [r1, r3]
 80005e4:	4619      	mov	r1, r3
 80005e6:	2304      	movs	r3, #4
 80005e8:	408b      	lsls	r3, r1
 80005ea:	431a      	orrs	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	601a      	str	r2, [r3, #0]

}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	080020d0 	.word	0x080020d0
 8000600:	080020d8 	.word	0x080020d8

08000604 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d01c      	beq.n	800064e <LL_TIM_OC_EnablePreload+0x4a>
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b04      	cmp	r3, #4
 8000618:	d017      	beq.n	800064a <LL_TIM_OC_EnablePreload+0x46>
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	2b10      	cmp	r3, #16
 800061e:	d012      	beq.n	8000646 <LL_TIM_OC_EnablePreload+0x42>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2b40      	cmp	r3, #64	@ 0x40
 8000624:	d00d      	beq.n	8000642 <LL_TIM_OC_EnablePreload+0x3e>
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800062c:	d007      	beq.n	800063e <LL_TIM_OC_EnablePreload+0x3a>
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000634:	d101      	bne.n	800063a <LL_TIM_OC_EnablePreload+0x36>
 8000636:	2305      	movs	r3, #5
 8000638:	e00a      	b.n	8000650 <LL_TIM_OC_EnablePreload+0x4c>
 800063a:	2306      	movs	r3, #6
 800063c:	e008      	b.n	8000650 <LL_TIM_OC_EnablePreload+0x4c>
 800063e:	2304      	movs	r3, #4
 8000640:	e006      	b.n	8000650 <LL_TIM_OC_EnablePreload+0x4c>
 8000642:	2303      	movs	r3, #3
 8000644:	e004      	b.n	8000650 <LL_TIM_OC_EnablePreload+0x4c>
 8000646:	2302      	movs	r3, #2
 8000648:	e002      	b.n	8000650 <LL_TIM_OC_EnablePreload+0x4c>
 800064a:	2301      	movs	r3, #1
 800064c:	e000      	b.n	8000650 <LL_TIM_OC_EnablePreload+0x4c>
 800064e:	2300      	movs	r3, #0
 8000650:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3318      	adds	r3, #24
 8000656:	4619      	mov	r1, r3
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <LL_TIM_OC_EnablePreload+0x80>)
 800065c:	5cd3      	ldrb	r3, [r2, r3]
 800065e:	440b      	add	r3, r1
 8000660:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	4907      	ldr	r1, [pc, #28]	@ (8000688 <LL_TIM_OC_EnablePreload+0x84>)
 800066a:	5ccb      	ldrb	r3, [r1, r3]
 800066c:	4619      	mov	r1, r3
 800066e:	2308      	movs	r3, #8
 8000670:	408b      	lsls	r3, r1
 8000672:	431a      	orrs	r2, r3
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	601a      	str	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	080020d0 	.word	0x080020d0
 8000688:	080020d8 	.word	0x080020d8

0800068c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800069e:	f023 0307 	bic.w	r3, r3, #7
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	609a      	str	r2, [r3, #8]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	431a      	orrs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	605a      	str	r2, [r3, #4]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	609a      	str	r2, [r3, #8]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	041a      	lsls	r2, r3, #16
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	619a      	str	r2, [r3, #24]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000728:	4907      	ldr	r1, [pc, #28]	@ (8000748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4313      	orrs	r3, r2
 800072e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4013      	ands	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800073a:	68fb      	ldr	r3, [r7, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	40023800 	.word	0x40023800

0800074c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000758:	4907      	ldr	r1, [pc, #28]	@ (8000778 <LL_APB1_GRP1_EnableClock+0x2c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000762:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4013      	ands	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40023800 	.word	0x40023800

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 f9d0 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f82a 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f000 f904 	bl	8000994 <MX_GPIO_Init>
  MX_TIM3_Init();
 800078c:	f000 f890 	bl	80008b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8000790:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000794:	4810      	ldr	r0, [pc, #64]	@ (80007d8 <main+0x5c>)
 8000796:	f7ff fecd 	bl	8000534 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 800079a:	480f      	ldr	r0, [pc, #60]	@ (80007d8 <main+0x5c>)
 800079c:	f7ff feaa 	bl	80004f4 <LL_TIM_EnableCounter>
  TIM3->PSC = 3000;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <main+0x5c>)
 80007a2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80007a6:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 80007a8:	2064      	movs	r0, #100	@ 0x64
 80007aa:	f000 fa2d 	bl	8000c08 <HAL_Delay>
  TIM3->PSC = 2000;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <main+0x5c>)
 80007b0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80007b4:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 80007b6:	2064      	movs	r0, #100	@ 0x64
 80007b8:	f000 fa26 	bl	8000c08 <HAL_Delay>
  TIM3->PSC = 500;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <main+0x5c>)
 80007be:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007c2:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 80007c4:	2064      	movs	r0, #100	@ 0x64
 80007c6:	f000 fa1f 	bl	8000c08 <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80007ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ce:	4802      	ldr	r0, [pc, #8]	@ (80007d8 <main+0x5c>)
 80007d0:	f7ff fec1 	bl	8000556 <LL_TIM_CC_DisableChannel>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <main+0x58>
 80007d8:	40000400 	.word	0x40000400

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b094      	sub	sp, #80	@ 0x50
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	2230      	movs	r2, #48	@ 0x30
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fc38 	bl	8002060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <SystemClock_Config+0xcc>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	4a27      	ldr	r2, [pc, #156]	@ (80008a8 <SystemClock_Config+0xcc>)
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <SystemClock_Config+0xcc>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <SystemClock_Config+0xd0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <SystemClock_Config+0xd0>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <SystemClock_Config+0xd0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000846:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800084c:	2304      	movs	r3, #4
 800084e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000850:	23a8      	movs	r3, #168	@ 0xa8
 8000852:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000858:	2304      	movs	r3, #4
 800085a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fadb 	bl	8000e1c <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800086c:	f000 f8c0 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	2302      	movs	r3, #2
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800087c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000886:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2105      	movs	r1, #5
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fd3c 	bl	800130c <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800089a:	f000 f8a9 	bl	80009f0 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	@ 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80008b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2220      	movs	r2, #32
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fbc6 	bl	8002060 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
 80008e2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f7ff ff31 	bl	800074c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 80008ea:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80008ee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80008f0:	2300      	movs	r3, #0
 80008f2:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20;
 80008f4:	2314      	movs	r3, #20
 80008f6:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80008fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000900:	4619      	mov	r1, r3
 8000902:	4822      	ldr	r0, [pc, #136]	@ (800098c <MX_TIM3_Init+0xdc>)
 8000904:	f001 f92c 	bl	8001b60 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8000908:	4820      	ldr	r0, [pc, #128]	@ (800098c <MX_TIM3_Init+0xdc>)
 800090a:	f7ff fe03 	bl	8000514 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800090e:	2100      	movs	r1, #0
 8000910:	481e      	ldr	r0, [pc, #120]	@ (800098c <MX_TIM3_Init+0xdc>)
 8000912:	f7ff febb 	bl	800068c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8000916:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800091a:	481c      	ldr	r0, [pc, #112]	@ (800098c <MX_TIM3_Init+0xdc>)
 800091c:	f7ff fe72 	bl	8000604 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000920:	2360      	movs	r3, #96	@ 0x60
 8000922:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 800092c:	230a      	movs	r3, #10
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	461a      	mov	r2, r3
 800093a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800093e:	4813      	ldr	r0, [pc, #76]	@ (800098c <MX_TIM3_Init+0xdc>)
 8000940:	f001 f9a8 	bl	8001c94 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8000944:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000948:	4810      	ldr	r0, [pc, #64]	@ (800098c <MX_TIM3_Init+0xdc>)
 800094a:	f7ff fe17 	bl	800057c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800094e:	2100      	movs	r1, #0
 8000950:	480e      	ldr	r0, [pc, #56]	@ (800098c <MX_TIM3_Init+0xdc>)
 8000952:	f7ff feb0 	bl	80006b6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000956:	480d      	ldr	r0, [pc, #52]	@ (800098c <MX_TIM3_Init+0xdc>)
 8000958:	f7ff fec0 	bl	80006dc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff fedd 	bl	800071c <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB1   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000962:	2302      	movs	r3, #2
 8000964:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000966:	2302      	movs	r3, #2
 8000968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_TIM3_Init+0xe0>)
 8000980:	f000 fffb 	bl	800197a <LL_GPIO_Init>

}
 8000984:	bf00      	nop
 8000986:	3750      	adds	r7, #80	@ 0x50
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40000400 	.word	0x40000400
 8000990:	40020400 	.word	0x40020400

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
 80009a8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80009aa:	2080      	movs	r0, #128	@ 0x80
 80009ac:	f7ff feb6 	bl	800071c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80009b0:	2004      	movs	r0, #4
 80009b2:	f7ff feb3 	bl	800071c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff feb0 	bl	800071c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2);
 80009bc:	2107      	movs	r1, #7
 80009be:	480b      	ldr	r0, [pc, #44]	@ (80009ec <MX_GPIO_Init+0x58>)
 80009c0:	f7ff fe9c 	bl	80006fc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 80009c4:	2307      	movs	r3, #7
 80009c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009c8:	2301      	movs	r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <MX_GPIO_Init+0x58>)
 80009de:	f000 ffcc 	bl	800197a <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40020800 	.word	0x40020800

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <Error_Handler+0x8>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <NMI_Handler+0x4>

08000a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <MemManage_Handler+0x4>

08000a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa2:	f000 f891 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ad4:	f7ff ffea 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f001 fab7 	bl	8002070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fe3b 	bl	800077c <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b14:	08002100 	.word	0x08002100
  ldr r2, =_sbss
 8000b18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b1c:	2000002c 	.word	0x2000002c

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <HAL_Init+0x40>)
 8000b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b34:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_Init+0x40>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_Init+0x40>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f931 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	200f      	movs	r0, #15
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff ff50 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f93b 	bl	8000e02 <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f911 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	@ (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000028 	.word	0x20000028

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000028 	.word	0x20000028

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff ffee 	bl	8000bf0 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_Delay+0x44>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffde 	bl	8000bf0 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff47 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff5c 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffb0 	bl	8000d70 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e267      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d075      	beq.n	8000f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000e3a:	4b88      	ldr	r3, [pc, #544]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d00c      	beq.n	8000e60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e46:	4b85      	ldr	r3, [pc, #532]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d112      	bne.n	8000e78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e52:	4b82      	ldr	r3, [pc, #520]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e5e:	d10b      	bne.n	8000e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e60:	4b7e      	ldr	r3, [pc, #504]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d05b      	beq.n	8000f24 <HAL_RCC_OscConfig+0x108>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d157      	bne.n	8000f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e242      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e80:	d106      	bne.n	8000e90 <HAL_RCC_OscConfig+0x74>
 8000e82:	4b76      	ldr	r3, [pc, #472]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a75      	ldr	r2, [pc, #468]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e01d      	b.n	8000ecc <HAL_RCC_OscConfig+0xb0>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x98>
 8000e9a:	4b70      	ldr	r3, [pc, #448]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a6f      	ldr	r2, [pc, #444]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a6c      	ldr	r2, [pc, #432]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e00b      	b.n	8000ecc <HAL_RCC_OscConfig+0xb0>
 8000eb4:	4b69      	ldr	r3, [pc, #420]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a68      	ldr	r2, [pc, #416]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b66      	ldr	r3, [pc, #408]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a65      	ldr	r2, [pc, #404]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d013      	beq.n	8000efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fe8c 	bl	8000bf0 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fe88 	bl	8000bf0 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b64      	cmp	r3, #100	@ 0x64
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e207      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eee:	4b5b      	ldr	r3, [pc, #364]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0xc0>
 8000efa:	e014      	b.n	8000f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fe78 	bl	8000bf0 <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f02:	e008      	b.n	8000f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f04:	f7ff fe74 	bl	8000bf0 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b64      	cmp	r3, #100	@ 0x64
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e1f3      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	4b51      	ldr	r3, [pc, #324]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f0      	bne.n	8000f04 <HAL_RCC_OscConfig+0xe8>
 8000f22:	e000      	b.n	8000f26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d063      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f32:	4b4a      	ldr	r3, [pc, #296]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d00b      	beq.n	8000f56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f3e:	4b47      	ldr	r3, [pc, #284]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d11c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f4a:	4b44      	ldr	r3, [pc, #272]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d116      	bne.n	8000f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f56:	4b41      	ldr	r3, [pc, #260]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d005      	beq.n	8000f6e <HAL_RCC_OscConfig+0x152>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d001      	beq.n	8000f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e1c7      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4937      	ldr	r1, [pc, #220]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f82:	e03a      	b.n	8000ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d020      	beq.n	8000fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f8c:	4b34      	ldr	r3, [pc, #208]	@ (8001060 <HAL_RCC_OscConfig+0x244>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f92:	f7ff fe2d 	bl	8000bf0 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9a:	f7ff fe29 	bl	8000bf0 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e1a8      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fac:	4b2b      	ldr	r3, [pc, #172]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f0      	beq.n	8000f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb8:	4b28      	ldr	r3, [pc, #160]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4925      	ldr	r1, [pc, #148]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	600b      	str	r3, [r1, #0]
 8000fcc:	e015      	b.n	8000ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fce:	4b24      	ldr	r3, [pc, #144]	@ (8001060 <HAL_RCC_OscConfig+0x244>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fe0c 	bl	8000bf0 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fe08 	bl	8000bf0 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e187      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fee:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b00      	cmp	r3, #0
 8001004:	d036      	beq.n	8001074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d016      	beq.n	800103c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_RCC_OscConfig+0x248>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001014:	f7ff fdec 	bl	8000bf0 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fde8 	bl	8000bf0 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e167      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102e:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <HAL_RCC_OscConfig+0x240>)
 8001030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0x200>
 800103a:	e01b      	b.n	8001074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_RCC_OscConfig+0x248>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001042:	f7ff fdd5 	bl	8000bf0 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001048:	e00e      	b.n	8001068 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800104a:	f7ff fdd1 	bl	8000bf0 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d907      	bls.n	8001068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e150      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
 800105c:	40023800 	.word	0x40023800
 8001060:	42470000 	.word	0x42470000
 8001064:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001068:	4b88      	ldr	r3, [pc, #544]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 800106a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1ea      	bne.n	800104a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 8097 	beq.w	80011b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001086:	4b81      	ldr	r3, [pc, #516]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10f      	bne.n	80010b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b7d      	ldr	r3, [pc, #500]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	4a7c      	ldr	r2, [pc, #496]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a2:	4b7a      	ldr	r3, [pc, #488]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ae:	2301      	movs	r3, #1
 80010b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b2:	4b77      	ldr	r3, [pc, #476]	@ (8001290 <HAL_RCC_OscConfig+0x474>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d118      	bne.n	80010f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010be:	4b74      	ldr	r3, [pc, #464]	@ (8001290 <HAL_RCC_OscConfig+0x474>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a73      	ldr	r2, [pc, #460]	@ (8001290 <HAL_RCC_OscConfig+0x474>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ca:	f7ff fd91 	bl	8000bf0 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d2:	f7ff fd8d 	bl	8000bf0 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e10c      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001290 <HAL_RCC_OscConfig+0x474>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d106      	bne.n	8001106 <HAL_RCC_OscConfig+0x2ea>
 80010f8:	4b64      	ldr	r3, [pc, #400]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 80010fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010fc:	4a63      	ldr	r2, [pc, #396]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6713      	str	r3, [r2, #112]	@ 0x70
 8001104:	e01c      	b.n	8001140 <HAL_RCC_OscConfig+0x324>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b05      	cmp	r3, #5
 800110c:	d10c      	bne.n	8001128 <HAL_RCC_OscConfig+0x30c>
 800110e:	4b5f      	ldr	r3, [pc, #380]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001112:	4a5e      	ldr	r2, [pc, #376]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6713      	str	r3, [r2, #112]	@ 0x70
 800111a:	4b5c      	ldr	r3, [pc, #368]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 800111c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800111e:	4a5b      	ldr	r2, [pc, #364]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6713      	str	r3, [r2, #112]	@ 0x70
 8001126:	e00b      	b.n	8001140 <HAL_RCC_OscConfig+0x324>
 8001128:	4b58      	ldr	r3, [pc, #352]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 800112a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800112c:	4a57      	ldr	r2, [pc, #348]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	6713      	str	r3, [r2, #112]	@ 0x70
 8001134:	4b55      	ldr	r3, [pc, #340]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001138:	4a54      	ldr	r2, [pc, #336]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 800113a:	f023 0304 	bic.w	r3, r3, #4
 800113e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d015      	beq.n	8001174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001148:	f7ff fd52 	bl	8000bf0 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114e:	e00a      	b.n	8001166 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001150:	f7ff fd4e 	bl	8000bf0 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e0cb      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001166:	4b49      	ldr	r3, [pc, #292]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0ee      	beq.n	8001150 <HAL_RCC_OscConfig+0x334>
 8001172:	e014      	b.n	800119e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fd3c 	bl	8000bf0 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117a:	e00a      	b.n	8001192 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117c:	f7ff fd38 	bl	8000bf0 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800118a:	4293      	cmp	r3, r2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e0b5      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001192:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ee      	bne.n	800117c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a4:	4b39      	ldr	r3, [pc, #228]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	4a38      	ldr	r2, [pc, #224]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 80011aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80a1 	beq.w	80012fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011ba:	4b34      	ldr	r3, [pc, #208]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d05c      	beq.n	8001280 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d141      	bne.n	8001252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ce:	4b31      	ldr	r3, [pc, #196]	@ (8001294 <HAL_RCC_OscConfig+0x478>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fd0c 	bl	8000bf0 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011dc:	f7ff fd08 	bl	8000bf0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e087      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ee:	4b27      	ldr	r3, [pc, #156]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69da      	ldr	r2, [r3, #28]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001208:	019b      	lsls	r3, r3, #6
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001210:	085b      	lsrs	r3, r3, #1
 8001212:	3b01      	subs	r3, #1
 8001214:	041b      	lsls	r3, r3, #16
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121c:	061b      	lsls	r3, r3, #24
 800121e:	491b      	ldr	r1, [pc, #108]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <HAL_RCC_OscConfig+0x478>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fce1 	bl	8000bf0 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001232:	f7ff fcdd 	bl	8000bf0 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e05c      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x416>
 8001250:	e054      	b.n	80012fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <HAL_RCC_OscConfig+0x478>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fcca 	bl	8000bf0 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001260:	f7ff fcc6 	bl	8000bf0 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e045      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_RCC_OscConfig+0x470>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x444>
 800127e:	e03d      	b.n	80012fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d107      	bne.n	8001298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e038      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
 800128c:	40023800 	.word	0x40023800
 8001290:	40007000 	.word	0x40007000
 8001294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <HAL_RCC_OscConfig+0x4ec>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d028      	beq.n	80012f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d121      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012be:	429a      	cmp	r2, r3
 80012c0:	d11a      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80012c8:	4013      	ands	r3, r2
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80012ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d111      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012de:	085b      	lsrs	r3, r3, #1
 80012e0:	3b01      	subs	r3, #1
 80012e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d107      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0cc      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001320:	4b68      	ldr	r3, [pc, #416]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d90c      	bls.n	8001348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132e:	4b65      	ldr	r3, [pc, #404]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	4b63      	ldr	r3, [pc, #396]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0b8      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001360:	4b59      	ldr	r3, [pc, #356]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4a58      	ldr	r2, [pc, #352]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001366:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800136a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	4a52      	ldr	r2, [pc, #328]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001384:	4b50      	ldr	r3, [pc, #320]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	494d      	ldr	r1, [pc, #308]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d044      	beq.n	800142c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d119      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e07f      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d003      	beq.n	80013ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ca:	4b3f      	ldr	r3, [pc, #252]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e06f      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013da:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e067      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ea:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f023 0203 	bic.w	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4934      	ldr	r1, [pc, #208]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013fc:	f7ff fbf8 	bl	8000bf0 <HAL_GetTick>
 8001400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001402:	e00a      	b.n	800141a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001404:	f7ff fbf4 	bl	8000bf0 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e04f      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141a:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 020c 	and.w	r2, r3, #12
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	429a      	cmp	r2, r3
 800142a:	d1eb      	bne.n	8001404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800142c:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d20c      	bcs.n	8001454 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001442:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e032      	b.n	80014ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4916      	ldr	r1, [pc, #88]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	4313      	orrs	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800147e:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	490e      	ldr	r1, [pc, #56]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001492:	f000 f821 	bl	80014d8 <HAL_RCC_GetSysClockFreq>
 8001496:	4602      	mov	r2, r0
 8001498:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	490a      	ldr	r1, [pc, #40]	@ (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	5ccb      	ldrb	r3, [r1, r3]
 80014a6:	fa22 f303 	lsr.w	r3, r2, r3
 80014aa:	4a09      	ldr	r2, [pc, #36]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fb58 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023c00 	.word	0x40023c00
 80014c8:	40023800 	.word	0x40023800
 80014cc:	080020e0 	.word	0x080020e0
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014dc:	b094      	sub	sp, #80	@ 0x50
 80014de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014f0:	4b79      	ldr	r3, [pc, #484]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d00d      	beq.n	8001518 <HAL_RCC_GetSysClockFreq+0x40>
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	f200 80e1 	bhi.w	80016c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0x34>
 8001506:	2b04      	cmp	r3, #4
 8001508:	d003      	beq.n	8001512 <HAL_RCC_GetSysClockFreq+0x3a>
 800150a:	e0db      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800150c:	4b73      	ldr	r3, [pc, #460]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x204>)
 800150e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001510:	e0db      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001512:	4b73      	ldr	r3, [pc, #460]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001514:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001516:	e0d8      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001518:	4b6f      	ldr	r3, [pc, #444]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001520:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001522:	4b6d      	ldr	r3, [pc, #436]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d063      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800152e:	4b6a      	ldr	r3, [pc, #424]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	099b      	lsrs	r3, r3, #6
 8001534:	2200      	movs	r2, #0
 8001536:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001538:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800153a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800153c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001540:	633b      	str	r3, [r7, #48]	@ 0x30
 8001542:	2300      	movs	r3, #0
 8001544:	637b      	str	r3, [r7, #52]	@ 0x34
 8001546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800154a:	4622      	mov	r2, r4
 800154c:	462b      	mov	r3, r5
 800154e:	f04f 0000 	mov.w	r0, #0
 8001552:	f04f 0100 	mov.w	r1, #0
 8001556:	0159      	lsls	r1, r3, #5
 8001558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800155c:	0150      	lsls	r0, r2, #5
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4621      	mov	r1, r4
 8001564:	1a51      	subs	r1, r2, r1
 8001566:	6139      	str	r1, [r7, #16]
 8001568:	4629      	mov	r1, r5
 800156a:	eb63 0301 	sbc.w	r3, r3, r1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800157c:	4659      	mov	r1, fp
 800157e:	018b      	lsls	r3, r1, #6
 8001580:	4651      	mov	r1, sl
 8001582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001586:	4651      	mov	r1, sl
 8001588:	018a      	lsls	r2, r1, #6
 800158a:	4651      	mov	r1, sl
 800158c:	ebb2 0801 	subs.w	r8, r2, r1
 8001590:	4659      	mov	r1, fp
 8001592:	eb63 0901 	sbc.w	r9, r3, r1
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015aa:	4690      	mov	r8, r2
 80015ac:	4699      	mov	r9, r3
 80015ae:	4623      	mov	r3, r4
 80015b0:	eb18 0303 	adds.w	r3, r8, r3
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	462b      	mov	r3, r5
 80015b8:	eb49 0303 	adc.w	r3, r9, r3
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015ca:	4629      	mov	r1, r5
 80015cc:	024b      	lsls	r3, r1, #9
 80015ce:	4621      	mov	r1, r4
 80015d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015d4:	4621      	mov	r1, r4
 80015d6:	024a      	lsls	r2, r1, #9
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015de:	2200      	movs	r2, #0
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015e8:	f7fe fdee 	bl	80001c8 <__aeabi_uldivmod>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4613      	mov	r3, r2
 80015f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015f4:	e058      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f6:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	099b      	lsrs	r3, r3, #6
 80015fc:	2200      	movs	r2, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	4611      	mov	r1, r2
 8001602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
 800160c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001610:	4642      	mov	r2, r8
 8001612:	464b      	mov	r3, r9
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	0159      	lsls	r1, r3, #5
 800161e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001622:	0150      	lsls	r0, r2, #5
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4641      	mov	r1, r8
 800162a:	ebb2 0a01 	subs.w	sl, r2, r1
 800162e:	4649      	mov	r1, r9
 8001630:	eb63 0b01 	sbc.w	fp, r3, r1
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001648:	ebb2 040a 	subs.w	r4, r2, sl
 800164c:	eb63 050b 	sbc.w	r5, r3, fp
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	00eb      	lsls	r3, r5, #3
 800165a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800165e:	00e2      	lsls	r2, r4, #3
 8001660:	4614      	mov	r4, r2
 8001662:	461d      	mov	r5, r3
 8001664:	4643      	mov	r3, r8
 8001666:	18e3      	adds	r3, r4, r3
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	464b      	mov	r3, r9
 800166c:	eb45 0303 	adc.w	r3, r5, r3
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800167e:	4629      	mov	r1, r5
 8001680:	028b      	lsls	r3, r1, #10
 8001682:	4621      	mov	r1, r4
 8001684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001688:	4621      	mov	r1, r4
 800168a:	028a      	lsls	r2, r1, #10
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001692:	2200      	movs	r2, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	61fa      	str	r2, [r7, #28]
 8001698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800169c:	f7fe fd94 	bl	80001c8 <__aeabi_uldivmod>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4613      	mov	r3, r2
 80016a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	3301      	adds	r3, #1
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80016b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016c2:	e002      	b.n	80016ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_RCC_GetSysClockFreq+0x204>)
 80016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3750      	adds	r7, #80	@ 0x50
 80016d0:	46bd      	mov	sp, r7
 80016d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	00f42400 	.word	0x00f42400
 80016e0:	007a1200 	.word	0x007a1200

080016e4 <LL_GPIO_SetPinMode>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b08b      	sub	sp, #44	@ 0x2c
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	613b      	str	r3, [r7, #16]
  return result;
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800170a:	2320      	movs	r3, #32
 800170c:	e003      	b.n	8001716 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2103      	movs	r1, #3
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	401a      	ands	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	61fb      	str	r3, [r7, #28]
  return result;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001738:	2320      	movs	r3, #32
 800173a:	e003      	b.n	8001744 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	431a      	orrs	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	372c      	adds	r7, #44	@ 0x2c
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_GPIO_SetPinOutputType>:
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	431a      	orrs	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	605a      	str	r2, [r3, #4]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_GPIO_SetPinSpeed>:
{
 800178e:	b480      	push	{r7}
 8001790:	b08b      	sub	sp, #44	@ 0x2c
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	613b      	str	r3, [r7, #16]
  return result;
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80017b4:	2320      	movs	r3, #32
 80017b6:	e003      	b.n	80017c0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2103      	movs	r1, #3
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	401a      	ands	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	61fb      	str	r3, [r7, #28]
  return result;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80017dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80017e2:	2320      	movs	r3, #32
 80017e4:	e003      	b.n	80017ee <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	431a      	orrs	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	609a      	str	r2, [r3, #8]
}
 80017fc:	bf00      	nop
 80017fe:	372c      	adds	r7, #44	@ 0x2c
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_GPIO_SetPinPull>:
{
 8001808:	b480      	push	{r7}
 800180a:	b08b      	sub	sp, #44	@ 0x2c
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa93 f3a3 	rbit	r3, r3
 8001822:	613b      	str	r3, [r7, #16]
  return result;
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800182e:	2320      	movs	r3, #32
 8001830:	e003      	b.n	800183a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2103      	movs	r1, #3
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	401a      	ands	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	61fb      	str	r3, [r7, #28]
  return result;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800185c:	2320      	movs	r3, #32
 800185e:	e003      	b.n	8001868 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	431a      	orrs	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	60da      	str	r2, [r3, #12]
}
 8001876:	bf00      	nop
 8001878:	372c      	adds	r7, #44	@ 0x2c
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_GPIO_SetAFPin_0_7>:
{
 8001882:	b480      	push	{r7}
 8001884:	b08b      	sub	sp, #44	@ 0x2c
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6a1a      	ldr	r2, [r3, #32]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	613b      	str	r3, [r7, #16]
  return result;
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80018a8:	2320      	movs	r3, #32
 80018aa:	e003      	b.n	80018b4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	210f      	movs	r1, #15
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	61fb      	str	r3, [r7, #28]
  return result;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80018d6:	2320      	movs	r3, #32
 80018d8:	e003      	b.n	80018e2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	431a      	orrs	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	621a      	str	r2, [r3, #32]
}
 80018f0:	bf00      	nop
 80018f2:	372c      	adds	r7, #44	@ 0x2c
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_GPIO_SetAFPin_8_15>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	b08b      	sub	sp, #44	@ 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	613b      	str	r3, [r7, #16]
  return result;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001924:	2320      	movs	r3, #32
 8001926:	e003      	b.n	8001930 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	210f      	movs	r1, #15
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	61fb      	str	r3, [r7, #28]
  return result;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001954:	2320      	movs	r3, #32
 8001956:	e003      	b.n	8001960 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	431a      	orrs	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800196e:	bf00      	nop
 8001970:	372c      	adds	r7, #44	@ 0x2c
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b08a      	sub	sp, #40	@ 0x28
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	617b      	str	r3, [r7, #20]
  return result;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <LL_GPIO_Init+0x2e>
    return 32U;
 80019a4:	2320      	movs	r3, #32
 80019a6:	e003      	b.n	80019b0 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80019b2:	e057      	b.n	8001a64 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	4013      	ands	r3, r2
 80019c2:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d049      	beq.n	8001a5e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d003      	beq.n	80019da <LL_GPIO_Init+0x60>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d10d      	bne.n	80019f6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	461a      	mov	r2, r3
 80019e0:	6a39      	ldr	r1, [r7, #32]
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fed3 	bl	800178e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	461a      	mov	r2, r3
 80019ee:	6a39      	ldr	r1, [r7, #32]
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff feb4 	bl	800175e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	461a      	mov	r2, r3
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff02 	bl	8001808 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d121      	bne.n	8001a50 <LL_GPIO_Init+0xd6>
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	60bb      	str	r3, [r7, #8]
  return result;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <LL_GPIO_Init+0xac>
    return 32U;
 8001a22:	2320      	movs	r3, #32
 8001a24:	e003      	b.n	8001a2e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001a2e:	2b07      	cmp	r3, #7
 8001a30:	d807      	bhi.n	8001a42 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	461a      	mov	r2, r3
 8001a38:	6a39      	ldr	r1, [r7, #32]
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff21 	bl	8001882 <LL_GPIO_SetAFPin_0_7>
 8001a40:	e006      	b.n	8001a50 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	461a      	mov	r2, r3
 8001a48:	6a39      	ldr	r1, [r7, #32]
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff56 	bl	80018fc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	461a      	mov	r2, r3
 8001a56:	6a39      	ldr	r1, [r7, #32]
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff fe43 	bl	80016e4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1a0      	bne.n	80019b4 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3728      	adds	r7, #40	@ 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <LL_TIM_SetPrescaler>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_TIM_SetAutoReload>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_TIM_SetRepetitionCounter>:
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_TIM_OC_SetCompareCH1>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_TIM_OC_SetCompareCH2>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_TIM_OC_SetCompareCH3>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_TIM_OC_SetCompareCH4>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	615a      	str	r2, [r3, #20]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a3d      	ldr	r2, [pc, #244]	@ (8001c68 <LL_TIM_Init+0x108>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d013      	beq.n	8001ba0 <LL_TIM_Init+0x40>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b7e:	d00f      	beq.n	8001ba0 <LL_TIM_Init+0x40>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a3a      	ldr	r2, [pc, #232]	@ (8001c6c <LL_TIM_Init+0x10c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00b      	beq.n	8001ba0 <LL_TIM_Init+0x40>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a39      	ldr	r2, [pc, #228]	@ (8001c70 <LL_TIM_Init+0x110>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d007      	beq.n	8001ba0 <LL_TIM_Init+0x40>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a38      	ldr	r2, [pc, #224]	@ (8001c74 <LL_TIM_Init+0x114>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <LL_TIM_Init+0x40>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a37      	ldr	r2, [pc, #220]	@ (8001c78 <LL_TIM_Init+0x118>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d106      	bne.n	8001bae <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8001c68 <LL_TIM_Init+0x108>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d02b      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bbc:	d027      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c6c <LL_TIM_Init+0x10c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d023      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a29      	ldr	r2, [pc, #164]	@ (8001c70 <LL_TIM_Init+0x110>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01f      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <LL_TIM_Init+0x114>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01b      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <LL_TIM_Init+0x118>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d017      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a26      	ldr	r2, [pc, #152]	@ (8001c7c <LL_TIM_Init+0x11c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a25      	ldr	r2, [pc, #148]	@ (8001c80 <LL_TIM_Init+0x120>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00f      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a24      	ldr	r2, [pc, #144]	@ (8001c84 <LL_TIM_Init+0x124>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00b      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a23      	ldr	r2, [pc, #140]	@ (8001c88 <LL_TIM_Init+0x128>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a22      	ldr	r2, [pc, #136]	@ (8001c8c <LL_TIM_Init+0x12c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d003      	beq.n	8001c0e <LL_TIM_Init+0xae>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a21      	ldr	r2, [pc, #132]	@ (8001c90 <LL_TIM_Init+0x130>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d106      	bne.n	8001c1c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff35 	bl	8001a98 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff21 	bl	8001a7c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <LL_TIM_Init+0x108>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d003      	beq.n	8001c4a <LL_TIM_Init+0xea>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a0c      	ldr	r2, [pc, #48]	@ (8001c78 <LL_TIM_Init+0x118>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d105      	bne.n	8001c56 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff2f 	bl	8001ab4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ff72 	bl	8001b40 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40000800 	.word	0x40000800
 8001c74:	40000c00 	.word	0x40000c00
 8001c78:	40010400 	.word	0x40010400
 8001c7c:	40014000 	.word	0x40014000
 8001c80:	40014400 	.word	0x40014400
 8001c84:	40014800 	.word	0x40014800
 8001c88:	40001800 	.word	0x40001800
 8001c8c:	40001c00 	.word	0x40001c00
 8001c90:	40002000 	.word	0x40002000

08001c94 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001caa:	d027      	beq.n	8001cfc <LL_TIM_OC_Init+0x68>
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cb2:	d82a      	bhi.n	8001d0a <LL_TIM_OC_Init+0x76>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cba:	d018      	beq.n	8001cee <LL_TIM_OC_Init+0x5a>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cc2:	d822      	bhi.n	8001d0a <LL_TIM_OC_Init+0x76>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d003      	beq.n	8001cd2 <LL_TIM_OC_Init+0x3e>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d007      	beq.n	8001ce0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001cd0:	e01b      	b.n	8001d0a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f81f 	bl	8001d18 <OC1Config>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8001cde:	e015      	b.n	8001d0c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f884 	bl	8001df0 <OC2Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	75fb      	strb	r3, [r7, #23]
      break;
 8001cec:	e00e      	b.n	8001d0c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f8ed 	bl	8001ed0 <OC3Config>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8001cfa:	e007      	b.n	8001d0c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f956 	bl	8001fb0 <OC4Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	75fb      	strb	r3, [r7, #23]
      break;
 8001d08:	e000      	b.n	8001d0c <LL_TIM_OC_Init+0x78>
      break;
 8001d0a:	bf00      	nop
  }

  return result;
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	f023 0201 	bic.w	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f023 0202 	bic.w	r2, r3, #2
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f023 0201 	bic.w	r2, r3, #1
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1c      	ldr	r2, [pc, #112]	@ (8001de8 <OC1Config+0xd0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d003      	beq.n	8001d82 <OC1Config+0x6a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dec <OC1Config+0xd4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d11e      	bne.n	8001dc0 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f023 0208 	bic.w	r2, r3, #8
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f023 0204 	bic.w	r2, r3, #4
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fe7c 	bl	8001ad0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40010400 	.word	0x40010400

08001df0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	f023 0210 	bic.w	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f023 0220 	bic.w	r2, r3, #32
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f023 0210 	bic.w	r2, r3, #16
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec8 <OC2Config+0xd8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <OC2Config+0x70>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ecc <OC2Config+0xdc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d11f      	bne.n	8001ea0 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	019b      	lsls	r3, r3, #6
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	019b      	lsls	r3, r3, #6
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff fe1a 	bl	8001aec <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <OC3Config+0xd8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d003      	beq.n	8001f3e <OC3Config+0x6e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	@ (8001fac <OC3Config+0xdc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d11f      	bne.n	8001f7e <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	029b      	lsls	r3, r3, #10
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	029b      	lsls	r3, r3, #10
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	015b      	lsls	r3, r3, #5
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff fdb9 	bl	8001b08 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	40010400 	.word	0x40010400

08001fb0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	031b      	lsls	r3, r3, #12
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	031b      	lsls	r3, r3, #12
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <OC4Config+0xa8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <OC4Config+0x70>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a10      	ldr	r2, [pc, #64]	@ (800205c <OC4Config+0xac>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d107      	bne.n	8002030 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	019b      	lsls	r3, r3, #6
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4619      	mov	r1, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fd6e 	bl	8001b24 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40010000 	.word	0x40010000
 800205c:	40010400 	.word	0x40010400

08002060 <memset>:
 8002060:	4402      	add	r2, r0
 8002062:	4603      	mov	r3, r0
 8002064:	4293      	cmp	r3, r2
 8002066:	d100      	bne.n	800206a <memset+0xa>
 8002068:	4770      	bx	lr
 800206a:	f803 1b01 	strb.w	r1, [r3], #1
 800206e:	e7f9      	b.n	8002064 <memset+0x4>

08002070 <__libc_init_array>:
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	4d0d      	ldr	r5, [pc, #52]	@ (80020a8 <__libc_init_array+0x38>)
 8002074:	4c0d      	ldr	r4, [pc, #52]	@ (80020ac <__libc_init_array+0x3c>)
 8002076:	1b64      	subs	r4, r4, r5
 8002078:	10a4      	asrs	r4, r4, #2
 800207a:	2600      	movs	r6, #0
 800207c:	42a6      	cmp	r6, r4
 800207e:	d109      	bne.n	8002094 <__libc_init_array+0x24>
 8002080:	4d0b      	ldr	r5, [pc, #44]	@ (80020b0 <__libc_init_array+0x40>)
 8002082:	4c0c      	ldr	r4, [pc, #48]	@ (80020b4 <__libc_init_array+0x44>)
 8002084:	f000 f818 	bl	80020b8 <_init>
 8002088:	1b64      	subs	r4, r4, r5
 800208a:	10a4      	asrs	r4, r4, #2
 800208c:	2600      	movs	r6, #0
 800208e:	42a6      	cmp	r6, r4
 8002090:	d105      	bne.n	800209e <__libc_init_array+0x2e>
 8002092:	bd70      	pop	{r4, r5, r6, pc}
 8002094:	f855 3b04 	ldr.w	r3, [r5], #4
 8002098:	4798      	blx	r3
 800209a:	3601      	adds	r6, #1
 800209c:	e7ee      	b.n	800207c <__libc_init_array+0xc>
 800209e:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a2:	4798      	blx	r3
 80020a4:	3601      	adds	r6, #1
 80020a6:	e7f2      	b.n	800208e <__libc_init_array+0x1e>
 80020a8:	080020f8 	.word	0x080020f8
 80020ac:	080020f8 	.word	0x080020f8
 80020b0:	080020f8 	.word	0x080020f8
 80020b4:	080020fc 	.word	0x080020fc

080020b8 <_init>:
 80020b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ba:	bf00      	nop
 80020bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020be:	bc08      	pop	{r3}
 80020c0:	469e      	mov	lr, r3
 80020c2:	4770      	bx	lr

080020c4 <_fini>:
 80020c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c6:	bf00      	nop
 80020c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ca:	bc08      	pop	{r3}
 80020cc:	469e      	mov	lr, r3
 80020ce:	4770      	bx	lr
