
FS-i6 setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08007860  08007860  00008860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d74  08007d74  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d74  08007d74  00008d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d7c  08007d7c  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d7c  08007d7c  00008d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d80  08007d80  00008d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007d84  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          00000240  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000414  20000414  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b6f6  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002778  00000000  00000000  000148fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00017078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a52  00000000  00000000  00017e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002396a  00000000  00000000  000188b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce16  00000000  00000000  0003c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cad03  00000000  00000000  00049032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113d35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048a8  00000000  00000000  00113d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  00118620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007844 	.word	0x08007844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007844 	.word	0x08007844

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f023 0210 	bic.w	r2, r3, #16
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d101      	bne.n	8000f58 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	330c      	adds	r3, #12
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	330c      	adds	r3, #12
 8000f92:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	619a      	str	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001018:	4907      	ldr	r1, [pc, #28]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800

0800103c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4013      	ands	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40023800 	.word	0x40023800

0800106c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b090      	sub	sp, #64	@ 0x40
 8001070:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2228      	movs	r2, #40	@ 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fd4e 	bl	8005b1c <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001090:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001094:	f7ff ffd2 	bl	800103c <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001098:	2002      	movs	r0, #2
 800109a:	f7ff ffb7 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800109e:	2004      	movs	r0, #4
 80010a0:	f7ff ffb4 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ffb1 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80010aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80010ae:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010b0:	2302      	movs	r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80010c0:	2305      	movs	r3, #5
 80010c2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4841      	ldr	r0, [pc, #260]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010ca:	f002 febc 	bl	8003e46 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010d2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80010d6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010dc:	2302      	movs	r3, #2
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ea:	2318      	movs	r3, #24
 80010ec:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010f6:	230a      	movs	r3, #10
 80010f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	4619      	mov	r1, r3
 8001100:	4834      	ldr	r0, [pc, #208]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001102:	f003 f87e 	bl	8004202 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001106:	2100      	movs	r1, #0
 8001108:	4832      	ldr	r0, [pc, #200]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 800110a:	f7ff fef3 	bl	8000ef4 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800110e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001112:	4831      	ldr	r0, [pc, #196]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001114:	f7ff ff6a 	bl	8000fec <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800111c:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800111e:	f7ff ff65 	bl	8000fec <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001126:	482d      	ldr	r0, [pc, #180]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 8001128:	f7ff ff60 	bl	8000fec <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001132:	2301      	movs	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4822      	ldr	r0, [pc, #136]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001148:	f002 fe7d 	bl	8003e46 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800114c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001150:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001152:	2301      	movs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	481c      	ldr	r0, [pc, #112]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001168:	f002 fe6d 	bl	8003e46 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800116c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001170:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4815      	ldr	r0, [pc, #84]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 8001188:	f002 fe5d 	bl	8003e46 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800118c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001190:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001196:	2301      	movs	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011a0:	f002 fe51 	bl	8003e46 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80011a4:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80011a6:	f7ff fe95 	bl	8000ed4 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80011aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ae:	4808      	ldr	r0, [pc, #32]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80011b0:	f7ff ff0e 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80011b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 80011ba:	f7ff ff09 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80011be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011c4:	f7ff ff04 	bl	8000fd0 <LL_GPIO_SetOutputPin>
}
 80011c8:	bf00      	nop
 80011ca:	3740      	adds	r7, #64	@ 0x40
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40003800 	.word	0x40003800
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020000 	.word	0x40020000

080011e0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	BNO080_GPIO_SPI_Initialization();
 80011e4:	f7ff ff42 	bl	800106c <BNO080_GPIO_SPI_Initialization>

	printf("Checking BNO080...\n");
 80011e8:	4825      	ldr	r0, [pc, #148]	@ (8001280 <BNO080_Initialization+0xa0>)
 80011ea:	f004 fbb7 	bl	800595c <puts>

	CHIP_DESELECT(BNO080);
 80011ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011f2:	4824      	ldr	r0, [pc, #144]	@ (8001284 <BNO080_Initialization+0xa4>)
 80011f4:	f7ff feec 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011fc:	4822      	ldr	r0, [pc, #136]	@ (8001288 <BNO080_Initialization+0xa8>)
 80011fe:	f7ff fee7 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001202:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001206:	4821      	ldr	r0, [pc, #132]	@ (800128c <BNO080_Initialization+0xac>)
 8001208:	f7ff fef0 	bl	8000fec <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800120c:	20c8      	movs	r0, #200	@ 0xc8
 800120e:	f001 ff61 	bl	80030d4 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001212:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001216:	481d      	ldr	r0, [pc, #116]	@ (800128c <BNO080_Initialization+0xac>)
 8001218:	f7ff feda 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800121c:	f000 f8c2 	bl	80013a4 <BNO080_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001220:	f000 f8c0 	bl	80013a4 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001224:	f000 f8e2 	bl	80013ec <BNO080_receivePacket>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001228:	f000 f8bc 	bl	80013a4 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800122c:	f000 f8de 	bl	80013ec <BNO080_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <BNO080_Initialization+0xb0>)
 8001232:	22f9      	movs	r2, #249	@ 0xf9
 8001234:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <BNO080_Initialization+0xb0>)
 8001238:	2200      	movs	r2, #0
 800123a:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800123c:	2102      	movs	r1, #2
 800123e:	2002      	movs	r0, #2
 8001240:	f000 f946 	bl	80014d0 <BNO080_sendPacket>

	//Now we wait for response
	BNO080_waitForSPI();
 8001244:	f000 f8ae 	bl	80013a4 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001248:	f000 f8d0 	bl	80013ec <BNO080_receivePacket>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10b      	bne.n	800126a <BNO080_Initialization+0x8a>
	{
		//printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <BNO080_Initialization+0xb0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2bf8      	cmp	r3, #248	@ 0xf8
 8001258:	d107      	bne.n	800126a <BNO080_Initialization+0x8a>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <BNO080_Initialization+0xb0>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <BNO080_Initialization+0xb4>)
 8001262:	f004 fb13 	bl	800588c <iprintf>
			return (0);
 8001266:	2300      	movs	r3, #0
 8001268:	e007      	b.n	800127a <BNO080_Initialization+0x9a>
		}// Sensor OK
	}

	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <BNO080_Initialization+0xb0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	22f8      	movs	r2, #248	@ 0xf8
 8001270:	4619      	mov	r1, r3
 8001272:	4809      	ldr	r0, [pc, #36]	@ (8001298 <BNO080_Initialization+0xb8>)
 8001274:	f004 fb0a 	bl	800588c <iprintf>
	return (1); //Something went wrong
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	08007860 	.word	0x08007860
 8001284:	40020400 	.word	0x40020400
 8001288:	40020000 	.word	0x40020000
 800128c:	40020800 	.word	0x40020800
 8001290:	200001f4 	.word	0x200001f4
 8001294:	08007874 	.word	0x08007874
 8001298:	08007894 	.word	0x08007894

0800129c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012a6:	bf00      	nop
 80012a8:	480c      	ldr	r0, [pc, #48]	@ (80012dc <SPI2_SendByte+0x40>)
 80012aa:	f7ff fe49 	bl	8000f40 <LL_SPI_IsActiveFlag_TXE>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f9      	beq.n	80012a8 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4619      	mov	r1, r3
 80012b8:	4808      	ldr	r0, [pc, #32]	@ (80012dc <SPI2_SendByte+0x40>)
 80012ba:	f7ff fe62 	bl	8000f82 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012be:	bf00      	nop
 80012c0:	4806      	ldr	r0, [pc, #24]	@ (80012dc <SPI2_SendByte+0x40>)
 80012c2:	f7ff fe2a 	bl	8000f1a <LL_SPI_IsActiveFlag_RXNE>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f9      	beq.n	80012c0 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012cc:	4803      	ldr	r0, [pc, #12]	@ (80012dc <SPI2_SendByte+0x40>)
 80012ce:	f7ff fe4a 	bl	8000f66 <LL_SPI_ReceiveData8>
 80012d2:	4603      	mov	r3, r0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40003800 	.word	0x40003800

080012e0 <BNO080_enableRotationVector>:
	return fixedPointValue * powf(2, qPoint * -1);
}

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2200      	movs	r2, #0
 80012ee:	4619      	mov	r1, r3
 80012f0:	2005      	movs	r0, #5
 80012f2:	f000 f805 	bl	8001300 <BNO080_setFeatureCommand>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 800130e:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001310:	22fd      	movs	r2, #253	@ 0xfd
 8001312:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001314:	4a22      	ldr	r2, [pc, #136]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 800131a:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 800131c:	2200      	movs	r2, #0
 800131e:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001322:	2200      	movs	r2, #0
 8001324:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001328:	2200      	movs	r2, #0
 800132a:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001332:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 800133c:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001346:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	0e1b      	lsrs	r3, r3, #24
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001350:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001354:	2200      	movs	r2, #0
 8001356:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 800135a:	2200      	movs	r2, #0
 800135c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001366:	2200      	movs	r2, #0
 8001368:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001370:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 800137a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 8001384:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0e1b      	lsrs	r3, r3, #24
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <BNO080_setFeatureCommand+0xa0>)
 800138e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001390:	2111      	movs	r1, #17
 8001392:	2002      	movs	r0, #2
 8001394:	f000 f89c 	bl	80014d0 <BNO080_sendPacket>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001f4 	.word	0x200001f4

080013a4 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	e00c      	b.n	80013ca <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 80013b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013b4:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <BNO080_waitForSPI+0x40>)
 80013b6:	f7ff fdf6 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 80013c0:	2301      	movs	r3, #1
 80013c2:	e00a      	b.n	80013da <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d1ee      	bne.n	80013b0 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <BNO080_waitForSPI+0x44>)
 80013d4:	f004 fac2 	bl	800595c <puts>
	return (0);
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020800 	.word	0x40020800
 80013e8:	080078e0 	.word	0x080078e0

080013ec <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80013f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f6:	4832      	ldr	r0, [pc, #200]	@ (80014c0 <BNO080_receivePacket+0xd4>)
 80013f8:	f7ff fdd5 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001402:	2300      	movs	r3, #0
 8001404:	e057      	b.n	80014b6 <BNO080_receivePacket+0xca>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001406:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800140a:	482e      	ldr	r0, [pc, #184]	@ (80014c4 <BNO080_receivePacket+0xd8>)
 800140c:	f7ff fdee 	bl	8000fec <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff ff43 	bl	800129c <SPI2_SendByte>
 8001416:	4603      	mov	r3, r0
 8001418:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff ff3e 	bl	800129c <SPI2_SendByte>
 8001420:	4603      	mov	r3, r0
 8001422:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff ff39 	bl	800129c <SPI2_SendByte>
 800142a:	4603      	mov	r3, r0
 800142c:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff ff34 	bl	800129c <SPI2_SendByte>
 8001434:	4603      	mov	r3, r0
 8001436:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001438:	4a23      	ldr	r2, [pc, #140]	@ (80014c8 <BNO080_receivePacket+0xdc>)
 800143a:	7b7b      	ldrb	r3, [r7, #13]
 800143c:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 800143e:	4a22      	ldr	r2, [pc, #136]	@ (80014c8 <BNO080_receivePacket+0xdc>)
 8001440:	7b3b      	ldrb	r3, [r7, #12]
 8001442:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001444:	4a20      	ldr	r2, [pc, #128]	@ (80014c8 <BNO080_receivePacket+0xdc>)
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800144a:	4a1f      	ldr	r2, [pc, #124]	@ (80014c8 <BNO080_receivePacket+0xdc>)
 800144c:	7abb      	ldrb	r3, [r7, #10]
 800144e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001450:	7b3b      	ldrb	r3, [r7, #12]
 8001452:	b21b      	sxth	r3, r3
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	7b7b      	ldrb	r3, [r7, #13]
 800145a:	b21b      	sxth	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001460:	893b      	ldrh	r3, [r7, #8]
 8001462:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001466:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001468:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <BNO080_receivePacket+0x88>
	{
		//Packet is empty
		return (0); //All done
 8001470:	2300      	movs	r3, #0
 8001472:	e020      	b.n	80014b6 <BNO080_receivePacket+0xca>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001474:	893b      	ldrh	r3, [r7, #8]
 8001476:	3b04      	subs	r3, #4
 8001478:	b29b      	uxth	r3, r3
 800147a:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800147c:	2300      	movs	r3, #0
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	e00e      	b.n	80014a0 <BNO080_receivePacket+0xb4>
	{
		incoming = SPI2_SendByte(0xFF);
 8001482:	20ff      	movs	r0, #255	@ 0xff
 8001484:	f7ff ff0a 	bl	800129c <SPI2_SendByte>
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001490:	d803      	bhi.n	800149a <BNO080_receivePacket+0xae>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	490d      	ldr	r1, [pc, #52]	@ (80014cc <BNO080_receivePacket+0xe0>)
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	3301      	adds	r3, #1
 800149e:	81fb      	strh	r3, [r7, #14]
 80014a0:	89fa      	ldrh	r2, [r7, #14]
 80014a2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dbeb      	blt.n	8001482 <BNO080_receivePacket+0x96>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 80014aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <BNO080_receivePacket+0xd8>)
 80014b0:	f7ff fd8e 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020400 	.word	0x40020400
 80014c8:	200001f0 	.word	0x200001f0
 80014cc:	200001f4 	.word	0x200001f4

080014d0 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	4613      	mov	r3, r2
 80014de:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	3304      	adds	r3, #4
 80014e4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80014e6:	f7ff ff5d 	bl	80013a4 <BNO080_waitForSPI>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80014f0:	2300      	movs	r3, #0
 80014f2:	e032      	b.n	800155a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80014f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f8:	481a      	ldr	r0, [pc, #104]	@ (8001564 <BNO080_sendPacket+0x94>)
 80014fa:	f7ff fd77 	bl	8000fec <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fecb 	bl	800129c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	121b      	asrs	r3, r3, #8
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fec5 	bl	800129c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fec1 	bl	800129c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <BNO080_sendPacket+0x98>)
 800151e:	5cd2      	ldrb	r2, [r2, r3]
 8001520:	1c51      	adds	r1, r2, #1
 8001522:	b2c8      	uxtb	r0, r1
 8001524:	4910      	ldr	r1, [pc, #64]	@ (8001568 <BNO080_sendPacket+0x98>)
 8001526:	54c8      	strb	r0, [r1, r3]
 8001528:	4610      	mov	r0, r2
 800152a:	f7ff feb7 	bl	800129c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e008      	b.n	8001546 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <BNO080_sendPacket+0x9c>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff feae 	bl	800129c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	429a      	cmp	r2, r3
 800154c:	d3f2      	bcc.n	8001534 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 800154e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001552:	4804      	ldr	r0, [pc, #16]	@ (8001564 <BNO080_sendPacket+0x94>)
 8001554:	f7ff fd3c 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	return (1);
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40020400 	.word	0x40020400
 8001568:	20000274 	.word	0x20000274
 800156c:	200001f4 	.word	0x200001f4

08001570 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 800157c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001580:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < len - 2; i++)
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	e00a      	b.n	800159e <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	89fb      	ldrh	r3, [r7, #14]
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < len - 2; i++)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	3301      	adds	r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	3b02      	subs	r3, #2
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbef      	blt.n	8001588 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff) == data[30]) && ((chksum >> 8) == data[31]);
 80015a8:	89fb      	ldrh	r3, [r7, #14]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	321e      	adds	r2, #30
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d109      	bne.n	80015ca <iBus_Check_CHKSUM+0x5a>
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	321f      	adds	r2, #31
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <iBus_Check_CHKSUM+0x5a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <iBus_Check_CHKSUM+0x5c>
 80015ca:	2300      	movs	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <iBus_Parse>:

void iBus_Parse(unsigned char *data, FSiA6B_iBus* iBus)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3] << 8) & 0x0fff;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3302      	adds	r3, #2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3303      	adds	r3, #3
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001602:	b29a      	uxth	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5] << 8) & 0x0fff;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3304      	adds	r3, #4
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b21a      	sxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3305      	adds	r3, #5
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b21b      	sxth	r3, r3
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21b      	sxth	r3, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001626:	b29a      	uxth	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7] << 8) & 0x0fff;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3306      	adds	r3, #6
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b21a      	sxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3307      	adds	r3, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b21b      	sxth	r3, r3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21b      	sxth	r3, r3
 8001644:	b29b      	uxth	r3, r3
 8001646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164a:	b29a      	uxth	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9] << 8) & 0x0fff;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3308      	adds	r3, #8
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b21a      	sxth	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3309      	adds	r3, #9
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b21b      	sxth	r3, r3
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21b      	sxth	r3, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	b21b      	sxth	r3, r3
 8001668:	b29b      	uxth	r3, r3
 800166a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166e:	b29a      	uxth	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11] << 8) & 0x0fff;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	330a      	adds	r3, #10
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b21a      	sxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	330b      	adds	r3, #11
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b21b      	sxth	r3, r3
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21b      	sxth	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b21b      	sxth	r3, r3
 800168c:	b29b      	uxth	r3, r3
 800168e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001692:	b29a      	uxth	r2, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13] << 8) & 0x0fff;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	330c      	adds	r3, #12
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b21a      	sxth	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	330d      	adds	r3, #13
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	819a      	strh	r2, [r3, #12]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_SPI_Enable>:
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_SPI_SetStandard>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f023 0210 	bic.w	r2, r3, #16
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	605a      	str	r2, [r3, #4]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_SPI_IsActiveFlag_RXNE>:
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_SPI_IsActiveFlag_TXE>:
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b02      	cmp	r3, #2
 8001746:	d101      	bne.n	800174c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_SPI_ReceiveData8>:
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	330c      	adds	r3, #12
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_SPI_TransmitData8>:
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	330c      	adds	r3, #12
 8001786:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	701a      	strb	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_GPIO_SetOutputPin>:
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	619a      	str	r2, [r3, #24]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_GPIO_ResetOutputPin>:
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	041a      	lsls	r2, r3, #16
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_AHB1_GRP1_EnableClock>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017e0:	4907      	ldr	r1, [pc, #28]	@ (8001800 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80017ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4013      	ands	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40023800 	.word	0x40023800

08001804 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <LL_APB2_GRP1_EnableClock+0x2c>)
 800180e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4313      	orrs	r3, r2
 8001816:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <LL_APB2_GRP1_EnableClock+0x2c>)
 800181a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4013      	ands	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40023800 	.word	0x40023800

08001834 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b090      	sub	sp, #64	@ 0x40
 8001838:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	2228      	movs	r2, #40	@ 0x28
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f004 f96a 	bl	8005b1c <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001858:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800185c:	f7ff ffd2 	bl	8001804 <LL_APB2_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff ffb7 	bl	80017d4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001866:	2004      	movs	r0, #4
 8001868:	f7ff ffb4 	bl	80017d4 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800186c:	23e0      	movs	r3, #224	@ 0xe0
 800186e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001870:	2302      	movs	r3, #2
 8001872:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001880:	2305      	movs	r3, #5
 8001882:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	463b      	mov	r3, r7
 8001886:	4619      	mov	r1, r3
 8001888:	4825      	ldr	r0, [pc, #148]	@ (8001920 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800188a:	f002 fadc 	bl	8003e46 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001892:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001896:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800189c:	2302      	movs	r3, #2
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80018a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80018aa:	2310      	movs	r3, #16
 80018ac:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80018b6:	230a      	movs	r3, #10
 80018b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	4619      	mov	r1, r3
 80018c0:	4818      	ldr	r0, [pc, #96]	@ (8001924 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80018c2:	f002 fc9e 	bl	8004202 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80018c6:	2100      	movs	r1, #0
 80018c8:	4816      	ldr	r0, [pc, #88]	@ (8001924 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80018ca:	f7ff ff0d 	bl	80016e8 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80018ce:	2110      	movs	r1, #16
 80018d0:	4815      	ldr	r0, [pc, #84]	@ (8001928 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80018d2:	f7ff ff70 	bl	80017b6 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80018d6:	2310      	movs	r3, #16
 80018d8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018da:	2301      	movs	r3, #1
 80018dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80018ea:	463b      	mov	r3, r7
 80018ec:	4619      	mov	r1, r3
 80018ee:	480e      	ldr	r0, [pc, #56]	@ (8001928 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80018f0:	f002 faa9 	bl	8003e46 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80018f4:	2320      	movs	r3, #32
 80018f6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001900:	463b      	mov	r3, r7
 8001902:	4619      	mov	r1, r3
 8001904:	4808      	ldr	r0, [pc, #32]	@ (8001928 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001906:	f002 fa9e 	bl	8003e46 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800190a:	4806      	ldr	r0, [pc, #24]	@ (8001924 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800190c:	f7ff fedc 	bl	80016c8 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001910:	2110      	movs	r1, #16
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001914:	f7ff ff41 	bl	800179a <LL_GPIO_SetOutputPin>
}
 8001918:	bf00      	nop
 800191a:	3740      	adds	r7, #64	@ 0x40
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020000 	.word	0x40020000
 8001924:	40013000 	.word	0x40013000
 8001928:	40020800 	.word	0x40020800

0800192c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001936:	bf00      	nop
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <SPI1_SendByte+0x40>)
 800193a:	f7ff fefb 	bl	8001734 <LL_SPI_IsActiveFlag_TXE>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f9      	beq.n	8001938 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	4619      	mov	r1, r3
 8001948:	4808      	ldr	r0, [pc, #32]	@ (800196c <SPI1_SendByte+0x40>)
 800194a:	f7ff ff14 	bl	8001776 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800194e:	bf00      	nop
 8001950:	4806      	ldr	r0, [pc, #24]	@ (800196c <SPI1_SendByte+0x40>)
 8001952:	f7ff fedc 	bl	800170e <LL_SPI_IsActiveFlag_RXNE>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f9      	beq.n	8001950 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800195c:	4803      	ldr	r0, [pc, #12]	@ (800196c <SPI1_SendByte+0x40>)
 800195e:	f7ff fefc 	bl	800175a <LL_SPI_ReceiveData8>
 8001962:	4603      	mov	r3, r0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40013000 	.word	0x40013000

08001970 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800197a:	2110      	movs	r1, #16
 800197c:	480b      	ldr	r0, [pc, #44]	@ (80019ac <ICM20602_Readbyte+0x3c>)
 800197e:	f7ff ff1a 	bl	80017b6 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001988:	b2db      	uxtb	r3, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ffce 	bl	800192c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff ffcb 	bl	800192c <SPI1_SendByte>
 8001996:	4603      	mov	r3, r0
 8001998:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800199a:	2110      	movs	r1, #16
 800199c:	4803      	ldr	r0, [pc, #12]	@ (80019ac <ICM20602_Readbyte+0x3c>)
 800199e:	f7ff fefc 	bl	800179a <LL_GPIO_SetOutputPin>

	return val;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40020800 	.word	0x40020800

080019b0 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4613      	mov	r3, r2
 80019be:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80019c0:	2110      	movs	r1, #16
 80019c2:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <ICM20602_Writebyte+0x40>)
 80019c4:	f7ff fef7 	bl	80017b6 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ffab 	bl	800192c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80019d6:	79bb      	ldrb	r3, [r7, #6]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ffa7 	bl	800192c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80019de:	2110      	movs	r1, #16
 80019e0:	4803      	ldr	r0, [pc, #12]	@ (80019f0 <ICM20602_Writebyte+0x40>)
 80019e2:	f7ff feda 	bl	800179a <LL_GPIO_SetOutputPin>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40020800 	.word	0x40020800

080019f4 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	809a      	strh	r2, [r3, #4]

	ICM20602_GPIO_SPI_Initialization();
 8001a10:	f7ff ff10 	bl	8001834 <ICM20602_GPIO_SPI_Initialization>

	printf("Checking ICM20602...");
 8001a14:	4833      	ldr	r0, [pc, #204]	@ (8001ae4 <ICM20602_Initialization+0xf0>)
 8001a16:	f003 ff39 	bl	800588c <iprintf>

	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I);
 8001a1a:	2075      	movs	r0, #117	@ 0x75
 8001a1c:	f7ff ffa8 	bl	8001970 <ICM20602_Readbyte>
 8001a20:	4603      	mov	r3, r0
 8001a22:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d105      	bne.n	8001a36 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	482e      	ldr	r0, [pc, #184]	@ (8001ae8 <ICM20602_Initialization+0xf4>)
 8001a30:	f003 ff2c 	bl	800588c <iprintf>
 8001a34:	e012      	b.n	8001a5c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	2b12      	cmp	r3, #18
 8001a3a:	d00f      	beq.n	8001a5c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001a3c:	2075      	movs	r0, #117	@ 0x75
 8001a3e:	f7ff ff97 	bl	8001970 <ICM20602_Readbyte>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d007      	beq.n	8001a5c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2212      	movs	r2, #18
 8001a50:	4619      	mov	r1, r3
 8001a52:	4826      	ldr	r0, [pc, #152]	@ (8001aec <ICM20602_Initialization+0xf8>)
 8001a54:	f003 ff1a 	bl	800588c <iprintf>
			return 1; //ERROR
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e03f      	b.n	8001adc <ICM20602_Initialization+0xe8>
		}
	}

	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001a5c:	2180      	movs	r1, #128	@ 0x80
 8001a5e:	206b      	movs	r0, #107	@ 0x6b
 8001a60:	f7ff ffa6 	bl	80019b0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a64:	2032      	movs	r0, #50	@ 0x32
 8001a66:	f001 fb35 	bl	80030d4 <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	206b      	movs	r0, #107	@ 0x6b
 8001a6e:	f7ff ff9f 	bl	80019b0 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8001a72:	2032      	movs	r0, #50	@ 0x32
 8001a74:	f001 fb2e 	bl	80030d4 <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8001a78:	2138      	movs	r1, #56	@ 0x38
 8001a7a:	206c      	movs	r0, #108	@ 0x6c
 8001a7c:	f7ff ff98 	bl	80019b0 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8001a80:	2032      	movs	r0, #50	@ 0x32
 8001a82:	f001 fb27 	bl	80030d4 <HAL_Delay>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001a86:	2100      	movs	r1, #0
 8001a88:	2019      	movs	r0, #25
 8001a8a:	f7ff ff91 	bl	80019b0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a8e:	2032      	movs	r0, #50	@ 0x32
 8001a90:	f001 fb20 	bl	80030d4 <HAL_Delay>

	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001a94:	2105      	movs	r1, #5
 8001a96:	201a      	movs	r0, #26
 8001a98:	f7ff ff8a 	bl	80019b0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001a9c:	2032      	movs	r0, #50	@ 0x32
 8001a9e:	f001 fb19 	bl	80030d4 <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001aa2:	2118      	movs	r1, #24
 8001aa4:	201b      	movs	r0, #27
 8001aa6:	f7ff ff83 	bl	80019b0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001aaa:	2032      	movs	r0, #50	@ 0x32
 8001aac:	f001 fb12 	bl	80030d4 <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001ab0:	2118      	movs	r1, #24
 8001ab2:	201c      	movs	r0, #28
 8001ab4:	f7ff ff7c 	bl	80019b0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001ab8:	2032      	movs	r0, #50	@ 0x32
 8001aba:	f001 fb0b 	bl	80030d4 <HAL_Delay>

	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001abe:	2103      	movs	r1, #3
 8001ac0:	201d      	movs	r0, #29
 8001ac2:	f7ff ff75 	bl	80019b0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001ac6:	2032      	movs	r0, #50	@ 0x32
 8001ac8:	f001 fb04 	bl	80030d4 <HAL_Delay>

	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001acc:	2101      	movs	r1, #1
 8001ace:	2038      	movs	r0, #56	@ 0x38
 8001ad0:	f7ff ff6e 	bl	80019b0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8001ad4:	2032      	movs	r0, #50	@ 0x32
 8001ad6:	f001 fafd 	bl	80030d4 <HAL_Delay>
//
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	080078f4 	.word	0x080078f4
 8001ae8:	0800790c 	.word	0x0800790c
 8001aec:	08007930 	.word	0x08007930

08001af0 <LL_SPI_Enable>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	601a      	str	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_SPI_SetStandard>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f023 0210 	bic.w	r2, r3, #16
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	605a      	str	r2, [r3, #4]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_SPI_IsActiveFlag_TXE>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d101      	bne.n	8001b74 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_SPI_ReceiveData8>:
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	330c      	adds	r3, #12
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_SPI_TransmitData8>:
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	330c      	adds	r3, #12
 8001bae:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	701a      	strb	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_GPIO_SetOutputPin>:
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_GPIO_ResetOutputPin>:
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	041a      	lsls	r2, r3, #16
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_AHB1_GRP1_EnableClock>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c08:	4907      	ldr	r1, [pc, #28]	@ (8001c28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4013      	ands	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40023800 	.word	0x40023800

08001c2c <LL_APB1_GRP1_EnableClock>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c38:	4907      	ldr	r1, [pc, #28]	@ (8001c58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001c42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4013      	ands	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40023800 	.word	0x40023800

08001c5c <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b090      	sub	sp, #64	@ 0x40
 8001c60:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	2228      	movs	r2, #40	@ 0x28
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 ff56 	bl	8005b1c <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	463b      	mov	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]
 8001c7e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001c80:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001c84:	f7ff ffd2 	bl	8001c2c <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f7ff ffb7 	bl	8001bfc <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001c8e:	2338      	movs	r3, #56	@ 0x38
 8001c90:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c92:	2302      	movs	r3, #2
 8001c94:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4826      	ldr	r0, [pc, #152]	@ (8001d44 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001cac:	f002 f8cb 	bl	8003e46 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001cb4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001cb8:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001cc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001cd8:	230a      	movs	r3, #10
 8001cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4819      	ldr	r0, [pc, #100]	@ (8001d48 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001ce4:	f002 fa8d 	bl	8004202 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4817      	ldr	r0, [pc, #92]	@ (8001d48 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001cec:	f7ff ff10 	bl	8001b10 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8001cf0:	2140      	movs	r1, #64	@ 0x40
 8001cf2:	4814      	ldr	r0, [pc, #80]	@ (8001d44 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001cf4:	f7ff ff73 	bl	8001bde <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8001cf8:	2340      	movs	r3, #64	@ 0x40
 8001cfa:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d12:	f002 f898 	bl	8003e46 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8001d22:	463b      	mov	r3, r7
 8001d24:	4619      	mov	r1, r3
 8001d26:	4807      	ldr	r0, [pc, #28]	@ (8001d44 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d28:	f002 f88d 	bl	8003e46 <LL_GPIO_Init>

	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8001d2c:	4806      	ldr	r0, [pc, #24]	@ (8001d48 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8001d2e:	f7ff fedf 	bl	8001af0 <LL_SPI_Enable>

	CHIP_DESELECT(LPS22HH);
 8001d32:	2140      	movs	r1, #64	@ 0x40
 8001d34:	4803      	ldr	r0, [pc, #12]	@ (8001d44 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8001d36:	f7ff ff44 	bl	8001bc2 <LL_GPIO_SetOutputPin>
}
 8001d3a:	bf00      	nop
 8001d3c:	3740      	adds	r7, #64	@ 0x40
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40003c00 	.word	0x40003c00

08001d4c <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8001d56:	bf00      	nop
 8001d58:	480c      	ldr	r0, [pc, #48]	@ (8001d8c <SPI3_SendByte+0x40>)
 8001d5a:	f7ff feff 	bl	8001b5c <LL_SPI_IsActiveFlag_TXE>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f9      	beq.n	8001d58 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	4619      	mov	r1, r3
 8001d68:	4808      	ldr	r0, [pc, #32]	@ (8001d8c <SPI3_SendByte+0x40>)
 8001d6a:	f7ff ff18 	bl	8001b9e <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8001d6e:	bf00      	nop
 8001d70:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <SPI3_SendByte+0x40>)
 8001d72:	f7ff fee0 	bl	8001b36 <LL_SPI_IsActiveFlag_RXNE>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f9      	beq.n	8001d70 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8001d7c:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <SPI3_SendByte+0x40>)
 8001d7e:	f7ff ff00 	bl	8001b82 <LL_SPI_ReceiveData8>
 8001d82:	4603      	mov	r3, r0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40003c00 	.word	0x40003c00

08001d90 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8001d9a:	2140      	movs	r1, #64	@ 0x40
 8001d9c:	480b      	ldr	r0, [pc, #44]	@ (8001dcc <LPS22HH_Readbyte+0x3c>)
 8001d9e:	f7ff ff1e 	bl	8001bde <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ffce 	bl	8001d4c <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff ffcb 	bl	8001d4c <SPI3_SendByte>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8001dba:	2140      	movs	r1, #64	@ 0x40
 8001dbc:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <LPS22HH_Readbyte+0x3c>)
 8001dbe:	f7ff ff00 	bl	8001bc2 <LL_GPIO_SetOutputPin>

	return val;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <LPS22HH_Writebyte>:
	}
	CHIP_DESELECT(LPS22HH);
}

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	460a      	mov	r2, r1
 8001dda:	71fb      	strb	r3, [r7, #7]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8001de0:	2140      	movs	r1, #64	@ 0x40
 8001de2:	480b      	ldr	r0, [pc, #44]	@ (8001e10 <LPS22HH_Writebyte+0x40>)
 8001de4:	f7ff fefb 	bl	8001bde <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffab 	bl	8001d4c <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ffa7 	bl	8001d4c <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8001dfe:	2140      	movs	r1, #64	@ 0x40
 8001e00:	4803      	ldr	r0, [pc, #12]	@ (8001e10 <LPS22HH_Writebyte+0x40>)
 8001e02:	f7ff fede 	bl	8001bc2 <LL_GPIO_SetOutputPin>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40020400 	.word	0x40020400

08001e14 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	71fb      	strb	r3, [r7, #7]

	LPS22HH_GPIO_SPI_Initialization();
 8001e1e:	f7ff ff1d 	bl	8001c5c <LPS22HH_GPIO_SPI_Initialization>

	printf("Checking LPS22HH...\n");
 8001e22:	4841      	ldr	r0, [pc, #260]	@ (8001f28 <LPS22HH_Initialization+0x114>)
 8001e24:	f003 fd9a 	bl	800595c <puts>

	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F);
 8001e28:	200f      	movs	r0, #15
 8001e2a:	f7ff ffb1 	bl	8001d90 <LPS22HH_Readbyte>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2bb3      	cmp	r3, #179	@ 0xb3
 8001e36:	d105      	bne.n	8001e44 <LPS22HH_Initialization+0x30>
	{
		printf("LPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	483b      	ldr	r0, [pc, #236]	@ (8001f2c <LPS22HH_Initialization+0x118>)
 8001e3e:	f003 fd25 	bl	800588c <iprintf>
 8001e42:	e012      	b.n	8001e6a <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	2bb3      	cmp	r3, #179	@ 0xb3
 8001e48:	d00f      	beq.n	8001e6a <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8001e4a:	200f      	movs	r0, #15
 8001e4c:	f7ff ffa0 	bl	8001d90 <LPS22HH_Readbyte>
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	2bb3      	cmp	r3, #179	@ 0xb3
 8001e58:	d007      	beq.n	8001e6a <LPS22HH_Initialization+0x56>
			printf( "LPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	22b3      	movs	r2, #179	@ 0xb3
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4833      	ldr	r0, [pc, #204]	@ (8001f30 <LPS22HH_Initialization+0x11c>)
 8001e62:	f003 fd13 	bl	800588c <iprintf>
			return 1; //ERROR
 8001e66:	2301      	movs	r3, #1
 8001e68:	e059      	b.n	8001f1e <LPS22HH_Initialization+0x10a>
		}
	}

	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	2011      	movs	r0, #17
 8001e6e:	f7ff ffaf 	bl	8001dd0 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8001e72:	2011      	movs	r0, #17
 8001e74:	f7ff ff8c 	bl	8001d90 <LPS22HH_Readbyte>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f7      	bne.n	8001e72 <LPS22HH_Initialization+0x5e>

	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001e82:	2010      	movs	r0, #16
 8001e84:	f7ff ff84 	bl	8001d90 <LPS22HH_Readbyte>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e92:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	4619      	mov	r1, r3
 8001e98:	2010      	movs	r0, #16
 8001e9a:	f7ff ff99 	bl	8001dd0 <LPS22HH_Writebyte>
	temp_reg = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001ea2:	2010      	movs	r0, #16
 8001ea4:	f7ff ff74 	bl	8001d90 <LPS22HH_Readbyte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);

	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001eac:	2010      	movs	r0, #16
 8001eae:	f7ff ff6f 	bl	8001d90 <LPS22HH_Readbyte>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	f043 030c 	orr.w	r3, r3, #12
 8001ebc:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2010      	movs	r0, #16
 8001ec4:	f7ff ff84 	bl	8001dd0 <LPS22HH_Writebyte>

	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8001ec8:	2010      	movs	r0, #16
 8001eca:	f7ff ff61 	bl	8001d90 <LPS22HH_Readbyte>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001ed2:	79bb      	ldrb	r3, [r7, #6]
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8001eda:	79bb      	ldrb	r3, [r7, #6]
 8001edc:	4619      	mov	r1, r3
 8001ede:	2010      	movs	r0, #16
 8001ee0:	f7ff ff76 	bl	8001dd0 <LPS22HH_Writebyte>

	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8001ee4:	2011      	movs	r0, #17
 8001ee6:	f7ff ff53 	bl	8001d90 <LPS22HH_Readbyte>
 8001eea:	4603      	mov	r3, r0
 8001eec:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8001eee:	79bb      	ldrb	r3, [r7, #6]
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	2011      	movs	r0, #17
 8001efc:	f7ff ff68 	bl	8001dd0 <LPS22HH_Writebyte>

	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8001f00:	2012      	movs	r0, #18
 8001f02:	f7ff ff45 	bl	8001d90 <LPS22HH_Readbyte>
 8001f06:	4603      	mov	r3, r0
 8001f08:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	4619      	mov	r1, r3
 8001f16:	2012      	movs	r0, #18
 8001f18:	f7ff ff5a 	bl	8001dd0 <LPS22HH_Writebyte>

	return 0; //OK
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	0800795c 	.word	0x0800795c
 8001f2c:	08007970 	.word	0x08007970
 8001f30:	08007994 	.word	0x08007994

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	@ (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	@ (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	@ (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	@ 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_SPI_SetStandard>:
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 0210 	bic.w	r2, r3, #16
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	601a      	str	r2, [r3, #0]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	601a      	str	r2, [r3, #0]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1a      	ldr	r2, [r3, #32]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	621a      	str	r2, [r3, #32]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	43db      	mvns	r3, r3
 80020e0:	401a      	ands	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	621a      	str	r2, [r3, #32]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d01c      	beq.n	800213e <LL_TIM_OC_EnableFast+0x4a>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2b04      	cmp	r3, #4
 8002108:	d017      	beq.n	800213a <LL_TIM_OC_EnableFast+0x46>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b10      	cmp	r3, #16
 800210e:	d012      	beq.n	8002136 <LL_TIM_OC_EnableFast+0x42>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2b40      	cmp	r3, #64	@ 0x40
 8002114:	d00d      	beq.n	8002132 <LL_TIM_OC_EnableFast+0x3e>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800211c:	d007      	beq.n	800212e <LL_TIM_OC_EnableFast+0x3a>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002124:	d101      	bne.n	800212a <LL_TIM_OC_EnableFast+0x36>
 8002126:	2305      	movs	r3, #5
 8002128:	e00a      	b.n	8002140 <LL_TIM_OC_EnableFast+0x4c>
 800212a:	2306      	movs	r3, #6
 800212c:	e008      	b.n	8002140 <LL_TIM_OC_EnableFast+0x4c>
 800212e:	2304      	movs	r3, #4
 8002130:	e006      	b.n	8002140 <LL_TIM_OC_EnableFast+0x4c>
 8002132:	2303      	movs	r3, #3
 8002134:	e004      	b.n	8002140 <LL_TIM_OC_EnableFast+0x4c>
 8002136:	2302      	movs	r3, #2
 8002138:	e002      	b.n	8002140 <LL_TIM_OC_EnableFast+0x4c>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_TIM_OC_EnableFast+0x4c>
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3318      	adds	r3, #24
 8002146:	4619      	mov	r1, r3
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <LL_TIM_OC_EnableFast+0x80>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	440b      	add	r3, r1
 8002150:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	4907      	ldr	r1, [pc, #28]	@ (8002178 <LL_TIM_OC_EnableFast+0x84>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	4619      	mov	r1, r3
 800215e:	2304      	movs	r3, #4
 8002160:	408b      	lsls	r3, r1
 8002162:	431a      	orrs	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	601a      	str	r2, [r3, #0]

}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	080079d4 	.word	0x080079d4
 8002178:	080079dc 	.word	0x080079dc

0800217c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d01c      	beq.n	80021c6 <LL_TIM_OC_EnablePreload+0x4a>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b04      	cmp	r3, #4
 8002190:	d017      	beq.n	80021c2 <LL_TIM_OC_EnablePreload+0x46>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b10      	cmp	r3, #16
 8002196:	d012      	beq.n	80021be <LL_TIM_OC_EnablePreload+0x42>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b40      	cmp	r3, #64	@ 0x40
 800219c:	d00d      	beq.n	80021ba <LL_TIM_OC_EnablePreload+0x3e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a4:	d007      	beq.n	80021b6 <LL_TIM_OC_EnablePreload+0x3a>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ac:	d101      	bne.n	80021b2 <LL_TIM_OC_EnablePreload+0x36>
 80021ae:	2305      	movs	r3, #5
 80021b0:	e00a      	b.n	80021c8 <LL_TIM_OC_EnablePreload+0x4c>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e008      	b.n	80021c8 <LL_TIM_OC_EnablePreload+0x4c>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e006      	b.n	80021c8 <LL_TIM_OC_EnablePreload+0x4c>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e004      	b.n	80021c8 <LL_TIM_OC_EnablePreload+0x4c>
 80021be:	2302      	movs	r3, #2
 80021c0:	e002      	b.n	80021c8 <LL_TIM_OC_EnablePreload+0x4c>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <LL_TIM_OC_EnablePreload+0x4c>
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3318      	adds	r3, #24
 80021ce:	4619      	mov	r1, r3
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <LL_TIM_OC_EnablePreload+0x80>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	440b      	add	r3, r1
 80021d8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	4907      	ldr	r1, [pc, #28]	@ (8002200 <LL_TIM_OC_EnablePreload+0x84>)
 80021e2:	5ccb      	ldrb	r3, [r1, r3]
 80021e4:	4619      	mov	r1, r3
 80021e6:	2308      	movs	r3, #8
 80021e8:	408b      	lsls	r3, r1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	601a      	str	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	080079d4 	.word	0x080079d4
 8002200:	080079dc 	.word	0x080079dc

08002204 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002216:	f023 0307 	bic.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	609a      	str	r2, [r3, #8]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	605a      	str	r2, [r3, #4]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	609a      	str	r2, [r3, #8]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	615a      	str	r2, [r3, #20]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	@ 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	330c      	adds	r3, #12
 80022cc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	e853 3f00 	ldrex	r3, [r3]
 80022d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f043 0320 	orr.w	r3, r3, #32
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	330c      	adds	r3, #12
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	61ba      	str	r2, [r7, #24]
 80022e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e8:	6979      	ldr	r1, [r7, #20]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	e841 2300 	strex	r3, r2, [r1]
 80022f0:	613b      	str	r3, [r7, #16]
   return(result);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e7      	bne.n	80022c8 <LL_USART_EnableIT_RXNE+0x8>
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3724      	adds	r7, #36	@ 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	605a      	str	r2, [r3, #4]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_GPIO_ResetOutputPin>:
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	041a      	lsls	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	619a      	str	r2, [r3, #24]
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4013      	ands	r3, r2
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43d9      	mvns	r1, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	400b      	ands	r3, r1
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_AHB1_GRP1_EnableClock>:
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800237e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002380:	4907      	ldr	r1, [pc, #28]	@ (80023a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4313      	orrs	r3, r2
 8002386:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800238a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4013      	ands	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	40023800 	.word	0x40023800

080023a4 <LL_APB1_GRP1_EnableClock>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023b0:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023b8:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4013      	ands	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40023800 	.word	0x40023800

080023d4 <LL_APB2_GRP1_EnableClock>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023e0:	4907      	ldr	r1, [pc, #28]	@ (8002400 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4013      	ands	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40023800 	.word	0x40023800

08002404 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i ++)
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e00d      	b.n	8002432 <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p + i));
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	4413      	add	r3, r2
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4808      	ldr	r0, [pc, #32]	@ (8002444 <_write+0x40>)
 8002422:	f7ff ff70 	bl	8002306 <LL_USART_TransmitData8>
		HAL_Delay(1);
 8002426:	2001      	movs	r0, #1
 8002428:	f000 fe54 	bl	80030d4 <HAL_Delay>
	for (int i = 0; i < len; i ++)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	dbed      	blt.n	8002416 <_write+0x12>
	}
	return len;
 800243a:	687b      	ldr	r3, [r7, #4]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40011400 	.word	0x40011400

08002448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800244e:	f000 fdcf 	bl	8002ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002452:	f000 f885 	bl	8002560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002456:	f000 fb2f 	bl	8002ab8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800245a:	f000 f9e3 	bl	8002824 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800245e:	f000 facb 	bl	80029f8 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8002462:	f000 f939 	bl	80026d8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8002466:	f000 f8e5 	bl	8002634 <MX_SPI1_Init>
  MX_SPI3_Init();
 800246a:	f000 f989 	bl	8002780 <MX_SPI3_Init>
  MX_UART5_Init();
 800246e:	f000 fa4b 	bl	8002908 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002472:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002476:	4832      	ldr	r0, [pc, #200]	@ (8002540 <main+0xf8>)
 8002478:	f7ff fe18 	bl	80020ac <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 800247c:	4830      	ldr	r0, [pc, #192]	@ (8002540 <main+0xf8>)
 800247e:	f7ff fdf5 	bl	800206c <LL_TIM_EnableCounter>

  TIM3->PSC = 2000;
 8002482:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <main+0xf8>)
 8002484:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002488:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 800248a:	2064      	movs	r0, #100	@ 0x64
 800248c:	f000 fe22 	bl	80030d4 <HAL_Delay>
  TIM3->PSC = 1500;
 8002490:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <main+0xf8>)
 8002492:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002496:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8002498:	2064      	movs	r0, #100	@ 0x64
 800249a:	f000 fe1b 	bl	80030d4 <HAL_Delay>
  TIM3->PSC = 1000;
 800249e:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <main+0xf8>)
 80024a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024a4:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 80024a6:	2064      	movs	r0, #100	@ 0x64
 80024a8:	f000 fe14 	bl	80030d4 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80024ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024b0:	4823      	ldr	r0, [pc, #140]	@ (8002540 <main+0xf8>)
 80024b2:	f7ff fe0c 	bl	80020ce <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 80024b6:	4823      	ldr	r0, [pc, #140]	@ (8002544 <main+0xfc>)
 80024b8:	f7ff ff02 	bl	80022c0 <LL_USART_EnableIT_RXNE>
  // TODO: enable interrupt pin for GPS module
  LL_USART_EnableIT_RXNE(UART5);
 80024bc:	4822      	ldr	r0, [pc, #136]	@ (8002548 <main+0x100>)
 80024be:	f7ff feff 	bl	80022c0 <LL_USART_EnableIT_RXNE>

  // initialize 9-axis sensor for rotation vector
  BNO080_Initialization();
 80024c2:	f7fe fe8d 	bl	80011e0 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 80024c6:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80024ca:	f7fe ff09 	bl	80012e0 <BNO080_enableRotationVector>

  // initialize 6-axis sensor for angular velocity
  ICM20602_Initialization();
 80024ce:	f7ff fa91 	bl	80019f4 <ICM20602_Initialization>

  // initialize barometric sensor for altitude
  LPS22HH_Initialization();
 80024d2:	f7ff fc9f 	bl	8001e14 <LPS22HH_Initialization>

		printf("%d %d\n", (int) (LPS22HH.baroAlt*100), (int) (LPS22HH.baroAltFilt*100));
	}
	*/

    if (ibus_rx_cplt_flag)
 80024d6:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <main+0x104>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0fb      	beq.n	80024d6 <main+0x8e>
    {
    	ibus_rx_cplt_flag = 0;
 80024de:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <main+0x104>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
    	if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32))
 80024e4:	2120      	movs	r1, #32
 80024e6:	481a      	ldr	r0, [pc, #104]	@ (8002550 <main+0x108>)
 80024e8:	f7ff f842 	bl	8001570 <iBus_Check_CHKSUM>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f1      	beq.n	80024d6 <main+0x8e>
    	{
        	LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2); // toggle LED if iBus frame checksum successful --> intact iBus frame
 80024f2:	2104      	movs	r1, #4
 80024f4:	4817      	ldr	r0, [pc, #92]	@ (8002554 <main+0x10c>)
 80024f6:	f7ff ff24 	bl	8002342 <LL_GPIO_TogglePin>

        	iBus_Parse(&ibus_rx_buf[0], &iBus); // parse and store switch/gimbal data in iBus structure
 80024fa:	4917      	ldr	r1, [pc, #92]	@ (8002558 <main+0x110>)
 80024fc:	4814      	ldr	r0, [pc, #80]	@ (8002550 <main+0x108>)
 80024fe:	f7ff f86c 	bl	80015da <iBus_Parse>

        	printf("%d\t%d\t%d\t%d\t%d\t%d\t\n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC);
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <main+0x110>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <main+0x110>)
 800250a:	885b      	ldrh	r3, [r3, #2]
 800250c:	461c      	mov	r4, r3
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <main+0x110>)
 8002510:	889b      	ldrh	r3, [r3, #4]
 8002512:	461d      	mov	r5, r3
 8002514:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <main+0x110>)
 8002516:	88db      	ldrh	r3, [r3, #6]
 8002518:	461a      	mov	r2, r3
 800251a:	4b0f      	ldr	r3, [pc, #60]	@ (8002558 <main+0x110>)
 800251c:	891b      	ldrh	r3, [r3, #8]
 800251e:	4619      	mov	r1, r3
 8002520:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <main+0x110>)
 8002522:	899b      	ldrh	r3, [r3, #12]
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	9101      	str	r1, [sp, #4]
 8002528:	9200      	str	r2, [sp, #0]
 800252a:	462b      	mov	r3, r5
 800252c:	4622      	mov	r2, r4
 800252e:	4601      	mov	r1, r0
 8002530:	480a      	ldr	r0, [pc, #40]	@ (800255c <main+0x114>)
 8002532:	f003 f9ab 	bl	800588c <iprintf>

        	HAL_Delay(30);
 8002536:	201e      	movs	r0, #30
 8002538:	f000 fdcc 	bl	80030d4 <HAL_Delay>
    if (ibus_rx_cplt_flag)
 800253c:	e7cb      	b.n	80024d6 <main+0x8e>
 800253e:	bf00      	nop
 8002540:	40000400 	.word	0x40000400
 8002544:	40011400 	.word	0x40011400
 8002548:	40005000 	.word	0x40005000
 800254c:	200002bc 	.word	0x200002bc
 8002550:	20000298 	.word	0x20000298
 8002554:	40020800 	.word	0x40020800
 8002558:	2000027c 	.word	0x2000027c
 800255c:	080079c0 	.word	0x080079c0

08002560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b094      	sub	sp, #80	@ 0x50
 8002564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002566:	f107 0320 	add.w	r3, r7, #32
 800256a:	2230      	movs	r2, #48	@ 0x30
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f003 fad4 	bl	8005b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	4b28      	ldr	r3, [pc, #160]	@ (800262c <SystemClock_Config+0xcc>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	4a27      	ldr	r2, [pc, #156]	@ (800262c <SystemClock_Config+0xcc>)
 800258e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	@ 0x40
 8002594:	4b25      	ldr	r3, [pc, #148]	@ (800262c <SystemClock_Config+0xcc>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	4b22      	ldr	r3, [pc, #136]	@ (8002630 <SystemClock_Config+0xd0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a21      	ldr	r2, [pc, #132]	@ (8002630 <SystemClock_Config+0xd0>)
 80025aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <SystemClock_Config+0xd0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025bc:	2301      	movs	r3, #1
 80025be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025c6:	2302      	movs	r3, #2
 80025c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025d0:	2304      	movs	r3, #4
 80025d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025d4:	23a8      	movs	r3, #168	@ 0xa8
 80025d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025d8:	2302      	movs	r3, #2
 80025da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025dc:	2304      	movs	r3, #4
 80025de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e0:	f107 0320 	add.w	r3, r7, #32
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fe7f 	bl	80032e8 <HAL_RCC_OscConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025f0:	f000 fadc 	bl	8002bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025f4:	230f      	movs	r3, #15
 80025f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f8:	2302      	movs	r3, #2
 80025fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002600:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800260a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	2105      	movs	r1, #5
 8002612:	4618      	mov	r0, r3
 8002614:	f001 f8e0 	bl	80037d8 <HAL_RCC_ClockConfig>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800261e:	f000 fac5 	bl	8002bac <Error_Handler>
  }
}
 8002622:	bf00      	nop
 8002624:	3750      	adds	r7, #80	@ 0x50
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000

08002634 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b090      	sub	sp, #64	@ 0x40
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800263a:	f107 0318 	add.w	r3, r7, #24
 800263e:	2228      	movs	r2, #40	@ 0x28
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fa6a 	bl	8005b1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	463b      	mov	r3, r7
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	611a      	str	r2, [r3, #16]
 8002656:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002658:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800265c:	f7ff feba 	bl	80023d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002660:	2001      	movs	r0, #1
 8002662:	f7ff fe87 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002666:	23e0      	movs	r3, #224	@ 0xe0
 8002668:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800266a:	2302      	movs	r3, #2
 800266c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800267a:	2305      	movs	r3, #5
 800267c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	463b      	mov	r3, r7
 8002680:	4619      	mov	r1, r3
 8002682:	4813      	ldr	r0, [pc, #76]	@ (80026d0 <MX_SPI1_Init+0x9c>)
 8002684:	f001 fbdf 	bl	8003e46 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800268c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002690:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002696:	2302      	movs	r3, #2
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800269a:	2301      	movs	r3, #1
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800269e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80026a4:	2310      	movs	r3, #16
 80026a6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80026a8:	2300      	movs	r3, #0
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80026b0:	230a      	movs	r3, #10
 80026b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80026b4:	f107 0318 	add.w	r3, r7, #24
 80026b8:	4619      	mov	r1, r3
 80026ba:	4806      	ldr	r0, [pc, #24]	@ (80026d4 <MX_SPI1_Init+0xa0>)
 80026bc:	f001 fda1 	bl	8004202 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80026c0:	2100      	movs	r1, #0
 80026c2:	4804      	ldr	r0, [pc, #16]	@ (80026d4 <MX_SPI1_Init+0xa0>)
 80026c4:	f7ff fcbf 	bl	8002046 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	3740      	adds	r7, #64	@ 0x40
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40013000 	.word	0x40013000

080026d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b090      	sub	sp, #64	@ 0x40
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80026de:	f107 0318 	add.w	r3, r7, #24
 80026e2:	2228      	movs	r2, #40	@ 0x28
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fa18 	bl	8005b1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	463b      	mov	r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80026fc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002700:	f7ff fe50 	bl	80023a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002704:	2002      	movs	r0, #2
 8002706:	f7ff fe35 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800270a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800270e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002710:	2302      	movs	r3, #2
 8002712:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002720:	2305      	movs	r3, #5
 8002722:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002724:	463b      	mov	r3, r7
 8002726:	4619      	mov	r1, r3
 8002728:	4813      	ldr	r0, [pc, #76]	@ (8002778 <MX_SPI2_Init+0xa0>)
 800272a:	f001 fb8c 	bl	8003e46 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002732:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002736:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800273c:	2302      	movs	r3, #2
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002740:	2301      	movs	r3, #1
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002744:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800274a:	2318      	movs	r3, #24
 800274c:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800274e:	2300      	movs	r3, #0
 8002750:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002756:	230a      	movs	r3, #10
 8002758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800275a:	f107 0318 	add.w	r3, r7, #24
 800275e:	4619      	mov	r1, r3
 8002760:	4806      	ldr	r0, [pc, #24]	@ (800277c <MX_SPI2_Init+0xa4>)
 8002762:	f001 fd4e 	bl	8004202 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002766:	2100      	movs	r1, #0
 8002768:	4804      	ldr	r0, [pc, #16]	@ (800277c <MX_SPI2_Init+0xa4>)
 800276a:	f7ff fc6c 	bl	8002046 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	3740      	adds	r7, #64	@ 0x40
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40020400 	.word	0x40020400
 800277c:	40003800 	.word	0x40003800

08002780 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b090      	sub	sp, #64	@ 0x40
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002786:	f107 0318 	add.w	r3, r7, #24
 800278a:	2228      	movs	r2, #40	@ 0x28
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f003 f9c4 	bl	8005b1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	463b      	mov	r3, r7
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
 80027a0:	611a      	str	r2, [r3, #16]
 80027a2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80027a4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80027a8:	f7ff fdfc 	bl	80023a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80027ac:	2002      	movs	r0, #2
 80027ae:	f7ff fde1 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80027b2:	2338      	movs	r3, #56	@ 0x38
 80027b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027b6:	2302      	movs	r3, #2
 80027b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80027c6:	2306      	movs	r3, #6
 80027c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	463b      	mov	r3, r7
 80027cc:	4619      	mov	r1, r3
 80027ce:	4813      	ldr	r0, [pc, #76]	@ (800281c <MX_SPI3_Init+0x9c>)
 80027d0:	f001 fb39 	bl	8003e46 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80027d8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80027dc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80027e2:	2302      	movs	r3, #2
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80027e6:	2301      	movs	r3, #1
 80027e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80027ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80027f0:	2308      	movs	r3, #8
 80027f2:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80027f4:	2300      	movs	r3, #0
 80027f6:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80027fc:	230a      	movs	r3, #10
 80027fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002800:	f107 0318 	add.w	r3, r7, #24
 8002804:	4619      	mov	r1, r3
 8002806:	4806      	ldr	r0, [pc, #24]	@ (8002820 <MX_SPI3_Init+0xa0>)
 8002808:	f001 fcfb 	bl	8004202 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800280c:	2100      	movs	r1, #0
 800280e:	4804      	ldr	r0, [pc, #16]	@ (8002820 <MX_SPI3_Init+0xa0>)
 8002810:	f7ff fc19 	bl	8002046 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002814:	bf00      	nop
 8002816:	3740      	adds	r7, #64	@ 0x40
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40020400 	.word	0x40020400
 8002820:	40003c00 	.word	0x40003c00

08002824 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b094      	sub	sp, #80	@ 0x50
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800282a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	2220      	movs	r2, #32
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f003 f96a 	bl	8005b1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
 8002854:	611a      	str	r2, [r3, #16]
 8002856:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002858:	2002      	movs	r0, #2
 800285a:	f7ff fda3 	bl	80023a4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800285e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002862:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002864:	2300      	movs	r3, #0
 8002866:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20;
 8002868:	2314      	movs	r3, #20
 800286a:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800286c:	2300      	movs	r3, #0
 800286e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002870:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002874:	4619      	mov	r1, r3
 8002876:	4822      	ldr	r0, [pc, #136]	@ (8002900 <MX_TIM3_Init+0xdc>)
 8002878:	f001 fd88 	bl	800438c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800287c:	4820      	ldr	r0, [pc, #128]	@ (8002900 <MX_TIM3_Init+0xdc>)
 800287e:	f7ff fc05 	bl	800208c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002882:	2100      	movs	r1, #0
 8002884:	481e      	ldr	r0, [pc, #120]	@ (8002900 <MX_TIM3_Init+0xdc>)
 8002886:	f7ff fcbd 	bl	8002204 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800288a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800288e:	481c      	ldr	r0, [pc, #112]	@ (8002900 <MX_TIM3_Init+0xdc>)
 8002890:	f7ff fc74 	bl	800217c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002894:	2360      	movs	r3, #96	@ 0x60
 8002896:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 80028a0:	230a      	movs	r3, #10
 80028a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	461a      	mov	r2, r3
 80028ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028b2:	4813      	ldr	r0, [pc, #76]	@ (8002900 <MX_TIM3_Init+0xdc>)
 80028b4:	f001 fe04 	bl	80044c0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80028b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028bc:	4810      	ldr	r0, [pc, #64]	@ (8002900 <MX_TIM3_Init+0xdc>)
 80028be:	f7ff fc19 	bl	80020f4 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80028c2:	2100      	movs	r1, #0
 80028c4:	480e      	ldr	r0, [pc, #56]	@ (8002900 <MX_TIM3_Init+0xdc>)
 80028c6:	f7ff fcb2 	bl	800222e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80028ca:	480d      	ldr	r0, [pc, #52]	@ (8002900 <MX_TIM3_Init+0xdc>)
 80028cc:	f7ff fcc2 	bl	8002254 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80028d0:	2002      	movs	r0, #2
 80028d2:	f7ff fd4f 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB1   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80028d6:	2302      	movs	r3, #2
 80028d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028da:	2302      	movs	r3, #2
 80028dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4804      	ldr	r0, [pc, #16]	@ (8002904 <MX_TIM3_Init+0xe0>)
 80028f4:	f001 faa7 	bl	8003e46 <LL_GPIO_Init>

}
 80028f8:	bf00      	nop
 80028fa:	3750      	adds	r7, #80	@ 0x50
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40000400 	.word	0x40000400
 8002904:	40020400 	.word	0x40020400

08002908 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08e      	sub	sp, #56	@ 0x38
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800290e:	f107 031c 	add.w	r3, r7, #28
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]
 800291e:	615a      	str	r2, [r3, #20]
 8002920:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
 8002930:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8002932:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002936:	f7ff fd35 	bl	80023a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800293a:	2004      	movs	r0, #4
 800293c:	f7ff fd1a 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002940:	2008      	movs	r0, #8
 8002942:	f7ff fd17 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8002946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800294a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800294c:	2302      	movs	r3, #2
 800294e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800295c:	2308      	movs	r3, #8
 800295e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4821      	ldr	r0, [pc, #132]	@ (80029ec <MX_UART5_Init+0xe4>)
 8002966:	f001 fa6e 	bl	8003e46 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800296a:	2304      	movs	r3, #4
 800296c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800296e:	2302      	movs	r3, #2
 8002970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800297e:	2308      	movs	r3, #8
 8002980:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	4619      	mov	r1, r3
 8002986:	481a      	ldr	r0, [pc, #104]	@ (80029f0 <MX_UART5_Init+0xe8>)
 8002988:	f001 fa5d 	bl	8003e46 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800298c:	f7ff fad2 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 8002990:	4603      	mov	r3, r0
 8002992:	2200      	movs	r2, #0
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fb22 	bl	8001fe0 <NVIC_EncodePriority>
 800299c:	4603      	mov	r3, r0
 800299e:	4619      	mov	r1, r3
 80029a0:	2035      	movs	r0, #53	@ 0x35
 80029a2:	f7ff faf3 	bl	8001f8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80029a6:	2035      	movs	r0, #53	@ 0x35
 80029a8:	f7ff fad2 	bl	8001f50 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80029ac:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80029b0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 80029be:	2304      	movs	r3, #4
 80029c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80029c6:	2300      	movs	r3, #0
 80029c8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80029ca:	f107 031c 	add.w	r3, r7, #28
 80029ce:	4619      	mov	r1, r3
 80029d0:	4808      	ldr	r0, [pc, #32]	@ (80029f4 <MX_UART5_Init+0xec>)
 80029d2:	f002 f9c3 	bl	8004d5c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80029d6:	4807      	ldr	r0, [pc, #28]	@ (80029f4 <MX_UART5_Init+0xec>)
 80029d8:	f7ff fc5c 	bl	8002294 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 80029dc:	4805      	ldr	r0, [pc, #20]	@ (80029f4 <MX_UART5_Init+0xec>)
 80029de:	f7ff fc49 	bl	8002274 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80029e2:	bf00      	nop
 80029e4:	3738      	adds	r7, #56	@ 0x38
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020c00 	.word	0x40020c00
 80029f4:	40005000 	.word	0x40005000

080029f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08e      	sub	sp, #56	@ 0x38
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80029fe:	f107 031c 	add.w	r3, r7, #28
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	615a      	str	r2, [r3, #20]
 8002a10:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
 8002a20:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8002a22:	2020      	movs	r0, #32
 8002a24:	f7ff fcd6 	bl	80023d4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002a28:	2004      	movs	r0, #4
 8002a2a:	f7ff fca3 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002a2e:	23c0      	movs	r3, #192	@ 0xc0
 8002a30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a32:	2302      	movs	r3, #2
 8002a34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002a42:	2308      	movs	r3, #8
 8002a44:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4819      	ldr	r0, [pc, #100]	@ (8002ab0 <MX_USART6_UART_Init+0xb8>)
 8002a4c:	f001 f9fb 	bl	8003e46 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a50:	f7ff fa70 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fac0 	bl	8001fe0 <NVIC_EncodePriority>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4619      	mov	r1, r3
 8002a64:	2047      	movs	r0, #71	@ 0x47
 8002a66:	f7ff fa91 	bl	8001f8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002a6a:	2047      	movs	r0, #71	@ 0x47
 8002a6c:	f7ff fa70 	bl	8001f50 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002a70:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002a74:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002a82:	230c      	movs	r3, #12
 8002a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002a8e:	f107 031c 	add.w	r3, r7, #28
 8002a92:	4619      	mov	r1, r3
 8002a94:	4807      	ldr	r0, [pc, #28]	@ (8002ab4 <MX_USART6_UART_Init+0xbc>)
 8002a96:	f002 f961 	bl	8004d5c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002a9a:	4806      	ldr	r0, [pc, #24]	@ (8002ab4 <MX_USART6_UART_Init+0xbc>)
 8002a9c:	f7ff fbfa 	bl	8002294 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002aa0:	4804      	ldr	r0, [pc, #16]	@ (8002ab4 <MX_USART6_UART_Init+0xbc>)
 8002aa2:	f7ff fbe7 	bl	8002274 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002aa6:	bf00      	nop
 8002aa8:	3738      	adds	r7, #56	@ 0x38
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40011400 	.word	0x40011400

08002ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abe:	463b      	mov	r3, r7
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
 8002acc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002ace:	2080      	movs	r0, #128	@ 0x80
 8002ad0:	f7ff fc50 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002ad4:	2004      	movs	r0, #4
 8002ad6:	f7ff fc4d 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7ff fc4a 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002ae0:	2002      	movs	r0, #2
 8002ae2:	f7ff fc47 	bl	8002374 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002ae6:	2008      	movs	r0, #8
 8002ae8:	f7ff fc44 	bl	8002374 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8002aec:	f240 2117 	movw	r1, #535	@ 0x217
 8002af0:	482b      	ldr	r0, [pc, #172]	@ (8002ba0 <MX_GPIO_Init+0xe8>)
 8002af2:	f7ff fc17 	bl	8002324 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8002af6:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8002afa:	482a      	ldr	r0, [pc, #168]	@ (8002ba4 <MX_GPIO_Init+0xec>)
 8002afc:	f7ff fc12 	bl	8002324 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002b00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b04:	4828      	ldr	r0, [pc, #160]	@ (8002ba8 <MX_GPIO_Init+0xf0>)
 8002b06:	f7ff fc0d 	bl	8002324 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8002b0a:	f240 2317 	movw	r3, #535	@ 0x217
 8002b0e:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002b10:	2301      	movs	r3, #1
 8002b12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b20:	463b      	mov	r3, r7
 8002b22:	4619      	mov	r1, r3
 8002b24:	481e      	ldr	r0, [pc, #120]	@ (8002ba0 <MX_GPIO_Init+0xe8>)
 8002b26:	f001 f98e 	bl	8003e46 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8002b2a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8002b2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002b30:	2300      	movs	r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b38:	463b      	mov	r3, r7
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4818      	ldr	r0, [pc, #96]	@ (8002ba0 <MX_GPIO_Init+0xe8>)
 8002b3e:	f001 f982 	bl	8003e46 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8002b42:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8002b46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b58:	463b      	mov	r3, r7
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4811      	ldr	r0, [pc, #68]	@ (8002ba4 <MX_GPIO_Init+0xec>)
 8002b5e:	f001 f972 	bl	8003e46 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002b62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b78:	463b      	mov	r3, r7
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	480a      	ldr	r0, [pc, #40]	@ (8002ba8 <MX_GPIO_Init+0xf0>)
 8002b7e:	f001 f962 	bl	8003e46 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	463b      	mov	r3, r7
 8002b90:	4619      	mov	r1, r3
 8002b92:	4804      	ldr	r0, [pc, #16]	@ (8002ba4 <MX_GPIO_Init+0xec>)
 8002b94:	f001 f957 	bl	8003e46 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b98:	bf00      	nop
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020000 	.word	0x40020000

08002bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb0:	b672      	cpsid	i
}
 8002bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <Error_Handler+0x8>

08002bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <HAL_MspInit+0x4c>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002c04 <HAL_MspInit+0x4c>)
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bce:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <HAL_MspInit+0x4c>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_MspInit+0x4c>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	4a08      	ldr	r2, [pc, #32]	@ (8002c04 <HAL_MspInit+0x4c>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_MspInit+0x4c>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800

08002c08 <LL_USART_IsActiveFlag_RXNE>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_USART_ClearFlag_RXNE>:
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f06f 0220 	mvn.w	r2, #32
 8002c3c:	601a      	str	r2, [r3, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_USART_ReceiveData8>:
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	b2db      	uxtb	r3, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_GPIO_TogglePin>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	041a      	lsls	r2, r3, #16
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	400b      	ands	r3, r1
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c9a:	bf00      	nop
 8002c9c:	e7fd      	b.n	8002c9a <NMI_Handler+0x4>

08002c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca2:	bf00      	nop
 8002ca4:	e7fd      	b.n	8002ca2 <HardFault_Handler+0x4>

08002ca6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002caa:	bf00      	nop
 8002cac:	e7fd      	b.n	8002caa <MemManage_Handler+0x4>

08002cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb2:	bf00      	nop
 8002cb4:	e7fd      	b.n	8002cb2 <BusFault_Handler+0x4>

08002cb6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cba:	bf00      	nop
 8002cbc:	e7fd      	b.n	8002cba <UsageFault_Handler+0x4>

08002cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cec:	f000 f9d2 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  static unsigned char count = 0; // count number of interrupts

	if (LL_USART_IsActiveFlag_RXNE(UART5))
 8002cf8:	4834      	ldr	r0, [pc, #208]	@ (8002dcc <UART5_IRQHandler+0xd8>)
 8002cfa:	f7ff ff85 	bl	8002c08 <LL_USART_IsActiveFlag_RXNE>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d060      	beq.n	8002dc6 <UART5_IRQHandler+0xd2>
  {
	  LL_USART_ClearFlag_RXNE(UART5);
 8002d04:	4831      	ldr	r0, [pc, #196]	@ (8002dcc <UART5_IRQHandler+0xd8>)
 8002d06:	f7ff ff92 	bl	8002c2e <LL_USART_ClearFlag_RXNE>
	  uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8002d0a:	4830      	ldr	r0, [pc, #192]	@ (8002dcc <UART5_IRQHandler+0xd8>)
 8002d0c:	f7ff ff9d 	bl	8002c4a <LL_USART_ReceiveData8>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd0 <UART5_IRQHandler+0xdc>)
 8002d16:	701a      	strb	r2, [r3, #0]
	  uart5_rx_flag = 1;
 8002d18:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <UART5_IRQHandler+0xe0>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]

	  switch(count)
 8002d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b1f      	cmp	r3, #31
 8002d24:	d02e      	beq.n	8002d84 <UART5_IRQHandler+0x90>
 8002d26:	2b1f      	cmp	r3, #31
 8002d28:	dc3e      	bgt.n	8002da8 <UART5_IRQHandler+0xb4>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <UART5_IRQHandler+0x40>
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d012      	beq.n	8002d58 <UART5_IRQHandler+0x64>
 8002d32:	e039      	b.n	8002da8 <UART5_IRQHandler+0xb4>
	  {
	  case 0:
		  if (uart5_rx_data == 0x20)
 8002d34:	4b26      	ldr	r3, [pc, #152]	@ (8002dd0 <UART5_IRQHandler+0xdc>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d143      	bne.n	8002dc4 <UART5_IRQHandler+0xd0>
		  {
			  ibus_rx_buf[count] = uart5_rx_data;
 8002d3c:	4b26      	ldr	r3, [pc, #152]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b23      	ldr	r3, [pc, #140]	@ (8002dd0 <UART5_IRQHandler+0xdc>)
 8002d44:	7819      	ldrb	r1, [r3, #0]
 8002d46:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <UART5_IRQHandler+0xe8>)
 8002d48:	5499      	strb	r1, [r3, r2]
			  count++;
 8002d4a:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002d54:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002d56:	e035      	b.n	8002dc4 <UART5_IRQHandler+0xd0>
	  case 1:
		  if (uart5_rx_data == 0x40)
 8002d58:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <UART5_IRQHandler+0xdc>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b40      	cmp	r3, #64	@ 0x40
 8002d5e:	d10d      	bne.n	8002d7c <UART5_IRQHandler+0x88>
		  {
			  ibus_rx_buf[count] = uart5_rx_data;
 8002d60:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <UART5_IRQHandler+0xdc>)
 8002d68:	7819      	ldrb	r1, [r3, #0]
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ddc <UART5_IRQHandler+0xe8>)
 8002d6c:	5499      	strb	r1, [r3, r2]
			  count++;
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002d78:	701a      	strb	r2, [r3, #0]
		  }
		  else
		  {
			  count = 0;
		  }
		  break;
 8002d7a:	e024      	b.n	8002dc6 <UART5_IRQHandler+0xd2>
			  count = 0;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
		  break;
 8002d82:	e020      	b.n	8002dc6 <UART5_IRQHandler+0xd2>
	  case 31:
		  ibus_rx_buf[count] = uart5_rx_data;
 8002d84:	4b14      	ldr	r3, [pc, #80]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <UART5_IRQHandler+0xdc>)
 8002d8c:	7819      	ldrb	r1, [r3, #0]
 8002d8e:	4b13      	ldr	r3, [pc, #76]	@ (8002ddc <UART5_IRQHandler+0xe8>)
 8002d90:	5499      	strb	r1, [r3, r2]
		  count = 0;
 8002d92:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
		  ibus_rx_cplt_flag = 1;
 8002d98:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <UART5_IRQHandler+0xec>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8002d9e:	2104      	movs	r1, #4
 8002da0:	4810      	ldr	r0, [pc, #64]	@ (8002de4 <UART5_IRQHandler+0xf0>)
 8002da2:	f7ff ff5f 	bl	8002c64 <LL_GPIO_TogglePin>
		  break;
 8002da6:	e00e      	b.n	8002dc6 <UART5_IRQHandler+0xd2>
	  default:
		  ibus_rx_buf[count] = uart5_rx_data;
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <UART5_IRQHandler+0xdc>)
 8002db0:	7819      	ldrb	r1, [r3, #0]
 8002db2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <UART5_IRQHandler+0xe8>)
 8002db4:	5499      	strb	r1, [r3, r2]
		  count++;
 8002db6:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <UART5_IRQHandler+0xe4>)
 8002dc0:	701a      	strb	r2, [r3, #0]
		  break;
 8002dc2:	e000      	b.n	8002dc6 <UART5_IRQHandler+0xd2>
		  break;
 8002dc4:	bf00      	nop
  }
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40005000 	.word	0x40005000
 8002dd0:	20000295 	.word	0x20000295
 8002dd4:	20000294 	.word	0x20000294
 8002dd8:	200002bd 	.word	0x200002bd
 8002ddc:	20000298 	.word	0x20000298
 8002de0:	200002bc 	.word	0x200002bc
 8002de4:	40020800 	.word	0x40020800

08002de8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(USART6))
 8002dec:	480a      	ldr	r0, [pc, #40]	@ (8002e18 <USART6_IRQHandler+0x30>)
 8002dee:	f7ff ff0b 	bl	8002c08 <LL_USART_IsActiveFlag_RXNE>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00c      	beq.n	8002e12 <USART6_IRQHandler+0x2a>
  {
	  LL_USART_ClearFlag_RXNE(USART6);
 8002df8:	4807      	ldr	r0, [pc, #28]	@ (8002e18 <USART6_IRQHandler+0x30>)
 8002dfa:	f7ff ff18 	bl	8002c2e <LL_USART_ClearFlag_RXNE>
	  uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8002dfe:	4806      	ldr	r0, [pc, #24]	@ (8002e18 <USART6_IRQHandler+0x30>)
 8002e00:	f7ff ff23 	bl	8002c4a <LL_USART_ReceiveData8>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <USART6_IRQHandler+0x34>)
 8002e0a:	701a      	strb	r2, [r3, #0]
	  uart6_rx_flag = 1;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <USART6_IRQHandler+0x38>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40011400 	.word	0x40011400
 8002e1c:	20000293 	.word	0x20000293
 8002e20:	20000292 	.word	0x20000292

08002e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return 1;
 8002e28:	2301      	movs	r3, #1
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <_kill>:

int _kill(int pid, int sig)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e3e:	f002 febf 	bl	8005bc0 <__errno>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2216      	movs	r2, #22
 8002e46:	601a      	str	r2, [r3, #0]
  return -1;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_exit>:

void _exit (int status)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ffe7 	bl	8002e34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e66:	bf00      	nop
 8002e68:	e7fd      	b.n	8002e66 <_exit+0x12>

08002e6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e00a      	b.n	8002e92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e7c:	f3af 8000 	nop.w
 8002e80:	4601      	mov	r1, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	60ba      	str	r2, [r7, #8]
 8002e88:	b2ca      	uxtb	r2, r1
 8002e8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	dbf0      	blt.n	8002e7c <_read+0x12>
  }

  return len;
 8002e9a:	687b      	ldr	r3, [r7, #4]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ecc:	605a      	str	r2, [r3, #4]
  return 0;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_isatty>:

int _isatty(int file)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ee4:	2301      	movs	r3, #1
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f14:	4a14      	ldr	r2, [pc, #80]	@ (8002f68 <_sbrk+0x5c>)
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <_sbrk+0x60>)
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f20:	4b13      	ldr	r3, [pc, #76]	@ (8002f70 <_sbrk+0x64>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f28:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <_sbrk+0x64>)
 8002f2a:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <_sbrk+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <_sbrk+0x64>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d207      	bcs.n	8002f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f3c:	f002 fe40 	bl	8005bc0 <__errno>
 8002f40:	4603      	mov	r3, r0
 8002f42:	220c      	movs	r2, #12
 8002f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	e009      	b.n	8002f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <_sbrk+0x64>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f52:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <_sbrk+0x64>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	4a05      	ldr	r2, [pc, #20]	@ (8002f70 <_sbrk+0x64>)
 8002f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20020000 	.word	0x20020000
 8002f6c:	00000400 	.word	0x00000400
 8002f70:	200002c0 	.word	0x200002c0
 8002f74:	20000418 	.word	0x20000418

08002f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <SystemInit+0x20>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <SystemInit+0x20>)
 8002f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fa0:	f7ff ffea 	bl	8002f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fa4:	480c      	ldr	r0, [pc, #48]	@ (8002fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fa6:	490d      	ldr	r1, [pc, #52]	@ (8002fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fac:	e002      	b.n	8002fb4 <LoopCopyDataInit>

08002fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb2:	3304      	adds	r3, #4

08002fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb8:	d3f9      	bcc.n	8002fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fba:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc0:	e001      	b.n	8002fc6 <LoopFillZerobss>

08002fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc4:	3204      	adds	r2, #4

08002fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc8:	d3fb      	bcc.n	8002fc2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002fca:	f002 fdff 	bl	8005bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fce:	f7ff fa3b 	bl	8002448 <main>
  bx  lr    
 8002fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fdc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002fe0:	08007d84 	.word	0x08007d84
  ldr r2, =_sbss
 8002fe4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002fe8:	20000414 	.word	0x20000414

08002fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fec:	e7fe      	b.n	8002fec <ADC_IRQHandler>
	...

08002ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <HAL_Init+0x40>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <HAL_Init+0x40>)
 8002ffa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <HAL_Init+0x40>)
 8003006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800300a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800300c:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <HAL_Init+0x40>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003018:	2003      	movs	r0, #3
 800301a:	f000 f931 	bl	8003280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800301e:	200f      	movs	r0, #15
 8003020:	f000 f808 	bl	8003034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003024:	f7ff fdc8 	bl	8002bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023c00 	.word	0x40023c00

08003034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800303c:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <HAL_InitTick+0x54>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b12      	ldr	r3, [pc, #72]	@ (800308c <HAL_InitTick+0x58>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4619      	mov	r1, r3
 8003046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800304a:	fbb3 f3f1 	udiv	r3, r3, r1
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	4618      	mov	r0, r3
 8003054:	f000 f93b 	bl	80032ce <HAL_SYSTICK_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e00e      	b.n	8003080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d80a      	bhi.n	800307e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003068:	2200      	movs	r2, #0
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	f000 f911 	bl	8003296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003074:	4a06      	ldr	r2, [pc, #24]	@ (8003090 <HAL_InitTick+0x5c>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000000 	.word	0x20000000
 800308c:	20000008 	.word	0x20000008
 8003090:	20000004 	.word	0x20000004

08003094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_IncTick+0x20>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_IncTick+0x24>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <HAL_IncTick+0x24>)
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000008 	.word	0x20000008
 80030b8:	200002c4 	.word	0x200002c4

080030bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <HAL_GetTick+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	200002c4 	.word	0x200002c4

080030d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff ffee 	bl	80030bc <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d005      	beq.n	80030fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <HAL_Delay+0x44>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030fa:	bf00      	nop
 80030fc:	f7ff ffde 	bl	80030bc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d8f7      	bhi.n	80030fc <HAL_Delay+0x28>
  {
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000008 	.word	0x20000008

0800311c <__NVIC_SetPriorityGrouping>:
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314e:	4a04      	ldr	r2, [pc, #16]	@ (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	60d3      	str	r3, [r2, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_GetPriorityGrouping>:
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003168:	4b04      	ldr	r3, [pc, #16]	@ (800317c <__NVIC_GetPriorityGrouping+0x18>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 0307 	and.w	r3, r3, #7
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_SetPriority>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	2b00      	cmp	r3, #0
 8003192:	db0a      	blt.n	80031aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	490c      	ldr	r1, [pc, #48]	@ (80031cc <__NVIC_SetPriority+0x4c>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	440b      	add	r3, r1
 80031a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031a8:	e00a      	b.n	80031c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4908      	ldr	r1, [pc, #32]	@ (80031d0 <__NVIC_SetPriority+0x50>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3b04      	subs	r3, #4
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	440b      	add	r3, r1
 80031be:	761a      	strb	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <NVIC_EncodePriority>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	@ 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f1c3 0307 	rsb	r3, r3, #7
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	bf28      	it	cs
 80031f2:	2304      	movcs	r3, #4
 80031f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d902      	bls.n	8003204 <NVIC_EncodePriority+0x30>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3b03      	subs	r3, #3
 8003202:	e000      	b.n	8003206 <NVIC_EncodePriority+0x32>
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	f04f 32ff 	mov.w	r2, #4294967295
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	401a      	ands	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800321c:	f04f 31ff 	mov.w	r1, #4294967295
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	43d9      	mvns	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	4313      	orrs	r3, r2
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	@ 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800324c:	d301      	bcc.n	8003252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800324e:	2301      	movs	r3, #1
 8003250:	e00f      	b.n	8003272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003252:	4a0a      	ldr	r2, [pc, #40]	@ (800327c <SysTick_Config+0x40>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325a:	210f      	movs	r1, #15
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	f7ff ff8e 	bl	8003180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <SysTick_Config+0x40>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326a:	4b04      	ldr	r3, [pc, #16]	@ (800327c <SysTick_Config+0x40>)
 800326c:	2207      	movs	r2, #7
 800326e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	e000e010 	.word	0xe000e010

08003280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff47 	bl	800311c <__NVIC_SetPriorityGrouping>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a8:	f7ff ff5c 	bl	8003164 <__NVIC_GetPriorityGrouping>
 80032ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7ff ff8e 	bl	80031d4 <NVIC_EncodePriority>
 80032b8:	4602      	mov	r2, r0
 80032ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff5d 	bl	8003180 <__NVIC_SetPriority>
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ffb0 	bl	800323c <SysTick_Config>
 80032dc:	4603      	mov	r3, r0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e267      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d075      	beq.n	80033f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003306:	4b88      	ldr	r3, [pc, #544]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b04      	cmp	r3, #4
 8003310:	d00c      	beq.n	800332c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003312:	4b85      	ldr	r3, [pc, #532]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800331a:	2b08      	cmp	r3, #8
 800331c:	d112      	bne.n	8003344 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331e:	4b82      	ldr	r3, [pc, #520]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800332a:	d10b      	bne.n	8003344 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	4b7e      	ldr	r3, [pc, #504]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d05b      	beq.n	80033f0 <HAL_RCC_OscConfig+0x108>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d157      	bne.n	80033f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e242      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x74>
 800334e:	4b76      	ldr	r3, [pc, #472]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a75      	ldr	r2, [pc, #468]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e01d      	b.n	8003398 <HAL_RCC_OscConfig+0xb0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0x98>
 8003366:	4b70      	ldr	r3, [pc, #448]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6f      	ldr	r2, [pc, #444]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b6d      	ldr	r3, [pc, #436]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6c      	ldr	r2, [pc, #432]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00b      	b.n	8003398 <HAL_RCC_OscConfig+0xb0>
 8003380:	4b69      	ldr	r3, [pc, #420]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a68      	ldr	r2, [pc, #416]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b66      	ldr	r3, [pc, #408]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a65      	ldr	r2, [pc, #404]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7ff fe8c 	bl	80030bc <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a8:	f7ff fe88 	bl	80030bc <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	@ 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e207      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0xc0>
 80033c6:	e014      	b.n	80033f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7ff fe78 	bl	80030bc <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d0:	f7ff fe74 	bl	80030bc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	@ 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1f3      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	4b51      	ldr	r3, [pc, #324]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0xe8>
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d063      	beq.n	80034c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003412:	2b08      	cmp	r3, #8
 8003414:	d11c      	bne.n	8003450 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003416:	4b44      	ldr	r3, [pc, #272]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d116      	bne.n	8003450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	4b41      	ldr	r3, [pc, #260]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_RCC_OscConfig+0x152>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e1c7      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4937      	ldr	r1, [pc, #220]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	e03a      	b.n	80034c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003458:	4b34      	ldr	r3, [pc, #208]	@ (800352c <HAL_RCC_OscConfig+0x244>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7ff fe2d 	bl	80030bc <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003466:	f7ff fe29 	bl	80030bc <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e1a8      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b28      	ldr	r3, [pc, #160]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4925      	ldr	r1, [pc, #148]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
 8003498:	e015      	b.n	80034c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349a:	4b24      	ldr	r3, [pc, #144]	@ (800352c <HAL_RCC_OscConfig+0x244>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7ff fe0c 	bl	80030bc <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a8:	f7ff fe08 	bl	80030bc <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e187      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d036      	beq.n	8003540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <HAL_RCC_OscConfig+0x248>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7ff fdec 	bl	80030bc <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e8:	f7ff fde8 	bl	80030bc <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e167      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_OscConfig+0x240>)
 80034fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x200>
 8003506:	e01b      	b.n	8003540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003508:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <HAL_RCC_OscConfig+0x248>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7ff fdd5 	bl	80030bc <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003514:	e00e      	b.n	8003534 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003516:	f7ff fdd1 	bl	80030bc <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d907      	bls.n	8003534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e150      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
 8003528:	40023800 	.word	0x40023800
 800352c:	42470000 	.word	0x42470000
 8003530:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	4b88      	ldr	r3, [pc, #544]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1ea      	bne.n	8003516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8097 	beq.w	800367c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003552:	4b81      	ldr	r3, [pc, #516]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	4b7d      	ldr	r3, [pc, #500]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	4a7c      	ldr	r2, [pc, #496]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356c:	6413      	str	r3, [r2, #64]	@ 0x40
 800356e:	4b7a      	ldr	r3, [pc, #488]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357e:	4b77      	ldr	r3, [pc, #476]	@ (800375c <HAL_RCC_OscConfig+0x474>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d118      	bne.n	80035bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800358a:	4b74      	ldr	r3, [pc, #464]	@ (800375c <HAL_RCC_OscConfig+0x474>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a73      	ldr	r2, [pc, #460]	@ (800375c <HAL_RCC_OscConfig+0x474>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003596:	f7ff fd91 	bl	80030bc <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359e:	f7ff fd8d 	bl	80030bc <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e10c      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	4b6a      	ldr	r3, [pc, #424]	@ (800375c <HAL_RCC_OscConfig+0x474>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d106      	bne.n	80035d2 <HAL_RCC_OscConfig+0x2ea>
 80035c4:	4b64      	ldr	r3, [pc, #400]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c8:	4a63      	ldr	r2, [pc, #396]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d0:	e01c      	b.n	800360c <HAL_RCC_OscConfig+0x324>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b05      	cmp	r3, #5
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x30c>
 80035da:	4b5f      	ldr	r3, [pc, #380]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035de:	4a5e      	ldr	r2, [pc, #376]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0x324>
 80035f4:	4b58      	ldr	r3, [pc, #352]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f8:	4a57      	ldr	r2, [pc, #348]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003600:	4b55      	ldr	r3, [pc, #340]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003604:	4a54      	ldr	r2, [pc, #336]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003606:	f023 0304 	bic.w	r3, r3, #4
 800360a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7ff fd52 	bl	80030bc <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	e00a      	b.n	8003632 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7ff fd4e 	bl	80030bc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0cb      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	4b49      	ldr	r3, [pc, #292]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ee      	beq.n	800361c <HAL_RCC_OscConfig+0x334>
 800363e:	e014      	b.n	800366a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003640:	f7ff fd3c 	bl	80030bc <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003646:	e00a      	b.n	800365e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003648:	f7ff fd38 	bl	80030bc <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0b5      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365e:	4b3e      	ldr	r3, [pc, #248]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ee      	bne.n	8003648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d105      	bne.n	800367c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003670:	4b39      	ldr	r3, [pc, #228]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	4a38      	ldr	r2, [pc, #224]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800367a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80a1 	beq.w	80037c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003686:	4b34      	ldr	r3, [pc, #208]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b08      	cmp	r3, #8
 8003690:	d05c      	beq.n	800374c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d141      	bne.n	800371e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b31      	ldr	r3, [pc, #196]	@ (8003760 <HAL_RCC_OscConfig+0x478>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7ff fd0c 	bl	80030bc <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7ff fd08 	bl	80030bc <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e087      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	3b01      	subs	r3, #1
 80036e0:	041b      	lsls	r3, r3, #16
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	491b      	ldr	r1, [pc, #108]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003760 <HAL_RCC_OscConfig+0x478>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f6:	f7ff fce1 	bl	80030bc <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fe:	f7ff fcdd 	bl	80030bc <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e05c      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x416>
 800371c:	e054      	b.n	80037c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371e:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <HAL_RCC_OscConfig+0x478>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7ff fcca 	bl	80030bc <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7ff fcc6 	bl	80030bc <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e045      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <HAL_RCC_OscConfig+0x470>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x444>
 800374a:	e03d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d107      	bne.n	8003764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e038      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
 8003758:	40023800 	.word	0x40023800
 800375c:	40007000 	.word	0x40007000
 8003760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003764:	4b1b      	ldr	r3, [pc, #108]	@ (80037d4 <HAL_RCC_OscConfig+0x4ec>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d028      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d121      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d11a      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003794:	4013      	ands	r3, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800379a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800379c:	4293      	cmp	r3, r2
 800379e:	d111      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	3b01      	subs	r3, #1
 80037ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800

080037d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0cc      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b68      	ldr	r3, [pc, #416]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d90c      	bls.n	8003814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b65      	ldr	r3, [pc, #404]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b63      	ldr	r3, [pc, #396]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0b8      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d020      	beq.n	8003862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800382c:	4b59      	ldr	r3, [pc, #356]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a58      	ldr	r2, [pc, #352]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003836:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003844:	4b53      	ldr	r3, [pc, #332]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a52      	ldr	r2, [pc, #328]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800384e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003850:	4b50      	ldr	r3, [pc, #320]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	494d      	ldr	r1, [pc, #308]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d044      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d107      	bne.n	8003886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	4b47      	ldr	r3, [pc, #284]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d119      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e07f      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d003      	beq.n	8003896 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003892:	2b03      	cmp	r3, #3
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003896:	4b3f      	ldr	r3, [pc, #252]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e06f      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e067      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b6:	4b37      	ldr	r3, [pc, #220]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4934      	ldr	r1, [pc, #208]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c8:	f7ff fbf8 	bl	80030bc <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d0:	f7ff fbf4 	bl	80030bc <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e04f      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 020c 	and.w	r2, r3, #12
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d1eb      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f8:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d20c      	bcs.n	8003920 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b22      	ldr	r3, [pc, #136]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b20      	ldr	r3, [pc, #128]	@ (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e032      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800392c:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4916      	ldr	r1, [pc, #88]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394a:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	490e      	ldr	r1, [pc, #56]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800395e:	f000 f821 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8003962:	4602      	mov	r2, r0
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	490a      	ldr	r1, [pc, #40]	@ (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	5ccb      	ldrb	r3, [r1, r3]
 8003972:	fa22 f303 	lsr.w	r3, r2, r3
 8003976:	4a09      	ldr	r2, [pc, #36]	@ (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800397a:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fb58 	bl	8003034 <HAL_InitTick>

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40023c00 	.word	0x40023c00
 8003994:	40023800 	.word	0x40023800
 8003998:	080079e4 	.word	0x080079e4
 800399c:	20000000 	.word	0x20000000
 80039a0:	20000004 	.word	0x20000004

080039a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a8:	b094      	sub	sp, #80	@ 0x50
 80039aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039bc:	4b79      	ldr	r3, [pc, #484]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d00d      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x40>
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	f200 80e1 	bhi.w	8003b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x34>
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d003      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x3a>
 80039d6:	e0db      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d8:	4b73      	ldr	r3, [pc, #460]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039dc:	e0db      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039de:	4b73      	ldr	r3, [pc, #460]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x208>)
 80039e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e2:	e0d8      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ee:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d063      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fa:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	099b      	lsrs	r3, r3, #6
 8003a00:	2200      	movs	r2, #0
 8003a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a0e:	2300      	movs	r3, #0
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a16:	4622      	mov	r2, r4
 8003a18:	462b      	mov	r3, r5
 8003a1a:	f04f 0000 	mov.w	r0, #0
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	0159      	lsls	r1, r3, #5
 8003a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a28:	0150      	lsls	r0, r2, #5
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4621      	mov	r1, r4
 8003a30:	1a51      	subs	r1, r2, r1
 8003a32:	6139      	str	r1, [r7, #16]
 8003a34:	4629      	mov	r1, r5
 8003a36:	eb63 0301 	sbc.w	r3, r3, r1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a48:	4659      	mov	r1, fp
 8003a4a:	018b      	lsls	r3, r1, #6
 8003a4c:	4651      	mov	r1, sl
 8003a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a52:	4651      	mov	r1, sl
 8003a54:	018a      	lsls	r2, r1, #6
 8003a56:	4651      	mov	r1, sl
 8003a58:	ebb2 0801 	subs.w	r8, r2, r1
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a76:	4690      	mov	r8, r2
 8003a78:	4699      	mov	r9, r3
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	eb18 0303 	adds.w	r3, r8, r3
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	462b      	mov	r3, r5
 8003a84:	eb49 0303 	adc.w	r3, r9, r3
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a96:	4629      	mov	r1, r5
 8003a98:	024b      	lsls	r3, r1, #9
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	024a      	lsls	r2, r1, #9
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aaa:	2200      	movs	r2, #0
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ab4:	f7fd f878 	bl	8000ba8 <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4613      	mov	r3, r2
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac0:	e058      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac2:	4b38      	ldr	r3, [pc, #224]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	4611      	mov	r1, r2
 8003ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003adc:	4642      	mov	r2, r8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	f04f 0000 	mov.w	r0, #0
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	0159      	lsls	r1, r3, #5
 8003aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aee:	0150      	lsls	r0, r2, #5
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4641      	mov	r1, r8
 8003af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003afa:	4649      	mov	r1, r9
 8003afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b14:	ebb2 040a 	subs.w	r4, r2, sl
 8003b18:	eb63 050b 	sbc.w	r5, r3, fp
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	00eb      	lsls	r3, r5, #3
 8003b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b2a:	00e2      	lsls	r2, r4, #3
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	461d      	mov	r5, r3
 8003b30:	4643      	mov	r3, r8
 8003b32:	18e3      	adds	r3, r4, r3
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	464b      	mov	r3, r9
 8003b38:	eb45 0303 	adc.w	r3, r5, r3
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	028b      	lsls	r3, r1, #10
 8003b4e:	4621      	mov	r1, r4
 8003b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b54:	4621      	mov	r1, r4
 8003b56:	028a      	lsls	r2, r1, #10
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b5e:	2200      	movs	r2, #0
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	61fa      	str	r2, [r7, #28]
 8003b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b68:	f7fd f81e 	bl	8000ba8 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4613      	mov	r3, r2
 8003b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3750      	adds	r7, #80	@ 0x50
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	00f42400 	.word	0x00f42400
 8003bac:	007a1200 	.word	0x007a1200

08003bb0 <LL_GPIO_SetPinMode>:
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b08b      	sub	sp, #44	@ 0x2c
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	613b      	str	r3, [r7, #16]
  return result;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003bd6:	2320      	movs	r3, #32
 8003bd8:	e003      	b.n	8003be2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	fab3 f383 	clz	r3, r3
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	2103      	movs	r1, #3
 8003be6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	401a      	ands	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	fa93 f3a3 	rbit	r3, r3
 8003bf8:	61fb      	str	r3, [r7, #28]
  return result;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003c04:	2320      	movs	r3, #32
 8003c06:	e003      	b.n	8003c10 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	fa01 f303 	lsl.w	r3, r1, r3
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	601a      	str	r2, [r3, #0]
}
 8003c1e:	bf00      	nop
 8003c20:	372c      	adds	r7, #44	@ 0x2c
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_GPIO_SetPinOutputType>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	605a      	str	r2, [r3, #4]
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_GPIO_SetPinSpeed>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b08b      	sub	sp, #44	@ 0x2c
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	613b      	str	r3, [r7, #16]
  return result;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003c80:	2320      	movs	r3, #32
 8003c82:	e003      	b.n	8003c8c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2103      	movs	r1, #3
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	401a      	ands	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	61fb      	str	r3, [r7, #28]
  return result;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	e003      	b.n	8003cba <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	609a      	str	r2, [r3, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	372c      	adds	r7, #44	@ 0x2c
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_GPIO_SetPinPull>:
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b08b      	sub	sp, #44	@ 0x2c
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	613b      	str	r3, [r7, #16]
  return result;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	e003      	b.n	8003d06 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2103      	movs	r1, #3
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003d28:	2320      	movs	r3, #32
 8003d2a:	e003      	b.n	8003d34 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	60da      	str	r2, [r3, #12]
}
 8003d42:	bf00      	nop
 8003d44:	372c      	adds	r7, #44	@ 0x2c
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_GPIO_SetAFPin_0_7>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b08b      	sub	sp, #44	@ 0x2c
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1a      	ldr	r2, [r3, #32]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	613b      	str	r3, [r7, #16]
  return result;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003d74:	2320      	movs	r3, #32
 8003d76:	e003      	b.n	8003d80 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	fab3 f383 	clz	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	210f      	movs	r1, #15
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	61fb      	str	r3, [r7, #28]
  return result;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003da2:	2320      	movs	r3, #32
 8003da4:	e003      	b.n	8003dae <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	fab3 f383 	clz	r3, r3
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	431a      	orrs	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	372c      	adds	r7, #44	@ 0x2c
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_GPIO_SetAFPin_8_15>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b08b      	sub	sp, #44	@ 0x2c
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	613b      	str	r3, [r7, #16]
  return result;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003df0:	2320      	movs	r3, #32
 8003df2:	e003      	b.n	8003dfc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	210f      	movs	r1, #15
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	401a      	ands	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	61fb      	str	r3, [r7, #28]
  return result;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003e20:	2320      	movs	r3, #32
 8003e22:	e003      	b.n	8003e2c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003e3a:	bf00      	nop
 8003e3c:	372c      	adds	r7, #44	@ 0x2c
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08a      	sub	sp, #40	@ 0x28
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	617b      	str	r3, [r7, #20]
  return result;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <LL_GPIO_Init+0x2e>
    return 32U;
 8003e70:	2320      	movs	r3, #32
 8003e72:	e003      	b.n	8003e7c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	fab3 f383 	clz	r3, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003e7e:	e057      	b.n	8003f30 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2101      	movs	r1, #1
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d049      	beq.n	8003f2a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d003      	beq.n	8003ea6 <LL_GPIO_Init+0x60>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d10d      	bne.n	8003ec2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6a39      	ldr	r1, [r7, #32]
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fed3 	bl	8003c5a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6a39      	ldr	r1, [r7, #32]
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff feb4 	bl	8003c2a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff ff02 	bl	8003cd4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d121      	bne.n	8003f1c <LL_GPIO_Init+0xd6>
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	60bb      	str	r3, [r7, #8]
  return result;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <LL_GPIO_Init+0xac>
    return 32U;
 8003eee:	2320      	movs	r3, #32
 8003ef0:	e003      	b.n	8003efa <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	fab3 f383 	clz	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003efa:	2b07      	cmp	r3, #7
 8003efc:	d807      	bhi.n	8003f0e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	461a      	mov	r2, r3
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ff21 	bl	8003d4e <LL_GPIO_SetAFPin_0_7>
 8003f0c:	e006      	b.n	8003f1c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	461a      	mov	r2, r3
 8003f14:	6a39      	ldr	r1, [r7, #32]
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ff56 	bl	8003dc8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	461a      	mov	r2, r3
 8003f22:	6a39      	ldr	r1, [r7, #32]
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff fe43 	bl	8003bb0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1a0      	bne.n	8003e80 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3728      	adds	r7, #40	@ 0x28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f4c:	4b04      	ldr	r3, [pc, #16]	@ (8003f60 <LL_RCC_GetSysClkSource+0x18>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800

08003f64 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f68:	4b04      	ldr	r3, [pc, #16]	@ (8003f7c <LL_RCC_GetAHBPrescaler+0x18>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800

08003f80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f84:	4b04      	ldr	r3, [pc, #16]	@ (8003f98 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800

08003f9c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003fa0:	4b04      	ldr	r3, [pc, #16]	@ (8003fb4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800

08003fb8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fbc:	4b04      	ldr	r3, [pc, #16]	@ (8003fd0 <LL_RCC_PLL_GetMainSource+0x18>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800

08003fd4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fd8:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <LL_RCC_PLL_GetN+0x18>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	099b      	lsrs	r3, r3, #6
 8003fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40023800 	.word	0x40023800

08003ff0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003ff4:	4b04      	ldr	r3, [pc, #16]	@ (8004008 <LL_RCC_PLL_GetP+0x18>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800

0800400c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004010:	4b04      	ldr	r3, [pc, #16]	@ (8004024 <LL_RCC_PLL_GetDivider+0x18>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004030:	f000 f820 	bl	8004074 <RCC_GetSystemClockFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f840 	bl	80040c4 <RCC_GetHCLKClockFreq>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f84e 	bl	80040f0 <RCC_GetPCLK1ClockFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f85a 	bl	8004118 <RCC_GetPCLK2ClockFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	60da      	str	r2, [r3, #12]
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800407e:	f7ff ff63 	bl	8003f48 <LL_RCC_GetSysClkSource>
 8004082:	4603      	mov	r3, r0
 8004084:	2b08      	cmp	r3, #8
 8004086:	d00c      	beq.n	80040a2 <RCC_GetSystemClockFreq+0x2e>
 8004088:	2b08      	cmp	r3, #8
 800408a:	d80f      	bhi.n	80040ac <RCC_GetSystemClockFreq+0x38>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <RCC_GetSystemClockFreq+0x22>
 8004090:	2b04      	cmp	r3, #4
 8004092:	d003      	beq.n	800409c <RCC_GetSystemClockFreq+0x28>
 8004094:	e00a      	b.n	80040ac <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004096:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <RCC_GetSystemClockFreq+0x48>)
 8004098:	607b      	str	r3, [r7, #4]
      break;
 800409a:	e00a      	b.n	80040b2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800409c:	4b08      	ldr	r3, [pc, #32]	@ (80040c0 <RCC_GetSystemClockFreq+0x4c>)
 800409e:	607b      	str	r3, [r7, #4]
      break;
 80040a0:	e007      	b.n	80040b2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80040a2:	2008      	movs	r0, #8
 80040a4:	f000 f84c 	bl	8004140 <RCC_PLL_GetFreqDomain_SYS>
 80040a8:	6078      	str	r0, [r7, #4]
      break;
 80040aa:	e002      	b.n	80040b2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80040ac:	4b03      	ldr	r3, [pc, #12]	@ (80040bc <RCC_GetSystemClockFreq+0x48>)
 80040ae:	607b      	str	r3, [r7, #4]
      break;
 80040b0:	bf00      	nop
  }

  return frequency;
 80040b2:	687b      	ldr	r3, [r7, #4]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	00f42400 	.word	0x00f42400
 80040c0:	007a1200 	.word	0x007a1200

080040c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80040cc:	f7ff ff4a 	bl	8003f64 <LL_RCC_GetAHBPrescaler>
 80040d0:	4603      	mov	r3, r0
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	4a04      	ldr	r2, [pc, #16]	@ (80040ec <RCC_GetHCLKClockFreq+0x28>)
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	461a      	mov	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	40d3      	lsrs	r3, r2
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	080079e4 	.word	0x080079e4

080040f0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80040f8:	f7ff ff42 	bl	8003f80 <LL_RCC_GetAPB1Prescaler>
 80040fc:	4603      	mov	r3, r0
 80040fe:	0a9b      	lsrs	r3, r3, #10
 8004100:	4a04      	ldr	r2, [pc, #16]	@ (8004114 <RCC_GetPCLK1ClockFreq+0x24>)
 8004102:	5cd3      	ldrb	r3, [r2, r3]
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	40d3      	lsrs	r3, r2
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	080079f4 	.word	0x080079f4

08004118 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004120:	f7ff ff3c 	bl	8003f9c <LL_RCC_GetAPB2Prescaler>
 8004124:	4603      	mov	r3, r0
 8004126:	0b5b      	lsrs	r3, r3, #13
 8004128:	4a04      	ldr	r2, [pc, #16]	@ (800413c <RCC_GetPCLK2ClockFreq+0x24>)
 800412a:	5cd3      	ldrb	r3, [r2, r3]
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	40d3      	lsrs	r3, r2
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	080079f4 	.word	0x080079f4

08004140 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004154:	f7ff ff30 	bl	8003fb8 <LL_RCC_PLL_GetMainSource>
 8004158:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004166:	d003      	beq.n	8004170 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004168:	e005      	b.n	8004176 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800416a:	4b12      	ldr	r3, [pc, #72]	@ (80041b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800416c:	617b      	str	r3, [r7, #20]
      break;
 800416e:	e005      	b.n	800417c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004170:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004172:	617b      	str	r3, [r7, #20]
      break;
 8004174:	e002      	b.n	800417c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004176:	4b0f      	ldr	r3, [pc, #60]	@ (80041b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004178:	617b      	str	r3, [r7, #20]
      break;
 800417a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b08      	cmp	r3, #8
 8004180:	d113      	bne.n	80041aa <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004182:	f7ff ff43 	bl	800400c <LL_RCC_PLL_GetDivider>
 8004186:	4602      	mov	r2, r0
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fbb3 f4f2 	udiv	r4, r3, r2
 800418e:	f7ff ff21 	bl	8003fd4 <LL_RCC_PLL_GetN>
 8004192:	4603      	mov	r3, r0
 8004194:	fb03 f404 	mul.w	r4, r3, r4
 8004198:	f7ff ff2a 	bl	8003ff0 <LL_RCC_PLL_GetP>
 800419c:	4603      	mov	r3, r0
 800419e:	0c1b      	lsrs	r3, r3, #16
 80041a0:	3301      	adds	r3, #1
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80041a8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80041aa:	693b      	ldr	r3, [r7, #16]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd90      	pop	{r4, r7, pc}
 80041b4:	00f42400 	.word	0x00f42400
 80041b8:	007a1200 	.word	0x007a1200

080041bc <LL_SPI_IsEnabled>:
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b40      	cmp	r3, #64	@ 0x40
 80041ce:	d101      	bne.n	80041d4 <LL_SPI_IsEnabled+0x18>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <LL_SPI_IsEnabled+0x1a>
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_SPI_SetCRCPolynomial>:
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	611a      	str	r2, [r3, #16]
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ffd3 	bl	80041bc <LL_SPI_IsEnabled>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d139      	bne.n	8004290 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004224:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	6811      	ldr	r1, [r2, #0]
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	6852      	ldr	r2, [r2, #4]
 8004230:	4311      	orrs	r1, r2
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	6892      	ldr	r2, [r2, #8]
 8004236:	4311      	orrs	r1, r2
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	68d2      	ldr	r2, [r2, #12]
 800423c:	4311      	orrs	r1, r2
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	6912      	ldr	r2, [r2, #16]
 8004242:	4311      	orrs	r1, r2
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	6952      	ldr	r2, [r2, #20]
 8004248:	4311      	orrs	r1, r2
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	6992      	ldr	r2, [r2, #24]
 800424e:	4311      	orrs	r1, r2
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	69d2      	ldr	r2, [r2, #28]
 8004254:	4311      	orrs	r1, r2
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	6a12      	ldr	r2, [r2, #32]
 800425a:	430a      	orrs	r2, r1
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f023 0204 	bic.w	r2, r3, #4
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427e:	d105      	bne.n	800428c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ffab 	bl	80041e2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	61da      	str	r2, [r3, #28]
  return status;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <LL_TIM_SetPrescaler>:
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_TIM_SetAutoReload>:
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <LL_TIM_SetRepetitionCounter>:
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_TIM_OC_SetCompareCH1>:
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <LL_TIM_OC_SetCompareCH2>:
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <LL_TIM_OC_SetCompareCH3>:
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <LL_TIM_OC_SetCompareCH4>:
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f043 0201 	orr.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	615a      	str	r2, [r3, #20]
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3d      	ldr	r2, [pc, #244]	@ (8004494 <LL_TIM_Init+0x108>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <LL_TIM_Init+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043aa:	d00f      	beq.n	80043cc <LL_TIM_Init+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3a      	ldr	r2, [pc, #232]	@ (8004498 <LL_TIM_Init+0x10c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00b      	beq.n	80043cc <LL_TIM_Init+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a39      	ldr	r2, [pc, #228]	@ (800449c <LL_TIM_Init+0x110>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <LL_TIM_Init+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a38      	ldr	r2, [pc, #224]	@ (80044a0 <LL_TIM_Init+0x114>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <LL_TIM_Init+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a37      	ldr	r2, [pc, #220]	@ (80044a4 <LL_TIM_Init+0x118>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d106      	bne.n	80043da <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004494 <LL_TIM_Init+0x108>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d02b      	beq.n	800443a <LL_TIM_Init+0xae>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e8:	d027      	beq.n	800443a <LL_TIM_Init+0xae>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004498 <LL_TIM_Init+0x10c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d023      	beq.n	800443a <LL_TIM_Init+0xae>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a29      	ldr	r2, [pc, #164]	@ (800449c <LL_TIM_Init+0x110>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01f      	beq.n	800443a <LL_TIM_Init+0xae>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a28      	ldr	r2, [pc, #160]	@ (80044a0 <LL_TIM_Init+0x114>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01b      	beq.n	800443a <LL_TIM_Init+0xae>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a27      	ldr	r2, [pc, #156]	@ (80044a4 <LL_TIM_Init+0x118>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d017      	beq.n	800443a <LL_TIM_Init+0xae>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a26      	ldr	r2, [pc, #152]	@ (80044a8 <LL_TIM_Init+0x11c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <LL_TIM_Init+0xae>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a25      	ldr	r2, [pc, #148]	@ (80044ac <LL_TIM_Init+0x120>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00f      	beq.n	800443a <LL_TIM_Init+0xae>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a24      	ldr	r2, [pc, #144]	@ (80044b0 <LL_TIM_Init+0x124>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00b      	beq.n	800443a <LL_TIM_Init+0xae>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a23      	ldr	r2, [pc, #140]	@ (80044b4 <LL_TIM_Init+0x128>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d007      	beq.n	800443a <LL_TIM_Init+0xae>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a22      	ldr	r2, [pc, #136]	@ (80044b8 <LL_TIM_Init+0x12c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d003      	beq.n	800443a <LL_TIM_Init+0xae>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a21      	ldr	r2, [pc, #132]	@ (80044bc <LL_TIM_Init+0x130>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d106      	bne.n	8004448 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ff34 	bl	80042c2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff ff20 	bl	80042a6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a0a      	ldr	r2, [pc, #40]	@ (8004494 <LL_TIM_Init+0x108>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <LL_TIM_Init+0xea>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a0c      	ldr	r2, [pc, #48]	@ (80044a4 <LL_TIM_Init+0x118>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d105      	bne.n	8004482 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff2e 	bl	80042de <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff ff71 	bl	800436a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40010400 	.word	0x40010400
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800
 80044b4:	40001800 	.word	0x40001800
 80044b8:	40001c00 	.word	0x40001c00
 80044bc:	40002000 	.word	0x40002000

080044c0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d6:	d027      	beq.n	8004528 <LL_TIM_OC_Init+0x68>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044de:	d82a      	bhi.n	8004536 <LL_TIM_OC_Init+0x76>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044e6:	d018      	beq.n	800451a <LL_TIM_OC_Init+0x5a>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ee:	d822      	bhi.n	8004536 <LL_TIM_OC_Init+0x76>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d003      	beq.n	80044fe <LL_TIM_OC_Init+0x3e>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d007      	beq.n	800450c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80044fc:	e01b      	b.n	8004536 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f81f 	bl	8004544 <OC1Config>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]
      break;
 800450a:	e015      	b.n	8004538 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f884 	bl	800461c <OC2Config>
 8004514:	4603      	mov	r3, r0
 8004516:	75fb      	strb	r3, [r7, #23]
      break;
 8004518:	e00e      	b.n	8004538 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f8ed 	bl	80046fc <OC3Config>
 8004522:	4603      	mov	r3, r0
 8004524:	75fb      	strb	r3, [r7, #23]
      break;
 8004526:	e007      	b.n	8004538 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f956 	bl	80047dc <OC4Config>
 8004530:	4603      	mov	r3, r0
 8004532:	75fb      	strb	r3, [r7, #23]
      break;
 8004534:	e000      	b.n	8004538 <LL_TIM_OC_Init+0x78>
      break;
 8004536:	bf00      	nop
  }

  return result;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	f023 0201 	bic.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f023 0202 	bic.w	r2, r3, #2
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0201 	bic.w	r2, r3, #1
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004614 <OC1Config+0xd0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <OC1Config+0x6a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <OC1Config+0xd4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d11e      	bne.n	80045ec <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 0208 	bic.w	r2, r3, #8
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 0204 	bic.w	r2, r3, #4
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fe7b 	bl	80042fa <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40010000 	.word	0x40010000
 8004618:	40010400 	.word	0x40010400

0800461c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0210 	bic.w	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0220 	bic.w	r2, r3, #32
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0210 	bic.w	r2, r3, #16
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a1d      	ldr	r2, [pc, #116]	@ (80046f4 <OC2Config+0xd8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <OC2Config+0x70>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a1c      	ldr	r2, [pc, #112]	@ (80046f8 <OC2Config+0xdc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d11f      	bne.n	80046cc <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	019b      	lsls	r3, r3, #6
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	019b      	lsls	r3, r3, #6
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fe19 	bl	8004316 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40010000 	.word	0x40010000
 80046f8:	40010400 	.word	0x40010400

080046fc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0303 	bic.w	r3, r3, #3
 800472a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1d      	ldr	r2, [pc, #116]	@ (80047d4 <OC3Config+0xd8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d003      	beq.n	800476a <OC3Config+0x6e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1c      	ldr	r2, [pc, #112]	@ (80047d8 <OC3Config+0xdc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d11f      	bne.n	80047aa <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	029b      	lsls	r3, r3, #10
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	029b      	lsls	r3, r3, #10
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	015b      	lsls	r3, r3, #5
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff fdb8 	bl	8004332 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40010400 	.word	0x40010400

080047dc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800480a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	031b      	lsls	r3, r3, #12
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	031b      	lsls	r3, r3, #12
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a11      	ldr	r2, [pc, #68]	@ (8004884 <OC4Config+0xa8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <OC4Config+0x70>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a10      	ldr	r2, [pc, #64]	@ (8004888 <OC4Config+0xac>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d107      	bne.n	800485c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	019b      	lsls	r3, r3, #6
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff fd6d 	bl	800434e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40010000 	.word	0x40010000
 8004888:	40010400 	.word	0x40010400

0800488c <LL_USART_IsEnabled>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800489c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048a0:	bf0c      	ite	eq
 80048a2:	2301      	moveq	r3, #1
 80048a4:	2300      	movne	r3, #0
 80048a6:	b2db      	uxtb	r3, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_USART_SetStopBitsLength>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	611a      	str	r2, [r3, #16]
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <LL_USART_SetHWFlowCtrl>:
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	615a      	str	r2, [r3, #20]
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <LL_USART_SetBaudRate>:
{
 8004900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004904:	b0c0      	sub	sp, #256	@ 0x100
 8004906:	af00      	add	r7, sp, #0
 8004908:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800490c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8004910:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004914:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004920:	f040 810c 	bne.w	8004b3c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004924:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004928:	2200      	movs	r2, #0
 800492a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800492e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	1891      	adds	r1, r2, r2
 800493c:	6639      	str	r1, [r7, #96]	@ 0x60
 800493e:	415b      	adcs	r3, r3
 8004940:	667b      	str	r3, [r7, #100]	@ 0x64
 8004942:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004946:	4621      	mov	r1, r4
 8004948:	eb12 0801 	adds.w	r8, r2, r1
 800494c:	4629      	mov	r1, r5
 800494e:	eb43 0901 	adc.w	r9, r3, r1
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800495e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004966:	4690      	mov	r8, r2
 8004968:	4699      	mov	r9, r3
 800496a:	4623      	mov	r3, r4
 800496c:	eb18 0303 	adds.w	r3, r8, r3
 8004970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004974:	462b      	mov	r3, r5
 8004976:	eb49 0303 	adc.w	r3, r9, r3
 800497a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800497e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004982:	2200      	movs	r2, #0
 8004984:	469a      	mov	sl, r3
 8004986:	4693      	mov	fp, r2
 8004988:	eb1a 030a 	adds.w	r3, sl, sl
 800498c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800498e:	eb4b 030b 	adc.w	r3, fp, fp
 8004992:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004994:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004998:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800499c:	f7fc f904 	bl	8000ba8 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4b64      	ldr	r3, [pc, #400]	@ (8004b38 <LL_USART_SetBaudRate+0x238>)
 80049a6:	fba3 2302 	umull	r2, r3, r3, r2
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	b29c      	uxth	r4, r3
 80049b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049bc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049c0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80049c4:	4642      	mov	r2, r8
 80049c6:	464b      	mov	r3, r9
 80049c8:	1891      	adds	r1, r2, r2
 80049ca:	6539      	str	r1, [r7, #80]	@ 0x50
 80049cc:	415b      	adcs	r3, r3
 80049ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80049d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049d4:	4641      	mov	r1, r8
 80049d6:	1851      	adds	r1, r2, r1
 80049d8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049da:	4649      	mov	r1, r9
 80049dc:	414b      	adcs	r3, r1
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80049ec:	4659      	mov	r1, fp
 80049ee:	00cb      	lsls	r3, r1, #3
 80049f0:	4651      	mov	r1, sl
 80049f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f6:	4651      	mov	r1, sl
 80049f8:	00ca      	lsls	r2, r1, #3
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	4642      	mov	r2, r8
 8004a02:	189b      	adds	r3, r3, r2
 8004a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a08:	464b      	mov	r3, r9
 8004a0a:	460a      	mov	r2, r1
 8004a0c:	eb42 0303 	adc.w	r3, r2, r3
 8004a10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004a14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a1e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004a22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004a26:	460b      	mov	r3, r1
 8004a28:	18db      	adds	r3, r3, r3
 8004a2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	eb42 0303 	adc.w	r3, r2, r3
 8004a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a38:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004a3c:	f7fc f8b4 	bl	8000ba8 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4611      	mov	r1, r2
 8004a46:	4b3c      	ldr	r3, [pc, #240]	@ (8004b38 <LL_USART_SetBaudRate+0x238>)
 8004a48:	fba3 2301 	umull	r2, r3, r3, r1
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	2264      	movs	r2, #100	@ 0x64
 8004a50:	fb02 f303 	mul.w	r3, r2, r3
 8004a54:	1acb      	subs	r3, r1, r3
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a5c:	4b36      	ldr	r3, [pc, #216]	@ (8004b38 <LL_USART_SetBaudRate+0x238>)
 8004a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	4423      	add	r3, r4
 8004a72:	b29c      	uxth	r4, r3
 8004a74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a7e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a82:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8004a86:	4642      	mov	r2, r8
 8004a88:	464b      	mov	r3, r9
 8004a8a:	1891      	adds	r1, r2, r2
 8004a8c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a8e:	415b      	adcs	r3, r3
 8004a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a92:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a96:	4641      	mov	r1, r8
 8004a98:	1851      	adds	r1, r2, r1
 8004a9a:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	414b      	adcs	r3, r1
 8004aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004aae:	4659      	mov	r1, fp
 8004ab0:	00cb      	lsls	r3, r1, #3
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab8:	4651      	mov	r1, sl
 8004aba:	00ca      	lsls	r2, r1, #3
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	189b      	adds	r3, r3, r2
 8004ac6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004aca:	464b      	mov	r3, r9
 8004acc:	460a      	mov	r2, r1
 8004ace:	eb42 0303 	adc.w	r3, r2, r3
 8004ad2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ad6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ae0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004ae4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	18db      	adds	r3, r3, r3
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aee:	4613      	mov	r3, r2
 8004af0:	eb42 0303 	adc.w	r3, r2, r3
 8004af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004afa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8004afe:	f7fc f853 	bl	8000ba8 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4b0c      	ldr	r3, [pc, #48]	@ (8004b38 <LL_USART_SetBaudRate+0x238>)
 8004b08:	fba3 1302 	umull	r1, r3, r3, r2
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	2164      	movs	r1, #100	@ 0x64
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	3332      	adds	r3, #50	@ 0x32
 8004b1a:	4a07      	ldr	r2, [pc, #28]	@ (8004b38 <LL_USART_SetBaudRate+0x238>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	4423      	add	r3, r4
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b34:	609a      	str	r2, [r3, #8]
}
 8004b36:	e108      	b.n	8004d4a <LL_USART_SetBaudRate+0x44a>
 8004b38:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004b3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b46:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b4a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8004b4e:	4642      	mov	r2, r8
 8004b50:	464b      	mov	r3, r9
 8004b52:	1891      	adds	r1, r2, r2
 8004b54:	6239      	str	r1, [r7, #32]
 8004b56:	415b      	adcs	r3, r3
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b5e:	4641      	mov	r1, r8
 8004b60:	1854      	adds	r4, r2, r1
 8004b62:	4649      	mov	r1, r9
 8004b64:	eb43 0501 	adc.w	r5, r3, r1
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	00eb      	lsls	r3, r5, #3
 8004b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b76:	00e2      	lsls	r2, r4, #3
 8004b78:	4614      	mov	r4, r2
 8004b7a:	461d      	mov	r5, r3
 8004b7c:	4643      	mov	r3, r8
 8004b7e:	18e3      	adds	r3, r4, r3
 8004b80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b84:	464b      	mov	r3, r9
 8004b86:	eb45 0303 	adc.w	r3, r5, r3
 8004b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004b8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b98:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004ba8:	4629      	mov	r1, r5
 8004baa:	008b      	lsls	r3, r1, #2
 8004bac:	4621      	mov	r1, r4
 8004bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	008a      	lsls	r2, r1, #2
 8004bb6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004bba:	f7fb fff5 	bl	8000ba8 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4b65      	ldr	r3, [pc, #404]	@ (8004d58 <LL_USART_SetBaudRate+0x458>)
 8004bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	b29c      	uxth	r4, r3
 8004bd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bde:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8004be2:	4642      	mov	r2, r8
 8004be4:	464b      	mov	r3, r9
 8004be6:	1891      	adds	r1, r2, r2
 8004be8:	61b9      	str	r1, [r7, #24]
 8004bea:	415b      	adcs	r3, r3
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	1851      	adds	r1, r2, r1
 8004bf6:	6139      	str	r1, [r7, #16]
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	414b      	adcs	r3, r1
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c0a:	4659      	mov	r1, fp
 8004c0c:	00cb      	lsls	r3, r1, #3
 8004c0e:	4651      	mov	r1, sl
 8004c10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c14:	4651      	mov	r1, sl
 8004c16:	00ca      	lsls	r2, r1, #3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4642      	mov	r2, r8
 8004c20:	189b      	adds	r3, r3, r2
 8004c22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c26:	464b      	mov	r3, r9
 8004c28:	460a      	mov	r2, r1
 8004c2a:	eb42 0303 	adc.w	r3, r2, r3
 8004c2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c3c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	008b      	lsls	r3, r1, #2
 8004c50:	4641      	mov	r1, r8
 8004c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c56:	4641      	mov	r1, r8
 8004c58:	008a      	lsls	r2, r1, #2
 8004c5a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004c5e:	f7fb ffa3 	bl	8000ba8 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	4b3b      	ldr	r3, [pc, #236]	@ (8004d58 <LL_USART_SetBaudRate+0x458>)
 8004c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	2264      	movs	r2, #100	@ 0x64
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	1acb      	subs	r3, r1, r3
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	3332      	adds	r3, #50	@ 0x32
 8004c7c:	4a36      	ldr	r2, [pc, #216]	@ (8004d58 <LL_USART_SetBaudRate+0x458>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	4423      	add	r3, r4
 8004c8e:	b29c      	uxth	r4, r3
 8004c90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c94:	2200      	movs	r2, #0
 8004c96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c98:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c9a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c9e:	4642      	mov	r2, r8
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	1891      	adds	r1, r2, r2
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	415b      	adcs	r3, r3
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cae:	4641      	mov	r1, r8
 8004cb0:	1851      	adds	r1, r2, r1
 8004cb2:	6039      	str	r1, [r7, #0]
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	414b      	adcs	r3, r1
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cc6:	4659      	mov	r1, fp
 8004cc8:	00cb      	lsls	r3, r1, #3
 8004cca:	4651      	mov	r1, sl
 8004ccc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd0:	4651      	mov	r1, sl
 8004cd2:	00ca      	lsls	r2, r1, #3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4603      	mov	r3, r0
 8004cda:	4642      	mov	r2, r8
 8004cdc:	189b      	adds	r3, r3, r2
 8004cde:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	460a      	mov	r2, r1
 8004ce4:	eb42 0303 	adc.w	r3, r2, r3
 8004ce8:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004cee:	2200      	movs	r2, #0
 8004cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8004d00:	4649      	mov	r1, r9
 8004d02:	008b      	lsls	r3, r1, #2
 8004d04:	4641      	mov	r1, r8
 8004d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	008a      	lsls	r2, r1, #2
 8004d0e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004d12:	f7fb ff49 	bl	8000ba8 <__aeabi_uldivmod>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d58 <LL_USART_SetBaudRate+0x458>)
 8004d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	2164      	movs	r1, #100	@ 0x64
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	3332      	adds	r3, #50	@ 0x32
 8004d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d58 <LL_USART_SetBaudRate+0x458>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	4423      	add	r3, r4
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d48:	609a      	str	r2, [r3, #8]
}
 8004d4a:	bf00      	nop
 8004d4c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d50:	46bd      	mov	sp, r7
 8004d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d56:	bf00      	nop
 8004d58:	51eb851f 	.word	0x51eb851f

08004d5c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff fd8c 	bl	800488c <LL_USART_IsEnabled>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d15e      	bne.n	8004e38 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004d82:	f023 030c 	bic.w	r3, r3, #12
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	6851      	ldr	r1, [r2, #4]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	4311      	orrs	r1, r2
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	6912      	ldr	r2, [r2, #16]
 8004d94:	4311      	orrs	r1, r2
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	6992      	ldr	r2, [r2, #24]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff fd83 	bl	80048b4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fd90 	bl	80048da <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004dba:	f107 0308 	add.w	r3, r7, #8
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff f932 	bl	8004028 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e44 <LL_USART_Init+0xe8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d102      	bne.n	8004dd2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	e021      	b.n	8004e16 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <LL_USART_Init+0xec>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d102      	bne.n	8004de0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e01a      	b.n	8004e16 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e4c <LL_USART_Init+0xf0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d102      	bne.n	8004dee <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	e013      	b.n	8004e16 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a17      	ldr	r2, [pc, #92]	@ (8004e50 <LL_USART_Init+0xf4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d102      	bne.n	8004dfc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	e00c      	b.n	8004e16 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a15      	ldr	r2, [pc, #84]	@ (8004e54 <LL_USART_Init+0xf8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d102      	bne.n	8004e0a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	e005      	b.n	8004e16 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a12      	ldr	r2, [pc, #72]	@ (8004e58 <LL_USART_Init+0xfc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d101      	bne.n	8004e16 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00d      	beq.n	8004e38 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004e24:	2300      	movs	r3, #0
 8004e26:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fd64 	bl	8004900 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004e38:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40011000 	.word	0x40011000
 8004e48:	40004400 	.word	0x40004400
 8004e4c:	40004800 	.word	0x40004800
 8004e50:	40011400 	.word	0x40011400
 8004e54:	40004c00 	.word	0x40004c00
 8004e58:	40005000 	.word	0x40005000

08004e5c <__cvt>:
 8004e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	ec57 6b10 	vmov	r6, r7, d0
 8004e64:	2f00      	cmp	r7, #0
 8004e66:	460c      	mov	r4, r1
 8004e68:	4619      	mov	r1, r3
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	bfbb      	ittet	lt
 8004e6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004e72:	461f      	movlt	r7, r3
 8004e74:	2300      	movge	r3, #0
 8004e76:	232d      	movlt	r3, #45	@ 0x2d
 8004e78:	700b      	strb	r3, [r1, #0]
 8004e7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004e80:	4691      	mov	r9, r2
 8004e82:	f023 0820 	bic.w	r8, r3, #32
 8004e86:	bfbc      	itt	lt
 8004e88:	4632      	movlt	r2, r6
 8004e8a:	4616      	movlt	r6, r2
 8004e8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e90:	d005      	beq.n	8004e9e <__cvt+0x42>
 8004e92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e96:	d100      	bne.n	8004e9a <__cvt+0x3e>
 8004e98:	3401      	adds	r4, #1
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	e000      	b.n	8004ea0 <__cvt+0x44>
 8004e9e:	2103      	movs	r1, #3
 8004ea0:	ab03      	add	r3, sp, #12
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	ab02      	add	r3, sp, #8
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	ec47 6b10 	vmov	d0, r6, r7
 8004eac:	4653      	mov	r3, sl
 8004eae:	4622      	mov	r2, r4
 8004eb0:	f000 ff3e 	bl	8005d30 <_dtoa_r>
 8004eb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004eb8:	4605      	mov	r5, r0
 8004eba:	d119      	bne.n	8004ef0 <__cvt+0x94>
 8004ebc:	f019 0f01 	tst.w	r9, #1
 8004ec0:	d00e      	beq.n	8004ee0 <__cvt+0x84>
 8004ec2:	eb00 0904 	add.w	r9, r0, r4
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4630      	mov	r0, r6
 8004ecc:	4639      	mov	r1, r7
 8004ece:	f7fb fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed2:	b108      	cbz	r0, 8004ed8 <__cvt+0x7c>
 8004ed4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ed8:	2230      	movs	r2, #48	@ 0x30
 8004eda:	9b03      	ldr	r3, [sp, #12]
 8004edc:	454b      	cmp	r3, r9
 8004ede:	d31e      	bcc.n	8004f1e <__cvt+0xc2>
 8004ee0:	9b03      	ldr	r3, [sp, #12]
 8004ee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ee4:	1b5b      	subs	r3, r3, r5
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	b004      	add	sp, #16
 8004eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ef4:	eb00 0904 	add.w	r9, r0, r4
 8004ef8:	d1e5      	bne.n	8004ec6 <__cvt+0x6a>
 8004efa:	7803      	ldrb	r3, [r0, #0]
 8004efc:	2b30      	cmp	r3, #48	@ 0x30
 8004efe:	d10a      	bne.n	8004f16 <__cvt+0xba>
 8004f00:	2200      	movs	r2, #0
 8004f02:	2300      	movs	r3, #0
 8004f04:	4630      	mov	r0, r6
 8004f06:	4639      	mov	r1, r7
 8004f08:	f7fb fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f0c:	b918      	cbnz	r0, 8004f16 <__cvt+0xba>
 8004f0e:	f1c4 0401 	rsb	r4, r4, #1
 8004f12:	f8ca 4000 	str.w	r4, [sl]
 8004f16:	f8da 3000 	ldr.w	r3, [sl]
 8004f1a:	4499      	add	r9, r3
 8004f1c:	e7d3      	b.n	8004ec6 <__cvt+0x6a>
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	9103      	str	r1, [sp, #12]
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e7d9      	b.n	8004eda <__cvt+0x7e>

08004f26 <__exponent>:
 8004f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	bfba      	itte	lt
 8004f2c:	4249      	neglt	r1, r1
 8004f2e:	232d      	movlt	r3, #45	@ 0x2d
 8004f30:	232b      	movge	r3, #43	@ 0x2b
 8004f32:	2909      	cmp	r1, #9
 8004f34:	7002      	strb	r2, [r0, #0]
 8004f36:	7043      	strb	r3, [r0, #1]
 8004f38:	dd29      	ble.n	8004f8e <__exponent+0x68>
 8004f3a:	f10d 0307 	add.w	r3, sp, #7
 8004f3e:	461d      	mov	r5, r3
 8004f40:	270a      	movs	r7, #10
 8004f42:	461a      	mov	r2, r3
 8004f44:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f48:	fb07 1416 	mls	r4, r7, r6, r1
 8004f4c:	3430      	adds	r4, #48	@ 0x30
 8004f4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f52:	460c      	mov	r4, r1
 8004f54:	2c63      	cmp	r4, #99	@ 0x63
 8004f56:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	dcf1      	bgt.n	8004f42 <__exponent+0x1c>
 8004f5e:	3130      	adds	r1, #48	@ 0x30
 8004f60:	1e94      	subs	r4, r2, #2
 8004f62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f66:	1c41      	adds	r1, r0, #1
 8004f68:	4623      	mov	r3, r4
 8004f6a:	42ab      	cmp	r3, r5
 8004f6c:	d30a      	bcc.n	8004f84 <__exponent+0x5e>
 8004f6e:	f10d 0309 	add.w	r3, sp, #9
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	42ac      	cmp	r4, r5
 8004f76:	bf88      	it	hi
 8004f78:	2300      	movhi	r3, #0
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	4403      	add	r3, r0
 8004f7e:	1a18      	subs	r0, r3, r0
 8004f80:	b003      	add	sp, #12
 8004f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f8c:	e7ed      	b.n	8004f6a <__exponent+0x44>
 8004f8e:	2330      	movs	r3, #48	@ 0x30
 8004f90:	3130      	adds	r1, #48	@ 0x30
 8004f92:	7083      	strb	r3, [r0, #2]
 8004f94:	70c1      	strb	r1, [r0, #3]
 8004f96:	1d03      	adds	r3, r0, #4
 8004f98:	e7f1      	b.n	8004f7e <__exponent+0x58>
	...

08004f9c <_printf_float>:
 8004f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa0:	b08d      	sub	sp, #52	@ 0x34
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004fa8:	4616      	mov	r6, r2
 8004faa:	461f      	mov	r7, r3
 8004fac:	4605      	mov	r5, r0
 8004fae:	f000 fdbd 	bl	8005b2c <_localeconv_r>
 8004fb2:	6803      	ldr	r3, [r0, #0]
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb f95a 	bl	8000270 <strlen>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc4:	9005      	str	r0, [sp, #20]
 8004fc6:	3307      	adds	r3, #7
 8004fc8:	f023 0307 	bic.w	r3, r3, #7
 8004fcc:	f103 0208 	add.w	r2, r3, #8
 8004fd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004fd4:	f8d4 b000 	ldr.w	fp, [r4]
 8004fd8:	f8c8 2000 	str.w	r2, [r8]
 8004fdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fe0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004fe4:	9307      	str	r3, [sp, #28]
 8004fe6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ff2:	4b9c      	ldr	r3, [pc, #624]	@ (8005264 <_printf_float+0x2c8>)
 8004ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff8:	f7fb fd98 	bl	8000b2c <__aeabi_dcmpun>
 8004ffc:	bb70      	cbnz	r0, 800505c <_printf_float+0xc0>
 8004ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005002:	4b98      	ldr	r3, [pc, #608]	@ (8005264 <_printf_float+0x2c8>)
 8005004:	f04f 32ff 	mov.w	r2, #4294967295
 8005008:	f7fb fd72 	bl	8000af0 <__aeabi_dcmple>
 800500c:	bb30      	cbnz	r0, 800505c <_printf_float+0xc0>
 800500e:	2200      	movs	r2, #0
 8005010:	2300      	movs	r3, #0
 8005012:	4640      	mov	r0, r8
 8005014:	4649      	mov	r1, r9
 8005016:	f7fb fd61 	bl	8000adc <__aeabi_dcmplt>
 800501a:	b110      	cbz	r0, 8005022 <_printf_float+0x86>
 800501c:	232d      	movs	r3, #45	@ 0x2d
 800501e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005022:	4a91      	ldr	r2, [pc, #580]	@ (8005268 <_printf_float+0x2cc>)
 8005024:	4b91      	ldr	r3, [pc, #580]	@ (800526c <_printf_float+0x2d0>)
 8005026:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800502a:	bf8c      	ite	hi
 800502c:	4690      	movhi	r8, r2
 800502e:	4698      	movls	r8, r3
 8005030:	2303      	movs	r3, #3
 8005032:	6123      	str	r3, [r4, #16]
 8005034:	f02b 0304 	bic.w	r3, fp, #4
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	f04f 0900 	mov.w	r9, #0
 800503e:	9700      	str	r7, [sp, #0]
 8005040:	4633      	mov	r3, r6
 8005042:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005044:	4621      	mov	r1, r4
 8005046:	4628      	mov	r0, r5
 8005048:	f000 f9d2 	bl	80053f0 <_printf_common>
 800504c:	3001      	adds	r0, #1
 800504e:	f040 808d 	bne.w	800516c <_printf_float+0x1d0>
 8005052:	f04f 30ff 	mov.w	r0, #4294967295
 8005056:	b00d      	add	sp, #52	@ 0x34
 8005058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	4640      	mov	r0, r8
 8005062:	4649      	mov	r1, r9
 8005064:	f7fb fd62 	bl	8000b2c <__aeabi_dcmpun>
 8005068:	b140      	cbz	r0, 800507c <_printf_float+0xe0>
 800506a:	464b      	mov	r3, r9
 800506c:	2b00      	cmp	r3, #0
 800506e:	bfbc      	itt	lt
 8005070:	232d      	movlt	r3, #45	@ 0x2d
 8005072:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005076:	4a7e      	ldr	r2, [pc, #504]	@ (8005270 <_printf_float+0x2d4>)
 8005078:	4b7e      	ldr	r3, [pc, #504]	@ (8005274 <_printf_float+0x2d8>)
 800507a:	e7d4      	b.n	8005026 <_printf_float+0x8a>
 800507c:	6863      	ldr	r3, [r4, #4]
 800507e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005082:	9206      	str	r2, [sp, #24]
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	d13b      	bne.n	8005100 <_printf_float+0x164>
 8005088:	2306      	movs	r3, #6
 800508a:	6063      	str	r3, [r4, #4]
 800508c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005090:	2300      	movs	r3, #0
 8005092:	6022      	str	r2, [r4, #0]
 8005094:	9303      	str	r3, [sp, #12]
 8005096:	ab0a      	add	r3, sp, #40	@ 0x28
 8005098:	e9cd a301 	strd	sl, r3, [sp, #4]
 800509c:	ab09      	add	r3, sp, #36	@ 0x24
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	6861      	ldr	r1, [r4, #4]
 80050a2:	ec49 8b10 	vmov	d0, r8, r9
 80050a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80050aa:	4628      	mov	r0, r5
 80050ac:	f7ff fed6 	bl	8004e5c <__cvt>
 80050b0:	9b06      	ldr	r3, [sp, #24]
 80050b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050b4:	2b47      	cmp	r3, #71	@ 0x47
 80050b6:	4680      	mov	r8, r0
 80050b8:	d129      	bne.n	800510e <_printf_float+0x172>
 80050ba:	1cc8      	adds	r0, r1, #3
 80050bc:	db02      	blt.n	80050c4 <_printf_float+0x128>
 80050be:	6863      	ldr	r3, [r4, #4]
 80050c0:	4299      	cmp	r1, r3
 80050c2:	dd41      	ble.n	8005148 <_printf_float+0x1ac>
 80050c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80050c8:	fa5f fa8a 	uxtb.w	sl, sl
 80050cc:	3901      	subs	r1, #1
 80050ce:	4652      	mov	r2, sl
 80050d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80050d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80050d6:	f7ff ff26 	bl	8004f26 <__exponent>
 80050da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050dc:	1813      	adds	r3, r2, r0
 80050de:	2a01      	cmp	r2, #1
 80050e0:	4681      	mov	r9, r0
 80050e2:	6123      	str	r3, [r4, #16]
 80050e4:	dc02      	bgt.n	80050ec <_printf_float+0x150>
 80050e6:	6822      	ldr	r2, [r4, #0]
 80050e8:	07d2      	lsls	r2, r2, #31
 80050ea:	d501      	bpl.n	80050f0 <_printf_float+0x154>
 80050ec:	3301      	adds	r3, #1
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0a2      	beq.n	800503e <_printf_float+0xa2>
 80050f8:	232d      	movs	r3, #45	@ 0x2d
 80050fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050fe:	e79e      	b.n	800503e <_printf_float+0xa2>
 8005100:	9a06      	ldr	r2, [sp, #24]
 8005102:	2a47      	cmp	r2, #71	@ 0x47
 8005104:	d1c2      	bne.n	800508c <_printf_float+0xf0>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1c0      	bne.n	800508c <_printf_float+0xf0>
 800510a:	2301      	movs	r3, #1
 800510c:	e7bd      	b.n	800508a <_printf_float+0xee>
 800510e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005112:	d9db      	bls.n	80050cc <_printf_float+0x130>
 8005114:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005118:	d118      	bne.n	800514c <_printf_float+0x1b0>
 800511a:	2900      	cmp	r1, #0
 800511c:	6863      	ldr	r3, [r4, #4]
 800511e:	dd0b      	ble.n	8005138 <_printf_float+0x19c>
 8005120:	6121      	str	r1, [r4, #16]
 8005122:	b913      	cbnz	r3, 800512a <_printf_float+0x18e>
 8005124:	6822      	ldr	r2, [r4, #0]
 8005126:	07d0      	lsls	r0, r2, #31
 8005128:	d502      	bpl.n	8005130 <_printf_float+0x194>
 800512a:	3301      	adds	r3, #1
 800512c:	440b      	add	r3, r1
 800512e:	6123      	str	r3, [r4, #16]
 8005130:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005132:	f04f 0900 	mov.w	r9, #0
 8005136:	e7db      	b.n	80050f0 <_printf_float+0x154>
 8005138:	b913      	cbnz	r3, 8005140 <_printf_float+0x1a4>
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	07d2      	lsls	r2, r2, #31
 800513e:	d501      	bpl.n	8005144 <_printf_float+0x1a8>
 8005140:	3302      	adds	r3, #2
 8005142:	e7f4      	b.n	800512e <_printf_float+0x192>
 8005144:	2301      	movs	r3, #1
 8005146:	e7f2      	b.n	800512e <_printf_float+0x192>
 8005148:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800514c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800514e:	4299      	cmp	r1, r3
 8005150:	db05      	blt.n	800515e <_printf_float+0x1c2>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	6121      	str	r1, [r4, #16]
 8005156:	07d8      	lsls	r0, r3, #31
 8005158:	d5ea      	bpl.n	8005130 <_printf_float+0x194>
 800515a:	1c4b      	adds	r3, r1, #1
 800515c:	e7e7      	b.n	800512e <_printf_float+0x192>
 800515e:	2900      	cmp	r1, #0
 8005160:	bfd4      	ite	le
 8005162:	f1c1 0202 	rsble	r2, r1, #2
 8005166:	2201      	movgt	r2, #1
 8005168:	4413      	add	r3, r2
 800516a:	e7e0      	b.n	800512e <_printf_float+0x192>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	055a      	lsls	r2, r3, #21
 8005170:	d407      	bmi.n	8005182 <_printf_float+0x1e6>
 8005172:	6923      	ldr	r3, [r4, #16]
 8005174:	4642      	mov	r2, r8
 8005176:	4631      	mov	r1, r6
 8005178:	4628      	mov	r0, r5
 800517a:	47b8      	blx	r7
 800517c:	3001      	adds	r0, #1
 800517e:	d12b      	bne.n	80051d8 <_printf_float+0x23c>
 8005180:	e767      	b.n	8005052 <_printf_float+0xb6>
 8005182:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005186:	f240 80dd 	bls.w	8005344 <_printf_float+0x3a8>
 800518a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800518e:	2200      	movs	r2, #0
 8005190:	2300      	movs	r3, #0
 8005192:	f7fb fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 8005196:	2800      	cmp	r0, #0
 8005198:	d033      	beq.n	8005202 <_printf_float+0x266>
 800519a:	4a37      	ldr	r2, [pc, #220]	@ (8005278 <_printf_float+0x2dc>)
 800519c:	2301      	movs	r3, #1
 800519e:	4631      	mov	r1, r6
 80051a0:	4628      	mov	r0, r5
 80051a2:	47b8      	blx	r7
 80051a4:	3001      	adds	r0, #1
 80051a6:	f43f af54 	beq.w	8005052 <_printf_float+0xb6>
 80051aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80051ae:	4543      	cmp	r3, r8
 80051b0:	db02      	blt.n	80051b8 <_printf_float+0x21c>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	07d8      	lsls	r0, r3, #31
 80051b6:	d50f      	bpl.n	80051d8 <_printf_float+0x23c>
 80051b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051bc:	4631      	mov	r1, r6
 80051be:	4628      	mov	r0, r5
 80051c0:	47b8      	blx	r7
 80051c2:	3001      	adds	r0, #1
 80051c4:	f43f af45 	beq.w	8005052 <_printf_float+0xb6>
 80051c8:	f04f 0900 	mov.w	r9, #0
 80051cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80051d0:	f104 0a1a 	add.w	sl, r4, #26
 80051d4:	45c8      	cmp	r8, r9
 80051d6:	dc09      	bgt.n	80051ec <_printf_float+0x250>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	079b      	lsls	r3, r3, #30
 80051dc:	f100 8103 	bmi.w	80053e6 <_printf_float+0x44a>
 80051e0:	68e0      	ldr	r0, [r4, #12]
 80051e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051e4:	4298      	cmp	r0, r3
 80051e6:	bfb8      	it	lt
 80051e8:	4618      	movlt	r0, r3
 80051ea:	e734      	b.n	8005056 <_printf_float+0xba>
 80051ec:	2301      	movs	r3, #1
 80051ee:	4652      	mov	r2, sl
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	47b8      	blx	r7
 80051f6:	3001      	adds	r0, #1
 80051f8:	f43f af2b 	beq.w	8005052 <_printf_float+0xb6>
 80051fc:	f109 0901 	add.w	r9, r9, #1
 8005200:	e7e8      	b.n	80051d4 <_printf_float+0x238>
 8005202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	dc39      	bgt.n	800527c <_printf_float+0x2e0>
 8005208:	4a1b      	ldr	r2, [pc, #108]	@ (8005278 <_printf_float+0x2dc>)
 800520a:	2301      	movs	r3, #1
 800520c:	4631      	mov	r1, r6
 800520e:	4628      	mov	r0, r5
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	f43f af1d 	beq.w	8005052 <_printf_float+0xb6>
 8005218:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800521c:	ea59 0303 	orrs.w	r3, r9, r3
 8005220:	d102      	bne.n	8005228 <_printf_float+0x28c>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	07d9      	lsls	r1, r3, #31
 8005226:	d5d7      	bpl.n	80051d8 <_printf_float+0x23c>
 8005228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800522c:	4631      	mov	r1, r6
 800522e:	4628      	mov	r0, r5
 8005230:	47b8      	blx	r7
 8005232:	3001      	adds	r0, #1
 8005234:	f43f af0d 	beq.w	8005052 <_printf_float+0xb6>
 8005238:	f04f 0a00 	mov.w	sl, #0
 800523c:	f104 0b1a 	add.w	fp, r4, #26
 8005240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005242:	425b      	negs	r3, r3
 8005244:	4553      	cmp	r3, sl
 8005246:	dc01      	bgt.n	800524c <_printf_float+0x2b0>
 8005248:	464b      	mov	r3, r9
 800524a:	e793      	b.n	8005174 <_printf_float+0x1d8>
 800524c:	2301      	movs	r3, #1
 800524e:	465a      	mov	r2, fp
 8005250:	4631      	mov	r1, r6
 8005252:	4628      	mov	r0, r5
 8005254:	47b8      	blx	r7
 8005256:	3001      	adds	r0, #1
 8005258:	f43f aefb 	beq.w	8005052 <_printf_float+0xb6>
 800525c:	f10a 0a01 	add.w	sl, sl, #1
 8005260:	e7ee      	b.n	8005240 <_printf_float+0x2a4>
 8005262:	bf00      	nop
 8005264:	7fefffff 	.word	0x7fefffff
 8005268:	08007a00 	.word	0x08007a00
 800526c:	080079fc 	.word	0x080079fc
 8005270:	08007a08 	.word	0x08007a08
 8005274:	08007a04 	.word	0x08007a04
 8005278:	08007a0c 	.word	0x08007a0c
 800527c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800527e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005282:	4553      	cmp	r3, sl
 8005284:	bfa8      	it	ge
 8005286:	4653      	movge	r3, sl
 8005288:	2b00      	cmp	r3, #0
 800528a:	4699      	mov	r9, r3
 800528c:	dc36      	bgt.n	80052fc <_printf_float+0x360>
 800528e:	f04f 0b00 	mov.w	fp, #0
 8005292:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005296:	f104 021a 	add.w	r2, r4, #26
 800529a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800529c:	9306      	str	r3, [sp, #24]
 800529e:	eba3 0309 	sub.w	r3, r3, r9
 80052a2:	455b      	cmp	r3, fp
 80052a4:	dc31      	bgt.n	800530a <_printf_float+0x36e>
 80052a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a8:	459a      	cmp	sl, r3
 80052aa:	dc3a      	bgt.n	8005322 <_printf_float+0x386>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	07da      	lsls	r2, r3, #31
 80052b0:	d437      	bmi.n	8005322 <_printf_float+0x386>
 80052b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052b4:	ebaa 0903 	sub.w	r9, sl, r3
 80052b8:	9b06      	ldr	r3, [sp, #24]
 80052ba:	ebaa 0303 	sub.w	r3, sl, r3
 80052be:	4599      	cmp	r9, r3
 80052c0:	bfa8      	it	ge
 80052c2:	4699      	movge	r9, r3
 80052c4:	f1b9 0f00 	cmp.w	r9, #0
 80052c8:	dc33      	bgt.n	8005332 <_printf_float+0x396>
 80052ca:	f04f 0800 	mov.w	r8, #0
 80052ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052d2:	f104 0b1a 	add.w	fp, r4, #26
 80052d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d8:	ebaa 0303 	sub.w	r3, sl, r3
 80052dc:	eba3 0309 	sub.w	r3, r3, r9
 80052e0:	4543      	cmp	r3, r8
 80052e2:	f77f af79 	ble.w	80051d8 <_printf_float+0x23c>
 80052e6:	2301      	movs	r3, #1
 80052e8:	465a      	mov	r2, fp
 80052ea:	4631      	mov	r1, r6
 80052ec:	4628      	mov	r0, r5
 80052ee:	47b8      	blx	r7
 80052f0:	3001      	adds	r0, #1
 80052f2:	f43f aeae 	beq.w	8005052 <_printf_float+0xb6>
 80052f6:	f108 0801 	add.w	r8, r8, #1
 80052fa:	e7ec      	b.n	80052d6 <_printf_float+0x33a>
 80052fc:	4642      	mov	r2, r8
 80052fe:	4631      	mov	r1, r6
 8005300:	4628      	mov	r0, r5
 8005302:	47b8      	blx	r7
 8005304:	3001      	adds	r0, #1
 8005306:	d1c2      	bne.n	800528e <_printf_float+0x2f2>
 8005308:	e6a3      	b.n	8005052 <_printf_float+0xb6>
 800530a:	2301      	movs	r3, #1
 800530c:	4631      	mov	r1, r6
 800530e:	4628      	mov	r0, r5
 8005310:	9206      	str	r2, [sp, #24]
 8005312:	47b8      	blx	r7
 8005314:	3001      	adds	r0, #1
 8005316:	f43f ae9c 	beq.w	8005052 <_printf_float+0xb6>
 800531a:	9a06      	ldr	r2, [sp, #24]
 800531c:	f10b 0b01 	add.w	fp, fp, #1
 8005320:	e7bb      	b.n	800529a <_printf_float+0x2fe>
 8005322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	47b8      	blx	r7
 800532c:	3001      	adds	r0, #1
 800532e:	d1c0      	bne.n	80052b2 <_printf_float+0x316>
 8005330:	e68f      	b.n	8005052 <_printf_float+0xb6>
 8005332:	9a06      	ldr	r2, [sp, #24]
 8005334:	464b      	mov	r3, r9
 8005336:	4442      	add	r2, r8
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	d1c3      	bne.n	80052ca <_printf_float+0x32e>
 8005342:	e686      	b.n	8005052 <_printf_float+0xb6>
 8005344:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005348:	f1ba 0f01 	cmp.w	sl, #1
 800534c:	dc01      	bgt.n	8005352 <_printf_float+0x3b6>
 800534e:	07db      	lsls	r3, r3, #31
 8005350:	d536      	bpl.n	80053c0 <_printf_float+0x424>
 8005352:	2301      	movs	r3, #1
 8005354:	4642      	mov	r2, r8
 8005356:	4631      	mov	r1, r6
 8005358:	4628      	mov	r0, r5
 800535a:	47b8      	blx	r7
 800535c:	3001      	adds	r0, #1
 800535e:	f43f ae78 	beq.w	8005052 <_printf_float+0xb6>
 8005362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005366:	4631      	mov	r1, r6
 8005368:	4628      	mov	r0, r5
 800536a:	47b8      	blx	r7
 800536c:	3001      	adds	r0, #1
 800536e:	f43f ae70 	beq.w	8005052 <_printf_float+0xb6>
 8005372:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005376:	2200      	movs	r2, #0
 8005378:	2300      	movs	r3, #0
 800537a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800537e:	f7fb fba3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005382:	b9c0      	cbnz	r0, 80053b6 <_printf_float+0x41a>
 8005384:	4653      	mov	r3, sl
 8005386:	f108 0201 	add.w	r2, r8, #1
 800538a:	4631      	mov	r1, r6
 800538c:	4628      	mov	r0, r5
 800538e:	47b8      	blx	r7
 8005390:	3001      	adds	r0, #1
 8005392:	d10c      	bne.n	80053ae <_printf_float+0x412>
 8005394:	e65d      	b.n	8005052 <_printf_float+0xb6>
 8005396:	2301      	movs	r3, #1
 8005398:	465a      	mov	r2, fp
 800539a:	4631      	mov	r1, r6
 800539c:	4628      	mov	r0, r5
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	f43f ae56 	beq.w	8005052 <_printf_float+0xb6>
 80053a6:	f108 0801 	add.w	r8, r8, #1
 80053aa:	45d0      	cmp	r8, sl
 80053ac:	dbf3      	blt.n	8005396 <_printf_float+0x3fa>
 80053ae:	464b      	mov	r3, r9
 80053b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053b4:	e6df      	b.n	8005176 <_printf_float+0x1da>
 80053b6:	f04f 0800 	mov.w	r8, #0
 80053ba:	f104 0b1a 	add.w	fp, r4, #26
 80053be:	e7f4      	b.n	80053aa <_printf_float+0x40e>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4642      	mov	r2, r8
 80053c4:	e7e1      	b.n	800538a <_printf_float+0x3ee>
 80053c6:	2301      	movs	r3, #1
 80053c8:	464a      	mov	r2, r9
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	f43f ae3e 	beq.w	8005052 <_printf_float+0xb6>
 80053d6:	f108 0801 	add.w	r8, r8, #1
 80053da:	68e3      	ldr	r3, [r4, #12]
 80053dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80053de:	1a5b      	subs	r3, r3, r1
 80053e0:	4543      	cmp	r3, r8
 80053e2:	dcf0      	bgt.n	80053c6 <_printf_float+0x42a>
 80053e4:	e6fc      	b.n	80051e0 <_printf_float+0x244>
 80053e6:	f04f 0800 	mov.w	r8, #0
 80053ea:	f104 0919 	add.w	r9, r4, #25
 80053ee:	e7f4      	b.n	80053da <_printf_float+0x43e>

080053f0 <_printf_common>:
 80053f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f4:	4616      	mov	r6, r2
 80053f6:	4698      	mov	r8, r3
 80053f8:	688a      	ldr	r2, [r1, #8]
 80053fa:	690b      	ldr	r3, [r1, #16]
 80053fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005400:	4293      	cmp	r3, r2
 8005402:	bfb8      	it	lt
 8005404:	4613      	movlt	r3, r2
 8005406:	6033      	str	r3, [r6, #0]
 8005408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800540c:	4607      	mov	r7, r0
 800540e:	460c      	mov	r4, r1
 8005410:	b10a      	cbz	r2, 8005416 <_printf_common+0x26>
 8005412:	3301      	adds	r3, #1
 8005414:	6033      	str	r3, [r6, #0]
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	0699      	lsls	r1, r3, #26
 800541a:	bf42      	ittt	mi
 800541c:	6833      	ldrmi	r3, [r6, #0]
 800541e:	3302      	addmi	r3, #2
 8005420:	6033      	strmi	r3, [r6, #0]
 8005422:	6825      	ldr	r5, [r4, #0]
 8005424:	f015 0506 	ands.w	r5, r5, #6
 8005428:	d106      	bne.n	8005438 <_printf_common+0x48>
 800542a:	f104 0a19 	add.w	sl, r4, #25
 800542e:	68e3      	ldr	r3, [r4, #12]
 8005430:	6832      	ldr	r2, [r6, #0]
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	42ab      	cmp	r3, r5
 8005436:	dc26      	bgt.n	8005486 <_printf_common+0x96>
 8005438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800543c:	6822      	ldr	r2, [r4, #0]
 800543e:	3b00      	subs	r3, #0
 8005440:	bf18      	it	ne
 8005442:	2301      	movne	r3, #1
 8005444:	0692      	lsls	r2, r2, #26
 8005446:	d42b      	bmi.n	80054a0 <_printf_common+0xb0>
 8005448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800544c:	4641      	mov	r1, r8
 800544e:	4638      	mov	r0, r7
 8005450:	47c8      	blx	r9
 8005452:	3001      	adds	r0, #1
 8005454:	d01e      	beq.n	8005494 <_printf_common+0xa4>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	6922      	ldr	r2, [r4, #16]
 800545a:	f003 0306 	and.w	r3, r3, #6
 800545e:	2b04      	cmp	r3, #4
 8005460:	bf02      	ittt	eq
 8005462:	68e5      	ldreq	r5, [r4, #12]
 8005464:	6833      	ldreq	r3, [r6, #0]
 8005466:	1aed      	subeq	r5, r5, r3
 8005468:	68a3      	ldr	r3, [r4, #8]
 800546a:	bf0c      	ite	eq
 800546c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005470:	2500      	movne	r5, #0
 8005472:	4293      	cmp	r3, r2
 8005474:	bfc4      	itt	gt
 8005476:	1a9b      	subgt	r3, r3, r2
 8005478:	18ed      	addgt	r5, r5, r3
 800547a:	2600      	movs	r6, #0
 800547c:	341a      	adds	r4, #26
 800547e:	42b5      	cmp	r5, r6
 8005480:	d11a      	bne.n	80054b8 <_printf_common+0xc8>
 8005482:	2000      	movs	r0, #0
 8005484:	e008      	b.n	8005498 <_printf_common+0xa8>
 8005486:	2301      	movs	r3, #1
 8005488:	4652      	mov	r2, sl
 800548a:	4641      	mov	r1, r8
 800548c:	4638      	mov	r0, r7
 800548e:	47c8      	blx	r9
 8005490:	3001      	adds	r0, #1
 8005492:	d103      	bne.n	800549c <_printf_common+0xac>
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549c:	3501      	adds	r5, #1
 800549e:	e7c6      	b.n	800542e <_printf_common+0x3e>
 80054a0:	18e1      	adds	r1, r4, r3
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	2030      	movs	r0, #48	@ 0x30
 80054a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054aa:	4422      	add	r2, r4
 80054ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054b4:	3302      	adds	r3, #2
 80054b6:	e7c7      	b.n	8005448 <_printf_common+0x58>
 80054b8:	2301      	movs	r3, #1
 80054ba:	4622      	mov	r2, r4
 80054bc:	4641      	mov	r1, r8
 80054be:	4638      	mov	r0, r7
 80054c0:	47c8      	blx	r9
 80054c2:	3001      	adds	r0, #1
 80054c4:	d0e6      	beq.n	8005494 <_printf_common+0xa4>
 80054c6:	3601      	adds	r6, #1
 80054c8:	e7d9      	b.n	800547e <_printf_common+0x8e>
	...

080054cc <_printf_i>:
 80054cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	7e0f      	ldrb	r7, [r1, #24]
 80054d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054d4:	2f78      	cmp	r7, #120	@ 0x78
 80054d6:	4691      	mov	r9, r2
 80054d8:	4680      	mov	r8, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	469a      	mov	sl, r3
 80054de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054e2:	d807      	bhi.n	80054f4 <_printf_i+0x28>
 80054e4:	2f62      	cmp	r7, #98	@ 0x62
 80054e6:	d80a      	bhi.n	80054fe <_printf_i+0x32>
 80054e8:	2f00      	cmp	r7, #0
 80054ea:	f000 80d1 	beq.w	8005690 <_printf_i+0x1c4>
 80054ee:	2f58      	cmp	r7, #88	@ 0x58
 80054f0:	f000 80b8 	beq.w	8005664 <_printf_i+0x198>
 80054f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054fc:	e03a      	b.n	8005574 <_printf_i+0xa8>
 80054fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005502:	2b15      	cmp	r3, #21
 8005504:	d8f6      	bhi.n	80054f4 <_printf_i+0x28>
 8005506:	a101      	add	r1, pc, #4	@ (adr r1, 800550c <_printf_i+0x40>)
 8005508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800550c:	08005565 	.word	0x08005565
 8005510:	08005579 	.word	0x08005579
 8005514:	080054f5 	.word	0x080054f5
 8005518:	080054f5 	.word	0x080054f5
 800551c:	080054f5 	.word	0x080054f5
 8005520:	080054f5 	.word	0x080054f5
 8005524:	08005579 	.word	0x08005579
 8005528:	080054f5 	.word	0x080054f5
 800552c:	080054f5 	.word	0x080054f5
 8005530:	080054f5 	.word	0x080054f5
 8005534:	080054f5 	.word	0x080054f5
 8005538:	08005677 	.word	0x08005677
 800553c:	080055a3 	.word	0x080055a3
 8005540:	08005631 	.word	0x08005631
 8005544:	080054f5 	.word	0x080054f5
 8005548:	080054f5 	.word	0x080054f5
 800554c:	08005699 	.word	0x08005699
 8005550:	080054f5 	.word	0x080054f5
 8005554:	080055a3 	.word	0x080055a3
 8005558:	080054f5 	.word	0x080054f5
 800555c:	080054f5 	.word	0x080054f5
 8005560:	08005639 	.word	0x08005639
 8005564:	6833      	ldr	r3, [r6, #0]
 8005566:	1d1a      	adds	r2, r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6032      	str	r2, [r6, #0]
 800556c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005574:	2301      	movs	r3, #1
 8005576:	e09c      	b.n	80056b2 <_printf_i+0x1e6>
 8005578:	6833      	ldr	r3, [r6, #0]
 800557a:	6820      	ldr	r0, [r4, #0]
 800557c:	1d19      	adds	r1, r3, #4
 800557e:	6031      	str	r1, [r6, #0]
 8005580:	0606      	lsls	r6, r0, #24
 8005582:	d501      	bpl.n	8005588 <_printf_i+0xbc>
 8005584:	681d      	ldr	r5, [r3, #0]
 8005586:	e003      	b.n	8005590 <_printf_i+0xc4>
 8005588:	0645      	lsls	r5, r0, #25
 800558a:	d5fb      	bpl.n	8005584 <_printf_i+0xb8>
 800558c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005590:	2d00      	cmp	r5, #0
 8005592:	da03      	bge.n	800559c <_printf_i+0xd0>
 8005594:	232d      	movs	r3, #45	@ 0x2d
 8005596:	426d      	negs	r5, r5
 8005598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800559c:	4858      	ldr	r0, [pc, #352]	@ (8005700 <_printf_i+0x234>)
 800559e:	230a      	movs	r3, #10
 80055a0:	e011      	b.n	80055c6 <_printf_i+0xfa>
 80055a2:	6821      	ldr	r1, [r4, #0]
 80055a4:	6833      	ldr	r3, [r6, #0]
 80055a6:	0608      	lsls	r0, r1, #24
 80055a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80055ac:	d402      	bmi.n	80055b4 <_printf_i+0xe8>
 80055ae:	0649      	lsls	r1, r1, #25
 80055b0:	bf48      	it	mi
 80055b2:	b2ad      	uxthmi	r5, r5
 80055b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80055b6:	4852      	ldr	r0, [pc, #328]	@ (8005700 <_printf_i+0x234>)
 80055b8:	6033      	str	r3, [r6, #0]
 80055ba:	bf14      	ite	ne
 80055bc:	230a      	movne	r3, #10
 80055be:	2308      	moveq	r3, #8
 80055c0:	2100      	movs	r1, #0
 80055c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055c6:	6866      	ldr	r6, [r4, #4]
 80055c8:	60a6      	str	r6, [r4, #8]
 80055ca:	2e00      	cmp	r6, #0
 80055cc:	db05      	blt.n	80055da <_printf_i+0x10e>
 80055ce:	6821      	ldr	r1, [r4, #0]
 80055d0:	432e      	orrs	r6, r5
 80055d2:	f021 0104 	bic.w	r1, r1, #4
 80055d6:	6021      	str	r1, [r4, #0]
 80055d8:	d04b      	beq.n	8005672 <_printf_i+0x1a6>
 80055da:	4616      	mov	r6, r2
 80055dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80055e0:	fb03 5711 	mls	r7, r3, r1, r5
 80055e4:	5dc7      	ldrb	r7, [r0, r7]
 80055e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055ea:	462f      	mov	r7, r5
 80055ec:	42bb      	cmp	r3, r7
 80055ee:	460d      	mov	r5, r1
 80055f0:	d9f4      	bls.n	80055dc <_printf_i+0x110>
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d10b      	bne.n	800560e <_printf_i+0x142>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	07df      	lsls	r7, r3, #31
 80055fa:	d508      	bpl.n	800560e <_printf_i+0x142>
 80055fc:	6923      	ldr	r3, [r4, #16]
 80055fe:	6861      	ldr	r1, [r4, #4]
 8005600:	4299      	cmp	r1, r3
 8005602:	bfde      	ittt	le
 8005604:	2330      	movle	r3, #48	@ 0x30
 8005606:	f806 3c01 	strble.w	r3, [r6, #-1]
 800560a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800560e:	1b92      	subs	r2, r2, r6
 8005610:	6122      	str	r2, [r4, #16]
 8005612:	f8cd a000 	str.w	sl, [sp]
 8005616:	464b      	mov	r3, r9
 8005618:	aa03      	add	r2, sp, #12
 800561a:	4621      	mov	r1, r4
 800561c:	4640      	mov	r0, r8
 800561e:	f7ff fee7 	bl	80053f0 <_printf_common>
 8005622:	3001      	adds	r0, #1
 8005624:	d14a      	bne.n	80056bc <_printf_i+0x1f0>
 8005626:	f04f 30ff 	mov.w	r0, #4294967295
 800562a:	b004      	add	sp, #16
 800562c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	f043 0320 	orr.w	r3, r3, #32
 8005636:	6023      	str	r3, [r4, #0]
 8005638:	4832      	ldr	r0, [pc, #200]	@ (8005704 <_printf_i+0x238>)
 800563a:	2778      	movs	r7, #120	@ 0x78
 800563c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	6831      	ldr	r1, [r6, #0]
 8005644:	061f      	lsls	r7, r3, #24
 8005646:	f851 5b04 	ldr.w	r5, [r1], #4
 800564a:	d402      	bmi.n	8005652 <_printf_i+0x186>
 800564c:	065f      	lsls	r7, r3, #25
 800564e:	bf48      	it	mi
 8005650:	b2ad      	uxthmi	r5, r5
 8005652:	6031      	str	r1, [r6, #0]
 8005654:	07d9      	lsls	r1, r3, #31
 8005656:	bf44      	itt	mi
 8005658:	f043 0320 	orrmi.w	r3, r3, #32
 800565c:	6023      	strmi	r3, [r4, #0]
 800565e:	b11d      	cbz	r5, 8005668 <_printf_i+0x19c>
 8005660:	2310      	movs	r3, #16
 8005662:	e7ad      	b.n	80055c0 <_printf_i+0xf4>
 8005664:	4826      	ldr	r0, [pc, #152]	@ (8005700 <_printf_i+0x234>)
 8005666:	e7e9      	b.n	800563c <_printf_i+0x170>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	f023 0320 	bic.w	r3, r3, #32
 800566e:	6023      	str	r3, [r4, #0]
 8005670:	e7f6      	b.n	8005660 <_printf_i+0x194>
 8005672:	4616      	mov	r6, r2
 8005674:	e7bd      	b.n	80055f2 <_printf_i+0x126>
 8005676:	6833      	ldr	r3, [r6, #0]
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	6961      	ldr	r1, [r4, #20]
 800567c:	1d18      	adds	r0, r3, #4
 800567e:	6030      	str	r0, [r6, #0]
 8005680:	062e      	lsls	r6, r5, #24
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	d501      	bpl.n	800568a <_printf_i+0x1be>
 8005686:	6019      	str	r1, [r3, #0]
 8005688:	e002      	b.n	8005690 <_printf_i+0x1c4>
 800568a:	0668      	lsls	r0, r5, #25
 800568c:	d5fb      	bpl.n	8005686 <_printf_i+0x1ba>
 800568e:	8019      	strh	r1, [r3, #0]
 8005690:	2300      	movs	r3, #0
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	4616      	mov	r6, r2
 8005696:	e7bc      	b.n	8005612 <_printf_i+0x146>
 8005698:	6833      	ldr	r3, [r6, #0]
 800569a:	1d1a      	adds	r2, r3, #4
 800569c:	6032      	str	r2, [r6, #0]
 800569e:	681e      	ldr	r6, [r3, #0]
 80056a0:	6862      	ldr	r2, [r4, #4]
 80056a2:	2100      	movs	r1, #0
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7fa fd93 	bl	80001d0 <memchr>
 80056aa:	b108      	cbz	r0, 80056b0 <_printf_i+0x1e4>
 80056ac:	1b80      	subs	r0, r0, r6
 80056ae:	6060      	str	r0, [r4, #4]
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	6123      	str	r3, [r4, #16]
 80056b4:	2300      	movs	r3, #0
 80056b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ba:	e7aa      	b.n	8005612 <_printf_i+0x146>
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	4632      	mov	r2, r6
 80056c0:	4649      	mov	r1, r9
 80056c2:	4640      	mov	r0, r8
 80056c4:	47d0      	blx	sl
 80056c6:	3001      	adds	r0, #1
 80056c8:	d0ad      	beq.n	8005626 <_printf_i+0x15a>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	079b      	lsls	r3, r3, #30
 80056ce:	d413      	bmi.n	80056f8 <_printf_i+0x22c>
 80056d0:	68e0      	ldr	r0, [r4, #12]
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	4298      	cmp	r0, r3
 80056d6:	bfb8      	it	lt
 80056d8:	4618      	movlt	r0, r3
 80056da:	e7a6      	b.n	800562a <_printf_i+0x15e>
 80056dc:	2301      	movs	r3, #1
 80056de:	4632      	mov	r2, r6
 80056e0:	4649      	mov	r1, r9
 80056e2:	4640      	mov	r0, r8
 80056e4:	47d0      	blx	sl
 80056e6:	3001      	adds	r0, #1
 80056e8:	d09d      	beq.n	8005626 <_printf_i+0x15a>
 80056ea:	3501      	adds	r5, #1
 80056ec:	68e3      	ldr	r3, [r4, #12]
 80056ee:	9903      	ldr	r1, [sp, #12]
 80056f0:	1a5b      	subs	r3, r3, r1
 80056f2:	42ab      	cmp	r3, r5
 80056f4:	dcf2      	bgt.n	80056dc <_printf_i+0x210>
 80056f6:	e7eb      	b.n	80056d0 <_printf_i+0x204>
 80056f8:	2500      	movs	r5, #0
 80056fa:	f104 0619 	add.w	r6, r4, #25
 80056fe:	e7f5      	b.n	80056ec <_printf_i+0x220>
 8005700:	08007a0e 	.word	0x08007a0e
 8005704:	08007a1f 	.word	0x08007a1f

08005708 <std>:
 8005708:	2300      	movs	r3, #0
 800570a:	b510      	push	{r4, lr}
 800570c:	4604      	mov	r4, r0
 800570e:	e9c0 3300 	strd	r3, r3, [r0]
 8005712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005716:	6083      	str	r3, [r0, #8]
 8005718:	8181      	strh	r1, [r0, #12]
 800571a:	6643      	str	r3, [r0, #100]	@ 0x64
 800571c:	81c2      	strh	r2, [r0, #14]
 800571e:	6183      	str	r3, [r0, #24]
 8005720:	4619      	mov	r1, r3
 8005722:	2208      	movs	r2, #8
 8005724:	305c      	adds	r0, #92	@ 0x5c
 8005726:	f000 f9f9 	bl	8005b1c <memset>
 800572a:	4b0d      	ldr	r3, [pc, #52]	@ (8005760 <std+0x58>)
 800572c:	6263      	str	r3, [r4, #36]	@ 0x24
 800572e:	4b0d      	ldr	r3, [pc, #52]	@ (8005764 <std+0x5c>)
 8005730:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005732:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <std+0x60>)
 8005734:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <std+0x64>)
 8005738:	6323      	str	r3, [r4, #48]	@ 0x30
 800573a:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <std+0x68>)
 800573c:	6224      	str	r4, [r4, #32]
 800573e:	429c      	cmp	r4, r3
 8005740:	d006      	beq.n	8005750 <std+0x48>
 8005742:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005746:	4294      	cmp	r4, r2
 8005748:	d002      	beq.n	8005750 <std+0x48>
 800574a:	33d0      	adds	r3, #208	@ 0xd0
 800574c:	429c      	cmp	r4, r3
 800574e:	d105      	bne.n	800575c <std+0x54>
 8005750:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005758:	f000 ba5c 	b.w	8005c14 <__retarget_lock_init_recursive>
 800575c:	bd10      	pop	{r4, pc}
 800575e:	bf00      	nop
 8005760:	0800596d 	.word	0x0800596d
 8005764:	0800598f 	.word	0x0800598f
 8005768:	080059c7 	.word	0x080059c7
 800576c:	080059eb 	.word	0x080059eb
 8005770:	200002c8 	.word	0x200002c8

08005774 <stdio_exit_handler>:
 8005774:	4a02      	ldr	r2, [pc, #8]	@ (8005780 <stdio_exit_handler+0xc>)
 8005776:	4903      	ldr	r1, [pc, #12]	@ (8005784 <stdio_exit_handler+0x10>)
 8005778:	4803      	ldr	r0, [pc, #12]	@ (8005788 <stdio_exit_handler+0x14>)
 800577a:	f000 b869 	b.w	8005850 <_fwalk_sglue>
 800577e:	bf00      	nop
 8005780:	2000000c 	.word	0x2000000c
 8005784:	08007551 	.word	0x08007551
 8005788:	2000001c 	.word	0x2000001c

0800578c <cleanup_stdio>:
 800578c:	6841      	ldr	r1, [r0, #4]
 800578e:	4b0c      	ldr	r3, [pc, #48]	@ (80057c0 <cleanup_stdio+0x34>)
 8005790:	4299      	cmp	r1, r3
 8005792:	b510      	push	{r4, lr}
 8005794:	4604      	mov	r4, r0
 8005796:	d001      	beq.n	800579c <cleanup_stdio+0x10>
 8005798:	f001 feda 	bl	8007550 <_fflush_r>
 800579c:	68a1      	ldr	r1, [r4, #8]
 800579e:	4b09      	ldr	r3, [pc, #36]	@ (80057c4 <cleanup_stdio+0x38>)
 80057a0:	4299      	cmp	r1, r3
 80057a2:	d002      	beq.n	80057aa <cleanup_stdio+0x1e>
 80057a4:	4620      	mov	r0, r4
 80057a6:	f001 fed3 	bl	8007550 <_fflush_r>
 80057aa:	68e1      	ldr	r1, [r4, #12]
 80057ac:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <cleanup_stdio+0x3c>)
 80057ae:	4299      	cmp	r1, r3
 80057b0:	d004      	beq.n	80057bc <cleanup_stdio+0x30>
 80057b2:	4620      	mov	r0, r4
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	f001 beca 	b.w	8007550 <_fflush_r>
 80057bc:	bd10      	pop	{r4, pc}
 80057be:	bf00      	nop
 80057c0:	200002c8 	.word	0x200002c8
 80057c4:	20000330 	.word	0x20000330
 80057c8:	20000398 	.word	0x20000398

080057cc <global_stdio_init.part.0>:
 80057cc:	b510      	push	{r4, lr}
 80057ce:	4b0b      	ldr	r3, [pc, #44]	@ (80057fc <global_stdio_init.part.0+0x30>)
 80057d0:	4c0b      	ldr	r4, [pc, #44]	@ (8005800 <global_stdio_init.part.0+0x34>)
 80057d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005804 <global_stdio_init.part.0+0x38>)
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	4620      	mov	r0, r4
 80057d8:	2200      	movs	r2, #0
 80057da:	2104      	movs	r1, #4
 80057dc:	f7ff ff94 	bl	8005708 <std>
 80057e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057e4:	2201      	movs	r2, #1
 80057e6:	2109      	movs	r1, #9
 80057e8:	f7ff ff8e 	bl	8005708 <std>
 80057ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80057f0:	2202      	movs	r2, #2
 80057f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f6:	2112      	movs	r1, #18
 80057f8:	f7ff bf86 	b.w	8005708 <std>
 80057fc:	20000400 	.word	0x20000400
 8005800:	200002c8 	.word	0x200002c8
 8005804:	08005775 	.word	0x08005775

08005808 <__sfp_lock_acquire>:
 8005808:	4801      	ldr	r0, [pc, #4]	@ (8005810 <__sfp_lock_acquire+0x8>)
 800580a:	f000 ba04 	b.w	8005c16 <__retarget_lock_acquire_recursive>
 800580e:	bf00      	nop
 8005810:	20000409 	.word	0x20000409

08005814 <__sfp_lock_release>:
 8005814:	4801      	ldr	r0, [pc, #4]	@ (800581c <__sfp_lock_release+0x8>)
 8005816:	f000 b9ff 	b.w	8005c18 <__retarget_lock_release_recursive>
 800581a:	bf00      	nop
 800581c:	20000409 	.word	0x20000409

08005820 <__sinit>:
 8005820:	b510      	push	{r4, lr}
 8005822:	4604      	mov	r4, r0
 8005824:	f7ff fff0 	bl	8005808 <__sfp_lock_acquire>
 8005828:	6a23      	ldr	r3, [r4, #32]
 800582a:	b11b      	cbz	r3, 8005834 <__sinit+0x14>
 800582c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005830:	f7ff bff0 	b.w	8005814 <__sfp_lock_release>
 8005834:	4b04      	ldr	r3, [pc, #16]	@ (8005848 <__sinit+0x28>)
 8005836:	6223      	str	r3, [r4, #32]
 8005838:	4b04      	ldr	r3, [pc, #16]	@ (800584c <__sinit+0x2c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f5      	bne.n	800582c <__sinit+0xc>
 8005840:	f7ff ffc4 	bl	80057cc <global_stdio_init.part.0>
 8005844:	e7f2      	b.n	800582c <__sinit+0xc>
 8005846:	bf00      	nop
 8005848:	0800578d 	.word	0x0800578d
 800584c:	20000400 	.word	0x20000400

08005850 <_fwalk_sglue>:
 8005850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005854:	4607      	mov	r7, r0
 8005856:	4688      	mov	r8, r1
 8005858:	4614      	mov	r4, r2
 800585a:	2600      	movs	r6, #0
 800585c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005860:	f1b9 0901 	subs.w	r9, r9, #1
 8005864:	d505      	bpl.n	8005872 <_fwalk_sglue+0x22>
 8005866:	6824      	ldr	r4, [r4, #0]
 8005868:	2c00      	cmp	r4, #0
 800586a:	d1f7      	bne.n	800585c <_fwalk_sglue+0xc>
 800586c:	4630      	mov	r0, r6
 800586e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005872:	89ab      	ldrh	r3, [r5, #12]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d907      	bls.n	8005888 <_fwalk_sglue+0x38>
 8005878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800587c:	3301      	adds	r3, #1
 800587e:	d003      	beq.n	8005888 <_fwalk_sglue+0x38>
 8005880:	4629      	mov	r1, r5
 8005882:	4638      	mov	r0, r7
 8005884:	47c0      	blx	r8
 8005886:	4306      	orrs	r6, r0
 8005888:	3568      	adds	r5, #104	@ 0x68
 800588a:	e7e9      	b.n	8005860 <_fwalk_sglue+0x10>

0800588c <iprintf>:
 800588c:	b40f      	push	{r0, r1, r2, r3}
 800588e:	b507      	push	{r0, r1, r2, lr}
 8005890:	4906      	ldr	r1, [pc, #24]	@ (80058ac <iprintf+0x20>)
 8005892:	ab04      	add	r3, sp, #16
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	f853 2b04 	ldr.w	r2, [r3], #4
 800589a:	6881      	ldr	r1, [r0, #8]
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	f001 fcbb 	bl	8007218 <_vfiprintf_r>
 80058a2:	b003      	add	sp, #12
 80058a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058a8:	b004      	add	sp, #16
 80058aa:	4770      	bx	lr
 80058ac:	20000018 	.word	0x20000018

080058b0 <_puts_r>:
 80058b0:	6a03      	ldr	r3, [r0, #32]
 80058b2:	b570      	push	{r4, r5, r6, lr}
 80058b4:	6884      	ldr	r4, [r0, #8]
 80058b6:	4605      	mov	r5, r0
 80058b8:	460e      	mov	r6, r1
 80058ba:	b90b      	cbnz	r3, 80058c0 <_puts_r+0x10>
 80058bc:	f7ff ffb0 	bl	8005820 <__sinit>
 80058c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058c2:	07db      	lsls	r3, r3, #31
 80058c4:	d405      	bmi.n	80058d2 <_puts_r+0x22>
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	0598      	lsls	r0, r3, #22
 80058ca:	d402      	bmi.n	80058d2 <_puts_r+0x22>
 80058cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058ce:	f000 f9a2 	bl	8005c16 <__retarget_lock_acquire_recursive>
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	0719      	lsls	r1, r3, #28
 80058d6:	d502      	bpl.n	80058de <_puts_r+0x2e>
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d135      	bne.n	800594a <_puts_r+0x9a>
 80058de:	4621      	mov	r1, r4
 80058e0:	4628      	mov	r0, r5
 80058e2:	f000 f8c5 	bl	8005a70 <__swsetup_r>
 80058e6:	b380      	cbz	r0, 800594a <_puts_r+0x9a>
 80058e8:	f04f 35ff 	mov.w	r5, #4294967295
 80058ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058ee:	07da      	lsls	r2, r3, #31
 80058f0:	d405      	bmi.n	80058fe <_puts_r+0x4e>
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	059b      	lsls	r3, r3, #22
 80058f6:	d402      	bmi.n	80058fe <_puts_r+0x4e>
 80058f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058fa:	f000 f98d 	bl	8005c18 <__retarget_lock_release_recursive>
 80058fe:	4628      	mov	r0, r5
 8005900:	bd70      	pop	{r4, r5, r6, pc}
 8005902:	2b00      	cmp	r3, #0
 8005904:	da04      	bge.n	8005910 <_puts_r+0x60>
 8005906:	69a2      	ldr	r2, [r4, #24]
 8005908:	429a      	cmp	r2, r3
 800590a:	dc17      	bgt.n	800593c <_puts_r+0x8c>
 800590c:	290a      	cmp	r1, #10
 800590e:	d015      	beq.n	800593c <_puts_r+0x8c>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	6022      	str	r2, [r4, #0]
 8005916:	7019      	strb	r1, [r3, #0]
 8005918:	68a3      	ldr	r3, [r4, #8]
 800591a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800591e:	3b01      	subs	r3, #1
 8005920:	60a3      	str	r3, [r4, #8]
 8005922:	2900      	cmp	r1, #0
 8005924:	d1ed      	bne.n	8005902 <_puts_r+0x52>
 8005926:	2b00      	cmp	r3, #0
 8005928:	da11      	bge.n	800594e <_puts_r+0x9e>
 800592a:	4622      	mov	r2, r4
 800592c:	210a      	movs	r1, #10
 800592e:	4628      	mov	r0, r5
 8005930:	f000 f85f 	bl	80059f2 <__swbuf_r>
 8005934:	3001      	adds	r0, #1
 8005936:	d0d7      	beq.n	80058e8 <_puts_r+0x38>
 8005938:	250a      	movs	r5, #10
 800593a:	e7d7      	b.n	80058ec <_puts_r+0x3c>
 800593c:	4622      	mov	r2, r4
 800593e:	4628      	mov	r0, r5
 8005940:	f000 f857 	bl	80059f2 <__swbuf_r>
 8005944:	3001      	adds	r0, #1
 8005946:	d1e7      	bne.n	8005918 <_puts_r+0x68>
 8005948:	e7ce      	b.n	80058e8 <_puts_r+0x38>
 800594a:	3e01      	subs	r6, #1
 800594c:	e7e4      	b.n	8005918 <_puts_r+0x68>
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	6022      	str	r2, [r4, #0]
 8005954:	220a      	movs	r2, #10
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	e7ee      	b.n	8005938 <_puts_r+0x88>
	...

0800595c <puts>:
 800595c:	4b02      	ldr	r3, [pc, #8]	@ (8005968 <puts+0xc>)
 800595e:	4601      	mov	r1, r0
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	f7ff bfa5 	b.w	80058b0 <_puts_r>
 8005966:	bf00      	nop
 8005968:	20000018 	.word	0x20000018

0800596c <__sread>:
 800596c:	b510      	push	{r4, lr}
 800596e:	460c      	mov	r4, r1
 8005970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005974:	f000 f900 	bl	8005b78 <_read_r>
 8005978:	2800      	cmp	r0, #0
 800597a:	bfab      	itete	ge
 800597c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800597e:	89a3      	ldrhlt	r3, [r4, #12]
 8005980:	181b      	addge	r3, r3, r0
 8005982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005986:	bfac      	ite	ge
 8005988:	6563      	strge	r3, [r4, #84]	@ 0x54
 800598a:	81a3      	strhlt	r3, [r4, #12]
 800598c:	bd10      	pop	{r4, pc}

0800598e <__swrite>:
 800598e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005992:	461f      	mov	r7, r3
 8005994:	898b      	ldrh	r3, [r1, #12]
 8005996:	05db      	lsls	r3, r3, #23
 8005998:	4605      	mov	r5, r0
 800599a:	460c      	mov	r4, r1
 800599c:	4616      	mov	r6, r2
 800599e:	d505      	bpl.n	80059ac <__swrite+0x1e>
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	2302      	movs	r3, #2
 80059a6:	2200      	movs	r2, #0
 80059a8:	f000 f8d4 	bl	8005b54 <_lseek_r>
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059b6:	81a3      	strh	r3, [r4, #12]
 80059b8:	4632      	mov	r2, r6
 80059ba:	463b      	mov	r3, r7
 80059bc:	4628      	mov	r0, r5
 80059be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059c2:	f000 b8eb 	b.w	8005b9c <_write_r>

080059c6 <__sseek>:
 80059c6:	b510      	push	{r4, lr}
 80059c8:	460c      	mov	r4, r1
 80059ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ce:	f000 f8c1 	bl	8005b54 <_lseek_r>
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	bf15      	itete	ne
 80059d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059e2:	81a3      	strheq	r3, [r4, #12]
 80059e4:	bf18      	it	ne
 80059e6:	81a3      	strhne	r3, [r4, #12]
 80059e8:	bd10      	pop	{r4, pc}

080059ea <__sclose>:
 80059ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ee:	f000 b8a1 	b.w	8005b34 <_close_r>

080059f2 <__swbuf_r>:
 80059f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f4:	460e      	mov	r6, r1
 80059f6:	4614      	mov	r4, r2
 80059f8:	4605      	mov	r5, r0
 80059fa:	b118      	cbz	r0, 8005a04 <__swbuf_r+0x12>
 80059fc:	6a03      	ldr	r3, [r0, #32]
 80059fe:	b90b      	cbnz	r3, 8005a04 <__swbuf_r+0x12>
 8005a00:	f7ff ff0e 	bl	8005820 <__sinit>
 8005a04:	69a3      	ldr	r3, [r4, #24]
 8005a06:	60a3      	str	r3, [r4, #8]
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	071a      	lsls	r2, r3, #28
 8005a0c:	d501      	bpl.n	8005a12 <__swbuf_r+0x20>
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	b943      	cbnz	r3, 8005a24 <__swbuf_r+0x32>
 8005a12:	4621      	mov	r1, r4
 8005a14:	4628      	mov	r0, r5
 8005a16:	f000 f82b 	bl	8005a70 <__swsetup_r>
 8005a1a:	b118      	cbz	r0, 8005a24 <__swbuf_r+0x32>
 8005a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a20:	4638      	mov	r0, r7
 8005a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	6922      	ldr	r2, [r4, #16]
 8005a28:	1a98      	subs	r0, r3, r2
 8005a2a:	6963      	ldr	r3, [r4, #20]
 8005a2c:	b2f6      	uxtb	r6, r6
 8005a2e:	4283      	cmp	r3, r0
 8005a30:	4637      	mov	r7, r6
 8005a32:	dc05      	bgt.n	8005a40 <__swbuf_r+0x4e>
 8005a34:	4621      	mov	r1, r4
 8005a36:	4628      	mov	r0, r5
 8005a38:	f001 fd8a 	bl	8007550 <_fflush_r>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d1ed      	bne.n	8005a1c <__swbuf_r+0x2a>
 8005a40:	68a3      	ldr	r3, [r4, #8]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	60a3      	str	r3, [r4, #8]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	6022      	str	r2, [r4, #0]
 8005a4c:	701e      	strb	r6, [r3, #0]
 8005a4e:	6962      	ldr	r2, [r4, #20]
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d004      	beq.n	8005a60 <__swbuf_r+0x6e>
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	07db      	lsls	r3, r3, #31
 8005a5a:	d5e1      	bpl.n	8005a20 <__swbuf_r+0x2e>
 8005a5c:	2e0a      	cmp	r6, #10
 8005a5e:	d1df      	bne.n	8005a20 <__swbuf_r+0x2e>
 8005a60:	4621      	mov	r1, r4
 8005a62:	4628      	mov	r0, r5
 8005a64:	f001 fd74 	bl	8007550 <_fflush_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d0d9      	beq.n	8005a20 <__swbuf_r+0x2e>
 8005a6c:	e7d6      	b.n	8005a1c <__swbuf_r+0x2a>
	...

08005a70 <__swsetup_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4b29      	ldr	r3, [pc, #164]	@ (8005b18 <__swsetup_r+0xa8>)
 8005a74:	4605      	mov	r5, r0
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	460c      	mov	r4, r1
 8005a7a:	b118      	cbz	r0, 8005a84 <__swsetup_r+0x14>
 8005a7c:	6a03      	ldr	r3, [r0, #32]
 8005a7e:	b90b      	cbnz	r3, 8005a84 <__swsetup_r+0x14>
 8005a80:	f7ff fece 	bl	8005820 <__sinit>
 8005a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a88:	0719      	lsls	r1, r3, #28
 8005a8a:	d422      	bmi.n	8005ad2 <__swsetup_r+0x62>
 8005a8c:	06da      	lsls	r2, r3, #27
 8005a8e:	d407      	bmi.n	8005aa0 <__swsetup_r+0x30>
 8005a90:	2209      	movs	r2, #9
 8005a92:	602a      	str	r2, [r5, #0]
 8005a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a98:	81a3      	strh	r3, [r4, #12]
 8005a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9e:	e033      	b.n	8005b08 <__swsetup_r+0x98>
 8005aa0:	0758      	lsls	r0, r3, #29
 8005aa2:	d512      	bpl.n	8005aca <__swsetup_r+0x5a>
 8005aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005aa6:	b141      	cbz	r1, 8005aba <__swsetup_r+0x4a>
 8005aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005aac:	4299      	cmp	r1, r3
 8005aae:	d002      	beq.n	8005ab6 <__swsetup_r+0x46>
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f000 ff0d 	bl	80068d0 <_free_r>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ac0:	81a3      	strh	r3, [r4, #12]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6063      	str	r3, [r4, #4]
 8005ac6:	6923      	ldr	r3, [r4, #16]
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	f043 0308 	orr.w	r3, r3, #8
 8005ad0:	81a3      	strh	r3, [r4, #12]
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	b94b      	cbnz	r3, 8005aea <__swsetup_r+0x7a>
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ae0:	d003      	beq.n	8005aea <__swsetup_r+0x7a>
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f001 fd81 	bl	80075ec <__smakebuf_r>
 8005aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aee:	f013 0201 	ands.w	r2, r3, #1
 8005af2:	d00a      	beq.n	8005b0a <__swsetup_r+0x9a>
 8005af4:	2200      	movs	r2, #0
 8005af6:	60a2      	str	r2, [r4, #8]
 8005af8:	6962      	ldr	r2, [r4, #20]
 8005afa:	4252      	negs	r2, r2
 8005afc:	61a2      	str	r2, [r4, #24]
 8005afe:	6922      	ldr	r2, [r4, #16]
 8005b00:	b942      	cbnz	r2, 8005b14 <__swsetup_r+0xa4>
 8005b02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b06:	d1c5      	bne.n	8005a94 <__swsetup_r+0x24>
 8005b08:	bd38      	pop	{r3, r4, r5, pc}
 8005b0a:	0799      	lsls	r1, r3, #30
 8005b0c:	bf58      	it	pl
 8005b0e:	6962      	ldrpl	r2, [r4, #20]
 8005b10:	60a2      	str	r2, [r4, #8]
 8005b12:	e7f4      	b.n	8005afe <__swsetup_r+0x8e>
 8005b14:	2000      	movs	r0, #0
 8005b16:	e7f7      	b.n	8005b08 <__swsetup_r+0x98>
 8005b18:	20000018 	.word	0x20000018

08005b1c <memset>:
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d100      	bne.n	8005b26 <memset+0xa>
 8005b24:	4770      	bx	lr
 8005b26:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2a:	e7f9      	b.n	8005b20 <memset+0x4>

08005b2c <_localeconv_r>:
 8005b2c:	4800      	ldr	r0, [pc, #0]	@ (8005b30 <_localeconv_r+0x4>)
 8005b2e:	4770      	bx	lr
 8005b30:	20000158 	.word	0x20000158

08005b34 <_close_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d06      	ldr	r5, [pc, #24]	@ (8005b50 <_close_r+0x1c>)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f7fd f9b0 	bl	8002ea4 <_close>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_close_r+0x1a>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_close_r+0x1a>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	20000404 	.word	0x20000404

08005b54 <_lseek_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4d07      	ldr	r5, [pc, #28]	@ (8005b74 <_lseek_r+0x20>)
 8005b58:	4604      	mov	r4, r0
 8005b5a:	4608      	mov	r0, r1
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	2200      	movs	r2, #0
 8005b60:	602a      	str	r2, [r5, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f7fd f9c5 	bl	8002ef2 <_lseek>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_lseek_r+0x1e>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_lseek_r+0x1e>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	20000404 	.word	0x20000404

08005b78 <_read_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4d07      	ldr	r5, [pc, #28]	@ (8005b98 <_read_r+0x20>)
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	4608      	mov	r0, r1
 8005b80:	4611      	mov	r1, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f7fd f96f 	bl	8002e6a <_read>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_read_r+0x1e>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_read_r+0x1e>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	20000404 	.word	0x20000404

08005b9c <_write_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d07      	ldr	r5, [pc, #28]	@ (8005bbc <_write_r+0x20>)
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fc fc2a 	bl	8002404 <_write>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_write_r+0x1e>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_write_r+0x1e>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	20000404 	.word	0x20000404

08005bc0 <__errno>:
 8005bc0:	4b01      	ldr	r3, [pc, #4]	@ (8005bc8 <__errno+0x8>)
 8005bc2:	6818      	ldr	r0, [r3, #0]
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000018 	.word	0x20000018

08005bcc <__libc_init_array>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4d0d      	ldr	r5, [pc, #52]	@ (8005c04 <__libc_init_array+0x38>)
 8005bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005c08 <__libc_init_array+0x3c>)
 8005bd2:	1b64      	subs	r4, r4, r5
 8005bd4:	10a4      	asrs	r4, r4, #2
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	42a6      	cmp	r6, r4
 8005bda:	d109      	bne.n	8005bf0 <__libc_init_array+0x24>
 8005bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8005c0c <__libc_init_array+0x40>)
 8005bde:	4c0c      	ldr	r4, [pc, #48]	@ (8005c10 <__libc_init_array+0x44>)
 8005be0:	f001 fe30 	bl	8007844 <_init>
 8005be4:	1b64      	subs	r4, r4, r5
 8005be6:	10a4      	asrs	r4, r4, #2
 8005be8:	2600      	movs	r6, #0
 8005bea:	42a6      	cmp	r6, r4
 8005bec:	d105      	bne.n	8005bfa <__libc_init_array+0x2e>
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf4:	4798      	blx	r3
 8005bf6:	3601      	adds	r6, #1
 8005bf8:	e7ee      	b.n	8005bd8 <__libc_init_array+0xc>
 8005bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfe:	4798      	blx	r3
 8005c00:	3601      	adds	r6, #1
 8005c02:	e7f2      	b.n	8005bea <__libc_init_array+0x1e>
 8005c04:	08007d7c 	.word	0x08007d7c
 8005c08:	08007d7c 	.word	0x08007d7c
 8005c0c:	08007d7c 	.word	0x08007d7c
 8005c10:	08007d80 	.word	0x08007d80

08005c14 <__retarget_lock_init_recursive>:
 8005c14:	4770      	bx	lr

08005c16 <__retarget_lock_acquire_recursive>:
 8005c16:	4770      	bx	lr

08005c18 <__retarget_lock_release_recursive>:
 8005c18:	4770      	bx	lr

08005c1a <quorem>:
 8005c1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1e:	6903      	ldr	r3, [r0, #16]
 8005c20:	690c      	ldr	r4, [r1, #16]
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	4607      	mov	r7, r0
 8005c26:	db7e      	blt.n	8005d26 <quorem+0x10c>
 8005c28:	3c01      	subs	r4, #1
 8005c2a:	f101 0814 	add.w	r8, r1, #20
 8005c2e:	00a3      	lsls	r3, r4, #2
 8005c30:	f100 0514 	add.w	r5, r0, #20
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c44:	3301      	adds	r3, #1
 8005c46:	429a      	cmp	r2, r3
 8005c48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c50:	d32e      	bcc.n	8005cb0 <quorem+0x96>
 8005c52:	f04f 0a00 	mov.w	sl, #0
 8005c56:	46c4      	mov	ip, r8
 8005c58:	46ae      	mov	lr, r5
 8005c5a:	46d3      	mov	fp, sl
 8005c5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c60:	b298      	uxth	r0, r3
 8005c62:	fb06 a000 	mla	r0, r6, r0, sl
 8005c66:	0c02      	lsrs	r2, r0, #16
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	fb06 2303 	mla	r3, r6, r3, r2
 8005c6e:	f8de 2000 	ldr.w	r2, [lr]
 8005c72:	b280      	uxth	r0, r0
 8005c74:	b292      	uxth	r2, r2
 8005c76:	1a12      	subs	r2, r2, r0
 8005c78:	445a      	add	r2, fp
 8005c7a:	f8de 0000 	ldr.w	r0, [lr]
 8005c7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005c8c:	b292      	uxth	r2, r2
 8005c8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c92:	45e1      	cmp	r9, ip
 8005c94:	f84e 2b04 	str.w	r2, [lr], #4
 8005c98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c9c:	d2de      	bcs.n	8005c5c <quorem+0x42>
 8005c9e:	9b00      	ldr	r3, [sp, #0]
 8005ca0:	58eb      	ldr	r3, [r5, r3]
 8005ca2:	b92b      	cbnz	r3, 8005cb0 <quorem+0x96>
 8005ca4:	9b01      	ldr	r3, [sp, #4]
 8005ca6:	3b04      	subs	r3, #4
 8005ca8:	429d      	cmp	r5, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	d32f      	bcc.n	8005d0e <quorem+0xf4>
 8005cae:	613c      	str	r4, [r7, #16]
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	f001 f97f 	bl	8006fb4 <__mcmp>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	db25      	blt.n	8005d06 <quorem+0xec>
 8005cba:	4629      	mov	r1, r5
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cc2:	f8d1 c000 	ldr.w	ip, [r1]
 8005cc6:	fa1f fe82 	uxth.w	lr, r2
 8005cca:	fa1f f38c 	uxth.w	r3, ip
 8005cce:	eba3 030e 	sub.w	r3, r3, lr
 8005cd2:	4403      	add	r3, r0
 8005cd4:	0c12      	lsrs	r2, r2, #16
 8005cd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005cda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ce4:	45c1      	cmp	r9, r8
 8005ce6:	f841 3b04 	str.w	r3, [r1], #4
 8005cea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cee:	d2e6      	bcs.n	8005cbe <quorem+0xa4>
 8005cf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cf8:	b922      	cbnz	r2, 8005d04 <quorem+0xea>
 8005cfa:	3b04      	subs	r3, #4
 8005cfc:	429d      	cmp	r5, r3
 8005cfe:	461a      	mov	r2, r3
 8005d00:	d30b      	bcc.n	8005d1a <quorem+0x100>
 8005d02:	613c      	str	r4, [r7, #16]
 8005d04:	3601      	adds	r6, #1
 8005d06:	4630      	mov	r0, r6
 8005d08:	b003      	add	sp, #12
 8005d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	3b04      	subs	r3, #4
 8005d12:	2a00      	cmp	r2, #0
 8005d14:	d1cb      	bne.n	8005cae <quorem+0x94>
 8005d16:	3c01      	subs	r4, #1
 8005d18:	e7c6      	b.n	8005ca8 <quorem+0x8e>
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	3b04      	subs	r3, #4
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	d1ef      	bne.n	8005d02 <quorem+0xe8>
 8005d22:	3c01      	subs	r4, #1
 8005d24:	e7ea      	b.n	8005cfc <quorem+0xe2>
 8005d26:	2000      	movs	r0, #0
 8005d28:	e7ee      	b.n	8005d08 <quorem+0xee>
 8005d2a:	0000      	movs	r0, r0
 8005d2c:	0000      	movs	r0, r0
	...

08005d30 <_dtoa_r>:
 8005d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	69c7      	ldr	r7, [r0, #28]
 8005d36:	b097      	sub	sp, #92	@ 0x5c
 8005d38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005d3c:	ec55 4b10 	vmov	r4, r5, d0
 8005d40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005d42:	9107      	str	r1, [sp, #28]
 8005d44:	4681      	mov	r9, r0
 8005d46:	920c      	str	r2, [sp, #48]	@ 0x30
 8005d48:	9311      	str	r3, [sp, #68]	@ 0x44
 8005d4a:	b97f      	cbnz	r7, 8005d6c <_dtoa_r+0x3c>
 8005d4c:	2010      	movs	r0, #16
 8005d4e:	f000 fe09 	bl	8006964 <malloc>
 8005d52:	4602      	mov	r2, r0
 8005d54:	f8c9 001c 	str.w	r0, [r9, #28]
 8005d58:	b920      	cbnz	r0, 8005d64 <_dtoa_r+0x34>
 8005d5a:	4ba9      	ldr	r3, [pc, #676]	@ (8006000 <_dtoa_r+0x2d0>)
 8005d5c:	21ef      	movs	r1, #239	@ 0xef
 8005d5e:	48a9      	ldr	r0, [pc, #676]	@ (8006004 <_dtoa_r+0x2d4>)
 8005d60:	f001 fcc0 	bl	80076e4 <__assert_func>
 8005d64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d68:	6007      	str	r7, [r0, #0]
 8005d6a:	60c7      	str	r7, [r0, #12]
 8005d6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d70:	6819      	ldr	r1, [r3, #0]
 8005d72:	b159      	cbz	r1, 8005d8c <_dtoa_r+0x5c>
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	604a      	str	r2, [r1, #4]
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4093      	lsls	r3, r2
 8005d7c:	608b      	str	r3, [r1, #8]
 8005d7e:	4648      	mov	r0, r9
 8005d80:	f000 fee6 	bl	8006b50 <_Bfree>
 8005d84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	1e2b      	subs	r3, r5, #0
 8005d8e:	bfb9      	ittee	lt
 8005d90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d94:	9305      	strlt	r3, [sp, #20]
 8005d96:	2300      	movge	r3, #0
 8005d98:	6033      	strge	r3, [r6, #0]
 8005d9a:	9f05      	ldr	r7, [sp, #20]
 8005d9c:	4b9a      	ldr	r3, [pc, #616]	@ (8006008 <_dtoa_r+0x2d8>)
 8005d9e:	bfbc      	itt	lt
 8005da0:	2201      	movlt	r2, #1
 8005da2:	6032      	strlt	r2, [r6, #0]
 8005da4:	43bb      	bics	r3, r7
 8005da6:	d112      	bne.n	8005dce <_dtoa_r+0x9e>
 8005da8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005daa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005db4:	4323      	orrs	r3, r4
 8005db6:	f000 855a 	beq.w	800686e <_dtoa_r+0xb3e>
 8005dba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dbc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800601c <_dtoa_r+0x2ec>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 855c 	beq.w	800687e <_dtoa_r+0xb4e>
 8005dc6:	f10a 0303 	add.w	r3, sl, #3
 8005dca:	f000 bd56 	b.w	800687a <_dtoa_r+0xb4a>
 8005dce:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	ec51 0b17 	vmov	r0, r1, d7
 8005dd8:	2300      	movs	r3, #0
 8005dda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005dde:	f7fa fe73 	bl	8000ac8 <__aeabi_dcmpeq>
 8005de2:	4680      	mov	r8, r0
 8005de4:	b158      	cbz	r0, 8005dfe <_dtoa_r+0xce>
 8005de6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005de8:	2301      	movs	r3, #1
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dee:	b113      	cbz	r3, 8005df6 <_dtoa_r+0xc6>
 8005df0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005df2:	4b86      	ldr	r3, [pc, #536]	@ (800600c <_dtoa_r+0x2dc>)
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006020 <_dtoa_r+0x2f0>
 8005dfa:	f000 bd40 	b.w	800687e <_dtoa_r+0xb4e>
 8005dfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005e02:	aa14      	add	r2, sp, #80	@ 0x50
 8005e04:	a915      	add	r1, sp, #84	@ 0x54
 8005e06:	4648      	mov	r0, r9
 8005e08:	f001 f984 	bl	8007114 <__d2b>
 8005e0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005e10:	9002      	str	r0, [sp, #8]
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	d078      	beq.n	8005f08 <_dtoa_r+0x1d8>
 8005e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e30:	4619      	mov	r1, r3
 8005e32:	2200      	movs	r2, #0
 8005e34:	4b76      	ldr	r3, [pc, #472]	@ (8006010 <_dtoa_r+0x2e0>)
 8005e36:	f7fa fa27 	bl	8000288 <__aeabi_dsub>
 8005e3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005fe8 <_dtoa_r+0x2b8>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f7fa fbda 	bl	80005f8 <__aeabi_dmul>
 8005e44:	a36a      	add	r3, pc, #424	@ (adr r3, 8005ff0 <_dtoa_r+0x2c0>)
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f7fa fa1f 	bl	800028c <__adddf3>
 8005e4e:	4604      	mov	r4, r0
 8005e50:	4630      	mov	r0, r6
 8005e52:	460d      	mov	r5, r1
 8005e54:	f7fa fb66 	bl	8000524 <__aeabi_i2d>
 8005e58:	a367      	add	r3, pc, #412	@ (adr r3, 8005ff8 <_dtoa_r+0x2c8>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa fbcb 	bl	80005f8 <__aeabi_dmul>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4620      	mov	r0, r4
 8005e68:	4629      	mov	r1, r5
 8005e6a:	f7fa fa0f 	bl	800028c <__adddf3>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	460d      	mov	r5, r1
 8005e72:	f7fa fe71 	bl	8000b58 <__aeabi_d2iz>
 8005e76:	2200      	movs	r2, #0
 8005e78:	4607      	mov	r7, r0
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4629      	mov	r1, r5
 8005e80:	f7fa fe2c 	bl	8000adc <__aeabi_dcmplt>
 8005e84:	b140      	cbz	r0, 8005e98 <_dtoa_r+0x168>
 8005e86:	4638      	mov	r0, r7
 8005e88:	f7fa fb4c 	bl	8000524 <__aeabi_i2d>
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	462b      	mov	r3, r5
 8005e90:	f7fa fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e94:	b900      	cbnz	r0, 8005e98 <_dtoa_r+0x168>
 8005e96:	3f01      	subs	r7, #1
 8005e98:	2f16      	cmp	r7, #22
 8005e9a:	d852      	bhi.n	8005f42 <_dtoa_r+0x212>
 8005e9c:	4b5d      	ldr	r3, [pc, #372]	@ (8006014 <_dtoa_r+0x2e4>)
 8005e9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005eaa:	f7fa fe17 	bl	8000adc <__aeabi_dcmplt>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d049      	beq.n	8005f46 <_dtoa_r+0x216>
 8005eb2:	3f01      	subs	r7, #1
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005eb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005eba:	1b9b      	subs	r3, r3, r6
 8005ebc:	1e5a      	subs	r2, r3, #1
 8005ebe:	bf45      	ittet	mi
 8005ec0:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ec4:	9300      	strmi	r3, [sp, #0]
 8005ec6:	2300      	movpl	r3, #0
 8005ec8:	2300      	movmi	r3, #0
 8005eca:	9206      	str	r2, [sp, #24]
 8005ecc:	bf54      	ite	pl
 8005ece:	9300      	strpl	r3, [sp, #0]
 8005ed0:	9306      	strmi	r3, [sp, #24]
 8005ed2:	2f00      	cmp	r7, #0
 8005ed4:	db39      	blt.n	8005f4a <_dtoa_r+0x21a>
 8005ed6:	9b06      	ldr	r3, [sp, #24]
 8005ed8:	970d      	str	r7, [sp, #52]	@ 0x34
 8005eda:	443b      	add	r3, r7
 8005edc:	9306      	str	r3, [sp, #24]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9308      	str	r3, [sp, #32]
 8005ee2:	9b07      	ldr	r3, [sp, #28]
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d863      	bhi.n	8005fb0 <_dtoa_r+0x280>
 8005ee8:	2b05      	cmp	r3, #5
 8005eea:	bfc4      	itt	gt
 8005eec:	3b04      	subgt	r3, #4
 8005eee:	9307      	strgt	r3, [sp, #28]
 8005ef0:	9b07      	ldr	r3, [sp, #28]
 8005ef2:	f1a3 0302 	sub.w	r3, r3, #2
 8005ef6:	bfcc      	ite	gt
 8005ef8:	2400      	movgt	r4, #0
 8005efa:	2401      	movle	r4, #1
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d863      	bhi.n	8005fc8 <_dtoa_r+0x298>
 8005f00:	e8df f003 	tbb	[pc, r3]
 8005f04:	2b375452 	.word	0x2b375452
 8005f08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005f0c:	441e      	add	r6, r3
 8005f0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	bfc1      	itttt	gt
 8005f16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f1a:	409f      	lslgt	r7, r3
 8005f1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f24:	bfd6      	itet	le
 8005f26:	f1c3 0320 	rsble	r3, r3, #32
 8005f2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8005f2e:	fa04 f003 	lslle.w	r0, r4, r3
 8005f32:	f7fa fae7 	bl	8000504 <__aeabi_ui2d>
 8005f36:	2201      	movs	r2, #1
 8005f38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f3c:	3e01      	subs	r6, #1
 8005f3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005f40:	e776      	b.n	8005e30 <_dtoa_r+0x100>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e7b7      	b.n	8005eb6 <_dtoa_r+0x186>
 8005f46:	9010      	str	r0, [sp, #64]	@ 0x40
 8005f48:	e7b6      	b.n	8005eb8 <_dtoa_r+0x188>
 8005f4a:	9b00      	ldr	r3, [sp, #0]
 8005f4c:	1bdb      	subs	r3, r3, r7
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	427b      	negs	r3, r7
 8005f52:	9308      	str	r3, [sp, #32]
 8005f54:	2300      	movs	r3, #0
 8005f56:	930d      	str	r3, [sp, #52]	@ 0x34
 8005f58:	e7c3      	b.n	8005ee2 <_dtoa_r+0x1b2>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f60:	eb07 0b03 	add.w	fp, r7, r3
 8005f64:	f10b 0301 	add.w	r3, fp, #1
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	9303      	str	r3, [sp, #12]
 8005f6c:	bfb8      	it	lt
 8005f6e:	2301      	movlt	r3, #1
 8005f70:	e006      	b.n	8005f80 <_dtoa_r+0x250>
 8005f72:	2301      	movs	r3, #1
 8005f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	dd28      	ble.n	8005fce <_dtoa_r+0x29e>
 8005f7c:	469b      	mov	fp, r3
 8005f7e:	9303      	str	r3, [sp, #12]
 8005f80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005f84:	2100      	movs	r1, #0
 8005f86:	2204      	movs	r2, #4
 8005f88:	f102 0514 	add.w	r5, r2, #20
 8005f8c:	429d      	cmp	r5, r3
 8005f8e:	d926      	bls.n	8005fde <_dtoa_r+0x2ae>
 8005f90:	6041      	str	r1, [r0, #4]
 8005f92:	4648      	mov	r0, r9
 8005f94:	f000 fd9c 	bl	8006ad0 <_Balloc>
 8005f98:	4682      	mov	sl, r0
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d142      	bne.n	8006024 <_dtoa_r+0x2f4>
 8005f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006018 <_dtoa_r+0x2e8>)
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005fa6:	e6da      	b.n	8005d5e <_dtoa_r+0x2e>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e7e3      	b.n	8005f74 <_dtoa_r+0x244>
 8005fac:	2300      	movs	r3, #0
 8005fae:	e7d5      	b.n	8005f5c <_dtoa_r+0x22c>
 8005fb0:	2401      	movs	r4, #1
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9307      	str	r3, [sp, #28]
 8005fb6:	9409      	str	r4, [sp, #36]	@ 0x24
 8005fb8:	f04f 3bff 	mov.w	fp, #4294967295
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8cd b00c 	str.w	fp, [sp, #12]
 8005fc2:	2312      	movs	r3, #18
 8005fc4:	920c      	str	r2, [sp, #48]	@ 0x30
 8005fc6:	e7db      	b.n	8005f80 <_dtoa_r+0x250>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fcc:	e7f4      	b.n	8005fb8 <_dtoa_r+0x288>
 8005fce:	f04f 0b01 	mov.w	fp, #1
 8005fd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8005fd6:	465b      	mov	r3, fp
 8005fd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005fdc:	e7d0      	b.n	8005f80 <_dtoa_r+0x250>
 8005fde:	3101      	adds	r1, #1
 8005fe0:	0052      	lsls	r2, r2, #1
 8005fe2:	e7d1      	b.n	8005f88 <_dtoa_r+0x258>
 8005fe4:	f3af 8000 	nop.w
 8005fe8:	636f4361 	.word	0x636f4361
 8005fec:	3fd287a7 	.word	0x3fd287a7
 8005ff0:	8b60c8b3 	.word	0x8b60c8b3
 8005ff4:	3fc68a28 	.word	0x3fc68a28
 8005ff8:	509f79fb 	.word	0x509f79fb
 8005ffc:	3fd34413 	.word	0x3fd34413
 8006000:	08007a3d 	.word	0x08007a3d
 8006004:	08007a54 	.word	0x08007a54
 8006008:	7ff00000 	.word	0x7ff00000
 800600c:	08007a0d 	.word	0x08007a0d
 8006010:	3ff80000 	.word	0x3ff80000
 8006014:	08007ba8 	.word	0x08007ba8
 8006018:	08007aac 	.word	0x08007aac
 800601c:	08007a39 	.word	0x08007a39
 8006020:	08007a0c 	.word	0x08007a0c
 8006024:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006028:	6018      	str	r0, [r3, #0]
 800602a:	9b03      	ldr	r3, [sp, #12]
 800602c:	2b0e      	cmp	r3, #14
 800602e:	f200 80a1 	bhi.w	8006174 <_dtoa_r+0x444>
 8006032:	2c00      	cmp	r4, #0
 8006034:	f000 809e 	beq.w	8006174 <_dtoa_r+0x444>
 8006038:	2f00      	cmp	r7, #0
 800603a:	dd33      	ble.n	80060a4 <_dtoa_r+0x374>
 800603c:	4b9c      	ldr	r3, [pc, #624]	@ (80062b0 <_dtoa_r+0x580>)
 800603e:	f007 020f 	and.w	r2, r7, #15
 8006042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006046:	ed93 7b00 	vldr	d7, [r3]
 800604a:	05f8      	lsls	r0, r7, #23
 800604c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006050:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006054:	d516      	bpl.n	8006084 <_dtoa_r+0x354>
 8006056:	4b97      	ldr	r3, [pc, #604]	@ (80062b4 <_dtoa_r+0x584>)
 8006058:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800605c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006060:	f7fa fbf4 	bl	800084c <__aeabi_ddiv>
 8006064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006068:	f004 040f 	and.w	r4, r4, #15
 800606c:	2603      	movs	r6, #3
 800606e:	4d91      	ldr	r5, [pc, #580]	@ (80062b4 <_dtoa_r+0x584>)
 8006070:	b954      	cbnz	r4, 8006088 <_dtoa_r+0x358>
 8006072:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800607a:	f7fa fbe7 	bl	800084c <__aeabi_ddiv>
 800607e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006082:	e028      	b.n	80060d6 <_dtoa_r+0x3a6>
 8006084:	2602      	movs	r6, #2
 8006086:	e7f2      	b.n	800606e <_dtoa_r+0x33e>
 8006088:	07e1      	lsls	r1, r4, #31
 800608a:	d508      	bpl.n	800609e <_dtoa_r+0x36e>
 800608c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006090:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006094:	f7fa fab0 	bl	80005f8 <__aeabi_dmul>
 8006098:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800609c:	3601      	adds	r6, #1
 800609e:	1064      	asrs	r4, r4, #1
 80060a0:	3508      	adds	r5, #8
 80060a2:	e7e5      	b.n	8006070 <_dtoa_r+0x340>
 80060a4:	f000 80af 	beq.w	8006206 <_dtoa_r+0x4d6>
 80060a8:	427c      	negs	r4, r7
 80060aa:	4b81      	ldr	r3, [pc, #516]	@ (80062b0 <_dtoa_r+0x580>)
 80060ac:	4d81      	ldr	r5, [pc, #516]	@ (80062b4 <_dtoa_r+0x584>)
 80060ae:	f004 020f 	and.w	r2, r4, #15
 80060b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80060be:	f7fa fa9b 	bl	80005f8 <__aeabi_dmul>
 80060c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060c6:	1124      	asrs	r4, r4, #4
 80060c8:	2300      	movs	r3, #0
 80060ca:	2602      	movs	r6, #2
 80060cc:	2c00      	cmp	r4, #0
 80060ce:	f040 808f 	bne.w	80061f0 <_dtoa_r+0x4c0>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1d3      	bne.n	800607e <_dtoa_r+0x34e>
 80060d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80060d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8094 	beq.w	800620a <_dtoa_r+0x4da>
 80060e2:	4b75      	ldr	r3, [pc, #468]	@ (80062b8 <_dtoa_r+0x588>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7fa fcf7 	bl	8000adc <__aeabi_dcmplt>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	f000 808b 	beq.w	800620a <_dtoa_r+0x4da>
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 8087 	beq.w	800620a <_dtoa_r+0x4da>
 80060fc:	f1bb 0f00 	cmp.w	fp, #0
 8006100:	dd34      	ble.n	800616c <_dtoa_r+0x43c>
 8006102:	4620      	mov	r0, r4
 8006104:	4b6d      	ldr	r3, [pc, #436]	@ (80062bc <_dtoa_r+0x58c>)
 8006106:	2200      	movs	r2, #0
 8006108:	4629      	mov	r1, r5
 800610a:	f7fa fa75 	bl	80005f8 <__aeabi_dmul>
 800610e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006112:	f107 38ff 	add.w	r8, r7, #4294967295
 8006116:	3601      	adds	r6, #1
 8006118:	465c      	mov	r4, fp
 800611a:	4630      	mov	r0, r6
 800611c:	f7fa fa02 	bl	8000524 <__aeabi_i2d>
 8006120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006124:	f7fa fa68 	bl	80005f8 <__aeabi_dmul>
 8006128:	4b65      	ldr	r3, [pc, #404]	@ (80062c0 <_dtoa_r+0x590>)
 800612a:	2200      	movs	r2, #0
 800612c:	f7fa f8ae 	bl	800028c <__adddf3>
 8006130:	4605      	mov	r5, r0
 8006132:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006136:	2c00      	cmp	r4, #0
 8006138:	d16a      	bne.n	8006210 <_dtoa_r+0x4e0>
 800613a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800613e:	4b61      	ldr	r3, [pc, #388]	@ (80062c4 <_dtoa_r+0x594>)
 8006140:	2200      	movs	r2, #0
 8006142:	f7fa f8a1 	bl	8000288 <__aeabi_dsub>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800614e:	462a      	mov	r2, r5
 8006150:	4633      	mov	r3, r6
 8006152:	f7fa fce1 	bl	8000b18 <__aeabi_dcmpgt>
 8006156:	2800      	cmp	r0, #0
 8006158:	f040 8298 	bne.w	800668c <_dtoa_r+0x95c>
 800615c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006160:	462a      	mov	r2, r5
 8006162:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006166:	f7fa fcb9 	bl	8000adc <__aeabi_dcmplt>
 800616a:	bb38      	cbnz	r0, 80061bc <_dtoa_r+0x48c>
 800616c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006170:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006174:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006176:	2b00      	cmp	r3, #0
 8006178:	f2c0 8157 	blt.w	800642a <_dtoa_r+0x6fa>
 800617c:	2f0e      	cmp	r7, #14
 800617e:	f300 8154 	bgt.w	800642a <_dtoa_r+0x6fa>
 8006182:	4b4b      	ldr	r3, [pc, #300]	@ (80062b0 <_dtoa_r+0x580>)
 8006184:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006188:	ed93 7b00 	vldr	d7, [r3]
 800618c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800618e:	2b00      	cmp	r3, #0
 8006190:	ed8d 7b00 	vstr	d7, [sp]
 8006194:	f280 80e5 	bge.w	8006362 <_dtoa_r+0x632>
 8006198:	9b03      	ldr	r3, [sp, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f300 80e1 	bgt.w	8006362 <_dtoa_r+0x632>
 80061a0:	d10c      	bne.n	80061bc <_dtoa_r+0x48c>
 80061a2:	4b48      	ldr	r3, [pc, #288]	@ (80062c4 <_dtoa_r+0x594>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	ec51 0b17 	vmov	r0, r1, d7
 80061aa:	f7fa fa25 	bl	80005f8 <__aeabi_dmul>
 80061ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061b2:	f7fa fca7 	bl	8000b04 <__aeabi_dcmpge>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	f000 8266 	beq.w	8006688 <_dtoa_r+0x958>
 80061bc:	2400      	movs	r4, #0
 80061be:	4625      	mov	r5, r4
 80061c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061c2:	4656      	mov	r6, sl
 80061c4:	ea6f 0803 	mvn.w	r8, r3
 80061c8:	2700      	movs	r7, #0
 80061ca:	4621      	mov	r1, r4
 80061cc:	4648      	mov	r0, r9
 80061ce:	f000 fcbf 	bl	8006b50 <_Bfree>
 80061d2:	2d00      	cmp	r5, #0
 80061d4:	f000 80bd 	beq.w	8006352 <_dtoa_r+0x622>
 80061d8:	b12f      	cbz	r7, 80061e6 <_dtoa_r+0x4b6>
 80061da:	42af      	cmp	r7, r5
 80061dc:	d003      	beq.n	80061e6 <_dtoa_r+0x4b6>
 80061de:	4639      	mov	r1, r7
 80061e0:	4648      	mov	r0, r9
 80061e2:	f000 fcb5 	bl	8006b50 <_Bfree>
 80061e6:	4629      	mov	r1, r5
 80061e8:	4648      	mov	r0, r9
 80061ea:	f000 fcb1 	bl	8006b50 <_Bfree>
 80061ee:	e0b0      	b.n	8006352 <_dtoa_r+0x622>
 80061f0:	07e2      	lsls	r2, r4, #31
 80061f2:	d505      	bpl.n	8006200 <_dtoa_r+0x4d0>
 80061f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061f8:	f7fa f9fe 	bl	80005f8 <__aeabi_dmul>
 80061fc:	3601      	adds	r6, #1
 80061fe:	2301      	movs	r3, #1
 8006200:	1064      	asrs	r4, r4, #1
 8006202:	3508      	adds	r5, #8
 8006204:	e762      	b.n	80060cc <_dtoa_r+0x39c>
 8006206:	2602      	movs	r6, #2
 8006208:	e765      	b.n	80060d6 <_dtoa_r+0x3a6>
 800620a:	9c03      	ldr	r4, [sp, #12]
 800620c:	46b8      	mov	r8, r7
 800620e:	e784      	b.n	800611a <_dtoa_r+0x3ea>
 8006210:	4b27      	ldr	r3, [pc, #156]	@ (80062b0 <_dtoa_r+0x580>)
 8006212:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006214:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006218:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800621c:	4454      	add	r4, sl
 800621e:	2900      	cmp	r1, #0
 8006220:	d054      	beq.n	80062cc <_dtoa_r+0x59c>
 8006222:	4929      	ldr	r1, [pc, #164]	@ (80062c8 <_dtoa_r+0x598>)
 8006224:	2000      	movs	r0, #0
 8006226:	f7fa fb11 	bl	800084c <__aeabi_ddiv>
 800622a:	4633      	mov	r3, r6
 800622c:	462a      	mov	r2, r5
 800622e:	f7fa f82b 	bl	8000288 <__aeabi_dsub>
 8006232:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006236:	4656      	mov	r6, sl
 8006238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800623c:	f7fa fc8c 	bl	8000b58 <__aeabi_d2iz>
 8006240:	4605      	mov	r5, r0
 8006242:	f7fa f96f 	bl	8000524 <__aeabi_i2d>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800624e:	f7fa f81b 	bl	8000288 <__aeabi_dsub>
 8006252:	3530      	adds	r5, #48	@ 0x30
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800625c:	f806 5b01 	strb.w	r5, [r6], #1
 8006260:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006264:	f7fa fc3a 	bl	8000adc <__aeabi_dcmplt>
 8006268:	2800      	cmp	r0, #0
 800626a:	d172      	bne.n	8006352 <_dtoa_r+0x622>
 800626c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006270:	4911      	ldr	r1, [pc, #68]	@ (80062b8 <_dtoa_r+0x588>)
 8006272:	2000      	movs	r0, #0
 8006274:	f7fa f808 	bl	8000288 <__aeabi_dsub>
 8006278:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800627c:	f7fa fc2e 	bl	8000adc <__aeabi_dcmplt>
 8006280:	2800      	cmp	r0, #0
 8006282:	f040 80b4 	bne.w	80063ee <_dtoa_r+0x6be>
 8006286:	42a6      	cmp	r6, r4
 8006288:	f43f af70 	beq.w	800616c <_dtoa_r+0x43c>
 800628c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006290:	4b0a      	ldr	r3, [pc, #40]	@ (80062bc <_dtoa_r+0x58c>)
 8006292:	2200      	movs	r2, #0
 8006294:	f7fa f9b0 	bl	80005f8 <__aeabi_dmul>
 8006298:	4b08      	ldr	r3, [pc, #32]	@ (80062bc <_dtoa_r+0x58c>)
 800629a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800629e:	2200      	movs	r2, #0
 80062a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a4:	f7fa f9a8 	bl	80005f8 <__aeabi_dmul>
 80062a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062ac:	e7c4      	b.n	8006238 <_dtoa_r+0x508>
 80062ae:	bf00      	nop
 80062b0:	08007ba8 	.word	0x08007ba8
 80062b4:	08007b80 	.word	0x08007b80
 80062b8:	3ff00000 	.word	0x3ff00000
 80062bc:	40240000 	.word	0x40240000
 80062c0:	401c0000 	.word	0x401c0000
 80062c4:	40140000 	.word	0x40140000
 80062c8:	3fe00000 	.word	0x3fe00000
 80062cc:	4631      	mov	r1, r6
 80062ce:	4628      	mov	r0, r5
 80062d0:	f7fa f992 	bl	80005f8 <__aeabi_dmul>
 80062d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80062d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80062da:	4656      	mov	r6, sl
 80062dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062e0:	f7fa fc3a 	bl	8000b58 <__aeabi_d2iz>
 80062e4:	4605      	mov	r5, r0
 80062e6:	f7fa f91d 	bl	8000524 <__aeabi_i2d>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f2:	f7f9 ffc9 	bl	8000288 <__aeabi_dsub>
 80062f6:	3530      	adds	r5, #48	@ 0x30
 80062f8:	f806 5b01 	strb.w	r5, [r6], #1
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	42a6      	cmp	r6, r4
 8006302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	d124      	bne.n	8006356 <_dtoa_r+0x626>
 800630c:	4baf      	ldr	r3, [pc, #700]	@ (80065cc <_dtoa_r+0x89c>)
 800630e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006312:	f7f9 ffbb 	bl	800028c <__adddf3>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800631e:	f7fa fbfb 	bl	8000b18 <__aeabi_dcmpgt>
 8006322:	2800      	cmp	r0, #0
 8006324:	d163      	bne.n	80063ee <_dtoa_r+0x6be>
 8006326:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800632a:	49a8      	ldr	r1, [pc, #672]	@ (80065cc <_dtoa_r+0x89c>)
 800632c:	2000      	movs	r0, #0
 800632e:	f7f9 ffab 	bl	8000288 <__aeabi_dsub>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800633a:	f7fa fbcf 	bl	8000adc <__aeabi_dcmplt>
 800633e:	2800      	cmp	r0, #0
 8006340:	f43f af14 	beq.w	800616c <_dtoa_r+0x43c>
 8006344:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006346:	1e73      	subs	r3, r6, #1
 8006348:	9313      	str	r3, [sp, #76]	@ 0x4c
 800634a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800634e:	2b30      	cmp	r3, #48	@ 0x30
 8006350:	d0f8      	beq.n	8006344 <_dtoa_r+0x614>
 8006352:	4647      	mov	r7, r8
 8006354:	e03b      	b.n	80063ce <_dtoa_r+0x69e>
 8006356:	4b9e      	ldr	r3, [pc, #632]	@ (80065d0 <_dtoa_r+0x8a0>)
 8006358:	f7fa f94e 	bl	80005f8 <__aeabi_dmul>
 800635c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006360:	e7bc      	b.n	80062dc <_dtoa_r+0x5ac>
 8006362:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006366:	4656      	mov	r6, sl
 8006368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800636c:	4620      	mov	r0, r4
 800636e:	4629      	mov	r1, r5
 8006370:	f7fa fa6c 	bl	800084c <__aeabi_ddiv>
 8006374:	f7fa fbf0 	bl	8000b58 <__aeabi_d2iz>
 8006378:	4680      	mov	r8, r0
 800637a:	f7fa f8d3 	bl	8000524 <__aeabi_i2d>
 800637e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006382:	f7fa f939 	bl	80005f8 <__aeabi_dmul>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006392:	f7f9 ff79 	bl	8000288 <__aeabi_dsub>
 8006396:	f806 4b01 	strb.w	r4, [r6], #1
 800639a:	9d03      	ldr	r5, [sp, #12]
 800639c:	eba6 040a 	sub.w	r4, r6, sl
 80063a0:	42a5      	cmp	r5, r4
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	d133      	bne.n	8006410 <_dtoa_r+0x6e0>
 80063a8:	f7f9 ff70 	bl	800028c <__adddf3>
 80063ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063b0:	4604      	mov	r4, r0
 80063b2:	460d      	mov	r5, r1
 80063b4:	f7fa fbb0 	bl	8000b18 <__aeabi_dcmpgt>
 80063b8:	b9c0      	cbnz	r0, 80063ec <_dtoa_r+0x6bc>
 80063ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063be:	4620      	mov	r0, r4
 80063c0:	4629      	mov	r1, r5
 80063c2:	f7fa fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 80063c6:	b110      	cbz	r0, 80063ce <_dtoa_r+0x69e>
 80063c8:	f018 0f01 	tst.w	r8, #1
 80063cc:	d10e      	bne.n	80063ec <_dtoa_r+0x6bc>
 80063ce:	9902      	ldr	r1, [sp, #8]
 80063d0:	4648      	mov	r0, r9
 80063d2:	f000 fbbd 	bl	8006b50 <_Bfree>
 80063d6:	2300      	movs	r3, #0
 80063d8:	7033      	strb	r3, [r6, #0]
 80063da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063dc:	3701      	adds	r7, #1
 80063de:	601f      	str	r7, [r3, #0]
 80063e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 824b 	beq.w	800687e <_dtoa_r+0xb4e>
 80063e8:	601e      	str	r6, [r3, #0]
 80063ea:	e248      	b.n	800687e <_dtoa_r+0xb4e>
 80063ec:	46b8      	mov	r8, r7
 80063ee:	4633      	mov	r3, r6
 80063f0:	461e      	mov	r6, r3
 80063f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063f6:	2a39      	cmp	r2, #57	@ 0x39
 80063f8:	d106      	bne.n	8006408 <_dtoa_r+0x6d8>
 80063fa:	459a      	cmp	sl, r3
 80063fc:	d1f8      	bne.n	80063f0 <_dtoa_r+0x6c0>
 80063fe:	2230      	movs	r2, #48	@ 0x30
 8006400:	f108 0801 	add.w	r8, r8, #1
 8006404:	f88a 2000 	strb.w	r2, [sl]
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	3201      	adds	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e7a0      	b.n	8006352 <_dtoa_r+0x622>
 8006410:	4b6f      	ldr	r3, [pc, #444]	@ (80065d0 <_dtoa_r+0x8a0>)
 8006412:	2200      	movs	r2, #0
 8006414:	f7fa f8f0 	bl	80005f8 <__aeabi_dmul>
 8006418:	2200      	movs	r2, #0
 800641a:	2300      	movs	r3, #0
 800641c:	4604      	mov	r4, r0
 800641e:	460d      	mov	r5, r1
 8006420:	f7fa fb52 	bl	8000ac8 <__aeabi_dcmpeq>
 8006424:	2800      	cmp	r0, #0
 8006426:	d09f      	beq.n	8006368 <_dtoa_r+0x638>
 8006428:	e7d1      	b.n	80063ce <_dtoa_r+0x69e>
 800642a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800642c:	2a00      	cmp	r2, #0
 800642e:	f000 80ea 	beq.w	8006606 <_dtoa_r+0x8d6>
 8006432:	9a07      	ldr	r2, [sp, #28]
 8006434:	2a01      	cmp	r2, #1
 8006436:	f300 80cd 	bgt.w	80065d4 <_dtoa_r+0x8a4>
 800643a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800643c:	2a00      	cmp	r2, #0
 800643e:	f000 80c1 	beq.w	80065c4 <_dtoa_r+0x894>
 8006442:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006446:	9c08      	ldr	r4, [sp, #32]
 8006448:	9e00      	ldr	r6, [sp, #0]
 800644a:	9a00      	ldr	r2, [sp, #0]
 800644c:	441a      	add	r2, r3
 800644e:	9200      	str	r2, [sp, #0]
 8006450:	9a06      	ldr	r2, [sp, #24]
 8006452:	2101      	movs	r1, #1
 8006454:	441a      	add	r2, r3
 8006456:	4648      	mov	r0, r9
 8006458:	9206      	str	r2, [sp, #24]
 800645a:	f000 fc2d 	bl	8006cb8 <__i2b>
 800645e:	4605      	mov	r5, r0
 8006460:	b166      	cbz	r6, 800647c <_dtoa_r+0x74c>
 8006462:	9b06      	ldr	r3, [sp, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	dd09      	ble.n	800647c <_dtoa_r+0x74c>
 8006468:	42b3      	cmp	r3, r6
 800646a:	9a00      	ldr	r2, [sp, #0]
 800646c:	bfa8      	it	ge
 800646e:	4633      	movge	r3, r6
 8006470:	1ad2      	subs	r2, r2, r3
 8006472:	9200      	str	r2, [sp, #0]
 8006474:	9a06      	ldr	r2, [sp, #24]
 8006476:	1af6      	subs	r6, r6, r3
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	9306      	str	r3, [sp, #24]
 800647c:	9b08      	ldr	r3, [sp, #32]
 800647e:	b30b      	cbz	r3, 80064c4 <_dtoa_r+0x794>
 8006480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80c6 	beq.w	8006614 <_dtoa_r+0x8e4>
 8006488:	2c00      	cmp	r4, #0
 800648a:	f000 80c0 	beq.w	800660e <_dtoa_r+0x8de>
 800648e:	4629      	mov	r1, r5
 8006490:	4622      	mov	r2, r4
 8006492:	4648      	mov	r0, r9
 8006494:	f000 fcc8 	bl	8006e28 <__pow5mult>
 8006498:	9a02      	ldr	r2, [sp, #8]
 800649a:	4601      	mov	r1, r0
 800649c:	4605      	mov	r5, r0
 800649e:	4648      	mov	r0, r9
 80064a0:	f000 fc20 	bl	8006ce4 <__multiply>
 80064a4:	9902      	ldr	r1, [sp, #8]
 80064a6:	4680      	mov	r8, r0
 80064a8:	4648      	mov	r0, r9
 80064aa:	f000 fb51 	bl	8006b50 <_Bfree>
 80064ae:	9b08      	ldr	r3, [sp, #32]
 80064b0:	1b1b      	subs	r3, r3, r4
 80064b2:	9308      	str	r3, [sp, #32]
 80064b4:	f000 80b1 	beq.w	800661a <_dtoa_r+0x8ea>
 80064b8:	9a08      	ldr	r2, [sp, #32]
 80064ba:	4641      	mov	r1, r8
 80064bc:	4648      	mov	r0, r9
 80064be:	f000 fcb3 	bl	8006e28 <__pow5mult>
 80064c2:	9002      	str	r0, [sp, #8]
 80064c4:	2101      	movs	r1, #1
 80064c6:	4648      	mov	r0, r9
 80064c8:	f000 fbf6 	bl	8006cb8 <__i2b>
 80064cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064ce:	4604      	mov	r4, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 81d8 	beq.w	8006886 <_dtoa_r+0xb56>
 80064d6:	461a      	mov	r2, r3
 80064d8:	4601      	mov	r1, r0
 80064da:	4648      	mov	r0, r9
 80064dc:	f000 fca4 	bl	8006e28 <__pow5mult>
 80064e0:	9b07      	ldr	r3, [sp, #28]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	4604      	mov	r4, r0
 80064e6:	f300 809f 	bgt.w	8006628 <_dtoa_r+0x8f8>
 80064ea:	9b04      	ldr	r3, [sp, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 8097 	bne.w	8006620 <_dtoa_r+0x8f0>
 80064f2:	9b05      	ldr	r3, [sp, #20]
 80064f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f040 8093 	bne.w	8006624 <_dtoa_r+0x8f4>
 80064fe:	9b05      	ldr	r3, [sp, #20]
 8006500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006504:	0d1b      	lsrs	r3, r3, #20
 8006506:	051b      	lsls	r3, r3, #20
 8006508:	b133      	cbz	r3, 8006518 <_dtoa_r+0x7e8>
 800650a:	9b00      	ldr	r3, [sp, #0]
 800650c:	3301      	adds	r3, #1
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	9b06      	ldr	r3, [sp, #24]
 8006512:	3301      	adds	r3, #1
 8006514:	9306      	str	r3, [sp, #24]
 8006516:	2301      	movs	r3, #1
 8006518:	9308      	str	r3, [sp, #32]
 800651a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 81b8 	beq.w	8006892 <_dtoa_r+0xb62>
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006528:	6918      	ldr	r0, [r3, #16]
 800652a:	f000 fb79 	bl	8006c20 <__hi0bits>
 800652e:	f1c0 0020 	rsb	r0, r0, #32
 8006532:	9b06      	ldr	r3, [sp, #24]
 8006534:	4418      	add	r0, r3
 8006536:	f010 001f 	ands.w	r0, r0, #31
 800653a:	f000 8082 	beq.w	8006642 <_dtoa_r+0x912>
 800653e:	f1c0 0320 	rsb	r3, r0, #32
 8006542:	2b04      	cmp	r3, #4
 8006544:	dd73      	ble.n	800662e <_dtoa_r+0x8fe>
 8006546:	9b00      	ldr	r3, [sp, #0]
 8006548:	f1c0 001c 	rsb	r0, r0, #28
 800654c:	4403      	add	r3, r0
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	9b06      	ldr	r3, [sp, #24]
 8006552:	4403      	add	r3, r0
 8006554:	4406      	add	r6, r0
 8006556:	9306      	str	r3, [sp, #24]
 8006558:	9b00      	ldr	r3, [sp, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	dd05      	ble.n	800656a <_dtoa_r+0x83a>
 800655e:	9902      	ldr	r1, [sp, #8]
 8006560:	461a      	mov	r2, r3
 8006562:	4648      	mov	r0, r9
 8006564:	f000 fcba 	bl	8006edc <__lshift>
 8006568:	9002      	str	r0, [sp, #8]
 800656a:	9b06      	ldr	r3, [sp, #24]
 800656c:	2b00      	cmp	r3, #0
 800656e:	dd05      	ble.n	800657c <_dtoa_r+0x84c>
 8006570:	4621      	mov	r1, r4
 8006572:	461a      	mov	r2, r3
 8006574:	4648      	mov	r0, r9
 8006576:	f000 fcb1 	bl	8006edc <__lshift>
 800657a:	4604      	mov	r4, r0
 800657c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d061      	beq.n	8006646 <_dtoa_r+0x916>
 8006582:	9802      	ldr	r0, [sp, #8]
 8006584:	4621      	mov	r1, r4
 8006586:	f000 fd15 	bl	8006fb4 <__mcmp>
 800658a:	2800      	cmp	r0, #0
 800658c:	da5b      	bge.n	8006646 <_dtoa_r+0x916>
 800658e:	2300      	movs	r3, #0
 8006590:	9902      	ldr	r1, [sp, #8]
 8006592:	220a      	movs	r2, #10
 8006594:	4648      	mov	r0, r9
 8006596:	f000 fafd 	bl	8006b94 <__multadd>
 800659a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800659c:	9002      	str	r0, [sp, #8]
 800659e:	f107 38ff 	add.w	r8, r7, #4294967295
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8177 	beq.w	8006896 <_dtoa_r+0xb66>
 80065a8:	4629      	mov	r1, r5
 80065aa:	2300      	movs	r3, #0
 80065ac:	220a      	movs	r2, #10
 80065ae:	4648      	mov	r0, r9
 80065b0:	f000 faf0 	bl	8006b94 <__multadd>
 80065b4:	f1bb 0f00 	cmp.w	fp, #0
 80065b8:	4605      	mov	r5, r0
 80065ba:	dc6f      	bgt.n	800669c <_dtoa_r+0x96c>
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	dc49      	bgt.n	8006656 <_dtoa_r+0x926>
 80065c2:	e06b      	b.n	800669c <_dtoa_r+0x96c>
 80065c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80065ca:	e73c      	b.n	8006446 <_dtoa_r+0x716>
 80065cc:	3fe00000 	.word	0x3fe00000
 80065d0:	40240000 	.word	0x40240000
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	1e5c      	subs	r4, r3, #1
 80065d8:	9b08      	ldr	r3, [sp, #32]
 80065da:	42a3      	cmp	r3, r4
 80065dc:	db09      	blt.n	80065f2 <_dtoa_r+0x8c2>
 80065de:	1b1c      	subs	r4, r3, r4
 80065e0:	9b03      	ldr	r3, [sp, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f6bf af30 	bge.w	8006448 <_dtoa_r+0x718>
 80065e8:	9b00      	ldr	r3, [sp, #0]
 80065ea:	9a03      	ldr	r2, [sp, #12]
 80065ec:	1a9e      	subs	r6, r3, r2
 80065ee:	2300      	movs	r3, #0
 80065f0:	e72b      	b.n	800644a <_dtoa_r+0x71a>
 80065f2:	9b08      	ldr	r3, [sp, #32]
 80065f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065f6:	9408      	str	r4, [sp, #32]
 80065f8:	1ae3      	subs	r3, r4, r3
 80065fa:	441a      	add	r2, r3
 80065fc:	9e00      	ldr	r6, [sp, #0]
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	920d      	str	r2, [sp, #52]	@ 0x34
 8006602:	2400      	movs	r4, #0
 8006604:	e721      	b.n	800644a <_dtoa_r+0x71a>
 8006606:	9c08      	ldr	r4, [sp, #32]
 8006608:	9e00      	ldr	r6, [sp, #0]
 800660a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800660c:	e728      	b.n	8006460 <_dtoa_r+0x730>
 800660e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006612:	e751      	b.n	80064b8 <_dtoa_r+0x788>
 8006614:	9a08      	ldr	r2, [sp, #32]
 8006616:	9902      	ldr	r1, [sp, #8]
 8006618:	e750      	b.n	80064bc <_dtoa_r+0x78c>
 800661a:	f8cd 8008 	str.w	r8, [sp, #8]
 800661e:	e751      	b.n	80064c4 <_dtoa_r+0x794>
 8006620:	2300      	movs	r3, #0
 8006622:	e779      	b.n	8006518 <_dtoa_r+0x7e8>
 8006624:	9b04      	ldr	r3, [sp, #16]
 8006626:	e777      	b.n	8006518 <_dtoa_r+0x7e8>
 8006628:	2300      	movs	r3, #0
 800662a:	9308      	str	r3, [sp, #32]
 800662c:	e779      	b.n	8006522 <_dtoa_r+0x7f2>
 800662e:	d093      	beq.n	8006558 <_dtoa_r+0x828>
 8006630:	9a00      	ldr	r2, [sp, #0]
 8006632:	331c      	adds	r3, #28
 8006634:	441a      	add	r2, r3
 8006636:	9200      	str	r2, [sp, #0]
 8006638:	9a06      	ldr	r2, [sp, #24]
 800663a:	441a      	add	r2, r3
 800663c:	441e      	add	r6, r3
 800663e:	9206      	str	r2, [sp, #24]
 8006640:	e78a      	b.n	8006558 <_dtoa_r+0x828>
 8006642:	4603      	mov	r3, r0
 8006644:	e7f4      	b.n	8006630 <_dtoa_r+0x900>
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	46b8      	mov	r8, r7
 800664c:	dc20      	bgt.n	8006690 <_dtoa_r+0x960>
 800664e:	469b      	mov	fp, r3
 8006650:	9b07      	ldr	r3, [sp, #28]
 8006652:	2b02      	cmp	r3, #2
 8006654:	dd1e      	ble.n	8006694 <_dtoa_r+0x964>
 8006656:	f1bb 0f00 	cmp.w	fp, #0
 800665a:	f47f adb1 	bne.w	80061c0 <_dtoa_r+0x490>
 800665e:	4621      	mov	r1, r4
 8006660:	465b      	mov	r3, fp
 8006662:	2205      	movs	r2, #5
 8006664:	4648      	mov	r0, r9
 8006666:	f000 fa95 	bl	8006b94 <__multadd>
 800666a:	4601      	mov	r1, r0
 800666c:	4604      	mov	r4, r0
 800666e:	9802      	ldr	r0, [sp, #8]
 8006670:	f000 fca0 	bl	8006fb4 <__mcmp>
 8006674:	2800      	cmp	r0, #0
 8006676:	f77f ada3 	ble.w	80061c0 <_dtoa_r+0x490>
 800667a:	4656      	mov	r6, sl
 800667c:	2331      	movs	r3, #49	@ 0x31
 800667e:	f806 3b01 	strb.w	r3, [r6], #1
 8006682:	f108 0801 	add.w	r8, r8, #1
 8006686:	e59f      	b.n	80061c8 <_dtoa_r+0x498>
 8006688:	9c03      	ldr	r4, [sp, #12]
 800668a:	46b8      	mov	r8, r7
 800668c:	4625      	mov	r5, r4
 800668e:	e7f4      	b.n	800667a <_dtoa_r+0x94a>
 8006690:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 8101 	beq.w	800689e <_dtoa_r+0xb6e>
 800669c:	2e00      	cmp	r6, #0
 800669e:	dd05      	ble.n	80066ac <_dtoa_r+0x97c>
 80066a0:	4629      	mov	r1, r5
 80066a2:	4632      	mov	r2, r6
 80066a4:	4648      	mov	r0, r9
 80066a6:	f000 fc19 	bl	8006edc <__lshift>
 80066aa:	4605      	mov	r5, r0
 80066ac:	9b08      	ldr	r3, [sp, #32]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d05c      	beq.n	800676c <_dtoa_r+0xa3c>
 80066b2:	6869      	ldr	r1, [r5, #4]
 80066b4:	4648      	mov	r0, r9
 80066b6:	f000 fa0b 	bl	8006ad0 <_Balloc>
 80066ba:	4606      	mov	r6, r0
 80066bc:	b928      	cbnz	r0, 80066ca <_dtoa_r+0x99a>
 80066be:	4b82      	ldr	r3, [pc, #520]	@ (80068c8 <_dtoa_r+0xb98>)
 80066c0:	4602      	mov	r2, r0
 80066c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80066c6:	f7ff bb4a 	b.w	8005d5e <_dtoa_r+0x2e>
 80066ca:	692a      	ldr	r2, [r5, #16]
 80066cc:	3202      	adds	r2, #2
 80066ce:	0092      	lsls	r2, r2, #2
 80066d0:	f105 010c 	add.w	r1, r5, #12
 80066d4:	300c      	adds	r0, #12
 80066d6:	f000 fff7 	bl	80076c8 <memcpy>
 80066da:	2201      	movs	r2, #1
 80066dc:	4631      	mov	r1, r6
 80066de:	4648      	mov	r0, r9
 80066e0:	f000 fbfc 	bl	8006edc <__lshift>
 80066e4:	f10a 0301 	add.w	r3, sl, #1
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	eb0a 030b 	add.w	r3, sl, fp
 80066ee:	9308      	str	r3, [sp, #32]
 80066f0:	9b04      	ldr	r3, [sp, #16]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	462f      	mov	r7, r5
 80066f8:	9306      	str	r3, [sp, #24]
 80066fa:	4605      	mov	r5, r0
 80066fc:	9b00      	ldr	r3, [sp, #0]
 80066fe:	9802      	ldr	r0, [sp, #8]
 8006700:	4621      	mov	r1, r4
 8006702:	f103 3bff 	add.w	fp, r3, #4294967295
 8006706:	f7ff fa88 	bl	8005c1a <quorem>
 800670a:	4603      	mov	r3, r0
 800670c:	3330      	adds	r3, #48	@ 0x30
 800670e:	9003      	str	r0, [sp, #12]
 8006710:	4639      	mov	r1, r7
 8006712:	9802      	ldr	r0, [sp, #8]
 8006714:	9309      	str	r3, [sp, #36]	@ 0x24
 8006716:	f000 fc4d 	bl	8006fb4 <__mcmp>
 800671a:	462a      	mov	r2, r5
 800671c:	9004      	str	r0, [sp, #16]
 800671e:	4621      	mov	r1, r4
 8006720:	4648      	mov	r0, r9
 8006722:	f000 fc63 	bl	8006fec <__mdiff>
 8006726:	68c2      	ldr	r2, [r0, #12]
 8006728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800672a:	4606      	mov	r6, r0
 800672c:	bb02      	cbnz	r2, 8006770 <_dtoa_r+0xa40>
 800672e:	4601      	mov	r1, r0
 8006730:	9802      	ldr	r0, [sp, #8]
 8006732:	f000 fc3f 	bl	8006fb4 <__mcmp>
 8006736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006738:	4602      	mov	r2, r0
 800673a:	4631      	mov	r1, r6
 800673c:	4648      	mov	r0, r9
 800673e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006740:	9309      	str	r3, [sp, #36]	@ 0x24
 8006742:	f000 fa05 	bl	8006b50 <_Bfree>
 8006746:	9b07      	ldr	r3, [sp, #28]
 8006748:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800674a:	9e00      	ldr	r6, [sp, #0]
 800674c:	ea42 0103 	orr.w	r1, r2, r3
 8006750:	9b06      	ldr	r3, [sp, #24]
 8006752:	4319      	orrs	r1, r3
 8006754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006756:	d10d      	bne.n	8006774 <_dtoa_r+0xa44>
 8006758:	2b39      	cmp	r3, #57	@ 0x39
 800675a:	d027      	beq.n	80067ac <_dtoa_r+0xa7c>
 800675c:	9a04      	ldr	r2, [sp, #16]
 800675e:	2a00      	cmp	r2, #0
 8006760:	dd01      	ble.n	8006766 <_dtoa_r+0xa36>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	3331      	adds	r3, #49	@ 0x31
 8006766:	f88b 3000 	strb.w	r3, [fp]
 800676a:	e52e      	b.n	80061ca <_dtoa_r+0x49a>
 800676c:	4628      	mov	r0, r5
 800676e:	e7b9      	b.n	80066e4 <_dtoa_r+0x9b4>
 8006770:	2201      	movs	r2, #1
 8006772:	e7e2      	b.n	800673a <_dtoa_r+0xa0a>
 8006774:	9904      	ldr	r1, [sp, #16]
 8006776:	2900      	cmp	r1, #0
 8006778:	db04      	blt.n	8006784 <_dtoa_r+0xa54>
 800677a:	9807      	ldr	r0, [sp, #28]
 800677c:	4301      	orrs	r1, r0
 800677e:	9806      	ldr	r0, [sp, #24]
 8006780:	4301      	orrs	r1, r0
 8006782:	d120      	bne.n	80067c6 <_dtoa_r+0xa96>
 8006784:	2a00      	cmp	r2, #0
 8006786:	ddee      	ble.n	8006766 <_dtoa_r+0xa36>
 8006788:	9902      	ldr	r1, [sp, #8]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	2201      	movs	r2, #1
 800678e:	4648      	mov	r0, r9
 8006790:	f000 fba4 	bl	8006edc <__lshift>
 8006794:	4621      	mov	r1, r4
 8006796:	9002      	str	r0, [sp, #8]
 8006798:	f000 fc0c 	bl	8006fb4 <__mcmp>
 800679c:	2800      	cmp	r0, #0
 800679e:	9b00      	ldr	r3, [sp, #0]
 80067a0:	dc02      	bgt.n	80067a8 <_dtoa_r+0xa78>
 80067a2:	d1e0      	bne.n	8006766 <_dtoa_r+0xa36>
 80067a4:	07da      	lsls	r2, r3, #31
 80067a6:	d5de      	bpl.n	8006766 <_dtoa_r+0xa36>
 80067a8:	2b39      	cmp	r3, #57	@ 0x39
 80067aa:	d1da      	bne.n	8006762 <_dtoa_r+0xa32>
 80067ac:	2339      	movs	r3, #57	@ 0x39
 80067ae:	f88b 3000 	strb.w	r3, [fp]
 80067b2:	4633      	mov	r3, r6
 80067b4:	461e      	mov	r6, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80067bc:	2a39      	cmp	r2, #57	@ 0x39
 80067be:	d04e      	beq.n	800685e <_dtoa_r+0xb2e>
 80067c0:	3201      	adds	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e501      	b.n	80061ca <_dtoa_r+0x49a>
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	dd03      	ble.n	80067d2 <_dtoa_r+0xaa2>
 80067ca:	2b39      	cmp	r3, #57	@ 0x39
 80067cc:	d0ee      	beq.n	80067ac <_dtoa_r+0xa7c>
 80067ce:	3301      	adds	r3, #1
 80067d0:	e7c9      	b.n	8006766 <_dtoa_r+0xa36>
 80067d2:	9a00      	ldr	r2, [sp, #0]
 80067d4:	9908      	ldr	r1, [sp, #32]
 80067d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067da:	428a      	cmp	r2, r1
 80067dc:	d028      	beq.n	8006830 <_dtoa_r+0xb00>
 80067de:	9902      	ldr	r1, [sp, #8]
 80067e0:	2300      	movs	r3, #0
 80067e2:	220a      	movs	r2, #10
 80067e4:	4648      	mov	r0, r9
 80067e6:	f000 f9d5 	bl	8006b94 <__multadd>
 80067ea:	42af      	cmp	r7, r5
 80067ec:	9002      	str	r0, [sp, #8]
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	f04f 020a 	mov.w	r2, #10
 80067f6:	4639      	mov	r1, r7
 80067f8:	4648      	mov	r0, r9
 80067fa:	d107      	bne.n	800680c <_dtoa_r+0xadc>
 80067fc:	f000 f9ca 	bl	8006b94 <__multadd>
 8006800:	4607      	mov	r7, r0
 8006802:	4605      	mov	r5, r0
 8006804:	9b00      	ldr	r3, [sp, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	e777      	b.n	80066fc <_dtoa_r+0x9cc>
 800680c:	f000 f9c2 	bl	8006b94 <__multadd>
 8006810:	4629      	mov	r1, r5
 8006812:	4607      	mov	r7, r0
 8006814:	2300      	movs	r3, #0
 8006816:	220a      	movs	r2, #10
 8006818:	4648      	mov	r0, r9
 800681a:	f000 f9bb 	bl	8006b94 <__multadd>
 800681e:	4605      	mov	r5, r0
 8006820:	e7f0      	b.n	8006804 <_dtoa_r+0xad4>
 8006822:	f1bb 0f00 	cmp.w	fp, #0
 8006826:	bfcc      	ite	gt
 8006828:	465e      	movgt	r6, fp
 800682a:	2601      	movle	r6, #1
 800682c:	4456      	add	r6, sl
 800682e:	2700      	movs	r7, #0
 8006830:	9902      	ldr	r1, [sp, #8]
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	2201      	movs	r2, #1
 8006836:	4648      	mov	r0, r9
 8006838:	f000 fb50 	bl	8006edc <__lshift>
 800683c:	4621      	mov	r1, r4
 800683e:	9002      	str	r0, [sp, #8]
 8006840:	f000 fbb8 	bl	8006fb4 <__mcmp>
 8006844:	2800      	cmp	r0, #0
 8006846:	dcb4      	bgt.n	80067b2 <_dtoa_r+0xa82>
 8006848:	d102      	bne.n	8006850 <_dtoa_r+0xb20>
 800684a:	9b00      	ldr	r3, [sp, #0]
 800684c:	07db      	lsls	r3, r3, #31
 800684e:	d4b0      	bmi.n	80067b2 <_dtoa_r+0xa82>
 8006850:	4633      	mov	r3, r6
 8006852:	461e      	mov	r6, r3
 8006854:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006858:	2a30      	cmp	r2, #48	@ 0x30
 800685a:	d0fa      	beq.n	8006852 <_dtoa_r+0xb22>
 800685c:	e4b5      	b.n	80061ca <_dtoa_r+0x49a>
 800685e:	459a      	cmp	sl, r3
 8006860:	d1a8      	bne.n	80067b4 <_dtoa_r+0xa84>
 8006862:	2331      	movs	r3, #49	@ 0x31
 8006864:	f108 0801 	add.w	r8, r8, #1
 8006868:	f88a 3000 	strb.w	r3, [sl]
 800686c:	e4ad      	b.n	80061ca <_dtoa_r+0x49a>
 800686e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006870:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80068cc <_dtoa_r+0xb9c>
 8006874:	b11b      	cbz	r3, 800687e <_dtoa_r+0xb4e>
 8006876:	f10a 0308 	add.w	r3, sl, #8
 800687a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	4650      	mov	r0, sl
 8006880:	b017      	add	sp, #92	@ 0x5c
 8006882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006886:	9b07      	ldr	r3, [sp, #28]
 8006888:	2b01      	cmp	r3, #1
 800688a:	f77f ae2e 	ble.w	80064ea <_dtoa_r+0x7ba>
 800688e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006890:	9308      	str	r3, [sp, #32]
 8006892:	2001      	movs	r0, #1
 8006894:	e64d      	b.n	8006532 <_dtoa_r+0x802>
 8006896:	f1bb 0f00 	cmp.w	fp, #0
 800689a:	f77f aed9 	ble.w	8006650 <_dtoa_r+0x920>
 800689e:	4656      	mov	r6, sl
 80068a0:	9802      	ldr	r0, [sp, #8]
 80068a2:	4621      	mov	r1, r4
 80068a4:	f7ff f9b9 	bl	8005c1a <quorem>
 80068a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80068ac:	f806 3b01 	strb.w	r3, [r6], #1
 80068b0:	eba6 020a 	sub.w	r2, r6, sl
 80068b4:	4593      	cmp	fp, r2
 80068b6:	ddb4      	ble.n	8006822 <_dtoa_r+0xaf2>
 80068b8:	9902      	ldr	r1, [sp, #8]
 80068ba:	2300      	movs	r3, #0
 80068bc:	220a      	movs	r2, #10
 80068be:	4648      	mov	r0, r9
 80068c0:	f000 f968 	bl	8006b94 <__multadd>
 80068c4:	9002      	str	r0, [sp, #8]
 80068c6:	e7eb      	b.n	80068a0 <_dtoa_r+0xb70>
 80068c8:	08007aac 	.word	0x08007aac
 80068cc:	08007a30 	.word	0x08007a30

080068d0 <_free_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4605      	mov	r5, r0
 80068d4:	2900      	cmp	r1, #0
 80068d6:	d041      	beq.n	800695c <_free_r+0x8c>
 80068d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068dc:	1f0c      	subs	r4, r1, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bfb8      	it	lt
 80068e2:	18e4      	addlt	r4, r4, r3
 80068e4:	f000 f8e8 	bl	8006ab8 <__malloc_lock>
 80068e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006960 <_free_r+0x90>)
 80068ea:	6813      	ldr	r3, [r2, #0]
 80068ec:	b933      	cbnz	r3, 80068fc <_free_r+0x2c>
 80068ee:	6063      	str	r3, [r4, #4]
 80068f0:	6014      	str	r4, [r2, #0]
 80068f2:	4628      	mov	r0, r5
 80068f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f8:	f000 b8e4 	b.w	8006ac4 <__malloc_unlock>
 80068fc:	42a3      	cmp	r3, r4
 80068fe:	d908      	bls.n	8006912 <_free_r+0x42>
 8006900:	6820      	ldr	r0, [r4, #0]
 8006902:	1821      	adds	r1, r4, r0
 8006904:	428b      	cmp	r3, r1
 8006906:	bf01      	itttt	eq
 8006908:	6819      	ldreq	r1, [r3, #0]
 800690a:	685b      	ldreq	r3, [r3, #4]
 800690c:	1809      	addeq	r1, r1, r0
 800690e:	6021      	streq	r1, [r4, #0]
 8006910:	e7ed      	b.n	80068ee <_free_r+0x1e>
 8006912:	461a      	mov	r2, r3
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	b10b      	cbz	r3, 800691c <_free_r+0x4c>
 8006918:	42a3      	cmp	r3, r4
 800691a:	d9fa      	bls.n	8006912 <_free_r+0x42>
 800691c:	6811      	ldr	r1, [r2, #0]
 800691e:	1850      	adds	r0, r2, r1
 8006920:	42a0      	cmp	r0, r4
 8006922:	d10b      	bne.n	800693c <_free_r+0x6c>
 8006924:	6820      	ldr	r0, [r4, #0]
 8006926:	4401      	add	r1, r0
 8006928:	1850      	adds	r0, r2, r1
 800692a:	4283      	cmp	r3, r0
 800692c:	6011      	str	r1, [r2, #0]
 800692e:	d1e0      	bne.n	80068f2 <_free_r+0x22>
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	6053      	str	r3, [r2, #4]
 8006936:	4408      	add	r0, r1
 8006938:	6010      	str	r0, [r2, #0]
 800693a:	e7da      	b.n	80068f2 <_free_r+0x22>
 800693c:	d902      	bls.n	8006944 <_free_r+0x74>
 800693e:	230c      	movs	r3, #12
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	e7d6      	b.n	80068f2 <_free_r+0x22>
 8006944:	6820      	ldr	r0, [r4, #0]
 8006946:	1821      	adds	r1, r4, r0
 8006948:	428b      	cmp	r3, r1
 800694a:	bf04      	itt	eq
 800694c:	6819      	ldreq	r1, [r3, #0]
 800694e:	685b      	ldreq	r3, [r3, #4]
 8006950:	6063      	str	r3, [r4, #4]
 8006952:	bf04      	itt	eq
 8006954:	1809      	addeq	r1, r1, r0
 8006956:	6021      	streq	r1, [r4, #0]
 8006958:	6054      	str	r4, [r2, #4]
 800695a:	e7ca      	b.n	80068f2 <_free_r+0x22>
 800695c:	bd38      	pop	{r3, r4, r5, pc}
 800695e:	bf00      	nop
 8006960:	20000410 	.word	0x20000410

08006964 <malloc>:
 8006964:	4b02      	ldr	r3, [pc, #8]	@ (8006970 <malloc+0xc>)
 8006966:	4601      	mov	r1, r0
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	f000 b825 	b.w	80069b8 <_malloc_r>
 800696e:	bf00      	nop
 8006970:	20000018 	.word	0x20000018

08006974 <sbrk_aligned>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	4e0f      	ldr	r6, [pc, #60]	@ (80069b4 <sbrk_aligned+0x40>)
 8006978:	460c      	mov	r4, r1
 800697a:	6831      	ldr	r1, [r6, #0]
 800697c:	4605      	mov	r5, r0
 800697e:	b911      	cbnz	r1, 8006986 <sbrk_aligned+0x12>
 8006980:	f000 fe92 	bl	80076a8 <_sbrk_r>
 8006984:	6030      	str	r0, [r6, #0]
 8006986:	4621      	mov	r1, r4
 8006988:	4628      	mov	r0, r5
 800698a:	f000 fe8d 	bl	80076a8 <_sbrk_r>
 800698e:	1c43      	adds	r3, r0, #1
 8006990:	d103      	bne.n	800699a <sbrk_aligned+0x26>
 8006992:	f04f 34ff 	mov.w	r4, #4294967295
 8006996:	4620      	mov	r0, r4
 8006998:	bd70      	pop	{r4, r5, r6, pc}
 800699a:	1cc4      	adds	r4, r0, #3
 800699c:	f024 0403 	bic.w	r4, r4, #3
 80069a0:	42a0      	cmp	r0, r4
 80069a2:	d0f8      	beq.n	8006996 <sbrk_aligned+0x22>
 80069a4:	1a21      	subs	r1, r4, r0
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 fe7e 	bl	80076a8 <_sbrk_r>
 80069ac:	3001      	adds	r0, #1
 80069ae:	d1f2      	bne.n	8006996 <sbrk_aligned+0x22>
 80069b0:	e7ef      	b.n	8006992 <sbrk_aligned+0x1e>
 80069b2:	bf00      	nop
 80069b4:	2000040c 	.word	0x2000040c

080069b8 <_malloc_r>:
 80069b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069bc:	1ccd      	adds	r5, r1, #3
 80069be:	f025 0503 	bic.w	r5, r5, #3
 80069c2:	3508      	adds	r5, #8
 80069c4:	2d0c      	cmp	r5, #12
 80069c6:	bf38      	it	cc
 80069c8:	250c      	movcc	r5, #12
 80069ca:	2d00      	cmp	r5, #0
 80069cc:	4606      	mov	r6, r0
 80069ce:	db01      	blt.n	80069d4 <_malloc_r+0x1c>
 80069d0:	42a9      	cmp	r1, r5
 80069d2:	d904      	bls.n	80069de <_malloc_r+0x26>
 80069d4:	230c      	movs	r3, #12
 80069d6:	6033      	str	r3, [r6, #0]
 80069d8:	2000      	movs	r0, #0
 80069da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ab4 <_malloc_r+0xfc>
 80069e2:	f000 f869 	bl	8006ab8 <__malloc_lock>
 80069e6:	f8d8 3000 	ldr.w	r3, [r8]
 80069ea:	461c      	mov	r4, r3
 80069ec:	bb44      	cbnz	r4, 8006a40 <_malloc_r+0x88>
 80069ee:	4629      	mov	r1, r5
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7ff ffbf 	bl	8006974 <sbrk_aligned>
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	4604      	mov	r4, r0
 80069fa:	d158      	bne.n	8006aae <_malloc_r+0xf6>
 80069fc:	f8d8 4000 	ldr.w	r4, [r8]
 8006a00:	4627      	mov	r7, r4
 8006a02:	2f00      	cmp	r7, #0
 8006a04:	d143      	bne.n	8006a8e <_malloc_r+0xd6>
 8006a06:	2c00      	cmp	r4, #0
 8006a08:	d04b      	beq.n	8006aa2 <_malloc_r+0xea>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	4630      	mov	r0, r6
 8006a10:	eb04 0903 	add.w	r9, r4, r3
 8006a14:	f000 fe48 	bl	80076a8 <_sbrk_r>
 8006a18:	4581      	cmp	r9, r0
 8006a1a:	d142      	bne.n	8006aa2 <_malloc_r+0xea>
 8006a1c:	6821      	ldr	r1, [r4, #0]
 8006a1e:	1a6d      	subs	r5, r5, r1
 8006a20:	4629      	mov	r1, r5
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7ff ffa6 	bl	8006974 <sbrk_aligned>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d03a      	beq.n	8006aa2 <_malloc_r+0xea>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	442b      	add	r3, r5
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	f8d8 3000 	ldr.w	r3, [r8]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	bb62      	cbnz	r2, 8006a94 <_malloc_r+0xdc>
 8006a3a:	f8c8 7000 	str.w	r7, [r8]
 8006a3e:	e00f      	b.n	8006a60 <_malloc_r+0xa8>
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	1b52      	subs	r2, r2, r5
 8006a44:	d420      	bmi.n	8006a88 <_malloc_r+0xd0>
 8006a46:	2a0b      	cmp	r2, #11
 8006a48:	d917      	bls.n	8006a7a <_malloc_r+0xc2>
 8006a4a:	1961      	adds	r1, r4, r5
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	6025      	str	r5, [r4, #0]
 8006a50:	bf18      	it	ne
 8006a52:	6059      	strne	r1, [r3, #4]
 8006a54:	6863      	ldr	r3, [r4, #4]
 8006a56:	bf08      	it	eq
 8006a58:	f8c8 1000 	streq.w	r1, [r8]
 8006a5c:	5162      	str	r2, [r4, r5]
 8006a5e:	604b      	str	r3, [r1, #4]
 8006a60:	4630      	mov	r0, r6
 8006a62:	f000 f82f 	bl	8006ac4 <__malloc_unlock>
 8006a66:	f104 000b 	add.w	r0, r4, #11
 8006a6a:	1d23      	adds	r3, r4, #4
 8006a6c:	f020 0007 	bic.w	r0, r0, #7
 8006a70:	1ac2      	subs	r2, r0, r3
 8006a72:	bf1c      	itt	ne
 8006a74:	1a1b      	subne	r3, r3, r0
 8006a76:	50a3      	strne	r3, [r4, r2]
 8006a78:	e7af      	b.n	80069da <_malloc_r+0x22>
 8006a7a:	6862      	ldr	r2, [r4, #4]
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	bf0c      	ite	eq
 8006a80:	f8c8 2000 	streq.w	r2, [r8]
 8006a84:	605a      	strne	r2, [r3, #4]
 8006a86:	e7eb      	b.n	8006a60 <_malloc_r+0xa8>
 8006a88:	4623      	mov	r3, r4
 8006a8a:	6864      	ldr	r4, [r4, #4]
 8006a8c:	e7ae      	b.n	80069ec <_malloc_r+0x34>
 8006a8e:	463c      	mov	r4, r7
 8006a90:	687f      	ldr	r7, [r7, #4]
 8006a92:	e7b6      	b.n	8006a02 <_malloc_r+0x4a>
 8006a94:	461a      	mov	r2, r3
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	d1fb      	bne.n	8006a94 <_malloc_r+0xdc>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	6053      	str	r3, [r2, #4]
 8006aa0:	e7de      	b.n	8006a60 <_malloc_r+0xa8>
 8006aa2:	230c      	movs	r3, #12
 8006aa4:	6033      	str	r3, [r6, #0]
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f000 f80c 	bl	8006ac4 <__malloc_unlock>
 8006aac:	e794      	b.n	80069d8 <_malloc_r+0x20>
 8006aae:	6005      	str	r5, [r0, #0]
 8006ab0:	e7d6      	b.n	8006a60 <_malloc_r+0xa8>
 8006ab2:	bf00      	nop
 8006ab4:	20000410 	.word	0x20000410

08006ab8 <__malloc_lock>:
 8006ab8:	4801      	ldr	r0, [pc, #4]	@ (8006ac0 <__malloc_lock+0x8>)
 8006aba:	f7ff b8ac 	b.w	8005c16 <__retarget_lock_acquire_recursive>
 8006abe:	bf00      	nop
 8006ac0:	20000408 	.word	0x20000408

08006ac4 <__malloc_unlock>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	@ (8006acc <__malloc_unlock+0x8>)
 8006ac6:	f7ff b8a7 	b.w	8005c18 <__retarget_lock_release_recursive>
 8006aca:	bf00      	nop
 8006acc:	20000408 	.word	0x20000408

08006ad0 <_Balloc>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	69c6      	ldr	r6, [r0, #28]
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	b976      	cbnz	r6, 8006af8 <_Balloc+0x28>
 8006ada:	2010      	movs	r0, #16
 8006adc:	f7ff ff42 	bl	8006964 <malloc>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	61e0      	str	r0, [r4, #28]
 8006ae4:	b920      	cbnz	r0, 8006af0 <_Balloc+0x20>
 8006ae6:	4b18      	ldr	r3, [pc, #96]	@ (8006b48 <_Balloc+0x78>)
 8006ae8:	4818      	ldr	r0, [pc, #96]	@ (8006b4c <_Balloc+0x7c>)
 8006aea:	216b      	movs	r1, #107	@ 0x6b
 8006aec:	f000 fdfa 	bl	80076e4 <__assert_func>
 8006af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006af4:	6006      	str	r6, [r0, #0]
 8006af6:	60c6      	str	r6, [r0, #12]
 8006af8:	69e6      	ldr	r6, [r4, #28]
 8006afa:	68f3      	ldr	r3, [r6, #12]
 8006afc:	b183      	cbz	r3, 8006b20 <_Balloc+0x50>
 8006afe:	69e3      	ldr	r3, [r4, #28]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b06:	b9b8      	cbnz	r0, 8006b38 <_Balloc+0x68>
 8006b08:	2101      	movs	r1, #1
 8006b0a:	fa01 f605 	lsl.w	r6, r1, r5
 8006b0e:	1d72      	adds	r2, r6, #5
 8006b10:	0092      	lsls	r2, r2, #2
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 fe04 	bl	8007720 <_calloc_r>
 8006b18:	b160      	cbz	r0, 8006b34 <_Balloc+0x64>
 8006b1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b1e:	e00e      	b.n	8006b3e <_Balloc+0x6e>
 8006b20:	2221      	movs	r2, #33	@ 0x21
 8006b22:	2104      	movs	r1, #4
 8006b24:	4620      	mov	r0, r4
 8006b26:	f000 fdfb 	bl	8007720 <_calloc_r>
 8006b2a:	69e3      	ldr	r3, [r4, #28]
 8006b2c:	60f0      	str	r0, [r6, #12]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e4      	bne.n	8006afe <_Balloc+0x2e>
 8006b34:	2000      	movs	r0, #0
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	6802      	ldr	r2, [r0, #0]
 8006b3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b44:	e7f7      	b.n	8006b36 <_Balloc+0x66>
 8006b46:	bf00      	nop
 8006b48:	08007a3d 	.word	0x08007a3d
 8006b4c:	08007abd 	.word	0x08007abd

08006b50 <_Bfree>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	69c6      	ldr	r6, [r0, #28]
 8006b54:	4605      	mov	r5, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	b976      	cbnz	r6, 8006b78 <_Bfree+0x28>
 8006b5a:	2010      	movs	r0, #16
 8006b5c:	f7ff ff02 	bl	8006964 <malloc>
 8006b60:	4602      	mov	r2, r0
 8006b62:	61e8      	str	r0, [r5, #28]
 8006b64:	b920      	cbnz	r0, 8006b70 <_Bfree+0x20>
 8006b66:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <_Bfree+0x3c>)
 8006b68:	4809      	ldr	r0, [pc, #36]	@ (8006b90 <_Bfree+0x40>)
 8006b6a:	218f      	movs	r1, #143	@ 0x8f
 8006b6c:	f000 fdba 	bl	80076e4 <__assert_func>
 8006b70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b74:	6006      	str	r6, [r0, #0]
 8006b76:	60c6      	str	r6, [r0, #12]
 8006b78:	b13c      	cbz	r4, 8006b8a <_Bfree+0x3a>
 8006b7a:	69eb      	ldr	r3, [r5, #28]
 8006b7c:	6862      	ldr	r2, [r4, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b84:	6021      	str	r1, [r4, #0]
 8006b86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	08007a3d 	.word	0x08007a3d
 8006b90:	08007abd 	.word	0x08007abd

08006b94 <__multadd>:
 8006b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b98:	690d      	ldr	r5, [r1, #16]
 8006b9a:	4607      	mov	r7, r0
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	461e      	mov	r6, r3
 8006ba0:	f101 0c14 	add.w	ip, r1, #20
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	f8dc 3000 	ldr.w	r3, [ip]
 8006baa:	b299      	uxth	r1, r3
 8006bac:	fb02 6101 	mla	r1, r2, r1, r6
 8006bb0:	0c1e      	lsrs	r6, r3, #16
 8006bb2:	0c0b      	lsrs	r3, r1, #16
 8006bb4:	fb02 3306 	mla	r3, r2, r6, r3
 8006bb8:	b289      	uxth	r1, r1
 8006bba:	3001      	adds	r0, #1
 8006bbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bc0:	4285      	cmp	r5, r0
 8006bc2:	f84c 1b04 	str.w	r1, [ip], #4
 8006bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bca:	dcec      	bgt.n	8006ba6 <__multadd+0x12>
 8006bcc:	b30e      	cbz	r6, 8006c12 <__multadd+0x7e>
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	dc19      	bgt.n	8006c08 <__multadd+0x74>
 8006bd4:	6861      	ldr	r1, [r4, #4]
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	3101      	adds	r1, #1
 8006bda:	f7ff ff79 	bl	8006ad0 <_Balloc>
 8006bde:	4680      	mov	r8, r0
 8006be0:	b928      	cbnz	r0, 8006bee <__multadd+0x5a>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c18 <__multadd+0x84>)
 8006be6:	480d      	ldr	r0, [pc, #52]	@ (8006c1c <__multadd+0x88>)
 8006be8:	21ba      	movs	r1, #186	@ 0xba
 8006bea:	f000 fd7b 	bl	80076e4 <__assert_func>
 8006bee:	6922      	ldr	r2, [r4, #16]
 8006bf0:	3202      	adds	r2, #2
 8006bf2:	f104 010c 	add.w	r1, r4, #12
 8006bf6:	0092      	lsls	r2, r2, #2
 8006bf8:	300c      	adds	r0, #12
 8006bfa:	f000 fd65 	bl	80076c8 <memcpy>
 8006bfe:	4621      	mov	r1, r4
 8006c00:	4638      	mov	r0, r7
 8006c02:	f7ff ffa5 	bl	8006b50 <_Bfree>
 8006c06:	4644      	mov	r4, r8
 8006c08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c0c:	3501      	adds	r5, #1
 8006c0e:	615e      	str	r6, [r3, #20]
 8006c10:	6125      	str	r5, [r4, #16]
 8006c12:	4620      	mov	r0, r4
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c18:	08007aac 	.word	0x08007aac
 8006c1c:	08007abd 	.word	0x08007abd

08006c20 <__hi0bits>:
 8006c20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006c24:	4603      	mov	r3, r0
 8006c26:	bf36      	itet	cc
 8006c28:	0403      	lslcc	r3, r0, #16
 8006c2a:	2000      	movcs	r0, #0
 8006c2c:	2010      	movcc	r0, #16
 8006c2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c32:	bf3c      	itt	cc
 8006c34:	021b      	lslcc	r3, r3, #8
 8006c36:	3008      	addcc	r0, #8
 8006c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c3c:	bf3c      	itt	cc
 8006c3e:	011b      	lslcc	r3, r3, #4
 8006c40:	3004      	addcc	r0, #4
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c46:	bf3c      	itt	cc
 8006c48:	009b      	lslcc	r3, r3, #2
 8006c4a:	3002      	addcc	r0, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	db05      	blt.n	8006c5c <__hi0bits+0x3c>
 8006c50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006c54:	f100 0001 	add.w	r0, r0, #1
 8006c58:	bf08      	it	eq
 8006c5a:	2020      	moveq	r0, #32
 8006c5c:	4770      	bx	lr

08006c5e <__lo0bits>:
 8006c5e:	6803      	ldr	r3, [r0, #0]
 8006c60:	4602      	mov	r2, r0
 8006c62:	f013 0007 	ands.w	r0, r3, #7
 8006c66:	d00b      	beq.n	8006c80 <__lo0bits+0x22>
 8006c68:	07d9      	lsls	r1, r3, #31
 8006c6a:	d421      	bmi.n	8006cb0 <__lo0bits+0x52>
 8006c6c:	0798      	lsls	r0, r3, #30
 8006c6e:	bf49      	itett	mi
 8006c70:	085b      	lsrmi	r3, r3, #1
 8006c72:	089b      	lsrpl	r3, r3, #2
 8006c74:	2001      	movmi	r0, #1
 8006c76:	6013      	strmi	r3, [r2, #0]
 8006c78:	bf5c      	itt	pl
 8006c7a:	6013      	strpl	r3, [r2, #0]
 8006c7c:	2002      	movpl	r0, #2
 8006c7e:	4770      	bx	lr
 8006c80:	b299      	uxth	r1, r3
 8006c82:	b909      	cbnz	r1, 8006c88 <__lo0bits+0x2a>
 8006c84:	0c1b      	lsrs	r3, r3, #16
 8006c86:	2010      	movs	r0, #16
 8006c88:	b2d9      	uxtb	r1, r3
 8006c8a:	b909      	cbnz	r1, 8006c90 <__lo0bits+0x32>
 8006c8c:	3008      	adds	r0, #8
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	0719      	lsls	r1, r3, #28
 8006c92:	bf04      	itt	eq
 8006c94:	091b      	lsreq	r3, r3, #4
 8006c96:	3004      	addeq	r0, #4
 8006c98:	0799      	lsls	r1, r3, #30
 8006c9a:	bf04      	itt	eq
 8006c9c:	089b      	lsreq	r3, r3, #2
 8006c9e:	3002      	addeq	r0, #2
 8006ca0:	07d9      	lsls	r1, r3, #31
 8006ca2:	d403      	bmi.n	8006cac <__lo0bits+0x4e>
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	f100 0001 	add.w	r0, r0, #1
 8006caa:	d003      	beq.n	8006cb4 <__lo0bits+0x56>
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	4770      	bx	lr
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	4770      	bx	lr
 8006cb4:	2020      	movs	r0, #32
 8006cb6:	4770      	bx	lr

08006cb8 <__i2b>:
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	460c      	mov	r4, r1
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	f7ff ff07 	bl	8006ad0 <_Balloc>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	b928      	cbnz	r0, 8006cd2 <__i2b+0x1a>
 8006cc6:	4b05      	ldr	r3, [pc, #20]	@ (8006cdc <__i2b+0x24>)
 8006cc8:	4805      	ldr	r0, [pc, #20]	@ (8006ce0 <__i2b+0x28>)
 8006cca:	f240 1145 	movw	r1, #325	@ 0x145
 8006cce:	f000 fd09 	bl	80076e4 <__assert_func>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	6144      	str	r4, [r0, #20]
 8006cd6:	6103      	str	r3, [r0, #16]
 8006cd8:	bd10      	pop	{r4, pc}
 8006cda:	bf00      	nop
 8006cdc:	08007aac 	.word	0x08007aac
 8006ce0:	08007abd 	.word	0x08007abd

08006ce4 <__multiply>:
 8006ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce8:	4617      	mov	r7, r2
 8006cea:	690a      	ldr	r2, [r1, #16]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	bfa8      	it	ge
 8006cf2:	463b      	movge	r3, r7
 8006cf4:	4689      	mov	r9, r1
 8006cf6:	bfa4      	itt	ge
 8006cf8:	460f      	movge	r7, r1
 8006cfa:	4699      	movge	r9, r3
 8006cfc:	693d      	ldr	r5, [r7, #16]
 8006cfe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	eb05 060a 	add.w	r6, r5, sl
 8006d0a:	42b3      	cmp	r3, r6
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	bfb8      	it	lt
 8006d10:	3101      	addlt	r1, #1
 8006d12:	f7ff fedd 	bl	8006ad0 <_Balloc>
 8006d16:	b930      	cbnz	r0, 8006d26 <__multiply+0x42>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	4b41      	ldr	r3, [pc, #260]	@ (8006e20 <__multiply+0x13c>)
 8006d1c:	4841      	ldr	r0, [pc, #260]	@ (8006e24 <__multiply+0x140>)
 8006d1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006d22:	f000 fcdf 	bl	80076e4 <__assert_func>
 8006d26:	f100 0414 	add.w	r4, r0, #20
 8006d2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006d2e:	4623      	mov	r3, r4
 8006d30:	2200      	movs	r2, #0
 8006d32:	4573      	cmp	r3, lr
 8006d34:	d320      	bcc.n	8006d78 <__multiply+0x94>
 8006d36:	f107 0814 	add.w	r8, r7, #20
 8006d3a:	f109 0114 	add.w	r1, r9, #20
 8006d3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006d42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006d46:	9302      	str	r3, [sp, #8]
 8006d48:	1beb      	subs	r3, r5, r7
 8006d4a:	3b15      	subs	r3, #21
 8006d4c:	f023 0303 	bic.w	r3, r3, #3
 8006d50:	3304      	adds	r3, #4
 8006d52:	3715      	adds	r7, #21
 8006d54:	42bd      	cmp	r5, r7
 8006d56:	bf38      	it	cc
 8006d58:	2304      	movcc	r3, #4
 8006d5a:	9301      	str	r3, [sp, #4]
 8006d5c:	9b02      	ldr	r3, [sp, #8]
 8006d5e:	9103      	str	r1, [sp, #12]
 8006d60:	428b      	cmp	r3, r1
 8006d62:	d80c      	bhi.n	8006d7e <__multiply+0x9a>
 8006d64:	2e00      	cmp	r6, #0
 8006d66:	dd03      	ble.n	8006d70 <__multiply+0x8c>
 8006d68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d055      	beq.n	8006e1c <__multiply+0x138>
 8006d70:	6106      	str	r6, [r0, #16]
 8006d72:	b005      	add	sp, #20
 8006d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d78:	f843 2b04 	str.w	r2, [r3], #4
 8006d7c:	e7d9      	b.n	8006d32 <__multiply+0x4e>
 8006d7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d82:	f1ba 0f00 	cmp.w	sl, #0
 8006d86:	d01f      	beq.n	8006dc8 <__multiply+0xe4>
 8006d88:	46c4      	mov	ip, r8
 8006d8a:	46a1      	mov	r9, r4
 8006d8c:	2700      	movs	r7, #0
 8006d8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d92:	f8d9 3000 	ldr.w	r3, [r9]
 8006d96:	fa1f fb82 	uxth.w	fp, r2
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006da0:	443b      	add	r3, r7
 8006da2:	f8d9 7000 	ldr.w	r7, [r9]
 8006da6:	0c12      	lsrs	r2, r2, #16
 8006da8:	0c3f      	lsrs	r7, r7, #16
 8006daa:	fb0a 7202 	mla	r2, sl, r2, r7
 8006dae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006db8:	4565      	cmp	r5, ip
 8006dba:	f849 3b04 	str.w	r3, [r9], #4
 8006dbe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006dc2:	d8e4      	bhi.n	8006d8e <__multiply+0xaa>
 8006dc4:	9b01      	ldr	r3, [sp, #4]
 8006dc6:	50e7      	str	r7, [r4, r3]
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006dce:	3104      	adds	r1, #4
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	d020      	beq.n	8006e18 <__multiply+0x134>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	4647      	mov	r7, r8
 8006dda:	46a4      	mov	ip, r4
 8006ddc:	f04f 0a00 	mov.w	sl, #0
 8006de0:	f8b7 b000 	ldrh.w	fp, [r7]
 8006de4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006de8:	fb09 220b 	mla	r2, r9, fp, r2
 8006dec:	4452      	add	r2, sl
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006df4:	f84c 3b04 	str.w	r3, [ip], #4
 8006df8:	f857 3b04 	ldr.w	r3, [r7], #4
 8006dfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e00:	f8bc 3000 	ldrh.w	r3, [ip]
 8006e04:	fb09 330a 	mla	r3, r9, sl, r3
 8006e08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006e0c:	42bd      	cmp	r5, r7
 8006e0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e12:	d8e5      	bhi.n	8006de0 <__multiply+0xfc>
 8006e14:	9a01      	ldr	r2, [sp, #4]
 8006e16:	50a3      	str	r3, [r4, r2]
 8006e18:	3404      	adds	r4, #4
 8006e1a:	e79f      	b.n	8006d5c <__multiply+0x78>
 8006e1c:	3e01      	subs	r6, #1
 8006e1e:	e7a1      	b.n	8006d64 <__multiply+0x80>
 8006e20:	08007aac 	.word	0x08007aac
 8006e24:	08007abd 	.word	0x08007abd

08006e28 <__pow5mult>:
 8006e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e2c:	4615      	mov	r5, r2
 8006e2e:	f012 0203 	ands.w	r2, r2, #3
 8006e32:	4607      	mov	r7, r0
 8006e34:	460e      	mov	r6, r1
 8006e36:	d007      	beq.n	8006e48 <__pow5mult+0x20>
 8006e38:	4c25      	ldr	r4, [pc, #148]	@ (8006ed0 <__pow5mult+0xa8>)
 8006e3a:	3a01      	subs	r2, #1
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e42:	f7ff fea7 	bl	8006b94 <__multadd>
 8006e46:	4606      	mov	r6, r0
 8006e48:	10ad      	asrs	r5, r5, #2
 8006e4a:	d03d      	beq.n	8006ec8 <__pow5mult+0xa0>
 8006e4c:	69fc      	ldr	r4, [r7, #28]
 8006e4e:	b97c      	cbnz	r4, 8006e70 <__pow5mult+0x48>
 8006e50:	2010      	movs	r0, #16
 8006e52:	f7ff fd87 	bl	8006964 <malloc>
 8006e56:	4602      	mov	r2, r0
 8006e58:	61f8      	str	r0, [r7, #28]
 8006e5a:	b928      	cbnz	r0, 8006e68 <__pow5mult+0x40>
 8006e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed4 <__pow5mult+0xac>)
 8006e5e:	481e      	ldr	r0, [pc, #120]	@ (8006ed8 <__pow5mult+0xb0>)
 8006e60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e64:	f000 fc3e 	bl	80076e4 <__assert_func>
 8006e68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e6c:	6004      	str	r4, [r0, #0]
 8006e6e:	60c4      	str	r4, [r0, #12]
 8006e70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e78:	b94c      	cbnz	r4, 8006e8e <__pow5mult+0x66>
 8006e7a:	f240 2171 	movw	r1, #625	@ 0x271
 8006e7e:	4638      	mov	r0, r7
 8006e80:	f7ff ff1a 	bl	8006cb8 <__i2b>
 8006e84:	2300      	movs	r3, #0
 8006e86:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	6003      	str	r3, [r0, #0]
 8006e8e:	f04f 0900 	mov.w	r9, #0
 8006e92:	07eb      	lsls	r3, r5, #31
 8006e94:	d50a      	bpl.n	8006eac <__pow5mult+0x84>
 8006e96:	4631      	mov	r1, r6
 8006e98:	4622      	mov	r2, r4
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f7ff ff22 	bl	8006ce4 <__multiply>
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4680      	mov	r8, r0
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f7ff fe53 	bl	8006b50 <_Bfree>
 8006eaa:	4646      	mov	r6, r8
 8006eac:	106d      	asrs	r5, r5, #1
 8006eae:	d00b      	beq.n	8006ec8 <__pow5mult+0xa0>
 8006eb0:	6820      	ldr	r0, [r4, #0]
 8006eb2:	b938      	cbnz	r0, 8006ec4 <__pow5mult+0x9c>
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f7ff ff13 	bl	8006ce4 <__multiply>
 8006ebe:	6020      	str	r0, [r4, #0]
 8006ec0:	f8c0 9000 	str.w	r9, [r0]
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	e7e4      	b.n	8006e92 <__pow5mult+0x6a>
 8006ec8:	4630      	mov	r0, r6
 8006eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ece:	bf00      	nop
 8006ed0:	08007b70 	.word	0x08007b70
 8006ed4:	08007a3d 	.word	0x08007a3d
 8006ed8:	08007abd 	.word	0x08007abd

08006edc <__lshift>:
 8006edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	6849      	ldr	r1, [r1, #4]
 8006ee4:	6923      	ldr	r3, [r4, #16]
 8006ee6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006eea:	68a3      	ldr	r3, [r4, #8]
 8006eec:	4607      	mov	r7, r0
 8006eee:	4691      	mov	r9, r2
 8006ef0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ef4:	f108 0601 	add.w	r6, r8, #1
 8006ef8:	42b3      	cmp	r3, r6
 8006efa:	db0b      	blt.n	8006f14 <__lshift+0x38>
 8006efc:	4638      	mov	r0, r7
 8006efe:	f7ff fde7 	bl	8006ad0 <_Balloc>
 8006f02:	4605      	mov	r5, r0
 8006f04:	b948      	cbnz	r0, 8006f1a <__lshift+0x3e>
 8006f06:	4602      	mov	r2, r0
 8006f08:	4b28      	ldr	r3, [pc, #160]	@ (8006fac <__lshift+0xd0>)
 8006f0a:	4829      	ldr	r0, [pc, #164]	@ (8006fb0 <__lshift+0xd4>)
 8006f0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f10:	f000 fbe8 	bl	80076e4 <__assert_func>
 8006f14:	3101      	adds	r1, #1
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	e7ee      	b.n	8006ef8 <__lshift+0x1c>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f100 0114 	add.w	r1, r0, #20
 8006f20:	f100 0210 	add.w	r2, r0, #16
 8006f24:	4618      	mov	r0, r3
 8006f26:	4553      	cmp	r3, sl
 8006f28:	db33      	blt.n	8006f92 <__lshift+0xb6>
 8006f2a:	6920      	ldr	r0, [r4, #16]
 8006f2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f30:	f104 0314 	add.w	r3, r4, #20
 8006f34:	f019 091f 	ands.w	r9, r9, #31
 8006f38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f40:	d02b      	beq.n	8006f9a <__lshift+0xbe>
 8006f42:	f1c9 0e20 	rsb	lr, r9, #32
 8006f46:	468a      	mov	sl, r1
 8006f48:	2200      	movs	r2, #0
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	fa00 f009 	lsl.w	r0, r0, r9
 8006f50:	4310      	orrs	r0, r2
 8006f52:	f84a 0b04 	str.w	r0, [sl], #4
 8006f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f5a:	459c      	cmp	ip, r3
 8006f5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f60:	d8f3      	bhi.n	8006f4a <__lshift+0x6e>
 8006f62:	ebac 0304 	sub.w	r3, ip, r4
 8006f66:	3b15      	subs	r3, #21
 8006f68:	f023 0303 	bic.w	r3, r3, #3
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	f104 0015 	add.w	r0, r4, #21
 8006f72:	4560      	cmp	r0, ip
 8006f74:	bf88      	it	hi
 8006f76:	2304      	movhi	r3, #4
 8006f78:	50ca      	str	r2, [r1, r3]
 8006f7a:	b10a      	cbz	r2, 8006f80 <__lshift+0xa4>
 8006f7c:	f108 0602 	add.w	r6, r8, #2
 8006f80:	3e01      	subs	r6, #1
 8006f82:	4638      	mov	r0, r7
 8006f84:	612e      	str	r6, [r5, #16]
 8006f86:	4621      	mov	r1, r4
 8006f88:	f7ff fde2 	bl	8006b50 <_Bfree>
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f92:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f96:	3301      	adds	r3, #1
 8006f98:	e7c5      	b.n	8006f26 <__lshift+0x4a>
 8006f9a:	3904      	subs	r1, #4
 8006f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fa0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fa4:	459c      	cmp	ip, r3
 8006fa6:	d8f9      	bhi.n	8006f9c <__lshift+0xc0>
 8006fa8:	e7ea      	b.n	8006f80 <__lshift+0xa4>
 8006faa:	bf00      	nop
 8006fac:	08007aac 	.word	0x08007aac
 8006fb0:	08007abd 	.word	0x08007abd

08006fb4 <__mcmp>:
 8006fb4:	690a      	ldr	r2, [r1, #16]
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6900      	ldr	r0, [r0, #16]
 8006fba:	1a80      	subs	r0, r0, r2
 8006fbc:	b530      	push	{r4, r5, lr}
 8006fbe:	d10e      	bne.n	8006fde <__mcmp+0x2a>
 8006fc0:	3314      	adds	r3, #20
 8006fc2:	3114      	adds	r1, #20
 8006fc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006fc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006fcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006fd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006fd4:	4295      	cmp	r5, r2
 8006fd6:	d003      	beq.n	8006fe0 <__mcmp+0x2c>
 8006fd8:	d205      	bcs.n	8006fe6 <__mcmp+0x32>
 8006fda:	f04f 30ff 	mov.w	r0, #4294967295
 8006fde:	bd30      	pop	{r4, r5, pc}
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	d3f3      	bcc.n	8006fcc <__mcmp+0x18>
 8006fe4:	e7fb      	b.n	8006fde <__mcmp+0x2a>
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	e7f9      	b.n	8006fde <__mcmp+0x2a>
	...

08006fec <__mdiff>:
 8006fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	4689      	mov	r9, r1
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4648      	mov	r0, r9
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	f7ff ffdb 	bl	8006fb4 <__mcmp>
 8006ffe:	1e05      	subs	r5, r0, #0
 8007000:	d112      	bne.n	8007028 <__mdiff+0x3c>
 8007002:	4629      	mov	r1, r5
 8007004:	4630      	mov	r0, r6
 8007006:	f7ff fd63 	bl	8006ad0 <_Balloc>
 800700a:	4602      	mov	r2, r0
 800700c:	b928      	cbnz	r0, 800701a <__mdiff+0x2e>
 800700e:	4b3f      	ldr	r3, [pc, #252]	@ (800710c <__mdiff+0x120>)
 8007010:	f240 2137 	movw	r1, #567	@ 0x237
 8007014:	483e      	ldr	r0, [pc, #248]	@ (8007110 <__mdiff+0x124>)
 8007016:	f000 fb65 	bl	80076e4 <__assert_func>
 800701a:	2301      	movs	r3, #1
 800701c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007020:	4610      	mov	r0, r2
 8007022:	b003      	add	sp, #12
 8007024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007028:	bfbc      	itt	lt
 800702a:	464b      	movlt	r3, r9
 800702c:	46a1      	movlt	r9, r4
 800702e:	4630      	mov	r0, r6
 8007030:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007034:	bfba      	itte	lt
 8007036:	461c      	movlt	r4, r3
 8007038:	2501      	movlt	r5, #1
 800703a:	2500      	movge	r5, #0
 800703c:	f7ff fd48 	bl	8006ad0 <_Balloc>
 8007040:	4602      	mov	r2, r0
 8007042:	b918      	cbnz	r0, 800704c <__mdiff+0x60>
 8007044:	4b31      	ldr	r3, [pc, #196]	@ (800710c <__mdiff+0x120>)
 8007046:	f240 2145 	movw	r1, #581	@ 0x245
 800704a:	e7e3      	b.n	8007014 <__mdiff+0x28>
 800704c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007050:	6926      	ldr	r6, [r4, #16]
 8007052:	60c5      	str	r5, [r0, #12]
 8007054:	f109 0310 	add.w	r3, r9, #16
 8007058:	f109 0514 	add.w	r5, r9, #20
 800705c:	f104 0e14 	add.w	lr, r4, #20
 8007060:	f100 0b14 	add.w	fp, r0, #20
 8007064:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007068:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	46d9      	mov	r9, fp
 8007070:	f04f 0c00 	mov.w	ip, #0
 8007074:	9b01      	ldr	r3, [sp, #4]
 8007076:	f85e 0b04 	ldr.w	r0, [lr], #4
 800707a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	fa1f f38a 	uxth.w	r3, sl
 8007084:	4619      	mov	r1, r3
 8007086:	b283      	uxth	r3, r0
 8007088:	1acb      	subs	r3, r1, r3
 800708a:	0c00      	lsrs	r0, r0, #16
 800708c:	4463      	add	r3, ip
 800708e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007092:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007096:	b29b      	uxth	r3, r3
 8007098:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800709c:	4576      	cmp	r6, lr
 800709e:	f849 3b04 	str.w	r3, [r9], #4
 80070a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070a6:	d8e5      	bhi.n	8007074 <__mdiff+0x88>
 80070a8:	1b33      	subs	r3, r6, r4
 80070aa:	3b15      	subs	r3, #21
 80070ac:	f023 0303 	bic.w	r3, r3, #3
 80070b0:	3415      	adds	r4, #21
 80070b2:	3304      	adds	r3, #4
 80070b4:	42a6      	cmp	r6, r4
 80070b6:	bf38      	it	cc
 80070b8:	2304      	movcc	r3, #4
 80070ba:	441d      	add	r5, r3
 80070bc:	445b      	add	r3, fp
 80070be:	461e      	mov	r6, r3
 80070c0:	462c      	mov	r4, r5
 80070c2:	4544      	cmp	r4, r8
 80070c4:	d30e      	bcc.n	80070e4 <__mdiff+0xf8>
 80070c6:	f108 0103 	add.w	r1, r8, #3
 80070ca:	1b49      	subs	r1, r1, r5
 80070cc:	f021 0103 	bic.w	r1, r1, #3
 80070d0:	3d03      	subs	r5, #3
 80070d2:	45a8      	cmp	r8, r5
 80070d4:	bf38      	it	cc
 80070d6:	2100      	movcc	r1, #0
 80070d8:	440b      	add	r3, r1
 80070da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070de:	b191      	cbz	r1, 8007106 <__mdiff+0x11a>
 80070e0:	6117      	str	r7, [r2, #16]
 80070e2:	e79d      	b.n	8007020 <__mdiff+0x34>
 80070e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80070e8:	46e6      	mov	lr, ip
 80070ea:	0c08      	lsrs	r0, r1, #16
 80070ec:	fa1c fc81 	uxtah	ip, ip, r1
 80070f0:	4471      	add	r1, lr
 80070f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80070f6:	b289      	uxth	r1, r1
 80070f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80070fc:	f846 1b04 	str.w	r1, [r6], #4
 8007100:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007104:	e7dd      	b.n	80070c2 <__mdiff+0xd6>
 8007106:	3f01      	subs	r7, #1
 8007108:	e7e7      	b.n	80070da <__mdiff+0xee>
 800710a:	bf00      	nop
 800710c:	08007aac 	.word	0x08007aac
 8007110:	08007abd 	.word	0x08007abd

08007114 <__d2b>:
 8007114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007118:	460f      	mov	r7, r1
 800711a:	2101      	movs	r1, #1
 800711c:	ec59 8b10 	vmov	r8, r9, d0
 8007120:	4616      	mov	r6, r2
 8007122:	f7ff fcd5 	bl	8006ad0 <_Balloc>
 8007126:	4604      	mov	r4, r0
 8007128:	b930      	cbnz	r0, 8007138 <__d2b+0x24>
 800712a:	4602      	mov	r2, r0
 800712c:	4b23      	ldr	r3, [pc, #140]	@ (80071bc <__d2b+0xa8>)
 800712e:	4824      	ldr	r0, [pc, #144]	@ (80071c0 <__d2b+0xac>)
 8007130:	f240 310f 	movw	r1, #783	@ 0x30f
 8007134:	f000 fad6 	bl	80076e4 <__assert_func>
 8007138:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800713c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007140:	b10d      	cbz	r5, 8007146 <__d2b+0x32>
 8007142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	f1b8 0300 	subs.w	r3, r8, #0
 800714c:	d023      	beq.n	8007196 <__d2b+0x82>
 800714e:	4668      	mov	r0, sp
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	f7ff fd84 	bl	8006c5e <__lo0bits>
 8007156:	e9dd 1200 	ldrd	r1, r2, [sp]
 800715a:	b1d0      	cbz	r0, 8007192 <__d2b+0x7e>
 800715c:	f1c0 0320 	rsb	r3, r0, #32
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	430b      	orrs	r3, r1
 8007166:	40c2      	lsrs	r2, r0
 8007168:	6163      	str	r3, [r4, #20]
 800716a:	9201      	str	r2, [sp, #4]
 800716c:	9b01      	ldr	r3, [sp, #4]
 800716e:	61a3      	str	r3, [r4, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	bf0c      	ite	eq
 8007174:	2201      	moveq	r2, #1
 8007176:	2202      	movne	r2, #2
 8007178:	6122      	str	r2, [r4, #16]
 800717a:	b1a5      	cbz	r5, 80071a6 <__d2b+0x92>
 800717c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007180:	4405      	add	r5, r0
 8007182:	603d      	str	r5, [r7, #0]
 8007184:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007188:	6030      	str	r0, [r6, #0]
 800718a:	4620      	mov	r0, r4
 800718c:	b003      	add	sp, #12
 800718e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007192:	6161      	str	r1, [r4, #20]
 8007194:	e7ea      	b.n	800716c <__d2b+0x58>
 8007196:	a801      	add	r0, sp, #4
 8007198:	f7ff fd61 	bl	8006c5e <__lo0bits>
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	6163      	str	r3, [r4, #20]
 80071a0:	3020      	adds	r0, #32
 80071a2:	2201      	movs	r2, #1
 80071a4:	e7e8      	b.n	8007178 <__d2b+0x64>
 80071a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80071ae:	6038      	str	r0, [r7, #0]
 80071b0:	6918      	ldr	r0, [r3, #16]
 80071b2:	f7ff fd35 	bl	8006c20 <__hi0bits>
 80071b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071ba:	e7e5      	b.n	8007188 <__d2b+0x74>
 80071bc:	08007aac 	.word	0x08007aac
 80071c0:	08007abd 	.word	0x08007abd

080071c4 <__sfputc_r>:
 80071c4:	6893      	ldr	r3, [r2, #8]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	b410      	push	{r4}
 80071cc:	6093      	str	r3, [r2, #8]
 80071ce:	da08      	bge.n	80071e2 <__sfputc_r+0x1e>
 80071d0:	6994      	ldr	r4, [r2, #24]
 80071d2:	42a3      	cmp	r3, r4
 80071d4:	db01      	blt.n	80071da <__sfputc_r+0x16>
 80071d6:	290a      	cmp	r1, #10
 80071d8:	d103      	bne.n	80071e2 <__sfputc_r+0x1e>
 80071da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071de:	f7fe bc08 	b.w	80059f2 <__swbuf_r>
 80071e2:	6813      	ldr	r3, [r2, #0]
 80071e4:	1c58      	adds	r0, r3, #1
 80071e6:	6010      	str	r0, [r2, #0]
 80071e8:	7019      	strb	r1, [r3, #0]
 80071ea:	4608      	mov	r0, r1
 80071ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <__sfputs_r>:
 80071f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f4:	4606      	mov	r6, r0
 80071f6:	460f      	mov	r7, r1
 80071f8:	4614      	mov	r4, r2
 80071fa:	18d5      	adds	r5, r2, r3
 80071fc:	42ac      	cmp	r4, r5
 80071fe:	d101      	bne.n	8007204 <__sfputs_r+0x12>
 8007200:	2000      	movs	r0, #0
 8007202:	e007      	b.n	8007214 <__sfputs_r+0x22>
 8007204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007208:	463a      	mov	r2, r7
 800720a:	4630      	mov	r0, r6
 800720c:	f7ff ffda 	bl	80071c4 <__sfputc_r>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d1f3      	bne.n	80071fc <__sfputs_r+0xa>
 8007214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007218 <_vfiprintf_r>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	460d      	mov	r5, r1
 800721e:	b09d      	sub	sp, #116	@ 0x74
 8007220:	4614      	mov	r4, r2
 8007222:	4698      	mov	r8, r3
 8007224:	4606      	mov	r6, r0
 8007226:	b118      	cbz	r0, 8007230 <_vfiprintf_r+0x18>
 8007228:	6a03      	ldr	r3, [r0, #32]
 800722a:	b90b      	cbnz	r3, 8007230 <_vfiprintf_r+0x18>
 800722c:	f7fe faf8 	bl	8005820 <__sinit>
 8007230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007232:	07d9      	lsls	r1, r3, #31
 8007234:	d405      	bmi.n	8007242 <_vfiprintf_r+0x2a>
 8007236:	89ab      	ldrh	r3, [r5, #12]
 8007238:	059a      	lsls	r2, r3, #22
 800723a:	d402      	bmi.n	8007242 <_vfiprintf_r+0x2a>
 800723c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800723e:	f7fe fcea 	bl	8005c16 <__retarget_lock_acquire_recursive>
 8007242:	89ab      	ldrh	r3, [r5, #12]
 8007244:	071b      	lsls	r3, r3, #28
 8007246:	d501      	bpl.n	800724c <_vfiprintf_r+0x34>
 8007248:	692b      	ldr	r3, [r5, #16]
 800724a:	b99b      	cbnz	r3, 8007274 <_vfiprintf_r+0x5c>
 800724c:	4629      	mov	r1, r5
 800724e:	4630      	mov	r0, r6
 8007250:	f7fe fc0e 	bl	8005a70 <__swsetup_r>
 8007254:	b170      	cbz	r0, 8007274 <_vfiprintf_r+0x5c>
 8007256:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007258:	07dc      	lsls	r4, r3, #31
 800725a:	d504      	bpl.n	8007266 <_vfiprintf_r+0x4e>
 800725c:	f04f 30ff 	mov.w	r0, #4294967295
 8007260:	b01d      	add	sp, #116	@ 0x74
 8007262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007266:	89ab      	ldrh	r3, [r5, #12]
 8007268:	0598      	lsls	r0, r3, #22
 800726a:	d4f7      	bmi.n	800725c <_vfiprintf_r+0x44>
 800726c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800726e:	f7fe fcd3 	bl	8005c18 <__retarget_lock_release_recursive>
 8007272:	e7f3      	b.n	800725c <_vfiprintf_r+0x44>
 8007274:	2300      	movs	r3, #0
 8007276:	9309      	str	r3, [sp, #36]	@ 0x24
 8007278:	2320      	movs	r3, #32
 800727a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800727e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007282:	2330      	movs	r3, #48	@ 0x30
 8007284:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007434 <_vfiprintf_r+0x21c>
 8007288:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800728c:	f04f 0901 	mov.w	r9, #1
 8007290:	4623      	mov	r3, r4
 8007292:	469a      	mov	sl, r3
 8007294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007298:	b10a      	cbz	r2, 800729e <_vfiprintf_r+0x86>
 800729a:	2a25      	cmp	r2, #37	@ 0x25
 800729c:	d1f9      	bne.n	8007292 <_vfiprintf_r+0x7a>
 800729e:	ebba 0b04 	subs.w	fp, sl, r4
 80072a2:	d00b      	beq.n	80072bc <_vfiprintf_r+0xa4>
 80072a4:	465b      	mov	r3, fp
 80072a6:	4622      	mov	r2, r4
 80072a8:	4629      	mov	r1, r5
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff ffa1 	bl	80071f2 <__sfputs_r>
 80072b0:	3001      	adds	r0, #1
 80072b2:	f000 80a7 	beq.w	8007404 <_vfiprintf_r+0x1ec>
 80072b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072b8:	445a      	add	r2, fp
 80072ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80072bc:	f89a 3000 	ldrb.w	r3, [sl]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 809f 	beq.w	8007404 <_vfiprintf_r+0x1ec>
 80072c6:	2300      	movs	r3, #0
 80072c8:	f04f 32ff 	mov.w	r2, #4294967295
 80072cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d0:	f10a 0a01 	add.w	sl, sl, #1
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	9307      	str	r3, [sp, #28]
 80072d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80072de:	4654      	mov	r4, sl
 80072e0:	2205      	movs	r2, #5
 80072e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e6:	4853      	ldr	r0, [pc, #332]	@ (8007434 <_vfiprintf_r+0x21c>)
 80072e8:	f7f8 ff72 	bl	80001d0 <memchr>
 80072ec:	9a04      	ldr	r2, [sp, #16]
 80072ee:	b9d8      	cbnz	r0, 8007328 <_vfiprintf_r+0x110>
 80072f0:	06d1      	lsls	r1, r2, #27
 80072f2:	bf44      	itt	mi
 80072f4:	2320      	movmi	r3, #32
 80072f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072fa:	0713      	lsls	r3, r2, #28
 80072fc:	bf44      	itt	mi
 80072fe:	232b      	movmi	r3, #43	@ 0x2b
 8007300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007304:	f89a 3000 	ldrb.w	r3, [sl]
 8007308:	2b2a      	cmp	r3, #42	@ 0x2a
 800730a:	d015      	beq.n	8007338 <_vfiprintf_r+0x120>
 800730c:	9a07      	ldr	r2, [sp, #28]
 800730e:	4654      	mov	r4, sl
 8007310:	2000      	movs	r0, #0
 8007312:	f04f 0c0a 	mov.w	ip, #10
 8007316:	4621      	mov	r1, r4
 8007318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800731c:	3b30      	subs	r3, #48	@ 0x30
 800731e:	2b09      	cmp	r3, #9
 8007320:	d94b      	bls.n	80073ba <_vfiprintf_r+0x1a2>
 8007322:	b1b0      	cbz	r0, 8007352 <_vfiprintf_r+0x13a>
 8007324:	9207      	str	r2, [sp, #28]
 8007326:	e014      	b.n	8007352 <_vfiprintf_r+0x13a>
 8007328:	eba0 0308 	sub.w	r3, r0, r8
 800732c:	fa09 f303 	lsl.w	r3, r9, r3
 8007330:	4313      	orrs	r3, r2
 8007332:	9304      	str	r3, [sp, #16]
 8007334:	46a2      	mov	sl, r4
 8007336:	e7d2      	b.n	80072de <_vfiprintf_r+0xc6>
 8007338:	9b03      	ldr	r3, [sp, #12]
 800733a:	1d19      	adds	r1, r3, #4
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	9103      	str	r1, [sp, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	bfbb      	ittet	lt
 8007344:	425b      	neglt	r3, r3
 8007346:	f042 0202 	orrlt.w	r2, r2, #2
 800734a:	9307      	strge	r3, [sp, #28]
 800734c:	9307      	strlt	r3, [sp, #28]
 800734e:	bfb8      	it	lt
 8007350:	9204      	strlt	r2, [sp, #16]
 8007352:	7823      	ldrb	r3, [r4, #0]
 8007354:	2b2e      	cmp	r3, #46	@ 0x2e
 8007356:	d10a      	bne.n	800736e <_vfiprintf_r+0x156>
 8007358:	7863      	ldrb	r3, [r4, #1]
 800735a:	2b2a      	cmp	r3, #42	@ 0x2a
 800735c:	d132      	bne.n	80073c4 <_vfiprintf_r+0x1ac>
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	1d1a      	adds	r2, r3, #4
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	9203      	str	r2, [sp, #12]
 8007366:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800736a:	3402      	adds	r4, #2
 800736c:	9305      	str	r3, [sp, #20]
 800736e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007444 <_vfiprintf_r+0x22c>
 8007372:	7821      	ldrb	r1, [r4, #0]
 8007374:	2203      	movs	r2, #3
 8007376:	4650      	mov	r0, sl
 8007378:	f7f8 ff2a 	bl	80001d0 <memchr>
 800737c:	b138      	cbz	r0, 800738e <_vfiprintf_r+0x176>
 800737e:	9b04      	ldr	r3, [sp, #16]
 8007380:	eba0 000a 	sub.w	r0, r0, sl
 8007384:	2240      	movs	r2, #64	@ 0x40
 8007386:	4082      	lsls	r2, r0
 8007388:	4313      	orrs	r3, r2
 800738a:	3401      	adds	r4, #1
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007392:	4829      	ldr	r0, [pc, #164]	@ (8007438 <_vfiprintf_r+0x220>)
 8007394:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007398:	2206      	movs	r2, #6
 800739a:	f7f8 ff19 	bl	80001d0 <memchr>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d03f      	beq.n	8007422 <_vfiprintf_r+0x20a>
 80073a2:	4b26      	ldr	r3, [pc, #152]	@ (800743c <_vfiprintf_r+0x224>)
 80073a4:	bb1b      	cbnz	r3, 80073ee <_vfiprintf_r+0x1d6>
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	3307      	adds	r3, #7
 80073aa:	f023 0307 	bic.w	r3, r3, #7
 80073ae:	3308      	adds	r3, #8
 80073b0:	9303      	str	r3, [sp, #12]
 80073b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b4:	443b      	add	r3, r7
 80073b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073b8:	e76a      	b.n	8007290 <_vfiprintf_r+0x78>
 80073ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80073be:	460c      	mov	r4, r1
 80073c0:	2001      	movs	r0, #1
 80073c2:	e7a8      	b.n	8007316 <_vfiprintf_r+0xfe>
 80073c4:	2300      	movs	r3, #0
 80073c6:	3401      	adds	r4, #1
 80073c8:	9305      	str	r3, [sp, #20]
 80073ca:	4619      	mov	r1, r3
 80073cc:	f04f 0c0a 	mov.w	ip, #10
 80073d0:	4620      	mov	r0, r4
 80073d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073d6:	3a30      	subs	r2, #48	@ 0x30
 80073d8:	2a09      	cmp	r2, #9
 80073da:	d903      	bls.n	80073e4 <_vfiprintf_r+0x1cc>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0c6      	beq.n	800736e <_vfiprintf_r+0x156>
 80073e0:	9105      	str	r1, [sp, #20]
 80073e2:	e7c4      	b.n	800736e <_vfiprintf_r+0x156>
 80073e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80073e8:	4604      	mov	r4, r0
 80073ea:	2301      	movs	r3, #1
 80073ec:	e7f0      	b.n	80073d0 <_vfiprintf_r+0x1b8>
 80073ee:	ab03      	add	r3, sp, #12
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	462a      	mov	r2, r5
 80073f4:	4b12      	ldr	r3, [pc, #72]	@ (8007440 <_vfiprintf_r+0x228>)
 80073f6:	a904      	add	r1, sp, #16
 80073f8:	4630      	mov	r0, r6
 80073fa:	f7fd fdcf 	bl	8004f9c <_printf_float>
 80073fe:	4607      	mov	r7, r0
 8007400:	1c78      	adds	r0, r7, #1
 8007402:	d1d6      	bne.n	80073b2 <_vfiprintf_r+0x19a>
 8007404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007406:	07d9      	lsls	r1, r3, #31
 8007408:	d405      	bmi.n	8007416 <_vfiprintf_r+0x1fe>
 800740a:	89ab      	ldrh	r3, [r5, #12]
 800740c:	059a      	lsls	r2, r3, #22
 800740e:	d402      	bmi.n	8007416 <_vfiprintf_r+0x1fe>
 8007410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007412:	f7fe fc01 	bl	8005c18 <__retarget_lock_release_recursive>
 8007416:	89ab      	ldrh	r3, [r5, #12]
 8007418:	065b      	lsls	r3, r3, #25
 800741a:	f53f af1f 	bmi.w	800725c <_vfiprintf_r+0x44>
 800741e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007420:	e71e      	b.n	8007260 <_vfiprintf_r+0x48>
 8007422:	ab03      	add	r3, sp, #12
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	462a      	mov	r2, r5
 8007428:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <_vfiprintf_r+0x228>)
 800742a:	a904      	add	r1, sp, #16
 800742c:	4630      	mov	r0, r6
 800742e:	f7fe f84d 	bl	80054cc <_printf_i>
 8007432:	e7e4      	b.n	80073fe <_vfiprintf_r+0x1e6>
 8007434:	08007b16 	.word	0x08007b16
 8007438:	08007b20 	.word	0x08007b20
 800743c:	08004f9d 	.word	0x08004f9d
 8007440:	080071f3 	.word	0x080071f3
 8007444:	08007b1c 	.word	0x08007b1c

08007448 <__sflush_r>:
 8007448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800744c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007450:	0716      	lsls	r6, r2, #28
 8007452:	4605      	mov	r5, r0
 8007454:	460c      	mov	r4, r1
 8007456:	d454      	bmi.n	8007502 <__sflush_r+0xba>
 8007458:	684b      	ldr	r3, [r1, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	dc02      	bgt.n	8007464 <__sflush_r+0x1c>
 800745e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	dd48      	ble.n	80074f6 <__sflush_r+0xae>
 8007464:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007466:	2e00      	cmp	r6, #0
 8007468:	d045      	beq.n	80074f6 <__sflush_r+0xae>
 800746a:	2300      	movs	r3, #0
 800746c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007470:	682f      	ldr	r7, [r5, #0]
 8007472:	6a21      	ldr	r1, [r4, #32]
 8007474:	602b      	str	r3, [r5, #0]
 8007476:	d030      	beq.n	80074da <__sflush_r+0x92>
 8007478:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	0759      	lsls	r1, r3, #29
 800747e:	d505      	bpl.n	800748c <__sflush_r+0x44>
 8007480:	6863      	ldr	r3, [r4, #4]
 8007482:	1ad2      	subs	r2, r2, r3
 8007484:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007486:	b10b      	cbz	r3, 800748c <__sflush_r+0x44>
 8007488:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800748a:	1ad2      	subs	r2, r2, r3
 800748c:	2300      	movs	r3, #0
 800748e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007490:	6a21      	ldr	r1, [r4, #32]
 8007492:	4628      	mov	r0, r5
 8007494:	47b0      	blx	r6
 8007496:	1c43      	adds	r3, r0, #1
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	d106      	bne.n	80074aa <__sflush_r+0x62>
 800749c:	6829      	ldr	r1, [r5, #0]
 800749e:	291d      	cmp	r1, #29
 80074a0:	d82b      	bhi.n	80074fa <__sflush_r+0xb2>
 80074a2:	4a2a      	ldr	r2, [pc, #168]	@ (800754c <__sflush_r+0x104>)
 80074a4:	40ca      	lsrs	r2, r1
 80074a6:	07d6      	lsls	r6, r2, #31
 80074a8:	d527      	bpl.n	80074fa <__sflush_r+0xb2>
 80074aa:	2200      	movs	r2, #0
 80074ac:	6062      	str	r2, [r4, #4]
 80074ae:	04d9      	lsls	r1, r3, #19
 80074b0:	6922      	ldr	r2, [r4, #16]
 80074b2:	6022      	str	r2, [r4, #0]
 80074b4:	d504      	bpl.n	80074c0 <__sflush_r+0x78>
 80074b6:	1c42      	adds	r2, r0, #1
 80074b8:	d101      	bne.n	80074be <__sflush_r+0x76>
 80074ba:	682b      	ldr	r3, [r5, #0]
 80074bc:	b903      	cbnz	r3, 80074c0 <__sflush_r+0x78>
 80074be:	6560      	str	r0, [r4, #84]	@ 0x54
 80074c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074c2:	602f      	str	r7, [r5, #0]
 80074c4:	b1b9      	cbz	r1, 80074f6 <__sflush_r+0xae>
 80074c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074ca:	4299      	cmp	r1, r3
 80074cc:	d002      	beq.n	80074d4 <__sflush_r+0x8c>
 80074ce:	4628      	mov	r0, r5
 80074d0:	f7ff f9fe 	bl	80068d0 <_free_r>
 80074d4:	2300      	movs	r3, #0
 80074d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80074d8:	e00d      	b.n	80074f6 <__sflush_r+0xae>
 80074da:	2301      	movs	r3, #1
 80074dc:	4628      	mov	r0, r5
 80074de:	47b0      	blx	r6
 80074e0:	4602      	mov	r2, r0
 80074e2:	1c50      	adds	r0, r2, #1
 80074e4:	d1c9      	bne.n	800747a <__sflush_r+0x32>
 80074e6:	682b      	ldr	r3, [r5, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0c6      	beq.n	800747a <__sflush_r+0x32>
 80074ec:	2b1d      	cmp	r3, #29
 80074ee:	d001      	beq.n	80074f4 <__sflush_r+0xac>
 80074f0:	2b16      	cmp	r3, #22
 80074f2:	d11e      	bne.n	8007532 <__sflush_r+0xea>
 80074f4:	602f      	str	r7, [r5, #0]
 80074f6:	2000      	movs	r0, #0
 80074f8:	e022      	b.n	8007540 <__sflush_r+0xf8>
 80074fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074fe:	b21b      	sxth	r3, r3
 8007500:	e01b      	b.n	800753a <__sflush_r+0xf2>
 8007502:	690f      	ldr	r7, [r1, #16]
 8007504:	2f00      	cmp	r7, #0
 8007506:	d0f6      	beq.n	80074f6 <__sflush_r+0xae>
 8007508:	0793      	lsls	r3, r2, #30
 800750a:	680e      	ldr	r6, [r1, #0]
 800750c:	bf08      	it	eq
 800750e:	694b      	ldreq	r3, [r1, #20]
 8007510:	600f      	str	r7, [r1, #0]
 8007512:	bf18      	it	ne
 8007514:	2300      	movne	r3, #0
 8007516:	eba6 0807 	sub.w	r8, r6, r7
 800751a:	608b      	str	r3, [r1, #8]
 800751c:	f1b8 0f00 	cmp.w	r8, #0
 8007520:	dde9      	ble.n	80074f6 <__sflush_r+0xae>
 8007522:	6a21      	ldr	r1, [r4, #32]
 8007524:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007526:	4643      	mov	r3, r8
 8007528:	463a      	mov	r2, r7
 800752a:	4628      	mov	r0, r5
 800752c:	47b0      	blx	r6
 800752e:	2800      	cmp	r0, #0
 8007530:	dc08      	bgt.n	8007544 <__sflush_r+0xfc>
 8007532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	f04f 30ff 	mov.w	r0, #4294967295
 8007540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007544:	4407      	add	r7, r0
 8007546:	eba8 0800 	sub.w	r8, r8, r0
 800754a:	e7e7      	b.n	800751c <__sflush_r+0xd4>
 800754c:	20400001 	.word	0x20400001

08007550 <_fflush_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	690b      	ldr	r3, [r1, #16]
 8007554:	4605      	mov	r5, r0
 8007556:	460c      	mov	r4, r1
 8007558:	b913      	cbnz	r3, 8007560 <_fflush_r+0x10>
 800755a:	2500      	movs	r5, #0
 800755c:	4628      	mov	r0, r5
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	b118      	cbz	r0, 800756a <_fflush_r+0x1a>
 8007562:	6a03      	ldr	r3, [r0, #32]
 8007564:	b90b      	cbnz	r3, 800756a <_fflush_r+0x1a>
 8007566:	f7fe f95b 	bl	8005820 <__sinit>
 800756a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0f3      	beq.n	800755a <_fflush_r+0xa>
 8007572:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007574:	07d0      	lsls	r0, r2, #31
 8007576:	d404      	bmi.n	8007582 <_fflush_r+0x32>
 8007578:	0599      	lsls	r1, r3, #22
 800757a:	d402      	bmi.n	8007582 <_fflush_r+0x32>
 800757c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800757e:	f7fe fb4a 	bl	8005c16 <__retarget_lock_acquire_recursive>
 8007582:	4628      	mov	r0, r5
 8007584:	4621      	mov	r1, r4
 8007586:	f7ff ff5f 	bl	8007448 <__sflush_r>
 800758a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800758c:	07da      	lsls	r2, r3, #31
 800758e:	4605      	mov	r5, r0
 8007590:	d4e4      	bmi.n	800755c <_fflush_r+0xc>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	059b      	lsls	r3, r3, #22
 8007596:	d4e1      	bmi.n	800755c <_fflush_r+0xc>
 8007598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800759a:	f7fe fb3d 	bl	8005c18 <__retarget_lock_release_recursive>
 800759e:	e7dd      	b.n	800755c <_fflush_r+0xc>

080075a0 <__swhatbuf_r>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	460c      	mov	r4, r1
 80075a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a8:	2900      	cmp	r1, #0
 80075aa:	b096      	sub	sp, #88	@ 0x58
 80075ac:	4615      	mov	r5, r2
 80075ae:	461e      	mov	r6, r3
 80075b0:	da0d      	bge.n	80075ce <__swhatbuf_r+0x2e>
 80075b2:	89a3      	ldrh	r3, [r4, #12]
 80075b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075b8:	f04f 0100 	mov.w	r1, #0
 80075bc:	bf14      	ite	ne
 80075be:	2340      	movne	r3, #64	@ 0x40
 80075c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80075c4:	2000      	movs	r0, #0
 80075c6:	6031      	str	r1, [r6, #0]
 80075c8:	602b      	str	r3, [r5, #0]
 80075ca:	b016      	add	sp, #88	@ 0x58
 80075cc:	bd70      	pop	{r4, r5, r6, pc}
 80075ce:	466a      	mov	r2, sp
 80075d0:	f000 f848 	bl	8007664 <_fstat_r>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	dbec      	blt.n	80075b2 <__swhatbuf_r+0x12>
 80075d8:	9901      	ldr	r1, [sp, #4]
 80075da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075e2:	4259      	negs	r1, r3
 80075e4:	4159      	adcs	r1, r3
 80075e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075ea:	e7eb      	b.n	80075c4 <__swhatbuf_r+0x24>

080075ec <__smakebuf_r>:
 80075ec:	898b      	ldrh	r3, [r1, #12]
 80075ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075f0:	079d      	lsls	r5, r3, #30
 80075f2:	4606      	mov	r6, r0
 80075f4:	460c      	mov	r4, r1
 80075f6:	d507      	bpl.n	8007608 <__smakebuf_r+0x1c>
 80075f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	6123      	str	r3, [r4, #16]
 8007600:	2301      	movs	r3, #1
 8007602:	6163      	str	r3, [r4, #20]
 8007604:	b003      	add	sp, #12
 8007606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007608:	ab01      	add	r3, sp, #4
 800760a:	466a      	mov	r2, sp
 800760c:	f7ff ffc8 	bl	80075a0 <__swhatbuf_r>
 8007610:	9f00      	ldr	r7, [sp, #0]
 8007612:	4605      	mov	r5, r0
 8007614:	4639      	mov	r1, r7
 8007616:	4630      	mov	r0, r6
 8007618:	f7ff f9ce 	bl	80069b8 <_malloc_r>
 800761c:	b948      	cbnz	r0, 8007632 <__smakebuf_r+0x46>
 800761e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007622:	059a      	lsls	r2, r3, #22
 8007624:	d4ee      	bmi.n	8007604 <__smakebuf_r+0x18>
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	f043 0302 	orr.w	r3, r3, #2
 800762e:	81a3      	strh	r3, [r4, #12]
 8007630:	e7e2      	b.n	80075f8 <__smakebuf_r+0xc>
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	6020      	str	r0, [r4, #0]
 8007636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763a:	81a3      	strh	r3, [r4, #12]
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007642:	b15b      	cbz	r3, 800765c <__smakebuf_r+0x70>
 8007644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007648:	4630      	mov	r0, r6
 800764a:	f000 f81d 	bl	8007688 <_isatty_r>
 800764e:	b128      	cbz	r0, 800765c <__smakebuf_r+0x70>
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	f023 0303 	bic.w	r3, r3, #3
 8007656:	f043 0301 	orr.w	r3, r3, #1
 800765a:	81a3      	strh	r3, [r4, #12]
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	431d      	orrs	r5, r3
 8007660:	81a5      	strh	r5, [r4, #12]
 8007662:	e7cf      	b.n	8007604 <__smakebuf_r+0x18>

08007664 <_fstat_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4d07      	ldr	r5, [pc, #28]	@ (8007684 <_fstat_r+0x20>)
 8007668:	2300      	movs	r3, #0
 800766a:	4604      	mov	r4, r0
 800766c:	4608      	mov	r0, r1
 800766e:	4611      	mov	r1, r2
 8007670:	602b      	str	r3, [r5, #0]
 8007672:	f7fb fc23 	bl	8002ebc <_fstat>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	d102      	bne.n	8007680 <_fstat_r+0x1c>
 800767a:	682b      	ldr	r3, [r5, #0]
 800767c:	b103      	cbz	r3, 8007680 <_fstat_r+0x1c>
 800767e:	6023      	str	r3, [r4, #0]
 8007680:	bd38      	pop	{r3, r4, r5, pc}
 8007682:	bf00      	nop
 8007684:	20000404 	.word	0x20000404

08007688 <_isatty_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d06      	ldr	r5, [pc, #24]	@ (80076a4 <_isatty_r+0x1c>)
 800768c:	2300      	movs	r3, #0
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	602b      	str	r3, [r5, #0]
 8007694:	f7fb fc22 	bl	8002edc <_isatty>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_isatty_r+0x1a>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_isatty_r+0x1a>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20000404 	.word	0x20000404

080076a8 <_sbrk_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d06      	ldr	r5, [pc, #24]	@ (80076c4 <_sbrk_r+0x1c>)
 80076ac:	2300      	movs	r3, #0
 80076ae:	4604      	mov	r4, r0
 80076b0:	4608      	mov	r0, r1
 80076b2:	602b      	str	r3, [r5, #0]
 80076b4:	f7fb fc2a 	bl	8002f0c <_sbrk>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d102      	bne.n	80076c2 <_sbrk_r+0x1a>
 80076bc:	682b      	ldr	r3, [r5, #0]
 80076be:	b103      	cbz	r3, 80076c2 <_sbrk_r+0x1a>
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	bd38      	pop	{r3, r4, r5, pc}
 80076c4:	20000404 	.word	0x20000404

080076c8 <memcpy>:
 80076c8:	440a      	add	r2, r1
 80076ca:	4291      	cmp	r1, r2
 80076cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80076d0:	d100      	bne.n	80076d4 <memcpy+0xc>
 80076d2:	4770      	bx	lr
 80076d4:	b510      	push	{r4, lr}
 80076d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076de:	4291      	cmp	r1, r2
 80076e0:	d1f9      	bne.n	80076d6 <memcpy+0xe>
 80076e2:	bd10      	pop	{r4, pc}

080076e4 <__assert_func>:
 80076e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076e6:	4614      	mov	r4, r2
 80076e8:	461a      	mov	r2, r3
 80076ea:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <__assert_func+0x2c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4605      	mov	r5, r0
 80076f0:	68d8      	ldr	r0, [r3, #12]
 80076f2:	b14c      	cbz	r4, 8007708 <__assert_func+0x24>
 80076f4:	4b07      	ldr	r3, [pc, #28]	@ (8007714 <__assert_func+0x30>)
 80076f6:	9100      	str	r1, [sp, #0]
 80076f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076fc:	4906      	ldr	r1, [pc, #24]	@ (8007718 <__assert_func+0x34>)
 80076fe:	462b      	mov	r3, r5
 8007700:	f000 f842 	bl	8007788 <fiprintf>
 8007704:	f000 f852 	bl	80077ac <abort>
 8007708:	4b04      	ldr	r3, [pc, #16]	@ (800771c <__assert_func+0x38>)
 800770a:	461c      	mov	r4, r3
 800770c:	e7f3      	b.n	80076f6 <__assert_func+0x12>
 800770e:	bf00      	nop
 8007710:	20000018 	.word	0x20000018
 8007714:	08007b31 	.word	0x08007b31
 8007718:	08007b3e 	.word	0x08007b3e
 800771c:	08007b6c 	.word	0x08007b6c

08007720 <_calloc_r>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	fba1 5402 	umull	r5, r4, r1, r2
 8007726:	b934      	cbnz	r4, 8007736 <_calloc_r+0x16>
 8007728:	4629      	mov	r1, r5
 800772a:	f7ff f945 	bl	80069b8 <_malloc_r>
 800772e:	4606      	mov	r6, r0
 8007730:	b928      	cbnz	r0, 800773e <_calloc_r+0x1e>
 8007732:	4630      	mov	r0, r6
 8007734:	bd70      	pop	{r4, r5, r6, pc}
 8007736:	220c      	movs	r2, #12
 8007738:	6002      	str	r2, [r0, #0]
 800773a:	2600      	movs	r6, #0
 800773c:	e7f9      	b.n	8007732 <_calloc_r+0x12>
 800773e:	462a      	mov	r2, r5
 8007740:	4621      	mov	r1, r4
 8007742:	f7fe f9eb 	bl	8005b1c <memset>
 8007746:	e7f4      	b.n	8007732 <_calloc_r+0x12>

08007748 <__ascii_mbtowc>:
 8007748:	b082      	sub	sp, #8
 800774a:	b901      	cbnz	r1, 800774e <__ascii_mbtowc+0x6>
 800774c:	a901      	add	r1, sp, #4
 800774e:	b142      	cbz	r2, 8007762 <__ascii_mbtowc+0x1a>
 8007750:	b14b      	cbz	r3, 8007766 <__ascii_mbtowc+0x1e>
 8007752:	7813      	ldrb	r3, [r2, #0]
 8007754:	600b      	str	r3, [r1, #0]
 8007756:	7812      	ldrb	r2, [r2, #0]
 8007758:	1e10      	subs	r0, r2, #0
 800775a:	bf18      	it	ne
 800775c:	2001      	movne	r0, #1
 800775e:	b002      	add	sp, #8
 8007760:	4770      	bx	lr
 8007762:	4610      	mov	r0, r2
 8007764:	e7fb      	b.n	800775e <__ascii_mbtowc+0x16>
 8007766:	f06f 0001 	mvn.w	r0, #1
 800776a:	e7f8      	b.n	800775e <__ascii_mbtowc+0x16>

0800776c <__ascii_wctomb>:
 800776c:	4603      	mov	r3, r0
 800776e:	4608      	mov	r0, r1
 8007770:	b141      	cbz	r1, 8007784 <__ascii_wctomb+0x18>
 8007772:	2aff      	cmp	r2, #255	@ 0xff
 8007774:	d904      	bls.n	8007780 <__ascii_wctomb+0x14>
 8007776:	228a      	movs	r2, #138	@ 0x8a
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	f04f 30ff 	mov.w	r0, #4294967295
 800777e:	4770      	bx	lr
 8007780:	700a      	strb	r2, [r1, #0]
 8007782:	2001      	movs	r0, #1
 8007784:	4770      	bx	lr
	...

08007788 <fiprintf>:
 8007788:	b40e      	push	{r1, r2, r3}
 800778a:	b503      	push	{r0, r1, lr}
 800778c:	4601      	mov	r1, r0
 800778e:	ab03      	add	r3, sp, #12
 8007790:	4805      	ldr	r0, [pc, #20]	@ (80077a8 <fiprintf+0x20>)
 8007792:	f853 2b04 	ldr.w	r2, [r3], #4
 8007796:	6800      	ldr	r0, [r0, #0]
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	f7ff fd3d 	bl	8007218 <_vfiprintf_r>
 800779e:	b002      	add	sp, #8
 80077a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077a4:	b003      	add	sp, #12
 80077a6:	4770      	bx	lr
 80077a8:	20000018 	.word	0x20000018

080077ac <abort>:
 80077ac:	b508      	push	{r3, lr}
 80077ae:	2006      	movs	r0, #6
 80077b0:	f000 f82c 	bl	800780c <raise>
 80077b4:	2001      	movs	r0, #1
 80077b6:	f7fb fb4d 	bl	8002e54 <_exit>

080077ba <_raise_r>:
 80077ba:	291f      	cmp	r1, #31
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4605      	mov	r5, r0
 80077c0:	460c      	mov	r4, r1
 80077c2:	d904      	bls.n	80077ce <_raise_r+0x14>
 80077c4:	2316      	movs	r3, #22
 80077c6:	6003      	str	r3, [r0, #0]
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	bd38      	pop	{r3, r4, r5, pc}
 80077ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80077d0:	b112      	cbz	r2, 80077d8 <_raise_r+0x1e>
 80077d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077d6:	b94b      	cbnz	r3, 80077ec <_raise_r+0x32>
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 f831 	bl	8007840 <_getpid_r>
 80077de:	4622      	mov	r2, r4
 80077e0:	4601      	mov	r1, r0
 80077e2:	4628      	mov	r0, r5
 80077e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077e8:	f000 b818 	b.w	800781c <_kill_r>
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d00a      	beq.n	8007806 <_raise_r+0x4c>
 80077f0:	1c59      	adds	r1, r3, #1
 80077f2:	d103      	bne.n	80077fc <_raise_r+0x42>
 80077f4:	2316      	movs	r3, #22
 80077f6:	6003      	str	r3, [r0, #0]
 80077f8:	2001      	movs	r0, #1
 80077fa:	e7e7      	b.n	80077cc <_raise_r+0x12>
 80077fc:	2100      	movs	r1, #0
 80077fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007802:	4620      	mov	r0, r4
 8007804:	4798      	blx	r3
 8007806:	2000      	movs	r0, #0
 8007808:	e7e0      	b.n	80077cc <_raise_r+0x12>
	...

0800780c <raise>:
 800780c:	4b02      	ldr	r3, [pc, #8]	@ (8007818 <raise+0xc>)
 800780e:	4601      	mov	r1, r0
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	f7ff bfd2 	b.w	80077ba <_raise_r>
 8007816:	bf00      	nop
 8007818:	20000018 	.word	0x20000018

0800781c <_kill_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d07      	ldr	r5, [pc, #28]	@ (800783c <_kill_r+0x20>)
 8007820:	2300      	movs	r3, #0
 8007822:	4604      	mov	r4, r0
 8007824:	4608      	mov	r0, r1
 8007826:	4611      	mov	r1, r2
 8007828:	602b      	str	r3, [r5, #0]
 800782a:	f7fb fb03 	bl	8002e34 <_kill>
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	d102      	bne.n	8007838 <_kill_r+0x1c>
 8007832:	682b      	ldr	r3, [r5, #0]
 8007834:	b103      	cbz	r3, 8007838 <_kill_r+0x1c>
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	bd38      	pop	{r3, r4, r5, pc}
 800783a:	bf00      	nop
 800783c:	20000404 	.word	0x20000404

08007840 <_getpid_r>:
 8007840:	f7fb baf0 	b.w	8002e24 <_getpid>

08007844 <_init>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	bf00      	nop
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr

08007850 <_fini>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	bf00      	nop
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr
