
BNO080 setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08007ee0  08007ee0  00008ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008384  08008384  0000a1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008384  08008384  00009384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800838c  0800838c  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800838c  0800838c  0000938c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008390  08008390  00009390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008394  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d8  2**0
                  CONTENTS
 10 .bss          00000244  200001d8  200001d8  0000a1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000041c  2000041c  0000a1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009099  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd3  00000000  00000000  000132a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  00015278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b4  00000000  00000000  00015e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cc3  00000000  00000000  000166ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b275  00000000  00000000  000393af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9c87  00000000  00000000  00044624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e2ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004244  00000000  00000000  0010e2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003e  00000000  00000000  00112534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ec8 	.word	0x08007ec8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007ec8 	.word	0x08007ec8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f023 0210 	bic.w	r2, r3, #16
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	605a      	str	r2, [r3, #4]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d101      	bne.n	8000f58 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	330c      	adds	r3, #12
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	330c      	adds	r3, #12
 8000f92:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	619a      	str	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001018:	4907      	ldr	r1, [pc, #28]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800

0800103c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4013      	ands	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40023800 	.word	0x40023800

0800106c <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b090      	sub	sp, #64	@ 0x40
 8001070:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2228      	movs	r2, #40	@ 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fa40 	bl	8005500 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001090:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001094:	f7ff ffd2 	bl	800103c <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001098:	2002      	movs	r0, #2
 800109a:	f7ff ffb7 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800109e:	2004      	movs	r0, #4
 80010a0:	f7ff ffb4 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ffb1 	bl	800100c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80010aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80010ae:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010b0:	2302      	movs	r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80010c0:	2305      	movs	r3, #5
 80010c2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4841      	ldr	r0, [pc, #260]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80010ca:	f002 fbae 	bl	800382a <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80010d2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80010d6:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80010dc:	2302      	movs	r3, #2
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80010e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80010ea:	2318      	movs	r3, #24
 80010ec:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80010f6:	230a      	movs	r3, #10
 80010f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	4619      	mov	r1, r3
 8001100:	4834      	ldr	r0, [pc, #208]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001102:	f002 fd70 	bl	8003be6 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001106:	2100      	movs	r1, #0
 8001108:	4832      	ldr	r0, [pc, #200]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 800110a:	f7ff fef3 	bl	8000ef4 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800110e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001112:	4831      	ldr	r0, [pc, #196]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001114:	f7ff ff6a 	bl	8000fec <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8001118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800111c:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 800111e:	f7ff ff65 	bl	8000fec <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001126:	482d      	ldr	r0, [pc, #180]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 8001128:	f7ff ff60 	bl	8000fec <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001132:	2301      	movs	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 8001142:	463b      	mov	r3, r7
 8001144:	4619      	mov	r1, r3
 8001146:	4822      	ldr	r0, [pc, #136]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001148:	f002 fb6f 	bl	800382a <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 800114c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001150:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001152:	2301      	movs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	481c      	ldr	r0, [pc, #112]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001168:	f002 fb5f 	bl	800382a <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 800116c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001170:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4815      	ldr	r0, [pc, #84]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 8001188:	f002 fb4f 	bl	800382a <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800118c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001190:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001196:	2301      	movs	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011a0:	f002 fb43 	bl	800382a <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80011a4:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <BNO080_GPIO_SPI_Initialization+0x168>)
 80011a6:	f7ff fe95 	bl	8000ed4 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80011aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ae:	4808      	ldr	r0, [pc, #32]	@ (80011d0 <BNO080_GPIO_SPI_Initialization+0x164>)
 80011b0:	f7ff ff0e 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80011b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <BNO080_GPIO_SPI_Initialization+0x170>)
 80011ba:	f7ff ff09 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80011be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80011c4:	f7ff ff04 	bl	8000fd0 <LL_GPIO_SetOutputPin>
}
 80011c8:	bf00      	nop
 80011ca:	3740      	adds	r7, #64	@ 0x40
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40003800 	.word	0x40003800
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020000 	.word	0x40020000

080011e0 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 80011e6:	f7ff ff41 	bl	800106c <BNO080_GPIO_SPI_Initialization>

	printf("Checking BNO080...");
 80011ea:	482e      	ldr	r0, [pc, #184]	@ (80012a4 <BNO080_Initialization+0xc4>)
 80011ec:	f004 f840 	bl	8005270 <iprintf>

	CHIP_DESELECT(BNO080);
 80011f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011f4:	482c      	ldr	r0, [pc, #176]	@ (80012a8 <BNO080_Initialization+0xc8>)
 80011f6:	f7ff feeb 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011fe:	482b      	ldr	r0, [pc, #172]	@ (80012ac <BNO080_Initialization+0xcc>)
 8001200:	f7ff fee6 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001204:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001208:	4829      	ldr	r0, [pc, #164]	@ (80012b0 <BNO080_Initialization+0xd0>)
 800120a:	f7ff feef 	bl	8000fec <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800120e:	20c8      	movs	r0, #200	@ 0xc8
 8001210:	f001 fc52 	bl	8002ab8 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001214:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001218:	4825      	ldr	r0, [pc, #148]	@ (80012b0 <BNO080_Initialization+0xd0>)
 800121a:	f7ff fed9 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800121e:	f000 fb21 	bl	8001864 <BNO080_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001222:	f000 fb1f 	bl	8001864 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001226:	f000 fb41 	bl	80018ac <BNO080_receivePacket>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800122a:	f000 fb1b 	bl	8001864 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800122e:	f000 fb3d 	bl	80018ac <BNO080_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <BNO080_Initialization+0xd4>)
 8001234:	22f9      	movs	r2, #249	@ 0xf9
 8001236:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <BNO080_Initialization+0xd4>)
 800123a:	2200      	movs	r2, #0
 800123c:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 800123e:	2102      	movs	r1, #2
 8001240:	2002      	movs	r0, #2
 8001242:	f000 fba5 	bl	8001990 <BNO080_sendPacket>

	//Now we wait for response
	BNO080_waitForSPI();
 8001246:	f000 fb0d 	bl	8001864 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 800124a:	f000 fb2f 	bl	80018ac <BNO080_receivePacket>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d11b      	bne.n	800128c <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <BNO080_Initialization+0xd8>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <BNO080_Initialization+0xd8>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	461a      	mov	r2, r3
 8001260:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <BNO080_Initialization+0xd8>)
 8001262:	789b      	ldrb	r3, [r3, #2]
 8001264:	4618      	mov	r0, r3
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <BNO080_Initialization+0xd8>)
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	4603      	mov	r3, r0
 800126e:	4813      	ldr	r0, [pc, #76]	@ (80012bc <BNO080_Initialization+0xdc>)
 8001270:	f003 fffe 	bl	8005270 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <BNO080_Initialization+0xd4>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2bf8      	cmp	r3, #248	@ 0xf8
 800127a:	d107      	bne.n	800128c <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 800127c:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <BNO080_Initialization+0xd4>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	480f      	ldr	r0, [pc, #60]	@ (80012c0 <BNO080_Initialization+0xe0>)
 8001284:	f003 fff4 	bl	8005270 <iprintf>
			return (0);
 8001288:	2300      	movs	r3, #0
 800128a:	e007      	b.n	800129c <BNO080_Initialization+0xbc>
		}// Sensor OK
	}

	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <BNO080_Initialization+0xd4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	22f8      	movs	r2, #248	@ 0xf8
 8001292:	4619      	mov	r1, r3
 8001294:	480b      	ldr	r0, [pc, #44]	@ (80012c4 <BNO080_Initialization+0xe4>)
 8001296:	f003 ffeb 	bl	8005270 <iprintf>
	return (1); //Something went wrong
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08007ee0 	.word	0x08007ee0
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020800 	.word	0x40020800
 80012b4:	200001f8 	.word	0x200001f8
 80012b8:	200001f4 	.word	0x200001f4
 80012bc:	08007ef4 	.word	0x08007ef4
 80012c0:	08007f0c 	.word	0x08007f0c
 80012c4:	08007f2c 	.word	0x08007f2c

080012c8 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012d2:	bf00      	nop
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <SPI2_SendByte+0x40>)
 80012d6:	f7ff fe33 	bl	8000f40 <LL_SPI_IsActiveFlag_TXE>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f9      	beq.n	80012d4 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4808      	ldr	r0, [pc, #32]	@ (8001308 <SPI2_SendByte+0x40>)
 80012e6:	f7ff fe4c 	bl	8000f82 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012ea:	bf00      	nop
 80012ec:	4806      	ldr	r0, [pc, #24]	@ (8001308 <SPI2_SendByte+0x40>)
 80012ee:	f7ff fe14 	bl	8000f1a <LL_SPI_IsActiveFlag_RXNE>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f9      	beq.n	80012ec <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <SPI2_SendByte+0x40>)
 80012fa:	f7ff fe34 	bl	8000f66 <LL_SPI_ReceiveData8>
 80012fe:	4603      	mov	r3, r0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40003800 	.word	0x40003800

0800130c <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001310:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001314:	4811      	ldr	r0, [pc, #68]	@ (800135c <BNO080_dataAvailable+0x50>)
 8001316:	f7ff fe46 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 800131a:	4603      	mov	r3, r0
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <BNO080_dataAvailable+0x18>
		return (0);
 8001320:	2300      	movs	r3, #0
 8001322:	e019      	b.n	8001358 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001324:	f000 fac2 	bl	80018ac <BNO080_receivePacket>
 8001328:	4603      	mov	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	d113      	bne.n	8001356 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <BNO080_dataAvailable+0x54>)
 8001330:	789b      	ldrb	r3, [r3, #2]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d107      	bne.n	8001346 <BNO080_dataAvailable+0x3a>
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <BNO080_dataAvailable+0x58>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2bfb      	cmp	r3, #251	@ 0xfb
 800133c:	d103      	bne.n	8001346 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 800133e:	f000 f82f 	bl	80013a0 <BNO080_parseInputReport>
			return (1);
 8001342:	2301      	movs	r3, #1
 8001344:	e008      	b.n	8001358 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <BNO080_dataAvailable+0x54>)
 8001348:	789b      	ldrb	r3, [r3, #2]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d103      	bne.n	8001356 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 800134e:	f000 f80b 	bl	8001368 <BNO080_parseCommandReport>
			return (1);
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40020800 	.word	0x40020800
 8001360:	200001f4 	.word	0x200001f4
 8001364:	200001f8 	.word	0x200001f8

08001368 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <BNO080_parseCommandReport+0x30>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2bf1      	cmp	r3, #241	@ 0xf1
 8001374:	d109      	bne.n	800138a <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <BNO080_parseCommandReport+0x30>)
 8001378:	789b      	ldrb	r3, [r3, #2]
 800137a:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	2b07      	cmp	r3, #7
 8001380:	d103      	bne.n	800138a <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001382:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <BNO080_parseCommandReport+0x30>)
 8001384:	795a      	ldrb	r2, [r3, #5]
 8001386:	4b05      	ldr	r3, [pc, #20]	@ (800139c <BNO080_parseCommandReport+0x34>)
 8001388:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	200001f8 	.word	0x200001f8
 800139c:	200002b8 	.word	0x200002b8

080013a0 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80013a6:	4b9b      	ldr	r3, [pc, #620]	@ (8001614 <BNO080_parseInputReport+0x274>)
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b98      	ldr	r3, [pc, #608]	@ (8001614 <BNO080_parseInputReport+0x274>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80013ba:	8a3b      	ldrh	r3, [r7, #16]
 80013bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013c0:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80013c2:	8a3b      	ldrh	r3, [r7, #16]
 80013c4:	3b04      	subs	r3, #4
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80013ca:	4b93      	ldr	r3, [pc, #588]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	061a      	lsls	r2, r3, #24
 80013d0:	4b91      	ldr	r3, [pc, #580]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80013d2:	78db      	ldrb	r3, [r3, #3]
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	431a      	orrs	r2, r3
 80013d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80013da:	789b      	ldrb	r3, [r3, #2]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4313      	orrs	r3, r2
 80013e0:	4a8d      	ldr	r2, [pc, #564]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80013e2:	7852      	ldrb	r2, [r2, #1]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	4a8d      	ldr	r2, [pc, #564]	@ (800161c <BNO080_parseInputReport+0x27c>)
 80013e8:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80013ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80013ec:	79db      	ldrb	r3, [r3, #7]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80013f4:	4b88      	ldr	r3, [pc, #544]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80013f6:	7a9b      	ldrb	r3, [r3, #10]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b86      	ldr	r3, [pc, #536]	@ (8001618 <BNO080_parseInputReport+0x278>)
 8001400:	7a5b      	ldrb	r3, [r3, #9]
 8001402:	b21b      	sxth	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800140a:	4b83      	ldr	r3, [pc, #524]	@ (8001618 <BNO080_parseInputReport+0x278>)
 800140c:	7b1b      	ldrb	r3, [r3, #12]
 800140e:	b21b      	sxth	r3, r3
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b80      	ldr	r3, [pc, #512]	@ (8001618 <BNO080_parseInputReport+0x278>)
 8001416:	7adb      	ldrb	r3, [r3, #11]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21b      	sxth	r3, r3
 800141e:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001420:	4b7d      	ldr	r3, [pc, #500]	@ (8001618 <BNO080_parseInputReport+0x278>)
 8001422:	7b9b      	ldrb	r3, [r3, #14]
 8001424:	b21b      	sxth	r3, r3
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b21a      	sxth	r2, r3
 800142a:	4b7b      	ldr	r3, [pc, #492]	@ (8001618 <BNO080_parseInputReport+0x278>)
 800142c:	7b5b      	ldrb	r3, [r3, #13]
 800142e:	b21b      	sxth	r3, r3
 8001430:	4313      	orrs	r3, r2
 8001432:	b21b      	sxth	r3, r3
 8001434:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 800143e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001442:	2b0e      	cmp	r3, #14
 8001444:	dd0a      	ble.n	800145c <BNO080_parseInputReport+0xbc>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 8001446:	4b74      	ldr	r3, [pc, #464]	@ (8001618 <BNO080_parseInputReport+0x278>)
 8001448:	7c1b      	ldrb	r3, [r3, #16]
 800144a:	b21b      	sxth	r3, r3
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	4b71      	ldr	r3, [pc, #452]	@ (8001618 <BNO080_parseInputReport+0x278>)
 8001452:	7bdb      	ldrb	r3, [r3, #15]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21b      	sxth	r3, r3
 800145a:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800145c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001460:	2b10      	cmp	r3, #16
 8001462:	dd0a      	ble.n	800147a <BNO080_parseInputReport+0xda>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001464:	4b6c      	ldr	r3, [pc, #432]	@ (8001618 <BNO080_parseInputReport+0x278>)
 8001466:	7c9b      	ldrb	r3, [r3, #18]
 8001468:	b21b      	sxth	r3, r3
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b21a      	sxth	r2, r3
 800146e:	4b6a      	ldr	r3, [pc, #424]	@ (8001618 <BNO080_parseInputReport+0x278>)
 8001470:	7c5b      	ldrb	r3, [r3, #17]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21b      	sxth	r3, r3
 8001478:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 800147a:	4b67      	ldr	r3, [pc, #412]	@ (8001618 <BNO080_parseInputReport+0x278>)
 800147c:	795b      	ldrb	r3, [r3, #5]
 800147e:	2b1e      	cmp	r3, #30
 8001480:	dc46      	bgt.n	8001510 <BNO080_parseInputReport+0x170>
 8001482:	2b00      	cmp	r3, #0
 8001484:	f340 80bf 	ble.w	8001606 <BNO080_parseInputReport+0x266>
 8001488:	3b01      	subs	r3, #1
 800148a:	2b1d      	cmp	r3, #29
 800148c:	f200 80bb 	bhi.w	8001606 <BNO080_parseInputReport+0x266>
 8001490:	a201      	add	r2, pc, #4	@ (adr r2, 8001498 <BNO080_parseInputReport+0xf8>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	08001517 	.word	0x08001517
 800149c:	0800154f 	.word	0x0800154f
 80014a0:	0800156b 	.word	0x0800156b
 80014a4:	08001533 	.word	0x08001533
 80014a8:	08001587 	.word	0x08001587
 80014ac:	08001607 	.word	0x08001607
 80014b0:	08001607 	.word	0x08001607
 80014b4:	08001587 	.word	0x08001587
 80014b8:	08001607 	.word	0x08001607
 80014bc:	08001607 	.word	0x08001607
 80014c0:	08001607 	.word	0x08001607
 80014c4:	08001607 	.word	0x08001607
 80014c8:	08001607 	.word	0x08001607
 80014cc:	08001607 	.word	0x08001607
 80014d0:	08001607 	.word	0x08001607
 80014d4:	08001607 	.word	0x08001607
 80014d8:	080015af 	.word	0x080015af
 80014dc:	08001607 	.word	0x08001607
 80014e0:	080015b7 	.word	0x080015b7
 80014e4:	08001607 	.word	0x08001607
 80014e8:	08001607 	.word	0x08001607
 80014ec:	08001607 	.word	0x08001607
 80014f0:	08001607 	.word	0x08001607
 80014f4:	08001607 	.word	0x08001607
 80014f8:	08001607 	.word	0x08001607
 80014fc:	08001607 	.word	0x08001607
 8001500:	08001607 	.word	0x08001607
 8001504:	08001607 	.word	0x08001607
 8001508:	08001607 	.word	0x08001607
 800150c:	080015c1 	.word	0x080015c1
 8001510:	2bf1      	cmp	r3, #241	@ 0xf1
 8001512:	d06d      	beq.n	80015f0 <BNO080_parseInputReport+0x250>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001514:	e077      	b.n	8001606 <BNO080_parseInputReport+0x266>
			accelAccuracy = status;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b41      	ldr	r3, [pc, #260]	@ (8001620 <BNO080_parseInputReport+0x280>)
 800151c:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 800151e:	4a41      	ldr	r2, [pc, #260]	@ (8001624 <BNO080_parseInputReport+0x284>)
 8001520:	89bb      	ldrh	r3, [r7, #12]
 8001522:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001524:	4a40      	ldr	r2, [pc, #256]	@ (8001628 <BNO080_parseInputReport+0x288>)
 8001526:	897b      	ldrh	r3, [r7, #10]
 8001528:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 800152a:	4a40      	ldr	r2, [pc, #256]	@ (800162c <BNO080_parseInputReport+0x28c>)
 800152c:	893b      	ldrh	r3, [r7, #8]
 800152e:	8013      	strh	r3, [r2, #0]
			break;
 8001530:	e069      	b.n	8001606 <BNO080_parseInputReport+0x266>
			accelLinAccuracy = status;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b3e      	ldr	r3, [pc, #248]	@ (8001630 <BNO080_parseInputReport+0x290>)
 8001538:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800153a:	4a3e      	ldr	r2, [pc, #248]	@ (8001634 <BNO080_parseInputReport+0x294>)
 800153c:	89bb      	ldrh	r3, [r7, #12]
 800153e:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001540:	4a3d      	ldr	r2, [pc, #244]	@ (8001638 <BNO080_parseInputReport+0x298>)
 8001542:	897b      	ldrh	r3, [r7, #10]
 8001544:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8001546:	4a3d      	ldr	r2, [pc, #244]	@ (800163c <BNO080_parseInputReport+0x29c>)
 8001548:	893b      	ldrh	r3, [r7, #8]
 800154a:	8013      	strh	r3, [r2, #0]
			break;
 800154c:	e05b      	b.n	8001606 <BNO080_parseInputReport+0x266>
			gyroAccuracy = status;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b3b      	ldr	r3, [pc, #236]	@ (8001640 <BNO080_parseInputReport+0x2a0>)
 8001554:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8001556:	4a3b      	ldr	r2, [pc, #236]	@ (8001644 <BNO080_parseInputReport+0x2a4>)
 8001558:	89bb      	ldrh	r3, [r7, #12]
 800155a:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 800155c:	4a3a      	ldr	r2, [pc, #232]	@ (8001648 <BNO080_parseInputReport+0x2a8>)
 800155e:	897b      	ldrh	r3, [r7, #10]
 8001560:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8001562:	4a3a      	ldr	r2, [pc, #232]	@ (800164c <BNO080_parseInputReport+0x2ac>)
 8001564:	893b      	ldrh	r3, [r7, #8]
 8001566:	8013      	strh	r3, [r2, #0]
			break;
 8001568:	e04d      	b.n	8001606 <BNO080_parseInputReport+0x266>
			magAccuracy = status;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b38      	ldr	r3, [pc, #224]	@ (8001650 <BNO080_parseInputReport+0x2b0>)
 8001570:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001572:	4a38      	ldr	r2, [pc, #224]	@ (8001654 <BNO080_parseInputReport+0x2b4>)
 8001574:	89bb      	ldrh	r3, [r7, #12]
 8001576:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001578:	4a37      	ldr	r2, [pc, #220]	@ (8001658 <BNO080_parseInputReport+0x2b8>)
 800157a:	897b      	ldrh	r3, [r7, #10]
 800157c:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 800157e:	4a37      	ldr	r2, [pc, #220]	@ (800165c <BNO080_parseInputReport+0x2bc>)
 8001580:	893b      	ldrh	r3, [r7, #8]
 8001582:	8013      	strh	r3, [r2, #0]
			break;
 8001584:	e03f      	b.n	8001606 <BNO080_parseInputReport+0x266>
			quatAccuracy = status;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b35      	ldr	r3, [pc, #212]	@ (8001660 <BNO080_parseInputReport+0x2c0>)
 800158c:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 800158e:	4a35      	ldr	r2, [pc, #212]	@ (8001664 <BNO080_parseInputReport+0x2c4>)
 8001590:	89bb      	ldrh	r3, [r7, #12]
 8001592:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001594:	4a34      	ldr	r2, [pc, #208]	@ (8001668 <BNO080_parseInputReport+0x2c8>)
 8001596:	897b      	ldrh	r3, [r7, #10]
 8001598:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 800159a:	4a34      	ldr	r2, [pc, #208]	@ (800166c <BNO080_parseInputReport+0x2cc>)
 800159c:	893b      	ldrh	r3, [r7, #8]
 800159e:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80015a0:	4a33      	ldr	r2, [pc, #204]	@ (8001670 <BNO080_parseInputReport+0x2d0>)
 80015a2:	8afb      	ldrh	r3, [r7, #22]
 80015a4:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80015a6:	4a33      	ldr	r2, [pc, #204]	@ (8001674 <BNO080_parseInputReport+0x2d4>)
 80015a8:	8abb      	ldrh	r3, [r7, #20]
 80015aa:	8013      	strh	r3, [r2, #0]
			break;
 80015ac:	e02b      	b.n	8001606 <BNO080_parseInputReport+0x266>
			stepCount = data3; //Bytes 8/9
 80015ae:	4a32      	ldr	r2, [pc, #200]	@ (8001678 <BNO080_parseInputReport+0x2d8>)
 80015b0:	893b      	ldrh	r3, [r7, #8]
 80015b2:	8013      	strh	r3, [r2, #0]
			break;
 80015b4:	e027      	b.n	8001606 <BNO080_parseInputReport+0x266>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80015b8:	7a5a      	ldrb	r2, [r3, #9]
 80015ba:	4b30      	ldr	r3, [pc, #192]	@ (800167c <BNO080_parseInputReport+0x2dc>)
 80015bc:	701a      	strb	r2, [r3, #0]
			break;
 80015be:	e022      	b.n	8001606 <BNO080_parseInputReport+0x266>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80015c2:	7a9a      	ldrb	r2, [r3, #10]
 80015c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <BNO080_parseInputReport+0x2e0>)
 80015c6:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80015c8:	2300      	movs	r3, #0
 80015ca:	74fb      	strb	r3, [r7, #19]
 80015cc:	e00c      	b.n	80015e8 <BNO080_parseInputReport+0x248>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80015ce:	7cfb      	ldrb	r3, [r7, #19]
 80015d0:	f103 020b 	add.w	r2, r3, #11
 80015d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <BNO080_parseInputReport+0x2e4>)
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	7cfb      	ldrb	r3, [r7, #19]
 80015da:	440b      	add	r3, r1
 80015dc:	490e      	ldr	r1, [pc, #56]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80015de:	5c8a      	ldrb	r2, [r1, r2]
 80015e0:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80015e2:	7cfb      	ldrb	r3, [r7, #19]
 80015e4:	3301      	adds	r3, #1
 80015e6:	74fb      	strb	r3, [r7, #19]
 80015e8:	7cfb      	ldrb	r3, [r7, #19]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d9ef      	bls.n	80015ce <BNO080_parseInputReport+0x22e>
			break;
 80015ee:	e00a      	b.n	8001606 <BNO080_parseInputReport+0x266>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80015f2:	79db      	ldrb	r3, [r3, #7]
 80015f4:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b07      	cmp	r3, #7
 80015fa:	d103      	bne.n	8001604 <BNO080_parseInputReport+0x264>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <BNO080_parseInputReport+0x278>)
 80015fe:	7a9a      	ldrb	r2, [r3, #10]
 8001600:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <BNO080_parseInputReport+0x2e8>)
 8001602:	701a      	strb	r2, [r3, #0]
			break;
 8001604:	bf00      	nop
}
 8001606:	bf00      	nop
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200001f4 	.word	0x200001f4
 8001618:	200001f8 	.word	0x200001f8
 800161c:	200002ac 	.word	0x200002ac
 8001620:	20000284 	.word	0x20000284
 8001624:	2000027e 	.word	0x2000027e
 8001628:	20000280 	.word	0x20000280
 800162c:	20000282 	.word	0x20000282
 8001630:	2000028c 	.word	0x2000028c
 8001634:	20000286 	.word	0x20000286
 8001638:	20000288 	.word	0x20000288
 800163c:	2000028a 	.word	0x2000028a
 8001640:	20000294 	.word	0x20000294
 8001644:	2000028e 	.word	0x2000028e
 8001648:	20000290 	.word	0x20000290
 800164c:	20000292 	.word	0x20000292
 8001650:	2000029c 	.word	0x2000029c
 8001654:	20000296 	.word	0x20000296
 8001658:	20000298 	.word	0x20000298
 800165c:	2000029a 	.word	0x2000029a
 8001660:	200002a8 	.word	0x200002a8
 8001664:	2000029e 	.word	0x2000029e
 8001668:	200002a0 	.word	0x200002a0
 800166c:	200002a2 	.word	0x200002a2
 8001670:	200002a4 	.word	0x200002a4
 8001674:	200002a6 	.word	0x200002a6
 8001678:	200002aa 	.word	0x200002aa
 800167c:	200002b0 	.word	0x200002b0
 8001680:	200002b1 	.word	0x200002b1
 8001684:	200002b4 	.word	0x200002b4
 8001688:	200002b8 	.word	0x200002b8

0800168c <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 8001690:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <BNO080_getQuatI+0x24>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	b21b      	sxth	r3, r3
 8001696:	4a07      	ldr	r2, [pc, #28]	@ (80016b4 <BNO080_getQuatI+0x28>)
 8001698:	f9b2 2000 	ldrsh.w	r2, [r2]
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f857 	bl	8001754 <BNO080_qToFloat>
 80016a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000029e 	.word	0x2000029e
 80016b4:	20000000 	.word	0x20000000

080016b8 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <BNO080_getQuatJ+0x24>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <BNO080_getQuatJ+0x28>)
 80016c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f841 	bl	8001754 <BNO080_qToFloat>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200002a0 	.word	0x200002a0
 80016e0:	20000000 	.word	0x20000000

080016e4 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <BNO080_getQuatK+0x24>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4a07      	ldr	r2, [pc, #28]	@ (800170c <BNO080_getQuatK+0x28>)
 80016f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f82b 	bl	8001754 <BNO080_qToFloat>
 80016fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200002a2 	.word	0x200002a2
 800170c:	20000000 	.word	0x20000000

08001710 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <BNO080_getQuatReal+0x24>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <BNO080_getQuatReal+0x28>)
 800171c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f815 	bl	8001754 <BNO080_qToFloat>
 800172a:	eef0 7a40 	vmov.f32	s15, s0
}
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200002a4 	.word	0x200002a4
 8001738:	20000000 	.word	0x20000000

0800173c <BNO080_getQuatAccuracy>:
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
}

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001740:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <BNO080_getQuatAccuracy+0x14>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	200002a8 	.word	0x200002a8

08001754 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	ed2d 8b02 	vpush	{d8}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	460a      	mov	r2, r1
 8001762:	80fb      	strh	r3, [r7, #6]
 8001764:	4613      	mov	r3, r2
 8001766:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001774:	797b      	ldrb	r3, [r7, #5]
 8001776:	425b      	negs	r3, r3
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001780:	eef0 0a67 	vmov.f32	s1, s15
 8001784:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001788:	f005 fd7a 	bl	8007280 <powf>
 800178c:	eef0 7a40 	vmov.f32	s15, s0
 8001790:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	ecbd 8b02 	vpop	{d8}
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	2200      	movs	r2, #0
 80017b0:	4619      	mov	r1, r3
 80017b2:	2005      	movs	r0, #5
 80017b4:	f000 f804 	bl	80017c0 <BNO080_setFeatureCommand>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 80017d0:	22fd      	movs	r2, #253	@ 0xfd
 80017d2:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80017d4:	4a22      	ldr	r2, [pc, #136]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80017e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 80017f2:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 80017fc:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 8001806:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	0e1b      	lsrs	r3, r3, #24
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 8001810:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 8001814:	2200      	movs	r2, #0
 8001816:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 800181a:	2200      	movs	r2, #0
 800181c:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 8001820:	2200      	movs	r2, #0
 8001822:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 8001826:	2200      	movs	r2, #0
 8001828:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 8001830:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 800183a:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	0c1b      	lsrs	r3, r3, #16
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 8001844:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0e1b      	lsrs	r3, r3, #24
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <BNO080_setFeatureCommand+0xa0>)
 800184e:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001850:	2111      	movs	r1, #17
 8001852:	2002      	movs	r0, #2
 8001854:	f000 f89c 	bl	8001990 <BNO080_sendPacket>
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200001f8 	.word	0x200001f8

08001864 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e00c      	b.n	800188a <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001870:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001874:	480b      	ldr	r0, [pc, #44]	@ (80018a4 <BNO080_waitForSPI+0x40>)
 8001876:	f7ff fb96 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001880:	2301      	movs	r3, #1
 8001882:	e00a      	b.n	800189a <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3301      	adds	r3, #1
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d1ee      	bne.n	8001870 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <BNO080_waitForSPI+0x44>)
 8001894:	f003 fd54 	bl	8005340 <puts>
	return (0);
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40020800 	.word	0x40020800
 80018a8:	08007f78 	.word	0x08007f78

080018ac <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80018b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018b6:	4832      	ldr	r0, [pc, #200]	@ (8001980 <BNO080_receivePacket+0xd4>)
 80018b8:	f7ff fb75 	bl	8000fa6 <LL_GPIO_IsInputPinSet>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 80018c2:	2300      	movs	r3, #0
 80018c4:	e057      	b.n	8001976 <BNO080_receivePacket+0xca>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 80018c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ca:	482e      	ldr	r0, [pc, #184]	@ (8001984 <BNO080_receivePacket+0xd8>)
 80018cc:	f7ff fb8e 	bl	8000fec <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff fcf9 	bl	80012c8 <SPI2_SendByte>
 80018d6:	4603      	mov	r3, r0
 80018d8:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff fcf4 	bl	80012c8 <SPI2_SendByte>
 80018e0:	4603      	mov	r3, r0
 80018e2:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fcef 	bl	80012c8 <SPI2_SendByte>
 80018ea:	4603      	mov	r3, r0
 80018ec:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fcea 	bl	80012c8 <SPI2_SendByte>
 80018f4:	4603      	mov	r3, r0
 80018f6:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80018f8:	4a23      	ldr	r2, [pc, #140]	@ (8001988 <BNO080_receivePacket+0xdc>)
 80018fa:	7b7b      	ldrb	r3, [r7, #13]
 80018fc:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80018fe:	4a22      	ldr	r2, [pc, #136]	@ (8001988 <BNO080_receivePacket+0xdc>)
 8001900:	7b3b      	ldrb	r3, [r7, #12]
 8001902:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001904:	4a20      	ldr	r2, [pc, #128]	@ (8001988 <BNO080_receivePacket+0xdc>)
 8001906:	7afb      	ldrb	r3, [r7, #11]
 8001908:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 800190a:	4a1f      	ldr	r2, [pc, #124]	@ (8001988 <BNO080_receivePacket+0xdc>)
 800190c:	7abb      	ldrb	r3, [r7, #10]
 800190e:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001910:	7b3b      	ldrb	r3, [r7, #12]
 8001912:	b21b      	sxth	r3, r3
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	b21a      	sxth	r2, r3
 8001918:	7b7b      	ldrb	r3, [r7, #13]
 800191a:	b21b      	sxth	r3, r3
 800191c:	4313      	orrs	r3, r2
 800191e:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001920:	893b      	ldrh	r3, [r7, #8]
 8001922:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001926:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001928:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <BNO080_receivePacket+0x88>
	{
		//Packet is empty
		return (0); //All done
 8001930:	2300      	movs	r3, #0
 8001932:	e020      	b.n	8001976 <BNO080_receivePacket+0xca>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001934:	893b      	ldrh	r3, [r7, #8]
 8001936:	3b04      	subs	r3, #4
 8001938:	b29b      	uxth	r3, r3
 800193a:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800193c:	2300      	movs	r3, #0
 800193e:	81fb      	strh	r3, [r7, #14]
 8001940:	e00e      	b.n	8001960 <BNO080_receivePacket+0xb4>
	{
		incoming = SPI2_SendByte(0xFF);
 8001942:	20ff      	movs	r0, #255	@ 0xff
 8001944:	f7ff fcc0 	bl	80012c8 <SPI2_SendByte>
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001950:	d803      	bhi.n	800195a <BNO080_receivePacket+0xae>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	490d      	ldr	r1, [pc, #52]	@ (800198c <BNO080_receivePacket+0xe0>)
 8001956:	79fa      	ldrb	r2, [r7, #7]
 8001958:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	3301      	adds	r3, #1
 800195e:	81fb      	strh	r3, [r7, #14]
 8001960:	89fa      	ldrh	r2, [r7, #14]
 8001962:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	dbeb      	blt.n	8001942 <BNO080_receivePacket+0x96>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 800196a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800196e:	4805      	ldr	r0, [pc, #20]	@ (8001984 <BNO080_receivePacket+0xd8>)
 8001970:	f7ff fb2e 	bl	8000fd0 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020800 	.word	0x40020800
 8001984:	40020400 	.word	0x40020400
 8001988:	200001f4 	.word	0x200001f4
 800198c:	200001f8 	.word	0x200001f8

08001990 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	460a      	mov	r2, r1
 800199a:	71fb      	strb	r3, [r7, #7]
 800199c:	4613      	mov	r3, r2
 800199e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	3304      	adds	r3, #4
 80019a4:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 80019a6:	f7ff ff5d 	bl	8001864 <BNO080_waitForSPI>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 80019b0:	2300      	movs	r3, #0
 80019b2:	e032      	b.n	8001a1a <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 80019b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019b8:	481a      	ldr	r0, [pc, #104]	@ (8001a24 <BNO080_sendPacket+0x94>)
 80019ba:	f7ff fb17 	bl	8000fec <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 80019be:	7bbb      	ldrb	r3, [r7, #14]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fc81 	bl	80012c8 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	121b      	asrs	r3, r3, #8
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fc7b 	bl	80012c8 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fc77 	bl	80012c8 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4a12      	ldr	r2, [pc, #72]	@ (8001a28 <BNO080_sendPacket+0x98>)
 80019de:	5cd2      	ldrb	r2, [r2, r3]
 80019e0:	1c51      	adds	r1, r2, #1
 80019e2:	b2c8      	uxtb	r0, r1
 80019e4:	4910      	ldr	r1, [pc, #64]	@ (8001a28 <BNO080_sendPacket+0x98>)
 80019e6:	54c8      	strb	r0, [r1, r3]
 80019e8:	4610      	mov	r0, r2
 80019ea:	f7ff fc6d 	bl	80012c8 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e008      	b.n	8001a06 <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <BNO080_sendPacket+0x9c>)
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fc64 	bl	80012c8 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	3301      	adds	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d3f2      	bcc.n	80019f4 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001a0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a12:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <BNO080_sendPacket+0x94>)
 8001a14:	f7ff fadc 	bl	8000fd0 <LL_GPIO_SetOutputPin>

	return (1);
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40020400 	.word	0x40020400
 8001a28:	20000278 	.word	0x20000278
 8001a2c:	200001f8 	.word	0x200001f8

08001a30 <Quaternion_Update>:
float BNO080_Pitch;
float BNO080_Yaw;

// update our quaternion value passed by MotionEngine software
void Quaternion_Update(float *q)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]); // normalize the quaternion
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	ed93 7a00 	vldr	s14, [r3]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	edd3 6a00 	vldr	s13, [r3]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3304      	adds	r3, #4
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3308      	adds	r3, #8
 8001a64:	edd3 6a00 	vldr	s13, [r3]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	330c      	adds	r3, #12
 8001a7c:	edd3 6a00 	vldr	s13, [r3]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	330c      	adds	r3, #12
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	f000 f90e 	bl	8001cb4 <invSqrt>
 8001a98:	ed87 0a07 	vstr	s0, [r7, #28]

	q1 = q[0] * norm; // x
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aaa:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; // y
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; // z
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3308      	adds	r3, #8
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad2:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; // w
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	330c      	adds	r3, #12
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae6:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Roll = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8001aea:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001af2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af6:	edd7 6a06 	vldr	s13, [r7, #24]
 8001afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b06:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b0e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b36:	eef0 0a67 	vmov.f32	s1, s15
 8001b3a:	eeb0 0a66 	vmov.f32	s0, s13
 8001b3e:	f005 fb9d 	bl	800727c <atan2f>
 8001b42:	eef0 7a40 	vmov.f32	s15, s0
 8001b46:	4b55      	ldr	r3, [pc, #340]	@ (8001c9c <Quaternion_Update+0x26c>)
 8001b48:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Pitch = -asinf(2.0f * (q2*q4 - q1*q3));
 8001b4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b58:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b70:	f005 fb58 	bl	8007224 <asinf>
 8001b74:	eef0 7a40 	vmov.f32	s15, s0
 8001b78:	eef1 7a67 	vneg.f32	s15, s15
 8001b7c:	4b48      	ldr	r3, [pc, #288]	@ (8001ca0 <Quaternion_Update+0x270>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8001b82:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ba2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ba6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001baa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	eef0 0a67 	vmov.f32	s1, s15
 8001bd2:	eeb0 0a66 	vmov.f32	s0, s13
 8001bd6:	f005 fb51 	bl	800727c <atan2f>
 8001bda:	eef0 7a40 	vmov.f32	s15, s0
 8001bde:	4b31      	ldr	r3, [pc, #196]	@ (8001ca4 <Quaternion_Update+0x274>)
 8001be0:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Roll *= _180_DIV_PI;
 8001be4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c9c <Quaternion_Update+0x26c>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001ca8 <Quaternion_Update+0x278>
 8001bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <Quaternion_Update+0x26c>)
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Pitch *= _180_DIV_PI;
 8001bf8:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <Quaternion_Update+0x270>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001ca8 <Quaternion_Update+0x278>
 8001c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c06:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <Quaternion_Update+0x270>)
 8001c08:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw *= _180_DIV_PI;
 8001c0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <Quaternion_Update+0x274>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001ca8 <Quaternion_Update+0x278>
 8001c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <Quaternion_Update+0x274>)
 8001c1c:	edc3 7a00 	vstr	s15, [r3]

	if (BNO080_Yaw >= 0)
 8001c20:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <Quaternion_Update+0x274>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	db0a      	blt.n	8001c46 <Quaternion_Update+0x216>
	{
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8001c30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <Quaternion_Update+0x274>)
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001cac <Quaternion_Update+0x27c>
 8001c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <Quaternion_Update+0x274>)
 8001c40:	edc3 7a00 	vstr	s15, [r3]
 8001c44:	e007      	b.n	8001c56 <Quaternion_Update+0x226>
	}
	else
	{
		BNO080_Yaw = -BNO080_Yaw;
 8001c46:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <Quaternion_Update+0x274>)
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	eef1 7a67 	vneg.f32	s15, s15
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <Quaternion_Update+0x274>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
	}

	if (BNO080_Pitch >= 0)
 8001c56:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <Quaternion_Update+0x270>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	db0a      	blt.n	8001c7c <Quaternion_Update+0x24c>
	{
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <Quaternion_Update+0x270>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001cb0 <Quaternion_Update+0x280>
 8001c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <Quaternion_Update+0x270>)
 8001c76:	edc3 7a00 	vstr	s15, [r3]
	}
	else
	{
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
	}
}
 8001c7a:	e00b      	b.n	8001c94 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <Quaternion_Update+0x270>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001cb0 <Quaternion_Update+0x280>
 8001c86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c8a:	eef1 7a67 	vneg.f32	s15, s15
 8001c8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <Quaternion_Update+0x270>)
 8001c90:	edc3 7a00 	vstr	s15, [r3]
}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200002bc 	.word	0x200002bc
 8001ca0:	200002c0 	.word	0x200002c0
 8001ca4:	200002c4 	.word	0x200002c4
 8001ca8:	42652ee1 	.word	0x42652ee1
 8001cac:	43b40000 	.word	0x43b40000
 8001cb0:	43340000 	.word	0x43340000

08001cb4 <invSqrt>:

// fast inverse square-root borrowed from wiki

float invSqrt(float x)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfX = 0.5f * x;
 8001cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cca:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	105a      	asrs	r2, r3, #1
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <invSqrt+0x74>)
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfX * y * y));
 8001cec:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d00:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d10:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	ee07 3a90 	vmov	s15, r3
}
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	5f3759df 	.word	0x5f3759df

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_SPI_SetStandard>:
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f023 0210 	bic.w	r2, r3, #16
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	605a      	str	r2, [r3, #4]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	601a      	str	r2, [r3, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	601a      	str	r2, [r3, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1a      	ldr	r2, [r3, #32]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	621a      	str	r2, [r3, #32]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1a      	ldr	r2, [r3, #32]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	401a      	ands	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	621a      	str	r2, [r3, #32]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d01c      	beq.n	8001f36 <LL_TIM_OC_EnableFast+0x4a>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d017      	beq.n	8001f32 <LL_TIM_OC_EnableFast+0x46>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d012      	beq.n	8001f2e <LL_TIM_OC_EnableFast+0x42>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b40      	cmp	r3, #64	@ 0x40
 8001f0c:	d00d      	beq.n	8001f2a <LL_TIM_OC_EnableFast+0x3e>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f14:	d007      	beq.n	8001f26 <LL_TIM_OC_EnableFast+0x3a>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1c:	d101      	bne.n	8001f22 <LL_TIM_OC_EnableFast+0x36>
 8001f1e:	2305      	movs	r3, #5
 8001f20:	e00a      	b.n	8001f38 <LL_TIM_OC_EnableFast+0x4c>
 8001f22:	2306      	movs	r3, #6
 8001f24:	e008      	b.n	8001f38 <LL_TIM_OC_EnableFast+0x4c>
 8001f26:	2304      	movs	r3, #4
 8001f28:	e006      	b.n	8001f38 <LL_TIM_OC_EnableFast+0x4c>
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e004      	b.n	8001f38 <LL_TIM_OC_EnableFast+0x4c>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e002      	b.n	8001f38 <LL_TIM_OC_EnableFast+0x4c>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_TIM_OC_EnableFast+0x4c>
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	4619      	mov	r1, r3
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <LL_TIM_OC_EnableFast+0x80>)
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
 8001f46:	440b      	add	r3, r1
 8001f48:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	4907      	ldr	r1, [pc, #28]	@ (8001f70 <LL_TIM_OC_EnableFast+0x84>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	4619      	mov	r1, r3
 8001f56:	2304      	movs	r3, #4
 8001f58:	408b      	lsls	r3, r1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	601a      	str	r2, [r3, #0]

}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	08007f98 	.word	0x08007f98
 8001f70:	08007fa0 	.word	0x08007fa0

08001f74 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d01c      	beq.n	8001fbe <LL_TIM_OC_EnablePreload+0x4a>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d017      	beq.n	8001fba <LL_TIM_OC_EnablePreload+0x46>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d012      	beq.n	8001fb6 <LL_TIM_OC_EnablePreload+0x42>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b40      	cmp	r3, #64	@ 0x40
 8001f94:	d00d      	beq.n	8001fb2 <LL_TIM_OC_EnablePreload+0x3e>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f9c:	d007      	beq.n	8001fae <LL_TIM_OC_EnablePreload+0x3a>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa4:	d101      	bne.n	8001faa <LL_TIM_OC_EnablePreload+0x36>
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	e00a      	b.n	8001fc0 <LL_TIM_OC_EnablePreload+0x4c>
 8001faa:	2306      	movs	r3, #6
 8001fac:	e008      	b.n	8001fc0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e006      	b.n	8001fc0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e004      	b.n	8001fc0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e002      	b.n	8001fc0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3318      	adds	r3, #24
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <LL_TIM_OC_EnablePreload+0x80>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	440b      	add	r3, r1
 8001fd0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	4907      	ldr	r1, [pc, #28]	@ (8001ff8 <LL_TIM_OC_EnablePreload+0x84>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	2308      	movs	r3, #8
 8001fe0:	408b      	lsls	r3, r1
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	08007f98 	.word	0x08007f98
 8001ff8:	08007fa0 	.word	0x08007fa0

08001ffc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800200e:	f023 0307 	bic.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	609a      	str	r2, [r3, #8]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	605a      	str	r2, [r3, #4]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	60da      	str	r2, [r3, #12]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	615a      	str	r2, [r3, #20]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	@ 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	330c      	adds	r3, #12
 80020c4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	e853 3f00 	ldrex	r3, [r3]
 80020cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f043 0320 	orr.w	r3, r3, #32
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	330c      	adds	r3, #12
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	61ba      	str	r2, [r7, #24]
 80020de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e0:	6979      	ldr	r1, [r7, #20]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	e841 2300 	strex	r3, r2, [r1]
 80020e8:	613b      	str	r3, [r7, #16]
   return(result);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e7      	bne.n	80020c0 <LL_USART_EnableIT_RXNE+0x8>
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3724      	adds	r7, #36	@ 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	605a      	str	r2, [r3, #4]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_GPIO_ResetOutputPin>:
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	041a      	lsls	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	619a      	str	r2, [r3, #24]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <LL_AHB1_GRP1_EnableClock>:
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002146:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002148:	4907      	ldr	r1, [pc, #28]	@ (8002168 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4313      	orrs	r3, r2
 800214e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4013      	ands	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40023800 	.word	0x40023800

0800216c <LL_APB1_GRP1_EnableClock>:
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002178:	4907      	ldr	r1, [pc, #28]	@ (8002198 <LL_APB1_GRP1_EnableClock+0x2c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4313      	orrs	r3, r2
 800217e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40023800 	.word	0x40023800

0800219c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80021a4:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021a8:	4907      	ldr	r1, [pc, #28]	@ (80021c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4013      	ands	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40023800 	.word	0x40023800

080021cc <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i ++)
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e00d      	b.n	80021fa <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p + i));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	4808      	ldr	r0, [pc, #32]	@ (800220c <_write+0x40>)
 80021ea:	f7ff ff88 	bl	80020fe <LL_USART_TransmitData8>
		HAL_Delay(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 fc62 	bl	8002ab8 <HAL_Delay>
	for (int i = 0; i < len; i ++)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dbed      	blt.n	80021de <_write+0x12>
	}
	return len;
 8002202:	687b      	ldr	r3, [r7, #4]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40011400 	.word	0x40011400

08002210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002216:	f000 fbdd 	bl	80029d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800221a:	f000 f895 	bl	8002348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221e:	f000 fa23 	bl	8002668 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002222:	f000 f94f 	bl	80024c4 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002226:	f000 f9bf 	bl	80025a8 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 800222a:	f000 f8f7 	bl	800241c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800222e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002232:	483e      	ldr	r0, [pc, #248]	@ (800232c <main+0x11c>)
 8002234:	f7ff fe36 	bl	8001ea4 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM3);
 8002238:	483c      	ldr	r0, [pc, #240]	@ (800232c <main+0x11c>)
 800223a:	f7ff fe13 	bl	8001e64 <LL_TIM_EnableCounter>

  TIM3->PSC = 2000;
 800223e:	4b3b      	ldr	r3, [pc, #236]	@ (800232c <main+0x11c>)
 8002240:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8002246:	2064      	movs	r0, #100	@ 0x64
 8002248:	f000 fc36 	bl	8002ab8 <HAL_Delay>
  TIM3->PSC = 1500;
 800224c:	4b37      	ldr	r3, [pc, #220]	@ (800232c <main+0x11c>)
 800224e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002252:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8002254:	2064      	movs	r0, #100	@ 0x64
 8002256:	f000 fc2f 	bl	8002ab8 <HAL_Delay>
  TIM3->PSC = 1000;
 800225a:	4b34      	ldr	r3, [pc, #208]	@ (800232c <main+0x11c>)
 800225c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002260:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8002262:	2064      	movs	r0, #100	@ 0x64
 8002264:	f000 fc28 	bl	8002ab8 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8002268:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800226c:	482f      	ldr	r0, [pc, #188]	@ (800232c <main+0x11c>)
 800226e:	f7ff fe2a 	bl	8001ec6 <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);
 8002272:	482f      	ldr	r0, [pc, #188]	@ (8002330 <main+0x120>)
 8002274:	f7ff ff20 	bl	80020b8 <LL_USART_EnableIT_RXNE>

  BNO080_Initialization();
 8002278:	f7fe ffb2 	bl	80011e0 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 800227c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002280:	f7ff fa8f 	bl	80017a2 <BNO080_enableRotationVector>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    if (BNO080_dataAvailable())
 8002284:	f7ff f842 	bl	800130c <BNO080_dataAvailable>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0fa      	beq.n	8002284 <main+0x74>
    {
    	// read in raw data from sensor and convert it into quaternion components
    	q[0] = BNO080_getQuatI();
 800228e:	f7ff f9fd 	bl	800168c <BNO080_getQuatI>
 8002292:	eef0 7a40 	vmov.f32	s15, s0
 8002296:	edc7 7a01 	vstr	s15, [r7, #4]
    	q[1] = BNO080_getQuatJ();
 800229a:	f7ff fa0d 	bl	80016b8 <BNO080_getQuatJ>
 800229e:	eef0 7a40 	vmov.f32	s15, s0
 80022a2:	edc7 7a02 	vstr	s15, [r7, #8]
    	q[2] = BNO080_getQuatK();
 80022a6:	f7ff fa1d 	bl	80016e4 <BNO080_getQuatK>
 80022aa:	eef0 7a40 	vmov.f32	s15, s0
 80022ae:	edc7 7a03 	vstr	s15, [r7, #12]
    	q[3] = BNO080_getQuatReal();
 80022b2:	f7ff fa2d 	bl	8001710 <BNO080_getQuatReal>
 80022b6:	eef0 7a40 	vmov.f32	s15, s0
 80022ba:	edc7 7a04 	vstr	s15, [r7, #16]
    	quatRadianAccuracy = BNO080_getQuatAccuracy();
 80022be:	f7ff fa3d 	bl	800173c <BNO080_getQuatAccuracy>
 80022c2:	4603      	mov	r3, r0
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022cc:	edc7 7a05 	vstr	s15, [r7, #20]

    	// update roll, pitch, and yaw values of sensor
    	Quaternion_Update(&q[0]);
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fbac 	bl	8001a30 <Quaternion_Update>

    	printf("%d, %d, %d\n", (int) (BNO080_Roll * 100), (int) (BNO080_Pitch * 100), (int) (BNO080_Yaw * 100));
 80022d8:	4b16      	ldr	r3, [pc, #88]	@ (8002334 <main+0x124>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002338 <main+0x128>
 80022e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80022ea:	4b14      	ldr	r3, [pc, #80]	@ (800233c <main+0x12c>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002338 <main+0x128>
 80022f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f8:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80022fc:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <main+0x130>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002338 <main+0x128>
 8002306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230e:	ee17 3a90 	vmov	r3, s15
 8002312:	ee16 2a10 	vmov	r2, s12
 8002316:	ee16 1a90 	vmov	r1, s13
 800231a:	480a      	ldr	r0, [pc, #40]	@ (8002344 <main+0x134>)
 800231c:	f002 ffa8 	bl	8005270 <iprintf>

    	HAL_Delay(500);
 8002320:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002324:	f000 fbc8 	bl	8002ab8 <HAL_Delay>
    if (BNO080_dataAvailable())
 8002328:	e7ac      	b.n	8002284 <main+0x74>
 800232a:	bf00      	nop
 800232c:	40000400 	.word	0x40000400
 8002330:	40011400 	.word	0x40011400
 8002334:	200002bc 	.word	0x200002bc
 8002338:	42c80000 	.word	0x42c80000
 800233c:	200002c0 	.word	0x200002c0
 8002340:	200002c4 	.word	0x200002c4
 8002344:	08007f8c 	.word	0x08007f8c

08002348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b094      	sub	sp, #80	@ 0x50
 800234c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234e:	f107 0320 	add.w	r3, r7, #32
 8002352:	2230      	movs	r2, #48	@ 0x30
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f003 f8d2 	bl	8005500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <SystemClock_Config+0xcc>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	4a27      	ldr	r2, [pc, #156]	@ (8002414 <SystemClock_Config+0xcc>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237a:	6413      	str	r3, [r2, #64]	@ 0x40
 800237c:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <SystemClock_Config+0xcc>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002388:	2300      	movs	r3, #0
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	4b22      	ldr	r3, [pc, #136]	@ (8002418 <SystemClock_Config+0xd0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a21      	ldr	r2, [pc, #132]	@ (8002418 <SystemClock_Config+0xd0>)
 8002392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <SystemClock_Config+0xd0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023a4:	2301      	movs	r3, #1
 80023a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ae:	2302      	movs	r3, #2
 80023b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023b8:	2304      	movs	r3, #4
 80023ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023bc:	23a8      	movs	r3, #168	@ 0xa8
 80023be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023c0:	2302      	movs	r3, #2
 80023c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023c4:	2304      	movs	r3, #4
 80023c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c8:	f107 0320 	add.w	r3, r7, #32
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fc7d 	bl	8002ccc <HAL_RCC_OscConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023d8:	f000 f9b2 	bl	8002740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023dc:	230f      	movs	r3, #15
 80023de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e0:	2302      	movs	r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2105      	movs	r1, #5
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fede 	bl	80031bc <HAL_RCC_ClockConfig>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002406:	f000 f99b 	bl	8002740 <Error_Handler>
  }
}
 800240a:	bf00      	nop
 800240c:	3750      	adds	r7, #80	@ 0x50
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40007000 	.word	0x40007000

0800241c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b090      	sub	sp, #64	@ 0x40
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002422:	f107 0318 	add.w	r3, r7, #24
 8002426:	2228      	movs	r2, #40	@ 0x28
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f003 f868 	bl	8005500 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	463b      	mov	r3, r7
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	611a      	str	r2, [r3, #16]
 800243e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002440:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002444:	f7ff fe92 	bl	800216c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002448:	2002      	movs	r0, #2
 800244a:	f7ff fe77 	bl	800213c <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800244e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002452:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002454:	2302      	movs	r3, #2
 8002456:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002464:	2305      	movs	r3, #5
 8002466:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002468:	463b      	mov	r3, r7
 800246a:	4619      	mov	r1, r3
 800246c:	4813      	ldr	r0, [pc, #76]	@ (80024bc <MX_SPI2_Init+0xa0>)
 800246e:	f001 f9dc 	bl	800382a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002476:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800247a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800247c:	2300      	movs	r3, #0
 800247e:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002480:	2302      	movs	r3, #2
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002484:	2301      	movs	r3, #1
 8002486:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800248c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800248e:	2318      	movs	r3, #24
 8002490:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002492:	2300      	movs	r3, #0
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800249a:	230a      	movs	r3, #10
 800249c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800249e:	f107 0318 	add.w	r3, r7, #24
 80024a2:	4619      	mov	r1, r3
 80024a4:	4806      	ldr	r0, [pc, #24]	@ (80024c0 <MX_SPI2_Init+0xa4>)
 80024a6:	f001 fb9e 	bl	8003be6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80024aa:	2100      	movs	r1, #0
 80024ac:	4804      	ldr	r0, [pc, #16]	@ (80024c0 <MX_SPI2_Init+0xa4>)
 80024ae:	f7ff fcc6 	bl	8001e3e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024b2:	bf00      	nop
 80024b4:	3740      	adds	r7, #64	@ 0x40
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40020400 	.word	0x40020400
 80024c0:	40003800 	.word	0x40003800

080024c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b094      	sub	sp, #80	@ 0x50
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	2220      	movs	r2, #32
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 f80c 	bl	8005500 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	611a      	str	r2, [r3, #16]
 80024f6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80024f8:	2002      	movs	r0, #2
 80024fa:	f7ff fe37 	bl	800216c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 80024fe:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002502:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002504:	2300      	movs	r3, #0
 8002506:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 20;
 8002508:	2314      	movs	r3, #20
 800250a:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800250c:	2300      	movs	r3, #0
 800250e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002510:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002514:	4619      	mov	r1, r3
 8002516:	4822      	ldr	r0, [pc, #136]	@ (80025a0 <MX_TIM3_Init+0xdc>)
 8002518:	f001 fc2a 	bl	8003d70 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800251c:	4820      	ldr	r0, [pc, #128]	@ (80025a0 <MX_TIM3_Init+0xdc>)
 800251e:	f7ff fcb1 	bl	8001e84 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002522:	2100      	movs	r1, #0
 8002524:	481e      	ldr	r0, [pc, #120]	@ (80025a0 <MX_TIM3_Init+0xdc>)
 8002526:	f7ff fd69 	bl	8001ffc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800252a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800252e:	481c      	ldr	r0, [pc, #112]	@ (80025a0 <MX_TIM3_Init+0xdc>)
 8002530:	f7ff fd20 	bl	8001f74 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002534:	2360      	movs	r3, #96	@ 0x60
 8002536:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8002540:	230a      	movs	r3, #10
 8002542:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	461a      	mov	r2, r3
 800254e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002552:	4813      	ldr	r0, [pc, #76]	@ (80025a0 <MX_TIM3_Init+0xdc>)
 8002554:	f001 fca6 	bl	8003ea4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002558:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800255c:	4810      	ldr	r0, [pc, #64]	@ (80025a0 <MX_TIM3_Init+0xdc>)
 800255e:	f7ff fcc5 	bl	8001eec <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002562:	2100      	movs	r1, #0
 8002564:	480e      	ldr	r0, [pc, #56]	@ (80025a0 <MX_TIM3_Init+0xdc>)
 8002566:	f7ff fd5e 	bl	8002026 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800256a:	480d      	ldr	r0, [pc, #52]	@ (80025a0 <MX_TIM3_Init+0xdc>)
 800256c:	f7ff fd6e 	bl	800204c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002570:	2002      	movs	r0, #2
 8002572:	f7ff fde3 	bl	800213c <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB1   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002576:	2302      	movs	r3, #2
 8002578:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800257a:	2302      	movs	r3, #2
 800257c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800258a:	2302      	movs	r3, #2
 800258c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4804      	ldr	r0, [pc, #16]	@ (80025a4 <MX_TIM3_Init+0xe0>)
 8002594:	f001 f949 	bl	800382a <LL_GPIO_Init>

}
 8002598:	bf00      	nop
 800259a:	3750      	adds	r7, #80	@ 0x50
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40000400 	.word	0x40000400
 80025a4:	40020400 	.word	0x40020400

080025a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08e      	sub	sp, #56	@ 0x38
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
 80025bc:	611a      	str	r2, [r3, #16]
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
 80025d0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80025d2:	2020      	movs	r0, #32
 80025d4:	f7ff fde2 	bl	800219c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80025d8:	2004      	movs	r0, #4
 80025da:	f7ff fdaf 	bl	800213c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80025de:	23c0      	movs	r3, #192	@ 0xc0
 80025e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025e2:	2302      	movs	r3, #2
 80025e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80025f2:	2308      	movs	r3, #8
 80025f4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4819      	ldr	r0, [pc, #100]	@ (8002660 <MX_USART6_UART_Init+0xb8>)
 80025fc:	f001 f915 	bl	800382a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002600:	f7ff fb94 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8002604:	4603      	mov	r3, r0
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fbe4 	bl	8001dd8 <NVIC_EncodePriority>
 8002610:	4603      	mov	r3, r0
 8002612:	4619      	mov	r1, r3
 8002614:	2047      	movs	r0, #71	@ 0x47
 8002616:	f7ff fbb5 	bl	8001d84 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800261a:	2047      	movs	r0, #71	@ 0x47
 800261c:	f7ff fb94 	bl	8001d48 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002620:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002624:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800262e:	2300      	movs	r3, #0
 8002630:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002632:	230c      	movs	r3, #12
 8002634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002636:	2300      	movs	r3, #0
 8002638:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800263a:	2300      	movs	r3, #0
 800263c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800263e:	f107 031c 	add.w	r3, r7, #28
 8002642:	4619      	mov	r1, r3
 8002644:	4807      	ldr	r0, [pc, #28]	@ (8002664 <MX_USART6_UART_Init+0xbc>)
 8002646:	f002 f87b 	bl	8004740 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800264a:	4806      	ldr	r0, [pc, #24]	@ (8002664 <MX_USART6_UART_Init+0xbc>)
 800264c:	f7ff fd1e 	bl	800208c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002650:	4804      	ldr	r0, [pc, #16]	@ (8002664 <MX_USART6_UART_Init+0xbc>)
 8002652:	f7ff fd0b 	bl	800206c <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	3738      	adds	r7, #56	@ 0x38
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40020800 	.word	0x40020800
 8002664:	40011400 	.word	0x40011400

08002668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266e:	463b      	mov	r3, r7
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
 800267c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800267e:	2080      	movs	r0, #128	@ 0x80
 8002680:	f7ff fd5c 	bl	800213c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002684:	2004      	movs	r0, #4
 8002686:	f7ff fd59 	bl	800213c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800268a:	2002      	movs	r0, #2
 800268c:	f7ff fd56 	bl	800213c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002690:	2001      	movs	r0, #1
 8002692:	f7ff fd53 	bl	800213c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_9);
 8002696:	f240 2107 	movw	r1, #519	@ 0x207
 800269a:	4826      	ldr	r0, [pc, #152]	@ (8002734 <MX_GPIO_Init+0xcc>)
 800269c:	f7ff fd3e 	bl	800211c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 80026a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026a4:	4824      	ldr	r0, [pc, #144]	@ (8002738 <MX_GPIO_Init+0xd0>)
 80026a6:	f7ff fd39 	bl	800211c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80026aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026ae:	4823      	ldr	r0, [pc, #140]	@ (800273c <MX_GPIO_Init+0xd4>)
 80026b0:	f7ff fd34 	bl	800211c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_9;
 80026b4:	f240 2307 	movw	r3, #519	@ 0x207
 80026b8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80026ba:	2301      	movs	r3, #1
 80026bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ca:	463b      	mov	r3, r7
 80026cc:	4619      	mov	r1, r3
 80026ce:	4819      	ldr	r0, [pc, #100]	@ (8002734 <MX_GPIO_Init+0xcc>)
 80026d0:	f001 f8ab 	bl	800382a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80026d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80026da:	2301      	movs	r3, #1
 80026dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	463b      	mov	r3, r7
 80026ec:	4619      	mov	r1, r3
 80026ee:	4812      	ldr	r0, [pc, #72]	@ (8002738 <MX_GPIO_Init+0xd0>)
 80026f0:	f001 f89b 	bl	800382a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80026f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002702:	463b      	mov	r3, r7
 8002704:	4619      	mov	r1, r3
 8002706:	480b      	ldr	r0, [pc, #44]	@ (8002734 <MX_GPIO_Init+0xcc>)
 8002708:	f001 f88f 	bl	800382a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800270c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002710:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002712:	2301      	movs	r3, #1
 8002714:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	463b      	mov	r3, r7
 8002724:	4619      	mov	r1, r3
 8002726:	4805      	ldr	r0, [pc, #20]	@ (800273c <MX_GPIO_Init+0xd4>)
 8002728:	f001 f87f 	bl	800382a <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800272c:	bf00      	nop
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40020800 	.word	0x40020800
 8002738:	40020400 	.word	0x40020400
 800273c:	40020000 	.word	0x40020000

08002740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002744:	b672      	cpsid	i
}
 8002746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <Error_Handler+0x8>

0800274c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <HAL_MspInit+0x4c>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	4a0f      	ldr	r2, [pc, #60]	@ (8002798 <HAL_MspInit+0x4c>)
 800275c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002760:	6453      	str	r3, [r2, #68]	@ 0x44
 8002762:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <HAL_MspInit+0x4c>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <HAL_MspInit+0x4c>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	4a08      	ldr	r2, [pc, #32]	@ (8002798 <HAL_MspInit+0x4c>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277c:	6413      	str	r3, [r2, #64]	@ 0x40
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_MspInit+0x4c>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800

0800279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <NMI_Handler+0x4>

080027a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <HardFault_Handler+0x4>

080027ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <MemManage_Handler+0x4>

080027b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <BusFault_Handler+0x4>

080027bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <UsageFault_Handler+0x4>

080027c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f2:	f000 f941 	bl	8002a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}

080027fa <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_kill>:

int _kill(int pid, int sig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002822:	f002 febf 	bl	80055a4 <__errno>
 8002826:	4603      	mov	r3, r0
 8002828:	2216      	movs	r2, #22
 800282a:	601a      	str	r2, [r3, #0]
  return -1;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_exit>:

void _exit (int status)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffe7 	bl	8002818 <_kill>
  while (1) {}    /* Make sure we hang here */
 800284a:	bf00      	nop
 800284c:	e7fd      	b.n	800284a <_exit+0x12>

0800284e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e00a      	b.n	8002876 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002860:	f3af 8000 	nop.w
 8002864:	4601      	mov	r1, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	60ba      	str	r2, [r7, #8]
 800286c:	b2ca      	uxtb	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	dbf0      	blt.n	8002860 <_read+0x12>
  }

  return len;
 800287e:	687b      	ldr	r3, [r7, #4]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028b0:	605a      	str	r2, [r3, #4]
  return 0;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_isatty>:

int _isatty(int file)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f8:	4a14      	ldr	r2, [pc, #80]	@ (800294c <_sbrk+0x5c>)
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <_sbrk+0x60>)
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002904:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <_sbrk+0x64>)
 800290e:	4a12      	ldr	r2, [pc, #72]	@ (8002958 <_sbrk+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002912:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002920:	f002 fe40 	bl	80055a4 <__errno>
 8002924:	4603      	mov	r3, r0
 8002926:	220c      	movs	r2, #12
 8002928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	e009      	b.n	8002944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002936:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	4a05      	ldr	r2, [pc, #20]	@ (8002954 <_sbrk+0x64>)
 8002940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20020000 	.word	0x20020000
 8002950:	00000400 	.word	0x00000400
 8002954:	200002c8 	.word	0x200002c8
 8002958:	20000420 	.word	0x20000420

0800295c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <SystemInit+0x20>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002966:	4a05      	ldr	r2, [pc, #20]	@ (800297c <SystemInit+0x20>)
 8002968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800296c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002984:	f7ff ffea 	bl	800295c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002988:	480c      	ldr	r0, [pc, #48]	@ (80029bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800298a:	490d      	ldr	r1, [pc, #52]	@ (80029c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800298c:	4a0d      	ldr	r2, [pc, #52]	@ (80029c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002990:	e002      	b.n	8002998 <LoopCopyDataInit>

08002992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002996:	3304      	adds	r3, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800299c:	d3f9      	bcc.n	8002992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029a0:	4c0a      	ldr	r4, [pc, #40]	@ (80029cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a4:	e001      	b.n	80029aa <LoopFillZerobss>

080029a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a8:	3204      	adds	r2, #4

080029aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ac:	d3fb      	bcc.n	80029a6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80029ae:	f002 fdff 	bl	80055b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029b2:	f7ff fc2d 	bl	8002210 <main>
  bx  lr    
 80029b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80029c4:	08008394 	.word	0x08008394
  ldr r2, =_sbss
 80029c8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80029cc:	2000041c 	.word	0x2000041c

080029d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d0:	e7fe      	b.n	80029d0 <ADC_IRQHandler>
	...

080029d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <HAL_Init+0x40>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a14 <HAL_Init+0x40>)
 80029de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_Init+0x40>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <HAL_Init+0x40>)
 80029ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f0:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <HAL_Init+0x40>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a07      	ldr	r2, [pc, #28]	@ (8002a14 <HAL_Init+0x40>)
 80029f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029fc:	2003      	movs	r0, #3
 80029fe:	f000 f931 	bl	8002c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a02:	200f      	movs	r0, #15
 8002a04:	f000 f808 	bl	8002a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a08:	f7ff fea0 	bl	800274c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023c00 	.word	0x40023c00

08002a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a20:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_InitTick+0x54>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b12      	ldr	r3, [pc, #72]	@ (8002a70 <HAL_InitTick+0x58>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f93b 	bl	8002cb2 <HAL_SYSTICK_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00e      	b.n	8002a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b0f      	cmp	r3, #15
 8002a4a:	d80a      	bhi.n	8002a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f000 f911 	bl	8002c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a58:	4a06      	ldr	r2, [pc, #24]	@ (8002a74 <HAL_InitTick+0x5c>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000004 	.word	0x20000004
 8002a70:	2000000c 	.word	0x2000000c
 8002a74:	20000008 	.word	0x20000008

08002a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_IncTick+0x20>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_IncTick+0x24>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	4a04      	ldr	r2, [pc, #16]	@ (8002a9c <HAL_IncTick+0x24>)
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	2000000c 	.word	0x2000000c
 8002a9c:	200002cc 	.word	0x200002cc

08002aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <HAL_GetTick+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	200002cc 	.word	0x200002cc

08002ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7ff ffee 	bl	8002aa0 <HAL_GetTick>
 8002ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d005      	beq.n	8002ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <HAL_Delay+0x44>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ade:	bf00      	nop
 8002ae0:	f7ff ffde 	bl	8002aa0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8f7      	bhi.n	8002ae0 <HAL_Delay+0x28>
  {
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2000000c 	.word	0x2000000c

08002b00 <__NVIC_SetPriorityGrouping>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_SetPriority>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db0a      	blt.n	8002b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	490c      	ldr	r1, [pc, #48]	@ (8002bb0 <__NVIC_SetPriority+0x4c>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	440b      	add	r3, r1
 8002b88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b8c:	e00a      	b.n	8002ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4908      	ldr	r1, [pc, #32]	@ (8002bb4 <__NVIC_SetPriority+0x50>)
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	761a      	strb	r2, [r3, #24]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000e100 	.word	0xe000e100
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <NVIC_EncodePriority>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	@ 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f1c3 0307 	rsb	r3, r3, #7
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf28      	it	cs
 8002bd6:	2304      	movcs	r3, #4
 8002bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d902      	bls.n	8002be8 <NVIC_EncodePriority+0x30>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3b03      	subs	r3, #3
 8002be6:	e000      	b.n	8002bea <NVIC_EncodePriority+0x32>
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43d9      	mvns	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	4313      	orrs	r3, r2
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3724      	adds	r7, #36	@ 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c30:	d301      	bcc.n	8002c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00f      	b.n	8002c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c36:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <SysTick_Config+0x40>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3e:	210f      	movs	r1, #15
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	f7ff ff8e 	bl	8002b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <SysTick_Config+0x40>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <SysTick_Config+0x40>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	e000e010 	.word	0xe000e010

08002c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ff47 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c8c:	f7ff ff5c 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7ff ff8e 	bl	8002bb8 <NVIC_EncodePriority>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff5d 	bl	8002b64 <__NVIC_SetPriority>
}
 8002caa:	bf00      	nop
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffb0 	bl	8002c20 <SysTick_Config>
 8002cc0:	4603      	mov	r3, r0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e267      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d075      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cea:	4b88      	ldr	r3, [pc, #544]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d00c      	beq.n	8002d10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf6:	4b85      	ldr	r3, [pc, #532]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d112      	bne.n	8002d28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d02:	4b82      	ldr	r3, [pc, #520]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d0e:	d10b      	bne.n	8002d28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d10:	4b7e      	ldr	r3, [pc, #504]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d05b      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x108>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d157      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e242      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d30:	d106      	bne.n	8002d40 <HAL_RCC_OscConfig+0x74>
 8002d32:	4b76      	ldr	r3, [pc, #472]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a75      	ldr	r2, [pc, #468]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e01d      	b.n	8002d7c <HAL_RCC_OscConfig+0xb0>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x98>
 8002d4a:	4b70      	ldr	r3, [pc, #448]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6f      	ldr	r2, [pc, #444]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b6d      	ldr	r3, [pc, #436]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6c      	ldr	r2, [pc, #432]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_OscConfig+0xb0>
 8002d64:	4b69      	ldr	r3, [pc, #420]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a68      	ldr	r2, [pc, #416]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b66      	ldr	r3, [pc, #408]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a65      	ldr	r2, [pc, #404]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d013      	beq.n	8002dac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7ff fe8c 	bl	8002aa0 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7ff fe88 	bl	8002aa0 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	@ 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e207      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0xc0>
 8002daa:	e014      	b.n	8002dd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7ff fe78 	bl	8002aa0 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7ff fe74 	bl	8002aa0 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	@ 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e1f3      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	4b51      	ldr	r3, [pc, #324]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0xe8>
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d063      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002de2:	4b4a      	ldr	r3, [pc, #296]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dee:	4b47      	ldr	r3, [pc, #284]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d11c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfa:	4b44      	ldr	r3, [pc, #272]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	4b41      	ldr	r3, [pc, #260]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_RCC_OscConfig+0x152>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e1c7      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4937      	ldr	r1, [pc, #220]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	e03a      	b.n	8002eaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d020      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e3c:	4b34      	ldr	r3, [pc, #208]	@ (8002f10 <HAL_RCC_OscConfig+0x244>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e42:	f7ff fe2d 	bl	8002aa0 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4a:	f7ff fe29 	bl	8002aa0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e1a8      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e68:	4b28      	ldr	r3, [pc, #160]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4925      	ldr	r1, [pc, #148]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
 8002e7c:	e015      	b.n	8002eaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7e:	4b24      	ldr	r3, [pc, #144]	@ (8002f10 <HAL_RCC_OscConfig+0x244>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7ff fe0c 	bl	8002aa0 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8c:	f7ff fe08 	bl	8002aa0 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e187      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d036      	beq.n	8002f24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <HAL_RCC_OscConfig+0x248>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7ff fdec 	bl	8002aa0 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7ff fde8 	bl	8002aa0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e167      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ede:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <HAL_RCC_OscConfig+0x240>)
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x200>
 8002eea:	e01b      	b.n	8002f24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eec:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <HAL_RCC_OscConfig+0x248>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7ff fdd5 	bl	8002aa0 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	e00e      	b.n	8002f18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efa:	f7ff fdd1 	bl	8002aa0 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d907      	bls.n	8002f18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e150      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	42470000 	.word	0x42470000
 8002f14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	4b88      	ldr	r3, [pc, #544]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ea      	bne.n	8002efa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8097 	beq.w	8003060 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f36:	4b81      	ldr	r3, [pc, #516]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10f      	bne.n	8002f62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	4b7d      	ldr	r3, [pc, #500]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	4a7c      	ldr	r2, [pc, #496]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f52:	4b7a      	ldr	r3, [pc, #488]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f62:	4b77      	ldr	r3, [pc, #476]	@ (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d118      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6e:	4b74      	ldr	r3, [pc, #464]	@ (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a73      	ldr	r2, [pc, #460]	@ (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7ff fd91 	bl	8002aa0 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7ff fd8d 	bl	8002aa0 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e10c      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	4b6a      	ldr	r3, [pc, #424]	@ (8003140 <HAL_RCC_OscConfig+0x474>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x2ea>
 8002fa8:	4b64      	ldr	r3, [pc, #400]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fac:	4a63      	ldr	r2, [pc, #396]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb4:	e01c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x324>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x30c>
 8002fbe:	4b5f      	ldr	r3, [pc, #380]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc2:	4a5e      	ldr	r2, [pc, #376]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fca:	4b5c      	ldr	r3, [pc, #368]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	4a5b      	ldr	r2, [pc, #364]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x324>
 8002fd8:	4b58      	ldr	r3, [pc, #352]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	4a57      	ldr	r2, [pc, #348]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe4:	4b55      	ldr	r3, [pc, #340]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	4a54      	ldr	r2, [pc, #336]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8002fea:	f023 0304 	bic.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7ff fd52 	bl	8002aa0 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7ff fd4e 	bl	8002aa0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e0cb      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003016:	4b49      	ldr	r3, [pc, #292]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ee      	beq.n	8003000 <HAL_RCC_OscConfig+0x334>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003024:	f7ff fd3c 	bl	8002aa0 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302a:	e00a      	b.n	8003042 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7ff fd38 	bl	8002aa0 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0b5      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003042:	4b3e      	ldr	r3, [pc, #248]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ee      	bne.n	800302c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800304e:	7dfb      	ldrb	r3, [r7, #23]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4b39      	ldr	r3, [pc, #228]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	4a38      	ldr	r2, [pc, #224]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 800305a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800305e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a1 	beq.w	80031ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800306a:	4b34      	ldr	r3, [pc, #208]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b08      	cmp	r3, #8
 8003074:	d05c      	beq.n	8003130 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d141      	bne.n	8003102 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b31      	ldr	r3, [pc, #196]	@ (8003144 <HAL_RCC_OscConfig+0x478>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7ff fd0c 	bl	8002aa0 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7ff fd08 	bl	8002aa0 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e087      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	4b27      	ldr	r3, [pc, #156]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	019b      	lsls	r3, r3, #6
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	3b01      	subs	r3, #1
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	491b      	ldr	r1, [pc, #108]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <HAL_RCC_OscConfig+0x478>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7ff fce1 	bl	8002aa0 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7ff fcdd 	bl	8002aa0 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e05c      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f4:	4b11      	ldr	r3, [pc, #68]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x416>
 8003100:	e054      	b.n	80031ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <HAL_RCC_OscConfig+0x478>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7ff fcca 	bl	8002aa0 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003110:	f7ff fcc6 	bl	8002aa0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e045      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_RCC_OscConfig+0x470>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x444>
 800312e:	e03d      	b.n	80031ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e038      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
 800313c:	40023800 	.word	0x40023800
 8003140:	40007000 	.word	0x40007000
 8003144:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <HAL_RCC_OscConfig+0x4ec>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d028      	beq.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d121      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d11a      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800317e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003180:	4293      	cmp	r3, r2
 8003182:	d111      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	3b01      	subs	r3, #1
 8003192:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800

080031bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0cc      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b68      	ldr	r3, [pc, #416]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d90c      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b65      	ldr	r3, [pc, #404]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b63      	ldr	r3, [pc, #396]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0b8      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003210:	4b59      	ldr	r3, [pc, #356]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a58      	ldr	r2, [pc, #352]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800321a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003228:	4b53      	ldr	r3, [pc, #332]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4a52      	ldr	r2, [pc, #328]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003232:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b50      	ldr	r3, [pc, #320]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	494d      	ldr	r1, [pc, #308]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d044      	beq.n	80032dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b47      	ldr	r3, [pc, #284]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d119      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07f      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d003      	beq.n	800327a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003276:	2b03      	cmp	r3, #3
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b3f      	ldr	r3, [pc, #252]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e06f      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e067      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329a:	4b37      	ldr	r3, [pc, #220]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4934      	ldr	r1, [pc, #208]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ac:	f7ff fbf8 	bl	8002aa0 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b4:	f7ff fbf4 	bl	8002aa0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e04f      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 020c 	and.w	r2, r3, #12
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1eb      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b25      	ldr	r3, [pc, #148]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d20c      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b22      	ldr	r3, [pc, #136]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e032      	b.n	800336a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003310:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4916      	ldr	r1, [pc, #88]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800332e:	4b12      	ldr	r3, [pc, #72]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	490e      	ldr	r1, [pc, #56]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003342:	f000 f821 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003346:	4602      	mov	r2, r0
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	490a      	ldr	r1, [pc, #40]	@ (800337c <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	5ccb      	ldrb	r3, [r1, r3]
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800335e:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_ClockConfig+0x1c8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fb58 	bl	8002a18 <HAL_InitTick>

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023c00 	.word	0x40023c00
 8003378:	40023800 	.word	0x40023800
 800337c:	08007fa8 	.word	0x08007fa8
 8003380:	20000004 	.word	0x20000004
 8003384:	20000008 	.word	0x20000008

08003388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800338c:	b094      	sub	sp, #80	@ 0x50
 800338e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a0:	4b79      	ldr	r3, [pc, #484]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d00d      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x40>
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	f200 80e1 	bhi.w	8003574 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x34>
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d003      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ba:	e0db      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033bc:	4b73      	ldr	r3, [pc, #460]	@ (800358c <HAL_RCC_GetSysClockFreq+0x204>)
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033c0:	e0db      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c2:	4b73      	ldr	r3, [pc, #460]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x208>)
 80033c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033c6:	e0d8      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d063      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033de:	4b6a      	ldr	r3, [pc, #424]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	2200      	movs	r2, #0
 80033e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033f2:	2300      	movs	r3, #0
 80033f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033fa:	4622      	mov	r2, r4
 80033fc:	462b      	mov	r3, r5
 80033fe:	f04f 0000 	mov.w	r0, #0
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	0159      	lsls	r1, r3, #5
 8003408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800340c:	0150      	lsls	r0, r2, #5
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4621      	mov	r1, r4
 8003414:	1a51      	subs	r1, r2, r1
 8003416:	6139      	str	r1, [r7, #16]
 8003418:	4629      	mov	r1, r5
 800341a:	eb63 0301 	sbc.w	r3, r3, r1
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800342c:	4659      	mov	r1, fp
 800342e:	018b      	lsls	r3, r1, #6
 8003430:	4651      	mov	r1, sl
 8003432:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003436:	4651      	mov	r1, sl
 8003438:	018a      	lsls	r2, r1, #6
 800343a:	4651      	mov	r1, sl
 800343c:	ebb2 0801 	subs.w	r8, r2, r1
 8003440:	4659      	mov	r1, fp
 8003442:	eb63 0901 	sbc.w	r9, r3, r1
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800345a:	4690      	mov	r8, r2
 800345c:	4699      	mov	r9, r3
 800345e:	4623      	mov	r3, r4
 8003460:	eb18 0303 	adds.w	r3, r8, r3
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	462b      	mov	r3, r5
 8003468:	eb49 0303 	adc.w	r3, r9, r3
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800347a:	4629      	mov	r1, r5
 800347c:	024b      	lsls	r3, r1, #9
 800347e:	4621      	mov	r1, r4
 8003480:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003484:	4621      	mov	r1, r4
 8003486:	024a      	lsls	r2, r1, #9
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800348e:	2200      	movs	r2, #0
 8003490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003492:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003494:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003498:	f7fd fb86 	bl	8000ba8 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4613      	mov	r3, r2
 80034a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a4:	e058      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a6:	4b38      	ldr	r3, [pc, #224]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	099b      	lsrs	r3, r3, #6
 80034ac:	2200      	movs	r2, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	4611      	mov	r1, r2
 80034b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	2300      	movs	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80034bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034c0:	4642      	mov	r2, r8
 80034c2:	464b      	mov	r3, r9
 80034c4:	f04f 0000 	mov.w	r0, #0
 80034c8:	f04f 0100 	mov.w	r1, #0
 80034cc:	0159      	lsls	r1, r3, #5
 80034ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d2:	0150      	lsls	r0, r2, #5
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4641      	mov	r1, r8
 80034da:	ebb2 0a01 	subs.w	sl, r2, r1
 80034de:	4649      	mov	r1, r9
 80034e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034f8:	ebb2 040a 	subs.w	r4, r2, sl
 80034fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	00eb      	lsls	r3, r5, #3
 800350a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800350e:	00e2      	lsls	r2, r4, #3
 8003510:	4614      	mov	r4, r2
 8003512:	461d      	mov	r5, r3
 8003514:	4643      	mov	r3, r8
 8003516:	18e3      	adds	r3, r4, r3
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	464b      	mov	r3, r9
 800351c:	eb45 0303 	adc.w	r3, r5, r3
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800352e:	4629      	mov	r1, r5
 8003530:	028b      	lsls	r3, r1, #10
 8003532:	4621      	mov	r1, r4
 8003534:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003538:	4621      	mov	r1, r4
 800353a:	028a      	lsls	r2, r1, #10
 800353c:	4610      	mov	r0, r2
 800353e:	4619      	mov	r1, r3
 8003540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003542:	2200      	movs	r2, #0
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	61fa      	str	r2, [r7, #28]
 8003548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800354c:	f7fd fb2c 	bl	8000ba8 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4613      	mov	r3, r2
 8003556:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003558:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x200>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	3301      	adds	r3, #1
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003568:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800356a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003572:	e002      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCC_GetSysClockFreq+0x204>)
 8003576:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800357a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800357c:	4618      	mov	r0, r3
 800357e:	3750      	adds	r7, #80	@ 0x50
 8003580:	46bd      	mov	sp, r7
 8003582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800
 800358c:	00f42400 	.word	0x00f42400
 8003590:	007a1200 	.word	0x007a1200

08003594 <LL_GPIO_SetPinMode>:
{
 8003594:	b480      	push	{r7}
 8003596:	b08b      	sub	sp, #44	@ 0x2c
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	613b      	str	r3, [r7, #16]
  return result;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80035ba:	2320      	movs	r3, #32
 80035bc:	e003      	b.n	80035c6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2103      	movs	r1, #3
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	401a      	ands	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	61fb      	str	r3, [r7, #28]
  return result;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e003      	b.n	80035f4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	601a      	str	r2, [r3, #0]
}
 8003602:	bf00      	nop
 8003604:	372c      	adds	r7, #44	@ 0x2c
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <LL_GPIO_SetPinOutputType>:
{
 800360e:	b480      	push	{r7}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	43db      	mvns	r3, r3
 8003622:	401a      	ands	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_GPIO_SetPinSpeed>:
{
 800363e:	b480      	push	{r7}
 8003640:	b08b      	sub	sp, #44	@ 0x2c
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	613b      	str	r3, [r7, #16]
  return result;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003664:	2320      	movs	r3, #32
 8003666:	e003      	b.n	8003670 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2103      	movs	r1, #3
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	61fb      	str	r3, [r7, #28]
  return result;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003692:	2320      	movs	r3, #32
 8003694:	e003      	b.n	800369e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	431a      	orrs	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	372c      	adds	r7, #44	@ 0x2c
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <LL_GPIO_SetPinPull>:
{
 80036b8:	b480      	push	{r7}
 80036ba:	b08b      	sub	sp, #44	@ 0x2c
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	613b      	str	r3, [r7, #16]
  return result;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80036de:	2320      	movs	r3, #32
 80036e0:	e003      	b.n	80036ea <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2103      	movs	r1, #3
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	401a      	ands	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	61fb      	str	r3, [r7, #28]
  return result;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800370c:	2320      	movs	r3, #32
 800370e:	e003      	b.n	8003718 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	fa01 f303 	lsl.w	r3, r1, r3
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	60da      	str	r2, [r3, #12]
}
 8003726:	bf00      	nop
 8003728:	372c      	adds	r7, #44	@ 0x2c
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <LL_GPIO_SetAFPin_0_7>:
{
 8003732:	b480      	push	{r7}
 8003734:	b08b      	sub	sp, #44	@ 0x2c
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1a      	ldr	r2, [r3, #32]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	613b      	str	r3, [r7, #16]
  return result;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003758:	2320      	movs	r3, #32
 800375a:	e003      	b.n	8003764 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	210f      	movs	r1, #15
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	401a      	ands	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	61fb      	str	r3, [r7, #28]
  return result;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003786:	2320      	movs	r3, #32
 8003788:	e003      	b.n	8003792 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	fab3 f383 	clz	r3, r3
 8003790:	b2db      	uxtb	r3, r3
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	431a      	orrs	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	621a      	str	r2, [r3, #32]
}
 80037a0:	bf00      	nop
 80037a2:	372c      	adds	r7, #44	@ 0x2c
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_GPIO_SetAFPin_8_15>:
{
 80037ac:	b480      	push	{r7}
 80037ae:	b08b      	sub	sp, #44	@ 0x2c
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	613b      	str	r3, [r7, #16]
  return result;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80037d4:	2320      	movs	r3, #32
 80037d6:	e003      	b.n	80037e0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	210f      	movs	r1, #15
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	401a      	ands	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	61fb      	str	r3, [r7, #28]
  return result;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e003      	b.n	8003810 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	431a      	orrs	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800381e:	bf00      	nop
 8003820:	372c      	adds	r7, #44	@ 0x2c
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b08a      	sub	sp, #40	@ 0x28
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	617b      	str	r3, [r7, #20]
  return result;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <LL_GPIO_Init+0x2e>
    return 32U;
 8003854:	2320      	movs	r3, #32
 8003856:	e003      	b.n	8003860 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003862:	e057      	b.n	8003914 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	2101      	movs	r1, #1
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	4013      	ands	r3, r2
 8003872:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d049      	beq.n	800390e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d003      	beq.n	800388a <LL_GPIO_Init+0x60>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d10d      	bne.n	80038a6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	461a      	mov	r2, r3
 8003890:	6a39      	ldr	r1, [r7, #32]
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff fed3 	bl	800363e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	461a      	mov	r2, r3
 800389e:	6a39      	ldr	r1, [r7, #32]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff feb4 	bl	800360e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	461a      	mov	r2, r3
 80038ac:	6a39      	ldr	r1, [r7, #32]
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff02 	bl	80036b8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d121      	bne.n	8003900 <LL_GPIO_Init+0xd6>
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	60bb      	str	r3, [r7, #8]
  return result;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <LL_GPIO_Init+0xac>
    return 32U;
 80038d2:	2320      	movs	r3, #32
 80038d4:	e003      	b.n	80038de <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80038de:	2b07      	cmp	r3, #7
 80038e0:	d807      	bhi.n	80038f2 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6a39      	ldr	r1, [r7, #32]
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff ff21 	bl	8003732 <LL_GPIO_SetAFPin_0_7>
 80038f0:	e006      	b.n	8003900 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	461a      	mov	r2, r3
 80038f8:	6a39      	ldr	r1, [r7, #32]
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ff56 	bl	80037ac <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	461a      	mov	r2, r3
 8003906:	6a39      	ldr	r1, [r7, #32]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fe43 	bl	8003594 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	3301      	adds	r3, #1
 8003912:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	fa22 f303 	lsr.w	r3, r2, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1a0      	bne.n	8003864 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3728      	adds	r7, #40	@ 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003930:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <LL_RCC_GetSysClkSource+0x18>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800

08003948 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800394c:	4b04      	ldr	r3, [pc, #16]	@ (8003960 <LL_RCC_GetAHBPrescaler+0x18>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800

08003964 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003968:	4b04      	ldr	r3, [pc, #16]	@ (800397c <LL_RCC_GetAPB1Prescaler+0x18>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800

08003980 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003984:	4b04      	ldr	r3, [pc, #16]	@ (8003998 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80039a0:	4b04      	ldr	r3, [pc, #16]	@ (80039b4 <LL_RCC_PLL_GetMainSource+0x18>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40023800 	.word	0x40023800

080039b8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80039bc:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <LL_RCC_PLL_GetN+0x18>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40023800 	.word	0x40023800

080039d4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80039d8:	4b04      	ldr	r3, [pc, #16]	@ (80039ec <LL_RCC_PLL_GetP+0x18>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800

080039f0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80039f4:	4b04      	ldr	r3, [pc, #16]	@ (8003a08 <LL_RCC_PLL_GetDivider+0x18>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800

08003a0c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003a14:	f000 f820 	bl	8003a58 <RCC_GetSystemClockFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f840 	bl	8003aa8 <RCC_GetHCLKClockFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f84e 	bl	8003ad4 <RCC_GetPCLK1ClockFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f85a 	bl	8003afc <RCC_GetPCLK2ClockFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60da      	str	r2, [r3, #12]
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003a62:	f7ff ff63 	bl	800392c <LL_RCC_GetSysClkSource>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d00c      	beq.n	8003a86 <RCC_GetSystemClockFreq+0x2e>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d80f      	bhi.n	8003a90 <RCC_GetSystemClockFreq+0x38>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <RCC_GetSystemClockFreq+0x22>
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d003      	beq.n	8003a80 <RCC_GetSystemClockFreq+0x28>
 8003a78:	e00a      	b.n	8003a90 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <RCC_GetSystemClockFreq+0x48>)
 8003a7c:	607b      	str	r3, [r7, #4]
      break;
 8003a7e:	e00a      	b.n	8003a96 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003a80:	4b08      	ldr	r3, [pc, #32]	@ (8003aa4 <RCC_GetSystemClockFreq+0x4c>)
 8003a82:	607b      	str	r3, [r7, #4]
      break;
 8003a84:	e007      	b.n	8003a96 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003a86:	2008      	movs	r0, #8
 8003a88:	f000 f84c 	bl	8003b24 <RCC_PLL_GetFreqDomain_SYS>
 8003a8c:	6078      	str	r0, [r7, #4]
      break;
 8003a8e:	e002      	b.n	8003a96 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003a90:	4b03      	ldr	r3, [pc, #12]	@ (8003aa0 <RCC_GetSystemClockFreq+0x48>)
 8003a92:	607b      	str	r3, [r7, #4]
      break;
 8003a94:	bf00      	nop
  }

  return frequency;
 8003a96:	687b      	ldr	r3, [r7, #4]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	007a1200 	.word	0x007a1200

08003aa8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003ab0:	f7ff ff4a 	bl	8003948 <LL_RCC_GetAHBPrescaler>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	4a04      	ldr	r2, [pc, #16]	@ (8003ad0 <RCC_GetHCLKClockFreq+0x28>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	40d3      	lsrs	r3, r2
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08007fa8 	.word	0x08007fa8

08003ad4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003adc:	f7ff ff42 	bl	8003964 <LL_RCC_GetAPB1Prescaler>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	0a9b      	lsrs	r3, r3, #10
 8003ae4:	4a04      	ldr	r2, [pc, #16]	@ (8003af8 <RCC_GetPCLK1ClockFreq+0x24>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	40d3      	lsrs	r3, r2
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	08007fb8 	.word	0x08007fb8

08003afc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003b04:	f7ff ff3c 	bl	8003980 <LL_RCC_GetAPB2Prescaler>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	0b5b      	lsrs	r3, r3, #13
 8003b0c:	4a04      	ldr	r2, [pc, #16]	@ (8003b20 <RCC_GetPCLK2ClockFreq+0x24>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	461a      	mov	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	40d3      	lsrs	r3, r2
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	08007fb8 	.word	0x08007fb8

08003b24 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003b38:	f7ff ff30 	bl	800399c <LL_RCC_PLL_GetMainSource>
 8003b3c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b4a:	d003      	beq.n	8003b54 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003b4c:	e005      	b.n	8003b5a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003b4e:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003b50:	617b      	str	r3, [r7, #20]
      break;
 8003b52:	e005      	b.n	8003b60 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003b56:	617b      	str	r3, [r7, #20]
      break;
 8003b58:	e002      	b.n	8003b60 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003b5c:	617b      	str	r3, [r7, #20]
      break;
 8003b5e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d113      	bne.n	8003b8e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003b66:	f7ff ff43 	bl	80039f0 <LL_RCC_PLL_GetDivider>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003b72:	f7ff ff21 	bl	80039b8 <LL_RCC_PLL_GetN>
 8003b76:	4603      	mov	r3, r0
 8003b78:	fb03 f404 	mul.w	r4, r3, r4
 8003b7c:	f7ff ff2a 	bl	80039d4 <LL_RCC_PLL_GetP>
 8003b80:	4603      	mov	r3, r0
 8003b82:	0c1b      	lsrs	r3, r3, #16
 8003b84:	3301      	adds	r3, #1
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b8c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003b8e:	693b      	ldr	r3, [r7, #16]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd90      	pop	{r4, r7, pc}
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	007a1200 	.word	0x007a1200

08003ba0 <LL_SPI_IsEnabled>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb0:	2b40      	cmp	r3, #64	@ 0x40
 8003bb2:	d101      	bne.n	8003bb8 <LL_SPI_IsEnabled+0x18>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <LL_SPI_IsEnabled+0x1a>
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <LL_SPI_SetCRCPolynomial>:
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	611a      	str	r2, [r3, #16]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ffd3 	bl	8003ba0 <LL_SPI_IsEnabled>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d139      	bne.n	8003c74 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c08:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	6811      	ldr	r1, [r2, #0]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	6852      	ldr	r2, [r2, #4]
 8003c14:	4311      	orrs	r1, r2
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	6892      	ldr	r2, [r2, #8]
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	68d2      	ldr	r2, [r2, #12]
 8003c20:	4311      	orrs	r1, r2
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	6912      	ldr	r2, [r2, #16]
 8003c26:	4311      	orrs	r1, r2
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	6952      	ldr	r2, [r2, #20]
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	6992      	ldr	r2, [r2, #24]
 8003c32:	4311      	orrs	r1, r2
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	69d2      	ldr	r2, [r2, #28]
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	6a12      	ldr	r2, [r2, #32]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f023 0204 	bic.w	r2, r3, #4
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	0c1b      	lsrs	r3, r3, #16
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c62:	d105      	bne.n	8003c70 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ffab 	bl	8003bc6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	61da      	str	r2, [r3, #28]
  return status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <LL_TIM_SetPrescaler>:
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <LL_TIM_SetAutoReload>:
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <LL_TIM_SetRepetitionCounter>:
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_TIM_OC_SetCompareCH1>:
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_TIM_OC_SetCompareCH2>:
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <LL_TIM_OC_SetCompareCH3>:
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <LL_TIM_OC_SetCompareCH4>:
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f043 0201 	orr.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	615a      	str	r2, [r3, #20]
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3d      	ldr	r2, [pc, #244]	@ (8003e78 <LL_TIM_Init+0x108>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <LL_TIM_Init+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d8e:	d00f      	beq.n	8003db0 <LL_TIM_Init+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a3a      	ldr	r2, [pc, #232]	@ (8003e7c <LL_TIM_Init+0x10c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <LL_TIM_Init+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a39      	ldr	r2, [pc, #228]	@ (8003e80 <LL_TIM_Init+0x110>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <LL_TIM_Init+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a38      	ldr	r2, [pc, #224]	@ (8003e84 <LL_TIM_Init+0x114>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <LL_TIM_Init+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a37      	ldr	r2, [pc, #220]	@ (8003e88 <LL_TIM_Init+0x118>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d106      	bne.n	8003dbe <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e78 <LL_TIM_Init+0x108>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d02b      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dcc:	d027      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e7c <LL_TIM_Init+0x10c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d023      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a29      	ldr	r2, [pc, #164]	@ (8003e80 <LL_TIM_Init+0x110>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01f      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a28      	ldr	r2, [pc, #160]	@ (8003e84 <LL_TIM_Init+0x114>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01b      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a27      	ldr	r2, [pc, #156]	@ (8003e88 <LL_TIM_Init+0x118>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d017      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a26      	ldr	r2, [pc, #152]	@ (8003e8c <LL_TIM_Init+0x11c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a25      	ldr	r2, [pc, #148]	@ (8003e90 <LL_TIM_Init+0x120>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00f      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a24      	ldr	r2, [pc, #144]	@ (8003e94 <LL_TIM_Init+0x124>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a23      	ldr	r2, [pc, #140]	@ (8003e98 <LL_TIM_Init+0x128>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a22      	ldr	r2, [pc, #136]	@ (8003e9c <LL_TIM_Init+0x12c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <LL_TIM_Init+0xae>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a21      	ldr	r2, [pc, #132]	@ (8003ea0 <LL_TIM_Init+0x130>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d106      	bne.n	8003e2c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff34 	bl	8003ca6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff20 	bl	8003c8a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e78 <LL_TIM_Init+0x108>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d003      	beq.n	8003e5a <LL_TIM_Init+0xea>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a0c      	ldr	r2, [pc, #48]	@ (8003e88 <LL_TIM_Init+0x118>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d105      	bne.n	8003e66 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ff2e 	bl	8003cc2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ff71 	bl	8003d4e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40000c00 	.word	0x40000c00
 8003e88:	40010400 	.word	0x40010400
 8003e8c:	40014000 	.word	0x40014000
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800
 8003e98:	40001800 	.word	0x40001800
 8003e9c:	40001c00 	.word	0x40001c00
 8003ea0:	40002000 	.word	0x40002000

08003ea4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eba:	d027      	beq.n	8003f0c <LL_TIM_OC_Init+0x68>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec2:	d82a      	bhi.n	8003f1a <LL_TIM_OC_Init+0x76>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eca:	d018      	beq.n	8003efe <LL_TIM_OC_Init+0x5a>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed2:	d822      	bhi.n	8003f1a <LL_TIM_OC_Init+0x76>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d003      	beq.n	8003ee2 <LL_TIM_OC_Init+0x3e>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d007      	beq.n	8003ef0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003ee0:	e01b      	b.n	8003f1a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f81f 	bl	8003f28 <OC1Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]
      break;
 8003eee:	e015      	b.n	8003f1c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f884 	bl	8004000 <OC2Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	75fb      	strb	r3, [r7, #23]
      break;
 8003efc:	e00e      	b.n	8003f1c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f8ed 	bl	80040e0 <OC3Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0a:	e007      	b.n	8003f1c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f956 	bl	80041c0 <OC4Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	75fb      	strb	r3, [r7, #23]
      break;
 8003f18:	e000      	b.n	8003f1c <LL_TIM_OC_Init+0x78>
      break;
 8003f1a:	bf00      	nop
  }

  return result;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f023 0201 	bic.w	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0303 	bic.w	r3, r3, #3
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f023 0202 	bic.w	r2, r3, #2
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff8 <OC1Config+0xd0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <OC1Config+0x6a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <OC1Config+0xd4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d11e      	bne.n	8003fd0 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f023 0208 	bic.w	r2, r3, #8
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 0204 	bic.w	r2, r3, #4
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fe7b 	bl	8003cde <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40010400 	.word	0x40010400

08004000 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0210 	bic.w	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0220 	bic.w	r2, r3, #32
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 0210 	bic.w	r2, r3, #16
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a1d      	ldr	r2, [pc, #116]	@ (80040d8 <OC2Config+0xd8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d003      	beq.n	8004070 <OC2Config+0x70>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a1c      	ldr	r2, [pc, #112]	@ (80040dc <OC2Config+0xdc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d11f      	bne.n	80040b0 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	019b      	lsls	r3, r3, #6
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	019b      	lsls	r3, r3, #6
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff fe19 	bl	8003cfa <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400

080040e0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1d      	ldr	r2, [pc, #116]	@ (80041b8 <OC3Config+0xd8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <OC3Config+0x6e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1c      	ldr	r2, [pc, #112]	@ (80041bc <OC3Config+0xdc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d11f      	bne.n	800418e <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	029b      	lsls	r3, r3, #10
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	029b      	lsls	r3, r3, #10
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	015b      	lsls	r3, r3, #5
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fdb8 	bl	8003d16 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40010400 	.word	0x40010400

080041c0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	031b      	lsls	r3, r3, #12
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	031b      	lsls	r3, r3, #12
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a11      	ldr	r2, [pc, #68]	@ (8004268 <OC4Config+0xa8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <OC4Config+0x70>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a10      	ldr	r2, [pc, #64]	@ (800426c <OC4Config+0xac>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d107      	bne.n	8004240 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	019b      	lsls	r3, r3, #6
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fd6d 	bl	8003d32 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40010000 	.word	0x40010000
 800426c:	40010400 	.word	0x40010400

08004270 <LL_USART_IsEnabled>:
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <LL_USART_SetStopBitsLength>:
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <LL_USART_SetHWFlowCtrl>:
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	615a      	str	r2, [r3, #20]
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <LL_USART_SetBaudRate>:
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b0c0      	sub	sp, #256	@ 0x100
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042f0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80042f4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80042f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004304:	f040 810c 	bne.w	8004520 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004308:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800430c:	2200      	movs	r2, #0
 800430e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004312:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004316:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800431a:	4622      	mov	r2, r4
 800431c:	462b      	mov	r3, r5
 800431e:	1891      	adds	r1, r2, r2
 8004320:	6639      	str	r1, [r7, #96]	@ 0x60
 8004322:	415b      	adcs	r3, r3
 8004324:	667b      	str	r3, [r7, #100]	@ 0x64
 8004326:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800432a:	4621      	mov	r1, r4
 800432c:	eb12 0801 	adds.w	r8, r2, r1
 8004330:	4629      	mov	r1, r5
 8004332:	eb43 0901 	adc.w	r9, r3, r1
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800434a:	4690      	mov	r8, r2
 800434c:	4699      	mov	r9, r3
 800434e:	4623      	mov	r3, r4
 8004350:	eb18 0303 	adds.w	r3, r8, r3
 8004354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004358:	462b      	mov	r3, r5
 800435a:	eb49 0303 	adc.w	r3, r9, r3
 800435e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004362:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004366:	2200      	movs	r2, #0
 8004368:	469a      	mov	sl, r3
 800436a:	4693      	mov	fp, r2
 800436c:	eb1a 030a 	adds.w	r3, sl, sl
 8004370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004372:	eb4b 030b 	adc.w	r3, fp, fp
 8004376:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004378:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800437c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004380:	f7fc fc12 	bl	8000ba8 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4b64      	ldr	r3, [pc, #400]	@ (800451c <LL_USART_SetBaudRate+0x238>)
 800438a:	fba3 2302 	umull	r2, r3, r3, r2
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	b29b      	uxth	r3, r3
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	b29c      	uxth	r4, r3
 8004396:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043a0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043a4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	6539      	str	r1, [r7, #80]	@ 0x50
 80043b0:	415b      	adcs	r3, r3
 80043b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043b8:	4641      	mov	r1, r8
 80043ba:	1851      	adds	r1, r2, r1
 80043bc:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043be:	4649      	mov	r1, r9
 80043c0:	414b      	adcs	r3, r1
 80043c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 80043d0:	4659      	mov	r1, fp
 80043d2:	00cb      	lsls	r3, r1, #3
 80043d4:	4651      	mov	r1, sl
 80043d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043da:	4651      	mov	r1, sl
 80043dc:	00ca      	lsls	r2, r1, #3
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	4642      	mov	r2, r8
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043ec:	464b      	mov	r3, r9
 80043ee:	460a      	mov	r2, r1
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80043f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80043fc:	2200      	movs	r2, #0
 80043fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004402:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8004406:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800440a:	460b      	mov	r3, r1
 800440c:	18db      	adds	r3, r3, r3
 800440e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004410:	4613      	mov	r3, r2
 8004412:	eb42 0303 	adc.w	r3, r2, r3
 8004416:	647b      	str	r3, [r7, #68]	@ 0x44
 8004418:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800441c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004420:	f7fc fbc2 	bl	8000ba8 <__aeabi_uldivmod>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4611      	mov	r1, r2
 800442a:	4b3c      	ldr	r3, [pc, #240]	@ (800451c <LL_USART_SetBaudRate+0x238>)
 800442c:	fba3 2301 	umull	r2, r3, r3, r1
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	2264      	movs	r2, #100	@ 0x64
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	1acb      	subs	r3, r1, r3
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004440:	4b36      	ldr	r3, [pc, #216]	@ (800451c <LL_USART_SetBaudRate+0x238>)
 8004442:	fba3 2302 	umull	r2, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	b29b      	uxth	r3, r3
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	b29b      	uxth	r3, r3
 800444e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004452:	b29b      	uxth	r3, r3
 8004454:	4423      	add	r3, r4
 8004456:	b29c      	uxth	r4, r3
 8004458:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800445c:	2200      	movs	r2, #0
 800445e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004462:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004466:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800446a:	4642      	mov	r2, r8
 800446c:	464b      	mov	r3, r9
 800446e:	1891      	adds	r1, r2, r2
 8004470:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004472:	415b      	adcs	r3, r3
 8004474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004476:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800447a:	4641      	mov	r1, r8
 800447c:	1851      	adds	r1, r2, r1
 800447e:	6339      	str	r1, [r7, #48]	@ 0x30
 8004480:	4649      	mov	r1, r9
 8004482:	414b      	adcs	r3, r1
 8004484:	637b      	str	r3, [r7, #52]	@ 0x34
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004492:	4659      	mov	r1, fp
 8004494:	00cb      	lsls	r3, r1, #3
 8004496:	4651      	mov	r1, sl
 8004498:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449c:	4651      	mov	r1, sl
 800449e:	00ca      	lsls	r2, r1, #3
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	4603      	mov	r3, r0
 80044a6:	4642      	mov	r2, r8
 80044a8:	189b      	adds	r3, r3, r2
 80044aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044ae:	464b      	mov	r3, r9
 80044b0:	460a      	mov	r2, r1
 80044b2:	eb42 0303 	adc.w	r3, r2, r3
 80044b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044c4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80044c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80044cc:	460b      	mov	r3, r1
 80044ce:	18db      	adds	r3, r3, r3
 80044d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044d2:	4613      	mov	r3, r2
 80044d4:	eb42 0303 	adc.w	r3, r2, r3
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044de:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80044e2:	f7fc fb61 	bl	8000ba8 <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <LL_USART_SetBaudRate+0x238>)
 80044ec:	fba3 1302 	umull	r1, r3, r3, r2
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	2164      	movs	r1, #100	@ 0x64
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	3332      	adds	r3, #50	@ 0x32
 80044fe:	4a07      	ldr	r2, [pc, #28]	@ (800451c <LL_USART_SetBaudRate+0x238>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	b29b      	uxth	r3, r3
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	b29b      	uxth	r3, r3
 800450e:	4423      	add	r3, r4
 8004510:	b29b      	uxth	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004518:	609a      	str	r2, [r3, #8]
}
 800451a:	e108      	b.n	800472e <LL_USART_SetBaudRate+0x44a>
 800451c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004520:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800452a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800452e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8004532:	4642      	mov	r2, r8
 8004534:	464b      	mov	r3, r9
 8004536:	1891      	adds	r1, r2, r2
 8004538:	6239      	str	r1, [r7, #32]
 800453a:	415b      	adcs	r3, r3
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24
 800453e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004542:	4641      	mov	r1, r8
 8004544:	1854      	adds	r4, r2, r1
 8004546:	4649      	mov	r1, r9
 8004548:	eb43 0501 	adc.w	r5, r3, r1
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	00eb      	lsls	r3, r5, #3
 8004556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800455a:	00e2      	lsls	r2, r4, #3
 800455c:	4614      	mov	r4, r2
 800455e:	461d      	mov	r5, r3
 8004560:	4643      	mov	r3, r8
 8004562:	18e3      	adds	r3, r4, r3
 8004564:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004568:	464b      	mov	r3, r9
 800456a:	eb45 0303 	adc.w	r3, r5, r3
 800456e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004572:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800457c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800458c:	4629      	mov	r1, r5
 800458e:	008b      	lsls	r3, r1, #2
 8004590:	4621      	mov	r1, r4
 8004592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004596:	4621      	mov	r1, r4
 8004598:	008a      	lsls	r2, r1, #2
 800459a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800459e:	f7fc fb03 	bl	8000ba8 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4b65      	ldr	r3, [pc, #404]	@ (800473c <LL_USART_SetBaudRate+0x458>)
 80045a8:	fba3 2302 	umull	r2, r3, r3, r2
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	b29c      	uxth	r4, r3
 80045b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045c2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80045c6:	4642      	mov	r2, r8
 80045c8:	464b      	mov	r3, r9
 80045ca:	1891      	adds	r1, r2, r2
 80045cc:	61b9      	str	r1, [r7, #24]
 80045ce:	415b      	adcs	r3, r3
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d6:	4641      	mov	r1, r8
 80045d8:	1851      	adds	r1, r2, r1
 80045da:	6139      	str	r1, [r7, #16]
 80045dc:	4649      	mov	r1, r9
 80045de:	414b      	adcs	r3, r1
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045ee:	4659      	mov	r1, fp
 80045f0:	00cb      	lsls	r3, r1, #3
 80045f2:	4651      	mov	r1, sl
 80045f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f8:	4651      	mov	r1, sl
 80045fa:	00ca      	lsls	r2, r1, #3
 80045fc:	4610      	mov	r0, r2
 80045fe:	4619      	mov	r1, r3
 8004600:	4603      	mov	r3, r0
 8004602:	4642      	mov	r2, r8
 8004604:	189b      	adds	r3, r3, r2
 8004606:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800460a:	464b      	mov	r3, r9
 800460c:	460a      	mov	r2, r1
 800460e:	eb42 0303 	adc.w	r3, r2, r3
 8004612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004616:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004620:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004630:	4649      	mov	r1, r9
 8004632:	008b      	lsls	r3, r1, #2
 8004634:	4641      	mov	r1, r8
 8004636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800463a:	4641      	mov	r1, r8
 800463c:	008a      	lsls	r2, r1, #2
 800463e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004642:	f7fc fab1 	bl	8000ba8 <__aeabi_uldivmod>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4611      	mov	r1, r2
 800464c:	4b3b      	ldr	r3, [pc, #236]	@ (800473c <LL_USART_SetBaudRate+0x458>)
 800464e:	fba3 2301 	umull	r2, r3, r3, r1
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2264      	movs	r2, #100	@ 0x64
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	1acb      	subs	r3, r1, r3
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	3332      	adds	r3, #50	@ 0x32
 8004660:	4a36      	ldr	r2, [pc, #216]	@ (800473c <LL_USART_SetBaudRate+0x458>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	b29b      	uxth	r3, r3
 800466a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800466e:	b29b      	uxth	r3, r3
 8004670:	4423      	add	r3, r4
 8004672:	b29c      	uxth	r4, r3
 8004674:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004678:	2200      	movs	r2, #0
 800467a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800467c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800467e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004682:	4642      	mov	r2, r8
 8004684:	464b      	mov	r3, r9
 8004686:	1891      	adds	r1, r2, r2
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	415b      	adcs	r3, r3
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004692:	4641      	mov	r1, r8
 8004694:	1851      	adds	r1, r2, r1
 8004696:	6039      	str	r1, [r7, #0]
 8004698:	4649      	mov	r1, r9
 800469a:	414b      	adcs	r3, r1
 800469c:	607b      	str	r3, [r7, #4]
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046aa:	4659      	mov	r1, fp
 80046ac:	00cb      	lsls	r3, r1, #3
 80046ae:	4651      	mov	r1, sl
 80046b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b4:	4651      	mov	r1, sl
 80046b6:	00ca      	lsls	r2, r1, #3
 80046b8:	4610      	mov	r0, r2
 80046ba:	4619      	mov	r1, r3
 80046bc:	4603      	mov	r3, r0
 80046be:	4642      	mov	r2, r8
 80046c0:	189b      	adds	r3, r3, r2
 80046c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80046c4:	464b      	mov	r3, r9
 80046c6:	460a      	mov	r2, r1
 80046c8:	eb42 0303 	adc.w	r3, r2, r3
 80046cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80046ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80046d2:	2200      	movs	r2, #0
 80046d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80046e4:	4649      	mov	r1, r9
 80046e6:	008b      	lsls	r3, r1, #2
 80046e8:	4641      	mov	r1, r8
 80046ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ee:	4641      	mov	r1, r8
 80046f0:	008a      	lsls	r2, r1, #2
 80046f2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80046f6:	f7fc fa57 	bl	8000ba8 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4b0f      	ldr	r3, [pc, #60]	@ (800473c <LL_USART_SetBaudRate+0x458>)
 8004700:	fba3 1302 	umull	r1, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	2164      	movs	r1, #100	@ 0x64
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	3332      	adds	r3, #50	@ 0x32
 8004712:	4a0a      	ldr	r2, [pc, #40]	@ (800473c <LL_USART_SetBaudRate+0x458>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	b29b      	uxth	r3, r3
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	b29b      	uxth	r3, r3
 8004722:	4423      	add	r3, r4
 8004724:	b29b      	uxth	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800472c:	609a      	str	r2, [r3, #8]
}
 800472e:	bf00      	nop
 8004730:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004734:	46bd      	mov	sp, r7
 8004736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800473a:	bf00      	nop
 800473c:	51eb851f 	.word	0x51eb851f

08004740 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fd8c 	bl	8004270 <LL_USART_IsEnabled>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d15e      	bne.n	800481c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004766:	f023 030c 	bic.w	r3, r3, #12
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	6851      	ldr	r1, [r2, #4]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	68d2      	ldr	r2, [r2, #12]
 8004772:	4311      	orrs	r1, r2
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	6912      	ldr	r2, [r2, #16]
 8004778:	4311      	orrs	r1, r2
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	6992      	ldr	r2, [r2, #24]
 800477e:	430a      	orrs	r2, r1
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	4619      	mov	r1, r3
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fd83 	bl	8004298 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fd90 	bl	80042be <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff f932 	bl	8003a0c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004828 <LL_USART_Init+0xe8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d102      	bne.n	80047b6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	e021      	b.n	80047fa <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <LL_USART_Init+0xec>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d102      	bne.n	80047c4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	e01a      	b.n	80047fa <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004830 <LL_USART_Init+0xf0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d102      	bne.n	80047d2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e013      	b.n	80047fa <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a17      	ldr	r2, [pc, #92]	@ (8004834 <LL_USART_Init+0xf4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d102      	bne.n	80047e0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	e00c      	b.n	80047fa <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a15      	ldr	r2, [pc, #84]	@ (8004838 <LL_USART_Init+0xf8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d102      	bne.n	80047ee <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e005      	b.n	80047fa <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a12      	ldr	r2, [pc, #72]	@ (800483c <LL_USART_Init+0xfc>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d101      	bne.n	80047fa <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00d      	beq.n	800481c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d009      	beq.n	800481c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004808:	2300      	movs	r3, #0
 800480a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004814:	69b9      	ldr	r1, [r7, #24]
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fd64 	bl	80042e4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800481c:	7ffb      	ldrb	r3, [r7, #31]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40011000 	.word	0x40011000
 800482c:	40004400 	.word	0x40004400
 8004830:	40004800 	.word	0x40004800
 8004834:	40011400 	.word	0x40011400
 8004838:	40004c00 	.word	0x40004c00
 800483c:	40005000 	.word	0x40005000

08004840 <__cvt>:
 8004840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	ec57 6b10 	vmov	r6, r7, d0
 8004848:	2f00      	cmp	r7, #0
 800484a:	460c      	mov	r4, r1
 800484c:	4619      	mov	r1, r3
 800484e:	463b      	mov	r3, r7
 8004850:	bfbb      	ittet	lt
 8004852:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004856:	461f      	movlt	r7, r3
 8004858:	2300      	movge	r3, #0
 800485a:	232d      	movlt	r3, #45	@ 0x2d
 800485c:	700b      	strb	r3, [r1, #0]
 800485e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004860:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004864:	4691      	mov	r9, r2
 8004866:	f023 0820 	bic.w	r8, r3, #32
 800486a:	bfbc      	itt	lt
 800486c:	4632      	movlt	r2, r6
 800486e:	4616      	movlt	r6, r2
 8004870:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004874:	d005      	beq.n	8004882 <__cvt+0x42>
 8004876:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800487a:	d100      	bne.n	800487e <__cvt+0x3e>
 800487c:	3401      	adds	r4, #1
 800487e:	2102      	movs	r1, #2
 8004880:	e000      	b.n	8004884 <__cvt+0x44>
 8004882:	2103      	movs	r1, #3
 8004884:	ab03      	add	r3, sp, #12
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	ab02      	add	r3, sp, #8
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	ec47 6b10 	vmov	d0, r6, r7
 8004890:	4653      	mov	r3, sl
 8004892:	4622      	mov	r2, r4
 8004894:	f000 ff3c 	bl	8005710 <_dtoa_r>
 8004898:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800489c:	4605      	mov	r5, r0
 800489e:	d119      	bne.n	80048d4 <__cvt+0x94>
 80048a0:	f019 0f01 	tst.w	r9, #1
 80048a4:	d00e      	beq.n	80048c4 <__cvt+0x84>
 80048a6:	eb00 0904 	add.w	r9, r0, r4
 80048aa:	2200      	movs	r2, #0
 80048ac:	2300      	movs	r3, #0
 80048ae:	4630      	mov	r0, r6
 80048b0:	4639      	mov	r1, r7
 80048b2:	f7fc f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80048b6:	b108      	cbz	r0, 80048bc <__cvt+0x7c>
 80048b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80048bc:	2230      	movs	r2, #48	@ 0x30
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	454b      	cmp	r3, r9
 80048c2:	d31e      	bcc.n	8004902 <__cvt+0xc2>
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048c8:	1b5b      	subs	r3, r3, r5
 80048ca:	4628      	mov	r0, r5
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	b004      	add	sp, #16
 80048d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048d8:	eb00 0904 	add.w	r9, r0, r4
 80048dc:	d1e5      	bne.n	80048aa <__cvt+0x6a>
 80048de:	7803      	ldrb	r3, [r0, #0]
 80048e0:	2b30      	cmp	r3, #48	@ 0x30
 80048e2:	d10a      	bne.n	80048fa <__cvt+0xba>
 80048e4:	2200      	movs	r2, #0
 80048e6:	2300      	movs	r3, #0
 80048e8:	4630      	mov	r0, r6
 80048ea:	4639      	mov	r1, r7
 80048ec:	f7fc f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80048f0:	b918      	cbnz	r0, 80048fa <__cvt+0xba>
 80048f2:	f1c4 0401 	rsb	r4, r4, #1
 80048f6:	f8ca 4000 	str.w	r4, [sl]
 80048fa:	f8da 3000 	ldr.w	r3, [sl]
 80048fe:	4499      	add	r9, r3
 8004900:	e7d3      	b.n	80048aa <__cvt+0x6a>
 8004902:	1c59      	adds	r1, r3, #1
 8004904:	9103      	str	r1, [sp, #12]
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	e7d9      	b.n	80048be <__cvt+0x7e>

0800490a <__exponent>:
 800490a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800490c:	2900      	cmp	r1, #0
 800490e:	bfba      	itte	lt
 8004910:	4249      	neglt	r1, r1
 8004912:	232d      	movlt	r3, #45	@ 0x2d
 8004914:	232b      	movge	r3, #43	@ 0x2b
 8004916:	2909      	cmp	r1, #9
 8004918:	7002      	strb	r2, [r0, #0]
 800491a:	7043      	strb	r3, [r0, #1]
 800491c:	dd29      	ble.n	8004972 <__exponent+0x68>
 800491e:	f10d 0307 	add.w	r3, sp, #7
 8004922:	461d      	mov	r5, r3
 8004924:	270a      	movs	r7, #10
 8004926:	461a      	mov	r2, r3
 8004928:	fbb1 f6f7 	udiv	r6, r1, r7
 800492c:	fb07 1416 	mls	r4, r7, r6, r1
 8004930:	3430      	adds	r4, #48	@ 0x30
 8004932:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004936:	460c      	mov	r4, r1
 8004938:	2c63      	cmp	r4, #99	@ 0x63
 800493a:	f103 33ff 	add.w	r3, r3, #4294967295
 800493e:	4631      	mov	r1, r6
 8004940:	dcf1      	bgt.n	8004926 <__exponent+0x1c>
 8004942:	3130      	adds	r1, #48	@ 0x30
 8004944:	1e94      	subs	r4, r2, #2
 8004946:	f803 1c01 	strb.w	r1, [r3, #-1]
 800494a:	1c41      	adds	r1, r0, #1
 800494c:	4623      	mov	r3, r4
 800494e:	42ab      	cmp	r3, r5
 8004950:	d30a      	bcc.n	8004968 <__exponent+0x5e>
 8004952:	f10d 0309 	add.w	r3, sp, #9
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	42ac      	cmp	r4, r5
 800495a:	bf88      	it	hi
 800495c:	2300      	movhi	r3, #0
 800495e:	3302      	adds	r3, #2
 8004960:	4403      	add	r3, r0
 8004962:	1a18      	subs	r0, r3, r0
 8004964:	b003      	add	sp, #12
 8004966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004968:	f813 6b01 	ldrb.w	r6, [r3], #1
 800496c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004970:	e7ed      	b.n	800494e <__exponent+0x44>
 8004972:	2330      	movs	r3, #48	@ 0x30
 8004974:	3130      	adds	r1, #48	@ 0x30
 8004976:	7083      	strb	r3, [r0, #2]
 8004978:	70c1      	strb	r1, [r0, #3]
 800497a:	1d03      	adds	r3, r0, #4
 800497c:	e7f1      	b.n	8004962 <__exponent+0x58>
	...

08004980 <_printf_float>:
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	b08d      	sub	sp, #52	@ 0x34
 8004986:	460c      	mov	r4, r1
 8004988:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800498c:	4616      	mov	r6, r2
 800498e:	461f      	mov	r7, r3
 8004990:	4605      	mov	r5, r0
 8004992:	f000 fdbd 	bl	8005510 <_localeconv_r>
 8004996:	6803      	ldr	r3, [r0, #0]
 8004998:	9304      	str	r3, [sp, #16]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fb fc68 	bl	8000270 <strlen>
 80049a0:	2300      	movs	r3, #0
 80049a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80049a4:	f8d8 3000 	ldr.w	r3, [r8]
 80049a8:	9005      	str	r0, [sp, #20]
 80049aa:	3307      	adds	r3, #7
 80049ac:	f023 0307 	bic.w	r3, r3, #7
 80049b0:	f103 0208 	add.w	r2, r3, #8
 80049b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049b8:	f8d4 b000 	ldr.w	fp, [r4]
 80049bc:	f8c8 2000 	str.w	r2, [r8]
 80049c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049c8:	9307      	str	r3, [sp, #28]
 80049ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80049ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80049d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049d6:	4b9c      	ldr	r3, [pc, #624]	@ (8004c48 <_printf_float+0x2c8>)
 80049d8:	f04f 32ff 	mov.w	r2, #4294967295
 80049dc:	f7fc f8a6 	bl	8000b2c <__aeabi_dcmpun>
 80049e0:	bb70      	cbnz	r0, 8004a40 <_printf_float+0xc0>
 80049e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049e6:	4b98      	ldr	r3, [pc, #608]	@ (8004c48 <_printf_float+0x2c8>)
 80049e8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ec:	f7fc f880 	bl	8000af0 <__aeabi_dcmple>
 80049f0:	bb30      	cbnz	r0, 8004a40 <_printf_float+0xc0>
 80049f2:	2200      	movs	r2, #0
 80049f4:	2300      	movs	r3, #0
 80049f6:	4640      	mov	r0, r8
 80049f8:	4649      	mov	r1, r9
 80049fa:	f7fc f86f 	bl	8000adc <__aeabi_dcmplt>
 80049fe:	b110      	cbz	r0, 8004a06 <_printf_float+0x86>
 8004a00:	232d      	movs	r3, #45	@ 0x2d
 8004a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a06:	4a91      	ldr	r2, [pc, #580]	@ (8004c4c <_printf_float+0x2cc>)
 8004a08:	4b91      	ldr	r3, [pc, #580]	@ (8004c50 <_printf_float+0x2d0>)
 8004a0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a0e:	bf8c      	ite	hi
 8004a10:	4690      	movhi	r8, r2
 8004a12:	4698      	movls	r8, r3
 8004a14:	2303      	movs	r3, #3
 8004a16:	6123      	str	r3, [r4, #16]
 8004a18:	f02b 0304 	bic.w	r3, fp, #4
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	f04f 0900 	mov.w	r9, #0
 8004a22:	9700      	str	r7, [sp, #0]
 8004a24:	4633      	mov	r3, r6
 8004a26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 f9d2 	bl	8004dd4 <_printf_common>
 8004a30:	3001      	adds	r0, #1
 8004a32:	f040 808d 	bne.w	8004b50 <_printf_float+0x1d0>
 8004a36:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3a:	b00d      	add	sp, #52	@ 0x34
 8004a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a40:	4642      	mov	r2, r8
 8004a42:	464b      	mov	r3, r9
 8004a44:	4640      	mov	r0, r8
 8004a46:	4649      	mov	r1, r9
 8004a48:	f7fc f870 	bl	8000b2c <__aeabi_dcmpun>
 8004a4c:	b140      	cbz	r0, 8004a60 <_printf_float+0xe0>
 8004a4e:	464b      	mov	r3, r9
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bfbc      	itt	lt
 8004a54:	232d      	movlt	r3, #45	@ 0x2d
 8004a56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c54 <_printf_float+0x2d4>)
 8004a5c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c58 <_printf_float+0x2d8>)
 8004a5e:	e7d4      	b.n	8004a0a <_printf_float+0x8a>
 8004a60:	6863      	ldr	r3, [r4, #4]
 8004a62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004a66:	9206      	str	r2, [sp, #24]
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	d13b      	bne.n	8004ae4 <_printf_float+0x164>
 8004a6c:	2306      	movs	r3, #6
 8004a6e:	6063      	str	r3, [r4, #4]
 8004a70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004a74:	2300      	movs	r3, #0
 8004a76:	6022      	str	r2, [r4, #0]
 8004a78:	9303      	str	r3, [sp, #12]
 8004a7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004a7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004a80:	ab09      	add	r3, sp, #36	@ 0x24
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	6861      	ldr	r1, [r4, #4]
 8004a86:	ec49 8b10 	vmov	d0, r8, r9
 8004a8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f7ff fed6 	bl	8004840 <__cvt>
 8004a94:	9b06      	ldr	r3, [sp, #24]
 8004a96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a98:	2b47      	cmp	r3, #71	@ 0x47
 8004a9a:	4680      	mov	r8, r0
 8004a9c:	d129      	bne.n	8004af2 <_printf_float+0x172>
 8004a9e:	1cc8      	adds	r0, r1, #3
 8004aa0:	db02      	blt.n	8004aa8 <_printf_float+0x128>
 8004aa2:	6863      	ldr	r3, [r4, #4]
 8004aa4:	4299      	cmp	r1, r3
 8004aa6:	dd41      	ble.n	8004b2c <_printf_float+0x1ac>
 8004aa8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004aac:	fa5f fa8a 	uxtb.w	sl, sl
 8004ab0:	3901      	subs	r1, #1
 8004ab2:	4652      	mov	r2, sl
 8004ab4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ab8:	9109      	str	r1, [sp, #36]	@ 0x24
 8004aba:	f7ff ff26 	bl	800490a <__exponent>
 8004abe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ac0:	1813      	adds	r3, r2, r0
 8004ac2:	2a01      	cmp	r2, #1
 8004ac4:	4681      	mov	r9, r0
 8004ac6:	6123      	str	r3, [r4, #16]
 8004ac8:	dc02      	bgt.n	8004ad0 <_printf_float+0x150>
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	07d2      	lsls	r2, r2, #31
 8004ace:	d501      	bpl.n	8004ad4 <_printf_float+0x154>
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	6123      	str	r3, [r4, #16]
 8004ad4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0a2      	beq.n	8004a22 <_printf_float+0xa2>
 8004adc:	232d      	movs	r3, #45	@ 0x2d
 8004ade:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ae2:	e79e      	b.n	8004a22 <_printf_float+0xa2>
 8004ae4:	9a06      	ldr	r2, [sp, #24]
 8004ae6:	2a47      	cmp	r2, #71	@ 0x47
 8004ae8:	d1c2      	bne.n	8004a70 <_printf_float+0xf0>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1c0      	bne.n	8004a70 <_printf_float+0xf0>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e7bd      	b.n	8004a6e <_printf_float+0xee>
 8004af2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004af6:	d9db      	bls.n	8004ab0 <_printf_float+0x130>
 8004af8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004afc:	d118      	bne.n	8004b30 <_printf_float+0x1b0>
 8004afe:	2900      	cmp	r1, #0
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	dd0b      	ble.n	8004b1c <_printf_float+0x19c>
 8004b04:	6121      	str	r1, [r4, #16]
 8004b06:	b913      	cbnz	r3, 8004b0e <_printf_float+0x18e>
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	07d0      	lsls	r0, r2, #31
 8004b0c:	d502      	bpl.n	8004b14 <_printf_float+0x194>
 8004b0e:	3301      	adds	r3, #1
 8004b10:	440b      	add	r3, r1
 8004b12:	6123      	str	r3, [r4, #16]
 8004b14:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b16:	f04f 0900 	mov.w	r9, #0
 8004b1a:	e7db      	b.n	8004ad4 <_printf_float+0x154>
 8004b1c:	b913      	cbnz	r3, 8004b24 <_printf_float+0x1a4>
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	07d2      	lsls	r2, r2, #31
 8004b22:	d501      	bpl.n	8004b28 <_printf_float+0x1a8>
 8004b24:	3302      	adds	r3, #2
 8004b26:	e7f4      	b.n	8004b12 <_printf_float+0x192>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e7f2      	b.n	8004b12 <_printf_float+0x192>
 8004b2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b32:	4299      	cmp	r1, r3
 8004b34:	db05      	blt.n	8004b42 <_printf_float+0x1c2>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	6121      	str	r1, [r4, #16]
 8004b3a:	07d8      	lsls	r0, r3, #31
 8004b3c:	d5ea      	bpl.n	8004b14 <_printf_float+0x194>
 8004b3e:	1c4b      	adds	r3, r1, #1
 8004b40:	e7e7      	b.n	8004b12 <_printf_float+0x192>
 8004b42:	2900      	cmp	r1, #0
 8004b44:	bfd4      	ite	le
 8004b46:	f1c1 0202 	rsble	r2, r1, #2
 8004b4a:	2201      	movgt	r2, #1
 8004b4c:	4413      	add	r3, r2
 8004b4e:	e7e0      	b.n	8004b12 <_printf_float+0x192>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	055a      	lsls	r2, r3, #21
 8004b54:	d407      	bmi.n	8004b66 <_printf_float+0x1e6>
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	4642      	mov	r2, r8
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b8      	blx	r7
 8004b60:	3001      	adds	r0, #1
 8004b62:	d12b      	bne.n	8004bbc <_printf_float+0x23c>
 8004b64:	e767      	b.n	8004a36 <_printf_float+0xb6>
 8004b66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b6a:	f240 80dd 	bls.w	8004d28 <_printf_float+0x3a8>
 8004b6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b72:	2200      	movs	r2, #0
 8004b74:	2300      	movs	r3, #0
 8004b76:	f7fb ffa7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d033      	beq.n	8004be6 <_printf_float+0x266>
 8004b7e:	4a37      	ldr	r2, [pc, #220]	@ (8004c5c <_printf_float+0x2dc>)
 8004b80:	2301      	movs	r3, #1
 8004b82:	4631      	mov	r1, r6
 8004b84:	4628      	mov	r0, r5
 8004b86:	47b8      	blx	r7
 8004b88:	3001      	adds	r0, #1
 8004b8a:	f43f af54 	beq.w	8004a36 <_printf_float+0xb6>
 8004b8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004b92:	4543      	cmp	r3, r8
 8004b94:	db02      	blt.n	8004b9c <_printf_float+0x21c>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	07d8      	lsls	r0, r3, #31
 8004b9a:	d50f      	bpl.n	8004bbc <_printf_float+0x23c>
 8004b9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b8      	blx	r7
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	f43f af45 	beq.w	8004a36 <_printf_float+0xb6>
 8004bac:	f04f 0900 	mov.w	r9, #0
 8004bb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bb4:	f104 0a1a 	add.w	sl, r4, #26
 8004bb8:	45c8      	cmp	r8, r9
 8004bba:	dc09      	bgt.n	8004bd0 <_printf_float+0x250>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	079b      	lsls	r3, r3, #30
 8004bc0:	f100 8103 	bmi.w	8004dca <_printf_float+0x44a>
 8004bc4:	68e0      	ldr	r0, [r4, #12]
 8004bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bc8:	4298      	cmp	r0, r3
 8004bca:	bfb8      	it	lt
 8004bcc:	4618      	movlt	r0, r3
 8004bce:	e734      	b.n	8004a3a <_printf_float+0xba>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4652      	mov	r2, sl
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f af2b 	beq.w	8004a36 <_printf_float+0xb6>
 8004be0:	f109 0901 	add.w	r9, r9, #1
 8004be4:	e7e8      	b.n	8004bb8 <_printf_float+0x238>
 8004be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	dc39      	bgt.n	8004c60 <_printf_float+0x2e0>
 8004bec:	4a1b      	ldr	r2, [pc, #108]	@ (8004c5c <_printf_float+0x2dc>)
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	47b8      	blx	r7
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	f43f af1d 	beq.w	8004a36 <_printf_float+0xb6>
 8004bfc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004c00:	ea59 0303 	orrs.w	r3, r9, r3
 8004c04:	d102      	bne.n	8004c0c <_printf_float+0x28c>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	07d9      	lsls	r1, r3, #31
 8004c0a:	d5d7      	bpl.n	8004bbc <_printf_float+0x23c>
 8004c0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c10:	4631      	mov	r1, r6
 8004c12:	4628      	mov	r0, r5
 8004c14:	47b8      	blx	r7
 8004c16:	3001      	adds	r0, #1
 8004c18:	f43f af0d 	beq.w	8004a36 <_printf_float+0xb6>
 8004c1c:	f04f 0a00 	mov.w	sl, #0
 8004c20:	f104 0b1a 	add.w	fp, r4, #26
 8004c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c26:	425b      	negs	r3, r3
 8004c28:	4553      	cmp	r3, sl
 8004c2a:	dc01      	bgt.n	8004c30 <_printf_float+0x2b0>
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	e793      	b.n	8004b58 <_printf_float+0x1d8>
 8004c30:	2301      	movs	r3, #1
 8004c32:	465a      	mov	r2, fp
 8004c34:	4631      	mov	r1, r6
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b8      	blx	r7
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f43f aefb 	beq.w	8004a36 <_printf_float+0xb6>
 8004c40:	f10a 0a01 	add.w	sl, sl, #1
 8004c44:	e7ee      	b.n	8004c24 <_printf_float+0x2a4>
 8004c46:	bf00      	nop
 8004c48:	7fefffff 	.word	0x7fefffff
 8004c4c:	08007fc4 	.word	0x08007fc4
 8004c50:	08007fc0 	.word	0x08007fc0
 8004c54:	08007fcc 	.word	0x08007fcc
 8004c58:	08007fc8 	.word	0x08007fc8
 8004c5c:	08007fd0 	.word	0x08007fd0
 8004c60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c62:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c66:	4553      	cmp	r3, sl
 8004c68:	bfa8      	it	ge
 8004c6a:	4653      	movge	r3, sl
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	4699      	mov	r9, r3
 8004c70:	dc36      	bgt.n	8004ce0 <_printf_float+0x360>
 8004c72:	f04f 0b00 	mov.w	fp, #0
 8004c76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c7a:	f104 021a 	add.w	r2, r4, #26
 8004c7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c80:	9306      	str	r3, [sp, #24]
 8004c82:	eba3 0309 	sub.w	r3, r3, r9
 8004c86:	455b      	cmp	r3, fp
 8004c88:	dc31      	bgt.n	8004cee <_printf_float+0x36e>
 8004c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c8c:	459a      	cmp	sl, r3
 8004c8e:	dc3a      	bgt.n	8004d06 <_printf_float+0x386>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07da      	lsls	r2, r3, #31
 8004c94:	d437      	bmi.n	8004d06 <_printf_float+0x386>
 8004c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c98:	ebaa 0903 	sub.w	r9, sl, r3
 8004c9c:	9b06      	ldr	r3, [sp, #24]
 8004c9e:	ebaa 0303 	sub.w	r3, sl, r3
 8004ca2:	4599      	cmp	r9, r3
 8004ca4:	bfa8      	it	ge
 8004ca6:	4699      	movge	r9, r3
 8004ca8:	f1b9 0f00 	cmp.w	r9, #0
 8004cac:	dc33      	bgt.n	8004d16 <_printf_float+0x396>
 8004cae:	f04f 0800 	mov.w	r8, #0
 8004cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cb6:	f104 0b1a 	add.w	fp, r4, #26
 8004cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cbc:	ebaa 0303 	sub.w	r3, sl, r3
 8004cc0:	eba3 0309 	sub.w	r3, r3, r9
 8004cc4:	4543      	cmp	r3, r8
 8004cc6:	f77f af79 	ble.w	8004bbc <_printf_float+0x23c>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	465a      	mov	r2, fp
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f aeae 	beq.w	8004a36 <_printf_float+0xb6>
 8004cda:	f108 0801 	add.w	r8, r8, #1
 8004cde:	e7ec      	b.n	8004cba <_printf_float+0x33a>
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d1c2      	bne.n	8004c72 <_printf_float+0x2f2>
 8004cec:	e6a3      	b.n	8004a36 <_printf_float+0xb6>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	9206      	str	r2, [sp, #24]
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	f43f ae9c 	beq.w	8004a36 <_printf_float+0xb6>
 8004cfe:	9a06      	ldr	r2, [sp, #24]
 8004d00:	f10b 0b01 	add.w	fp, fp, #1
 8004d04:	e7bb      	b.n	8004c7e <_printf_float+0x2fe>
 8004d06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	d1c0      	bne.n	8004c96 <_printf_float+0x316>
 8004d14:	e68f      	b.n	8004a36 <_printf_float+0xb6>
 8004d16:	9a06      	ldr	r2, [sp, #24]
 8004d18:	464b      	mov	r3, r9
 8004d1a:	4442      	add	r2, r8
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	d1c3      	bne.n	8004cae <_printf_float+0x32e>
 8004d26:	e686      	b.n	8004a36 <_printf_float+0xb6>
 8004d28:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d2c:	f1ba 0f01 	cmp.w	sl, #1
 8004d30:	dc01      	bgt.n	8004d36 <_printf_float+0x3b6>
 8004d32:	07db      	lsls	r3, r3, #31
 8004d34:	d536      	bpl.n	8004da4 <_printf_float+0x424>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4642      	mov	r2, r8
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b8      	blx	r7
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f ae78 	beq.w	8004a36 <_printf_float+0xb6>
 8004d46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	47b8      	blx	r7
 8004d50:	3001      	adds	r0, #1
 8004d52:	f43f ae70 	beq.w	8004a36 <_printf_float+0xb6>
 8004d56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d62:	f7fb feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d66:	b9c0      	cbnz	r0, 8004d9a <_printf_float+0x41a>
 8004d68:	4653      	mov	r3, sl
 8004d6a:	f108 0201 	add.w	r2, r8, #1
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	d10c      	bne.n	8004d92 <_printf_float+0x412>
 8004d78:	e65d      	b.n	8004a36 <_printf_float+0xb6>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	465a      	mov	r2, fp
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4628      	mov	r0, r5
 8004d82:	47b8      	blx	r7
 8004d84:	3001      	adds	r0, #1
 8004d86:	f43f ae56 	beq.w	8004a36 <_printf_float+0xb6>
 8004d8a:	f108 0801 	add.w	r8, r8, #1
 8004d8e:	45d0      	cmp	r8, sl
 8004d90:	dbf3      	blt.n	8004d7a <_printf_float+0x3fa>
 8004d92:	464b      	mov	r3, r9
 8004d94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004d98:	e6df      	b.n	8004b5a <_printf_float+0x1da>
 8004d9a:	f04f 0800 	mov.w	r8, #0
 8004d9e:	f104 0b1a 	add.w	fp, r4, #26
 8004da2:	e7f4      	b.n	8004d8e <_printf_float+0x40e>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4642      	mov	r2, r8
 8004da8:	e7e1      	b.n	8004d6e <_printf_float+0x3ee>
 8004daa:	2301      	movs	r3, #1
 8004dac:	464a      	mov	r2, r9
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f ae3e 	beq.w	8004a36 <_printf_float+0xb6>
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	68e3      	ldr	r3, [r4, #12]
 8004dc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004dc2:	1a5b      	subs	r3, r3, r1
 8004dc4:	4543      	cmp	r3, r8
 8004dc6:	dcf0      	bgt.n	8004daa <_printf_float+0x42a>
 8004dc8:	e6fc      	b.n	8004bc4 <_printf_float+0x244>
 8004dca:	f04f 0800 	mov.w	r8, #0
 8004dce:	f104 0919 	add.w	r9, r4, #25
 8004dd2:	e7f4      	b.n	8004dbe <_printf_float+0x43e>

08004dd4 <_printf_common>:
 8004dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd8:	4616      	mov	r6, r2
 8004dda:	4698      	mov	r8, r3
 8004ddc:	688a      	ldr	r2, [r1, #8]
 8004dde:	690b      	ldr	r3, [r1, #16]
 8004de0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	bfb8      	it	lt
 8004de8:	4613      	movlt	r3, r2
 8004dea:	6033      	str	r3, [r6, #0]
 8004dec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004df0:	4607      	mov	r7, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	b10a      	cbz	r2, 8004dfa <_printf_common+0x26>
 8004df6:	3301      	adds	r3, #1
 8004df8:	6033      	str	r3, [r6, #0]
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	0699      	lsls	r1, r3, #26
 8004dfe:	bf42      	ittt	mi
 8004e00:	6833      	ldrmi	r3, [r6, #0]
 8004e02:	3302      	addmi	r3, #2
 8004e04:	6033      	strmi	r3, [r6, #0]
 8004e06:	6825      	ldr	r5, [r4, #0]
 8004e08:	f015 0506 	ands.w	r5, r5, #6
 8004e0c:	d106      	bne.n	8004e1c <_printf_common+0x48>
 8004e0e:	f104 0a19 	add.w	sl, r4, #25
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	6832      	ldr	r2, [r6, #0]
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	dc26      	bgt.n	8004e6a <_printf_common+0x96>
 8004e1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	3b00      	subs	r3, #0
 8004e24:	bf18      	it	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	0692      	lsls	r2, r2, #26
 8004e2a:	d42b      	bmi.n	8004e84 <_printf_common+0xb0>
 8004e2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e30:	4641      	mov	r1, r8
 8004e32:	4638      	mov	r0, r7
 8004e34:	47c8      	blx	r9
 8004e36:	3001      	adds	r0, #1
 8004e38:	d01e      	beq.n	8004e78 <_printf_common+0xa4>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	6922      	ldr	r2, [r4, #16]
 8004e3e:	f003 0306 	and.w	r3, r3, #6
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	bf02      	ittt	eq
 8004e46:	68e5      	ldreq	r5, [r4, #12]
 8004e48:	6833      	ldreq	r3, [r6, #0]
 8004e4a:	1aed      	subeq	r5, r5, r3
 8004e4c:	68a3      	ldr	r3, [r4, #8]
 8004e4e:	bf0c      	ite	eq
 8004e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e54:	2500      	movne	r5, #0
 8004e56:	4293      	cmp	r3, r2
 8004e58:	bfc4      	itt	gt
 8004e5a:	1a9b      	subgt	r3, r3, r2
 8004e5c:	18ed      	addgt	r5, r5, r3
 8004e5e:	2600      	movs	r6, #0
 8004e60:	341a      	adds	r4, #26
 8004e62:	42b5      	cmp	r5, r6
 8004e64:	d11a      	bne.n	8004e9c <_printf_common+0xc8>
 8004e66:	2000      	movs	r0, #0
 8004e68:	e008      	b.n	8004e7c <_printf_common+0xa8>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4652      	mov	r2, sl
 8004e6e:	4641      	mov	r1, r8
 8004e70:	4638      	mov	r0, r7
 8004e72:	47c8      	blx	r9
 8004e74:	3001      	adds	r0, #1
 8004e76:	d103      	bne.n	8004e80 <_printf_common+0xac>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e80:	3501      	adds	r5, #1
 8004e82:	e7c6      	b.n	8004e12 <_printf_common+0x3e>
 8004e84:	18e1      	adds	r1, r4, r3
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	2030      	movs	r0, #48	@ 0x30
 8004e8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e8e:	4422      	add	r2, r4
 8004e90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e98:	3302      	adds	r3, #2
 8004e9a:	e7c7      	b.n	8004e2c <_printf_common+0x58>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	47c8      	blx	r9
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d0e6      	beq.n	8004e78 <_printf_common+0xa4>
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7d9      	b.n	8004e62 <_printf_common+0x8e>
	...

08004eb0 <_printf_i>:
 8004eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb4:	7e0f      	ldrb	r7, [r1, #24]
 8004eb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004eb8:	2f78      	cmp	r7, #120	@ 0x78
 8004eba:	4691      	mov	r9, r2
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	469a      	mov	sl, r3
 8004ec2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ec6:	d807      	bhi.n	8004ed8 <_printf_i+0x28>
 8004ec8:	2f62      	cmp	r7, #98	@ 0x62
 8004eca:	d80a      	bhi.n	8004ee2 <_printf_i+0x32>
 8004ecc:	2f00      	cmp	r7, #0
 8004ece:	f000 80d1 	beq.w	8005074 <_printf_i+0x1c4>
 8004ed2:	2f58      	cmp	r7, #88	@ 0x58
 8004ed4:	f000 80b8 	beq.w	8005048 <_printf_i+0x198>
 8004ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004edc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ee0:	e03a      	b.n	8004f58 <_printf_i+0xa8>
 8004ee2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ee6:	2b15      	cmp	r3, #21
 8004ee8:	d8f6      	bhi.n	8004ed8 <_printf_i+0x28>
 8004eea:	a101      	add	r1, pc, #4	@ (adr r1, 8004ef0 <_printf_i+0x40>)
 8004eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef0:	08004f49 	.word	0x08004f49
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004ed9 	.word	0x08004ed9
 8004efc:	08004ed9 	.word	0x08004ed9
 8004f00:	08004ed9 	.word	0x08004ed9
 8004f04:	08004ed9 	.word	0x08004ed9
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004ed9 	.word	0x08004ed9
 8004f10:	08004ed9 	.word	0x08004ed9
 8004f14:	08004ed9 	.word	0x08004ed9
 8004f18:	08004ed9 	.word	0x08004ed9
 8004f1c:	0800505b 	.word	0x0800505b
 8004f20:	08004f87 	.word	0x08004f87
 8004f24:	08005015 	.word	0x08005015
 8004f28:	08004ed9 	.word	0x08004ed9
 8004f2c:	08004ed9 	.word	0x08004ed9
 8004f30:	0800507d 	.word	0x0800507d
 8004f34:	08004ed9 	.word	0x08004ed9
 8004f38:	08004f87 	.word	0x08004f87
 8004f3c:	08004ed9 	.word	0x08004ed9
 8004f40:	08004ed9 	.word	0x08004ed9
 8004f44:	0800501d 	.word	0x0800501d
 8004f48:	6833      	ldr	r3, [r6, #0]
 8004f4a:	1d1a      	adds	r2, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6032      	str	r2, [r6, #0]
 8004f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e09c      	b.n	8005096 <_printf_i+0x1e6>
 8004f5c:	6833      	ldr	r3, [r6, #0]
 8004f5e:	6820      	ldr	r0, [r4, #0]
 8004f60:	1d19      	adds	r1, r3, #4
 8004f62:	6031      	str	r1, [r6, #0]
 8004f64:	0606      	lsls	r6, r0, #24
 8004f66:	d501      	bpl.n	8004f6c <_printf_i+0xbc>
 8004f68:	681d      	ldr	r5, [r3, #0]
 8004f6a:	e003      	b.n	8004f74 <_printf_i+0xc4>
 8004f6c:	0645      	lsls	r5, r0, #25
 8004f6e:	d5fb      	bpl.n	8004f68 <_printf_i+0xb8>
 8004f70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	da03      	bge.n	8004f80 <_printf_i+0xd0>
 8004f78:	232d      	movs	r3, #45	@ 0x2d
 8004f7a:	426d      	negs	r5, r5
 8004f7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f80:	4858      	ldr	r0, [pc, #352]	@ (80050e4 <_printf_i+0x234>)
 8004f82:	230a      	movs	r3, #10
 8004f84:	e011      	b.n	8004faa <_printf_i+0xfa>
 8004f86:	6821      	ldr	r1, [r4, #0]
 8004f88:	6833      	ldr	r3, [r6, #0]
 8004f8a:	0608      	lsls	r0, r1, #24
 8004f8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f90:	d402      	bmi.n	8004f98 <_printf_i+0xe8>
 8004f92:	0649      	lsls	r1, r1, #25
 8004f94:	bf48      	it	mi
 8004f96:	b2ad      	uxthmi	r5, r5
 8004f98:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f9a:	4852      	ldr	r0, [pc, #328]	@ (80050e4 <_printf_i+0x234>)
 8004f9c:	6033      	str	r3, [r6, #0]
 8004f9e:	bf14      	ite	ne
 8004fa0:	230a      	movne	r3, #10
 8004fa2:	2308      	moveq	r3, #8
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004faa:	6866      	ldr	r6, [r4, #4]
 8004fac:	60a6      	str	r6, [r4, #8]
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	db05      	blt.n	8004fbe <_printf_i+0x10e>
 8004fb2:	6821      	ldr	r1, [r4, #0]
 8004fb4:	432e      	orrs	r6, r5
 8004fb6:	f021 0104 	bic.w	r1, r1, #4
 8004fba:	6021      	str	r1, [r4, #0]
 8004fbc:	d04b      	beq.n	8005056 <_printf_i+0x1a6>
 8004fbe:	4616      	mov	r6, r2
 8004fc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fc4:	fb03 5711 	mls	r7, r3, r1, r5
 8004fc8:	5dc7      	ldrb	r7, [r0, r7]
 8004fca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fce:	462f      	mov	r7, r5
 8004fd0:	42bb      	cmp	r3, r7
 8004fd2:	460d      	mov	r5, r1
 8004fd4:	d9f4      	bls.n	8004fc0 <_printf_i+0x110>
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d10b      	bne.n	8004ff2 <_printf_i+0x142>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	07df      	lsls	r7, r3, #31
 8004fde:	d508      	bpl.n	8004ff2 <_printf_i+0x142>
 8004fe0:	6923      	ldr	r3, [r4, #16]
 8004fe2:	6861      	ldr	r1, [r4, #4]
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	bfde      	ittt	le
 8004fe8:	2330      	movle	r3, #48	@ 0x30
 8004fea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ff2:	1b92      	subs	r2, r2, r6
 8004ff4:	6122      	str	r2, [r4, #16]
 8004ff6:	f8cd a000 	str.w	sl, [sp]
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	aa03      	add	r2, sp, #12
 8004ffe:	4621      	mov	r1, r4
 8005000:	4640      	mov	r0, r8
 8005002:	f7ff fee7 	bl	8004dd4 <_printf_common>
 8005006:	3001      	adds	r0, #1
 8005008:	d14a      	bne.n	80050a0 <_printf_i+0x1f0>
 800500a:	f04f 30ff 	mov.w	r0, #4294967295
 800500e:	b004      	add	sp, #16
 8005010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	f043 0320 	orr.w	r3, r3, #32
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	4832      	ldr	r0, [pc, #200]	@ (80050e8 <_printf_i+0x238>)
 800501e:	2778      	movs	r7, #120	@ 0x78
 8005020:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	6831      	ldr	r1, [r6, #0]
 8005028:	061f      	lsls	r7, r3, #24
 800502a:	f851 5b04 	ldr.w	r5, [r1], #4
 800502e:	d402      	bmi.n	8005036 <_printf_i+0x186>
 8005030:	065f      	lsls	r7, r3, #25
 8005032:	bf48      	it	mi
 8005034:	b2ad      	uxthmi	r5, r5
 8005036:	6031      	str	r1, [r6, #0]
 8005038:	07d9      	lsls	r1, r3, #31
 800503a:	bf44      	itt	mi
 800503c:	f043 0320 	orrmi.w	r3, r3, #32
 8005040:	6023      	strmi	r3, [r4, #0]
 8005042:	b11d      	cbz	r5, 800504c <_printf_i+0x19c>
 8005044:	2310      	movs	r3, #16
 8005046:	e7ad      	b.n	8004fa4 <_printf_i+0xf4>
 8005048:	4826      	ldr	r0, [pc, #152]	@ (80050e4 <_printf_i+0x234>)
 800504a:	e7e9      	b.n	8005020 <_printf_i+0x170>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	f023 0320 	bic.w	r3, r3, #32
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	e7f6      	b.n	8005044 <_printf_i+0x194>
 8005056:	4616      	mov	r6, r2
 8005058:	e7bd      	b.n	8004fd6 <_printf_i+0x126>
 800505a:	6833      	ldr	r3, [r6, #0]
 800505c:	6825      	ldr	r5, [r4, #0]
 800505e:	6961      	ldr	r1, [r4, #20]
 8005060:	1d18      	adds	r0, r3, #4
 8005062:	6030      	str	r0, [r6, #0]
 8005064:	062e      	lsls	r6, r5, #24
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	d501      	bpl.n	800506e <_printf_i+0x1be>
 800506a:	6019      	str	r1, [r3, #0]
 800506c:	e002      	b.n	8005074 <_printf_i+0x1c4>
 800506e:	0668      	lsls	r0, r5, #25
 8005070:	d5fb      	bpl.n	800506a <_printf_i+0x1ba>
 8005072:	8019      	strh	r1, [r3, #0]
 8005074:	2300      	movs	r3, #0
 8005076:	6123      	str	r3, [r4, #16]
 8005078:	4616      	mov	r6, r2
 800507a:	e7bc      	b.n	8004ff6 <_printf_i+0x146>
 800507c:	6833      	ldr	r3, [r6, #0]
 800507e:	1d1a      	adds	r2, r3, #4
 8005080:	6032      	str	r2, [r6, #0]
 8005082:	681e      	ldr	r6, [r3, #0]
 8005084:	6862      	ldr	r2, [r4, #4]
 8005086:	2100      	movs	r1, #0
 8005088:	4630      	mov	r0, r6
 800508a:	f7fb f8a1 	bl	80001d0 <memchr>
 800508e:	b108      	cbz	r0, 8005094 <_printf_i+0x1e4>
 8005090:	1b80      	subs	r0, r0, r6
 8005092:	6060      	str	r0, [r4, #4]
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	6123      	str	r3, [r4, #16]
 8005098:	2300      	movs	r3, #0
 800509a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800509e:	e7aa      	b.n	8004ff6 <_printf_i+0x146>
 80050a0:	6923      	ldr	r3, [r4, #16]
 80050a2:	4632      	mov	r2, r6
 80050a4:	4649      	mov	r1, r9
 80050a6:	4640      	mov	r0, r8
 80050a8:	47d0      	blx	sl
 80050aa:	3001      	adds	r0, #1
 80050ac:	d0ad      	beq.n	800500a <_printf_i+0x15a>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	079b      	lsls	r3, r3, #30
 80050b2:	d413      	bmi.n	80050dc <_printf_i+0x22c>
 80050b4:	68e0      	ldr	r0, [r4, #12]
 80050b6:	9b03      	ldr	r3, [sp, #12]
 80050b8:	4298      	cmp	r0, r3
 80050ba:	bfb8      	it	lt
 80050bc:	4618      	movlt	r0, r3
 80050be:	e7a6      	b.n	800500e <_printf_i+0x15e>
 80050c0:	2301      	movs	r3, #1
 80050c2:	4632      	mov	r2, r6
 80050c4:	4649      	mov	r1, r9
 80050c6:	4640      	mov	r0, r8
 80050c8:	47d0      	blx	sl
 80050ca:	3001      	adds	r0, #1
 80050cc:	d09d      	beq.n	800500a <_printf_i+0x15a>
 80050ce:	3501      	adds	r5, #1
 80050d0:	68e3      	ldr	r3, [r4, #12]
 80050d2:	9903      	ldr	r1, [sp, #12]
 80050d4:	1a5b      	subs	r3, r3, r1
 80050d6:	42ab      	cmp	r3, r5
 80050d8:	dcf2      	bgt.n	80050c0 <_printf_i+0x210>
 80050da:	e7eb      	b.n	80050b4 <_printf_i+0x204>
 80050dc:	2500      	movs	r5, #0
 80050de:	f104 0619 	add.w	r6, r4, #25
 80050e2:	e7f5      	b.n	80050d0 <_printf_i+0x220>
 80050e4:	08007fd2 	.word	0x08007fd2
 80050e8:	08007fe3 	.word	0x08007fe3

080050ec <std>:
 80050ec:	2300      	movs	r3, #0
 80050ee:	b510      	push	{r4, lr}
 80050f0:	4604      	mov	r4, r0
 80050f2:	e9c0 3300 	strd	r3, r3, [r0]
 80050f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050fa:	6083      	str	r3, [r0, #8]
 80050fc:	8181      	strh	r1, [r0, #12]
 80050fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005100:	81c2      	strh	r2, [r0, #14]
 8005102:	6183      	str	r3, [r0, #24]
 8005104:	4619      	mov	r1, r3
 8005106:	2208      	movs	r2, #8
 8005108:	305c      	adds	r0, #92	@ 0x5c
 800510a:	f000 f9f9 	bl	8005500 <memset>
 800510e:	4b0d      	ldr	r3, [pc, #52]	@ (8005144 <std+0x58>)
 8005110:	6263      	str	r3, [r4, #36]	@ 0x24
 8005112:	4b0d      	ldr	r3, [pc, #52]	@ (8005148 <std+0x5c>)
 8005114:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <std+0x60>)
 8005118:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800511a:	4b0d      	ldr	r3, [pc, #52]	@ (8005150 <std+0x64>)
 800511c:	6323      	str	r3, [r4, #48]	@ 0x30
 800511e:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <std+0x68>)
 8005120:	6224      	str	r4, [r4, #32]
 8005122:	429c      	cmp	r4, r3
 8005124:	d006      	beq.n	8005134 <std+0x48>
 8005126:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800512a:	4294      	cmp	r4, r2
 800512c:	d002      	beq.n	8005134 <std+0x48>
 800512e:	33d0      	adds	r3, #208	@ 0xd0
 8005130:	429c      	cmp	r4, r3
 8005132:	d105      	bne.n	8005140 <std+0x54>
 8005134:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800513c:	f000 ba5c 	b.w	80055f8 <__retarget_lock_init_recursive>
 8005140:	bd10      	pop	{r4, pc}
 8005142:	bf00      	nop
 8005144:	08005351 	.word	0x08005351
 8005148:	08005373 	.word	0x08005373
 800514c:	080053ab 	.word	0x080053ab
 8005150:	080053cf 	.word	0x080053cf
 8005154:	200002d0 	.word	0x200002d0

08005158 <stdio_exit_handler>:
 8005158:	4a02      	ldr	r2, [pc, #8]	@ (8005164 <stdio_exit_handler+0xc>)
 800515a:	4903      	ldr	r1, [pc, #12]	@ (8005168 <stdio_exit_handler+0x10>)
 800515c:	4803      	ldr	r0, [pc, #12]	@ (800516c <stdio_exit_handler+0x14>)
 800515e:	f000 b869 	b.w	8005234 <_fwalk_sglue>
 8005162:	bf00      	nop
 8005164:	20000010 	.word	0x20000010
 8005168:	08006f31 	.word	0x08006f31
 800516c:	20000020 	.word	0x20000020

08005170 <cleanup_stdio>:
 8005170:	6841      	ldr	r1, [r0, #4]
 8005172:	4b0c      	ldr	r3, [pc, #48]	@ (80051a4 <cleanup_stdio+0x34>)
 8005174:	4299      	cmp	r1, r3
 8005176:	b510      	push	{r4, lr}
 8005178:	4604      	mov	r4, r0
 800517a:	d001      	beq.n	8005180 <cleanup_stdio+0x10>
 800517c:	f001 fed8 	bl	8006f30 <_fflush_r>
 8005180:	68a1      	ldr	r1, [r4, #8]
 8005182:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <cleanup_stdio+0x38>)
 8005184:	4299      	cmp	r1, r3
 8005186:	d002      	beq.n	800518e <cleanup_stdio+0x1e>
 8005188:	4620      	mov	r0, r4
 800518a:	f001 fed1 	bl	8006f30 <_fflush_r>
 800518e:	68e1      	ldr	r1, [r4, #12]
 8005190:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <cleanup_stdio+0x3c>)
 8005192:	4299      	cmp	r1, r3
 8005194:	d004      	beq.n	80051a0 <cleanup_stdio+0x30>
 8005196:	4620      	mov	r0, r4
 8005198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800519c:	f001 bec8 	b.w	8006f30 <_fflush_r>
 80051a0:	bd10      	pop	{r4, pc}
 80051a2:	bf00      	nop
 80051a4:	200002d0 	.word	0x200002d0
 80051a8:	20000338 	.word	0x20000338
 80051ac:	200003a0 	.word	0x200003a0

080051b0 <global_stdio_init.part.0>:
 80051b0:	b510      	push	{r4, lr}
 80051b2:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <global_stdio_init.part.0+0x30>)
 80051b4:	4c0b      	ldr	r4, [pc, #44]	@ (80051e4 <global_stdio_init.part.0+0x34>)
 80051b6:	4a0c      	ldr	r2, [pc, #48]	@ (80051e8 <global_stdio_init.part.0+0x38>)
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	4620      	mov	r0, r4
 80051bc:	2200      	movs	r2, #0
 80051be:	2104      	movs	r1, #4
 80051c0:	f7ff ff94 	bl	80050ec <std>
 80051c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051c8:	2201      	movs	r2, #1
 80051ca:	2109      	movs	r1, #9
 80051cc:	f7ff ff8e 	bl	80050ec <std>
 80051d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051d4:	2202      	movs	r2, #2
 80051d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051da:	2112      	movs	r1, #18
 80051dc:	f7ff bf86 	b.w	80050ec <std>
 80051e0:	20000408 	.word	0x20000408
 80051e4:	200002d0 	.word	0x200002d0
 80051e8:	08005159 	.word	0x08005159

080051ec <__sfp_lock_acquire>:
 80051ec:	4801      	ldr	r0, [pc, #4]	@ (80051f4 <__sfp_lock_acquire+0x8>)
 80051ee:	f000 ba04 	b.w	80055fa <__retarget_lock_acquire_recursive>
 80051f2:	bf00      	nop
 80051f4:	20000411 	.word	0x20000411

080051f8 <__sfp_lock_release>:
 80051f8:	4801      	ldr	r0, [pc, #4]	@ (8005200 <__sfp_lock_release+0x8>)
 80051fa:	f000 b9ff 	b.w	80055fc <__retarget_lock_release_recursive>
 80051fe:	bf00      	nop
 8005200:	20000411 	.word	0x20000411

08005204 <__sinit>:
 8005204:	b510      	push	{r4, lr}
 8005206:	4604      	mov	r4, r0
 8005208:	f7ff fff0 	bl	80051ec <__sfp_lock_acquire>
 800520c:	6a23      	ldr	r3, [r4, #32]
 800520e:	b11b      	cbz	r3, 8005218 <__sinit+0x14>
 8005210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005214:	f7ff bff0 	b.w	80051f8 <__sfp_lock_release>
 8005218:	4b04      	ldr	r3, [pc, #16]	@ (800522c <__sinit+0x28>)
 800521a:	6223      	str	r3, [r4, #32]
 800521c:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <__sinit+0x2c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1f5      	bne.n	8005210 <__sinit+0xc>
 8005224:	f7ff ffc4 	bl	80051b0 <global_stdio_init.part.0>
 8005228:	e7f2      	b.n	8005210 <__sinit+0xc>
 800522a:	bf00      	nop
 800522c:	08005171 	.word	0x08005171
 8005230:	20000408 	.word	0x20000408

08005234 <_fwalk_sglue>:
 8005234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005238:	4607      	mov	r7, r0
 800523a:	4688      	mov	r8, r1
 800523c:	4614      	mov	r4, r2
 800523e:	2600      	movs	r6, #0
 8005240:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005244:	f1b9 0901 	subs.w	r9, r9, #1
 8005248:	d505      	bpl.n	8005256 <_fwalk_sglue+0x22>
 800524a:	6824      	ldr	r4, [r4, #0]
 800524c:	2c00      	cmp	r4, #0
 800524e:	d1f7      	bne.n	8005240 <_fwalk_sglue+0xc>
 8005250:	4630      	mov	r0, r6
 8005252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005256:	89ab      	ldrh	r3, [r5, #12]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d907      	bls.n	800526c <_fwalk_sglue+0x38>
 800525c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005260:	3301      	adds	r3, #1
 8005262:	d003      	beq.n	800526c <_fwalk_sglue+0x38>
 8005264:	4629      	mov	r1, r5
 8005266:	4638      	mov	r0, r7
 8005268:	47c0      	blx	r8
 800526a:	4306      	orrs	r6, r0
 800526c:	3568      	adds	r5, #104	@ 0x68
 800526e:	e7e9      	b.n	8005244 <_fwalk_sglue+0x10>

08005270 <iprintf>:
 8005270:	b40f      	push	{r0, r1, r2, r3}
 8005272:	b507      	push	{r0, r1, r2, lr}
 8005274:	4906      	ldr	r1, [pc, #24]	@ (8005290 <iprintf+0x20>)
 8005276:	ab04      	add	r3, sp, #16
 8005278:	6808      	ldr	r0, [r1, #0]
 800527a:	f853 2b04 	ldr.w	r2, [r3], #4
 800527e:	6881      	ldr	r1, [r0, #8]
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	f001 fcb9 	bl	8006bf8 <_vfiprintf_r>
 8005286:	b003      	add	sp, #12
 8005288:	f85d eb04 	ldr.w	lr, [sp], #4
 800528c:	b004      	add	sp, #16
 800528e:	4770      	bx	lr
 8005290:	2000001c 	.word	0x2000001c

08005294 <_puts_r>:
 8005294:	6a03      	ldr	r3, [r0, #32]
 8005296:	b570      	push	{r4, r5, r6, lr}
 8005298:	6884      	ldr	r4, [r0, #8]
 800529a:	4605      	mov	r5, r0
 800529c:	460e      	mov	r6, r1
 800529e:	b90b      	cbnz	r3, 80052a4 <_puts_r+0x10>
 80052a0:	f7ff ffb0 	bl	8005204 <__sinit>
 80052a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052a6:	07db      	lsls	r3, r3, #31
 80052a8:	d405      	bmi.n	80052b6 <_puts_r+0x22>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	0598      	lsls	r0, r3, #22
 80052ae:	d402      	bmi.n	80052b6 <_puts_r+0x22>
 80052b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052b2:	f000 f9a2 	bl	80055fa <__retarget_lock_acquire_recursive>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	0719      	lsls	r1, r3, #28
 80052ba:	d502      	bpl.n	80052c2 <_puts_r+0x2e>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d135      	bne.n	800532e <_puts_r+0x9a>
 80052c2:	4621      	mov	r1, r4
 80052c4:	4628      	mov	r0, r5
 80052c6:	f000 f8c5 	bl	8005454 <__swsetup_r>
 80052ca:	b380      	cbz	r0, 800532e <_puts_r+0x9a>
 80052cc:	f04f 35ff 	mov.w	r5, #4294967295
 80052d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052d2:	07da      	lsls	r2, r3, #31
 80052d4:	d405      	bmi.n	80052e2 <_puts_r+0x4e>
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	059b      	lsls	r3, r3, #22
 80052da:	d402      	bmi.n	80052e2 <_puts_r+0x4e>
 80052dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052de:	f000 f98d 	bl	80055fc <__retarget_lock_release_recursive>
 80052e2:	4628      	mov	r0, r5
 80052e4:	bd70      	pop	{r4, r5, r6, pc}
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	da04      	bge.n	80052f4 <_puts_r+0x60>
 80052ea:	69a2      	ldr	r2, [r4, #24]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	dc17      	bgt.n	8005320 <_puts_r+0x8c>
 80052f0:	290a      	cmp	r1, #10
 80052f2:	d015      	beq.n	8005320 <_puts_r+0x8c>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	6022      	str	r2, [r4, #0]
 80052fa:	7019      	strb	r1, [r3, #0]
 80052fc:	68a3      	ldr	r3, [r4, #8]
 80052fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005302:	3b01      	subs	r3, #1
 8005304:	60a3      	str	r3, [r4, #8]
 8005306:	2900      	cmp	r1, #0
 8005308:	d1ed      	bne.n	80052e6 <_puts_r+0x52>
 800530a:	2b00      	cmp	r3, #0
 800530c:	da11      	bge.n	8005332 <_puts_r+0x9e>
 800530e:	4622      	mov	r2, r4
 8005310:	210a      	movs	r1, #10
 8005312:	4628      	mov	r0, r5
 8005314:	f000 f85f 	bl	80053d6 <__swbuf_r>
 8005318:	3001      	adds	r0, #1
 800531a:	d0d7      	beq.n	80052cc <_puts_r+0x38>
 800531c:	250a      	movs	r5, #10
 800531e:	e7d7      	b.n	80052d0 <_puts_r+0x3c>
 8005320:	4622      	mov	r2, r4
 8005322:	4628      	mov	r0, r5
 8005324:	f000 f857 	bl	80053d6 <__swbuf_r>
 8005328:	3001      	adds	r0, #1
 800532a:	d1e7      	bne.n	80052fc <_puts_r+0x68>
 800532c:	e7ce      	b.n	80052cc <_puts_r+0x38>
 800532e:	3e01      	subs	r6, #1
 8005330:	e7e4      	b.n	80052fc <_puts_r+0x68>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	6022      	str	r2, [r4, #0]
 8005338:	220a      	movs	r2, #10
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e7ee      	b.n	800531c <_puts_r+0x88>
	...

08005340 <puts>:
 8005340:	4b02      	ldr	r3, [pc, #8]	@ (800534c <puts+0xc>)
 8005342:	4601      	mov	r1, r0
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	f7ff bfa5 	b.w	8005294 <_puts_r>
 800534a:	bf00      	nop
 800534c:	2000001c 	.word	0x2000001c

08005350 <__sread>:
 8005350:	b510      	push	{r4, lr}
 8005352:	460c      	mov	r4, r1
 8005354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005358:	f000 f900 	bl	800555c <_read_r>
 800535c:	2800      	cmp	r0, #0
 800535e:	bfab      	itete	ge
 8005360:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005362:	89a3      	ldrhlt	r3, [r4, #12]
 8005364:	181b      	addge	r3, r3, r0
 8005366:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800536a:	bfac      	ite	ge
 800536c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800536e:	81a3      	strhlt	r3, [r4, #12]
 8005370:	bd10      	pop	{r4, pc}

08005372 <__swrite>:
 8005372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005376:	461f      	mov	r7, r3
 8005378:	898b      	ldrh	r3, [r1, #12]
 800537a:	05db      	lsls	r3, r3, #23
 800537c:	4605      	mov	r5, r0
 800537e:	460c      	mov	r4, r1
 8005380:	4616      	mov	r6, r2
 8005382:	d505      	bpl.n	8005390 <__swrite+0x1e>
 8005384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005388:	2302      	movs	r3, #2
 800538a:	2200      	movs	r2, #0
 800538c:	f000 f8d4 	bl	8005538 <_lseek_r>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	4632      	mov	r2, r6
 800539e:	463b      	mov	r3, r7
 80053a0:	4628      	mov	r0, r5
 80053a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053a6:	f000 b8eb 	b.w	8005580 <_write_r>

080053aa <__sseek>:
 80053aa:	b510      	push	{r4, lr}
 80053ac:	460c      	mov	r4, r1
 80053ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b2:	f000 f8c1 	bl	8005538 <_lseek_r>
 80053b6:	1c43      	adds	r3, r0, #1
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	bf15      	itete	ne
 80053bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053c6:	81a3      	strheq	r3, [r4, #12]
 80053c8:	bf18      	it	ne
 80053ca:	81a3      	strhne	r3, [r4, #12]
 80053cc:	bd10      	pop	{r4, pc}

080053ce <__sclose>:
 80053ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d2:	f000 b8a1 	b.w	8005518 <_close_r>

080053d6 <__swbuf_r>:
 80053d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d8:	460e      	mov	r6, r1
 80053da:	4614      	mov	r4, r2
 80053dc:	4605      	mov	r5, r0
 80053de:	b118      	cbz	r0, 80053e8 <__swbuf_r+0x12>
 80053e0:	6a03      	ldr	r3, [r0, #32]
 80053e2:	b90b      	cbnz	r3, 80053e8 <__swbuf_r+0x12>
 80053e4:	f7ff ff0e 	bl	8005204 <__sinit>
 80053e8:	69a3      	ldr	r3, [r4, #24]
 80053ea:	60a3      	str	r3, [r4, #8]
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	071a      	lsls	r2, r3, #28
 80053f0:	d501      	bpl.n	80053f6 <__swbuf_r+0x20>
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	b943      	cbnz	r3, 8005408 <__swbuf_r+0x32>
 80053f6:	4621      	mov	r1, r4
 80053f8:	4628      	mov	r0, r5
 80053fa:	f000 f82b 	bl	8005454 <__swsetup_r>
 80053fe:	b118      	cbz	r0, 8005408 <__swbuf_r+0x32>
 8005400:	f04f 37ff 	mov.w	r7, #4294967295
 8005404:	4638      	mov	r0, r7
 8005406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	6922      	ldr	r2, [r4, #16]
 800540c:	1a98      	subs	r0, r3, r2
 800540e:	6963      	ldr	r3, [r4, #20]
 8005410:	b2f6      	uxtb	r6, r6
 8005412:	4283      	cmp	r3, r0
 8005414:	4637      	mov	r7, r6
 8005416:	dc05      	bgt.n	8005424 <__swbuf_r+0x4e>
 8005418:	4621      	mov	r1, r4
 800541a:	4628      	mov	r0, r5
 800541c:	f001 fd88 	bl	8006f30 <_fflush_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	d1ed      	bne.n	8005400 <__swbuf_r+0x2a>
 8005424:	68a3      	ldr	r3, [r4, #8]
 8005426:	3b01      	subs	r3, #1
 8005428:	60a3      	str	r3, [r4, #8]
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	6022      	str	r2, [r4, #0]
 8005430:	701e      	strb	r6, [r3, #0]
 8005432:	6962      	ldr	r2, [r4, #20]
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	429a      	cmp	r2, r3
 8005438:	d004      	beq.n	8005444 <__swbuf_r+0x6e>
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	07db      	lsls	r3, r3, #31
 800543e:	d5e1      	bpl.n	8005404 <__swbuf_r+0x2e>
 8005440:	2e0a      	cmp	r6, #10
 8005442:	d1df      	bne.n	8005404 <__swbuf_r+0x2e>
 8005444:	4621      	mov	r1, r4
 8005446:	4628      	mov	r0, r5
 8005448:	f001 fd72 	bl	8006f30 <_fflush_r>
 800544c:	2800      	cmp	r0, #0
 800544e:	d0d9      	beq.n	8005404 <__swbuf_r+0x2e>
 8005450:	e7d6      	b.n	8005400 <__swbuf_r+0x2a>
	...

08005454 <__swsetup_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4b29      	ldr	r3, [pc, #164]	@ (80054fc <__swsetup_r+0xa8>)
 8005458:	4605      	mov	r5, r0
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	460c      	mov	r4, r1
 800545e:	b118      	cbz	r0, 8005468 <__swsetup_r+0x14>
 8005460:	6a03      	ldr	r3, [r0, #32]
 8005462:	b90b      	cbnz	r3, 8005468 <__swsetup_r+0x14>
 8005464:	f7ff fece 	bl	8005204 <__sinit>
 8005468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800546c:	0719      	lsls	r1, r3, #28
 800546e:	d422      	bmi.n	80054b6 <__swsetup_r+0x62>
 8005470:	06da      	lsls	r2, r3, #27
 8005472:	d407      	bmi.n	8005484 <__swsetup_r+0x30>
 8005474:	2209      	movs	r2, #9
 8005476:	602a      	str	r2, [r5, #0]
 8005478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800547c:	81a3      	strh	r3, [r4, #12]
 800547e:	f04f 30ff 	mov.w	r0, #4294967295
 8005482:	e033      	b.n	80054ec <__swsetup_r+0x98>
 8005484:	0758      	lsls	r0, r3, #29
 8005486:	d512      	bpl.n	80054ae <__swsetup_r+0x5a>
 8005488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800548a:	b141      	cbz	r1, 800549e <__swsetup_r+0x4a>
 800548c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005490:	4299      	cmp	r1, r3
 8005492:	d002      	beq.n	800549a <__swsetup_r+0x46>
 8005494:	4628      	mov	r0, r5
 8005496:	f000 ff0b 	bl	80062b0 <_free_r>
 800549a:	2300      	movs	r3, #0
 800549c:	6363      	str	r3, [r4, #52]	@ 0x34
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	2300      	movs	r3, #0
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f043 0308 	orr.w	r3, r3, #8
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	b94b      	cbnz	r3, 80054ce <__swsetup_r+0x7a>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c4:	d003      	beq.n	80054ce <__swsetup_r+0x7a>
 80054c6:	4621      	mov	r1, r4
 80054c8:	4628      	mov	r0, r5
 80054ca:	f001 fd7f 	bl	8006fcc <__smakebuf_r>
 80054ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d2:	f013 0201 	ands.w	r2, r3, #1
 80054d6:	d00a      	beq.n	80054ee <__swsetup_r+0x9a>
 80054d8:	2200      	movs	r2, #0
 80054da:	60a2      	str	r2, [r4, #8]
 80054dc:	6962      	ldr	r2, [r4, #20]
 80054de:	4252      	negs	r2, r2
 80054e0:	61a2      	str	r2, [r4, #24]
 80054e2:	6922      	ldr	r2, [r4, #16]
 80054e4:	b942      	cbnz	r2, 80054f8 <__swsetup_r+0xa4>
 80054e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80054ea:	d1c5      	bne.n	8005478 <__swsetup_r+0x24>
 80054ec:	bd38      	pop	{r3, r4, r5, pc}
 80054ee:	0799      	lsls	r1, r3, #30
 80054f0:	bf58      	it	pl
 80054f2:	6962      	ldrpl	r2, [r4, #20]
 80054f4:	60a2      	str	r2, [r4, #8]
 80054f6:	e7f4      	b.n	80054e2 <__swsetup_r+0x8e>
 80054f8:	2000      	movs	r0, #0
 80054fa:	e7f7      	b.n	80054ec <__swsetup_r+0x98>
 80054fc:	2000001c 	.word	0x2000001c

08005500 <memset>:
 8005500:	4402      	add	r2, r0
 8005502:	4603      	mov	r3, r0
 8005504:	4293      	cmp	r3, r2
 8005506:	d100      	bne.n	800550a <memset+0xa>
 8005508:	4770      	bx	lr
 800550a:	f803 1b01 	strb.w	r1, [r3], #1
 800550e:	e7f9      	b.n	8005504 <memset+0x4>

08005510 <_localeconv_r>:
 8005510:	4800      	ldr	r0, [pc, #0]	@ (8005514 <_localeconv_r+0x4>)
 8005512:	4770      	bx	lr
 8005514:	2000015c 	.word	0x2000015c

08005518 <_close_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	@ (8005534 <_close_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fd f9b0 	bl	8002888 <_close>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_close_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_close_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	2000040c 	.word	0x2000040c

08005538 <_lseek_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d07      	ldr	r5, [pc, #28]	@ (8005558 <_lseek_r+0x20>)
 800553c:	4604      	mov	r4, r0
 800553e:	4608      	mov	r0, r1
 8005540:	4611      	mov	r1, r2
 8005542:	2200      	movs	r2, #0
 8005544:	602a      	str	r2, [r5, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	f7fd f9c5 	bl	80028d6 <_lseek>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_lseek_r+0x1e>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_lseek_r+0x1e>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	2000040c 	.word	0x2000040c

0800555c <_read_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4d07      	ldr	r5, [pc, #28]	@ (800557c <_read_r+0x20>)
 8005560:	4604      	mov	r4, r0
 8005562:	4608      	mov	r0, r1
 8005564:	4611      	mov	r1, r2
 8005566:	2200      	movs	r2, #0
 8005568:	602a      	str	r2, [r5, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	f7fd f96f 	bl	800284e <_read>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_read_r+0x1e>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_read_r+0x1e>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	2000040c 	.word	0x2000040c

08005580 <_write_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4d07      	ldr	r5, [pc, #28]	@ (80055a0 <_write_r+0x20>)
 8005584:	4604      	mov	r4, r0
 8005586:	4608      	mov	r0, r1
 8005588:	4611      	mov	r1, r2
 800558a:	2200      	movs	r2, #0
 800558c:	602a      	str	r2, [r5, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	f7fc fe1c 	bl	80021cc <_write>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d102      	bne.n	800559e <_write_r+0x1e>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b103      	cbz	r3, 800559e <_write_r+0x1e>
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	2000040c 	.word	0x2000040c

080055a4 <__errno>:
 80055a4:	4b01      	ldr	r3, [pc, #4]	@ (80055ac <__errno+0x8>)
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	2000001c 	.word	0x2000001c

080055b0 <__libc_init_array>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	4d0d      	ldr	r5, [pc, #52]	@ (80055e8 <__libc_init_array+0x38>)
 80055b4:	4c0d      	ldr	r4, [pc, #52]	@ (80055ec <__libc_init_array+0x3c>)
 80055b6:	1b64      	subs	r4, r4, r5
 80055b8:	10a4      	asrs	r4, r4, #2
 80055ba:	2600      	movs	r6, #0
 80055bc:	42a6      	cmp	r6, r4
 80055be:	d109      	bne.n	80055d4 <__libc_init_array+0x24>
 80055c0:	4d0b      	ldr	r5, [pc, #44]	@ (80055f0 <__libc_init_array+0x40>)
 80055c2:	4c0c      	ldr	r4, [pc, #48]	@ (80055f4 <__libc_init_array+0x44>)
 80055c4:	f002 fc80 	bl	8007ec8 <_init>
 80055c8:	1b64      	subs	r4, r4, r5
 80055ca:	10a4      	asrs	r4, r4, #2
 80055cc:	2600      	movs	r6, #0
 80055ce:	42a6      	cmp	r6, r4
 80055d0:	d105      	bne.n	80055de <__libc_init_array+0x2e>
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d8:	4798      	blx	r3
 80055da:	3601      	adds	r6, #1
 80055dc:	e7ee      	b.n	80055bc <__libc_init_array+0xc>
 80055de:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e2:	4798      	blx	r3
 80055e4:	3601      	adds	r6, #1
 80055e6:	e7f2      	b.n	80055ce <__libc_init_array+0x1e>
 80055e8:	0800838c 	.word	0x0800838c
 80055ec:	0800838c 	.word	0x0800838c
 80055f0:	0800838c 	.word	0x0800838c
 80055f4:	08008390 	.word	0x08008390

080055f8 <__retarget_lock_init_recursive>:
 80055f8:	4770      	bx	lr

080055fa <__retarget_lock_acquire_recursive>:
 80055fa:	4770      	bx	lr

080055fc <__retarget_lock_release_recursive>:
 80055fc:	4770      	bx	lr

080055fe <quorem>:
 80055fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005602:	6903      	ldr	r3, [r0, #16]
 8005604:	690c      	ldr	r4, [r1, #16]
 8005606:	42a3      	cmp	r3, r4
 8005608:	4607      	mov	r7, r0
 800560a:	db7e      	blt.n	800570a <quorem+0x10c>
 800560c:	3c01      	subs	r4, #1
 800560e:	f101 0814 	add.w	r8, r1, #20
 8005612:	00a3      	lsls	r3, r4, #2
 8005614:	f100 0514 	add.w	r5, r0, #20
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005624:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005628:	3301      	adds	r3, #1
 800562a:	429a      	cmp	r2, r3
 800562c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005630:	fbb2 f6f3 	udiv	r6, r2, r3
 8005634:	d32e      	bcc.n	8005694 <quorem+0x96>
 8005636:	f04f 0a00 	mov.w	sl, #0
 800563a:	46c4      	mov	ip, r8
 800563c:	46ae      	mov	lr, r5
 800563e:	46d3      	mov	fp, sl
 8005640:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005644:	b298      	uxth	r0, r3
 8005646:	fb06 a000 	mla	r0, r6, r0, sl
 800564a:	0c02      	lsrs	r2, r0, #16
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	fb06 2303 	mla	r3, r6, r3, r2
 8005652:	f8de 2000 	ldr.w	r2, [lr]
 8005656:	b280      	uxth	r0, r0
 8005658:	b292      	uxth	r2, r2
 800565a:	1a12      	subs	r2, r2, r0
 800565c:	445a      	add	r2, fp
 800565e:	f8de 0000 	ldr.w	r0, [lr]
 8005662:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005666:	b29b      	uxth	r3, r3
 8005668:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800566c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005670:	b292      	uxth	r2, r2
 8005672:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005676:	45e1      	cmp	r9, ip
 8005678:	f84e 2b04 	str.w	r2, [lr], #4
 800567c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005680:	d2de      	bcs.n	8005640 <quorem+0x42>
 8005682:	9b00      	ldr	r3, [sp, #0]
 8005684:	58eb      	ldr	r3, [r5, r3]
 8005686:	b92b      	cbnz	r3, 8005694 <quorem+0x96>
 8005688:	9b01      	ldr	r3, [sp, #4]
 800568a:	3b04      	subs	r3, #4
 800568c:	429d      	cmp	r5, r3
 800568e:	461a      	mov	r2, r3
 8005690:	d32f      	bcc.n	80056f2 <quorem+0xf4>
 8005692:	613c      	str	r4, [r7, #16]
 8005694:	4638      	mov	r0, r7
 8005696:	f001 f97d 	bl	8006994 <__mcmp>
 800569a:	2800      	cmp	r0, #0
 800569c:	db25      	blt.n	80056ea <quorem+0xec>
 800569e:	4629      	mov	r1, r5
 80056a0:	2000      	movs	r0, #0
 80056a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80056a6:	f8d1 c000 	ldr.w	ip, [r1]
 80056aa:	fa1f fe82 	uxth.w	lr, r2
 80056ae:	fa1f f38c 	uxth.w	r3, ip
 80056b2:	eba3 030e 	sub.w	r3, r3, lr
 80056b6:	4403      	add	r3, r0
 80056b8:	0c12      	lsrs	r2, r2, #16
 80056ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80056be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056c8:	45c1      	cmp	r9, r8
 80056ca:	f841 3b04 	str.w	r3, [r1], #4
 80056ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056d2:	d2e6      	bcs.n	80056a2 <quorem+0xa4>
 80056d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056dc:	b922      	cbnz	r2, 80056e8 <quorem+0xea>
 80056de:	3b04      	subs	r3, #4
 80056e0:	429d      	cmp	r5, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	d30b      	bcc.n	80056fe <quorem+0x100>
 80056e6:	613c      	str	r4, [r7, #16]
 80056e8:	3601      	adds	r6, #1
 80056ea:	4630      	mov	r0, r6
 80056ec:	b003      	add	sp, #12
 80056ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	3b04      	subs	r3, #4
 80056f6:	2a00      	cmp	r2, #0
 80056f8:	d1cb      	bne.n	8005692 <quorem+0x94>
 80056fa:	3c01      	subs	r4, #1
 80056fc:	e7c6      	b.n	800568c <quorem+0x8e>
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	3b04      	subs	r3, #4
 8005702:	2a00      	cmp	r2, #0
 8005704:	d1ef      	bne.n	80056e6 <quorem+0xe8>
 8005706:	3c01      	subs	r4, #1
 8005708:	e7ea      	b.n	80056e0 <quorem+0xe2>
 800570a:	2000      	movs	r0, #0
 800570c:	e7ee      	b.n	80056ec <quorem+0xee>
	...

08005710 <_dtoa_r>:
 8005710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	69c7      	ldr	r7, [r0, #28]
 8005716:	b097      	sub	sp, #92	@ 0x5c
 8005718:	ed8d 0b04 	vstr	d0, [sp, #16]
 800571c:	ec55 4b10 	vmov	r4, r5, d0
 8005720:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005722:	9107      	str	r1, [sp, #28]
 8005724:	4681      	mov	r9, r0
 8005726:	920c      	str	r2, [sp, #48]	@ 0x30
 8005728:	9311      	str	r3, [sp, #68]	@ 0x44
 800572a:	b97f      	cbnz	r7, 800574c <_dtoa_r+0x3c>
 800572c:	2010      	movs	r0, #16
 800572e:	f000 fe09 	bl	8006344 <malloc>
 8005732:	4602      	mov	r2, r0
 8005734:	f8c9 001c 	str.w	r0, [r9, #28]
 8005738:	b920      	cbnz	r0, 8005744 <_dtoa_r+0x34>
 800573a:	4ba9      	ldr	r3, [pc, #676]	@ (80059e0 <_dtoa_r+0x2d0>)
 800573c:	21ef      	movs	r1, #239	@ 0xef
 800573e:	48a9      	ldr	r0, [pc, #676]	@ (80059e4 <_dtoa_r+0x2d4>)
 8005740:	f001 fcc0 	bl	80070c4 <__assert_func>
 8005744:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005748:	6007      	str	r7, [r0, #0]
 800574a:	60c7      	str	r7, [r0, #12]
 800574c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	b159      	cbz	r1, 800576c <_dtoa_r+0x5c>
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	604a      	str	r2, [r1, #4]
 8005758:	2301      	movs	r3, #1
 800575a:	4093      	lsls	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
 800575e:	4648      	mov	r0, r9
 8005760:	f000 fee6 	bl	8006530 <_Bfree>
 8005764:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	1e2b      	subs	r3, r5, #0
 800576e:	bfb9      	ittee	lt
 8005770:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005774:	9305      	strlt	r3, [sp, #20]
 8005776:	2300      	movge	r3, #0
 8005778:	6033      	strge	r3, [r6, #0]
 800577a:	9f05      	ldr	r7, [sp, #20]
 800577c:	4b9a      	ldr	r3, [pc, #616]	@ (80059e8 <_dtoa_r+0x2d8>)
 800577e:	bfbc      	itt	lt
 8005780:	2201      	movlt	r2, #1
 8005782:	6032      	strlt	r2, [r6, #0]
 8005784:	43bb      	bics	r3, r7
 8005786:	d112      	bne.n	80057ae <_dtoa_r+0x9e>
 8005788:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800578a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005794:	4323      	orrs	r3, r4
 8005796:	f000 855a 	beq.w	800624e <_dtoa_r+0xb3e>
 800579a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800579c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80059fc <_dtoa_r+0x2ec>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 855c 	beq.w	800625e <_dtoa_r+0xb4e>
 80057a6:	f10a 0303 	add.w	r3, sl, #3
 80057aa:	f000 bd56 	b.w	800625a <_dtoa_r+0xb4a>
 80057ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80057b2:	2200      	movs	r2, #0
 80057b4:	ec51 0b17 	vmov	r0, r1, d7
 80057b8:	2300      	movs	r3, #0
 80057ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80057be:	f7fb f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80057c2:	4680      	mov	r8, r0
 80057c4:	b158      	cbz	r0, 80057de <_dtoa_r+0xce>
 80057c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80057c8:	2301      	movs	r3, #1
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057ce:	b113      	cbz	r3, 80057d6 <_dtoa_r+0xc6>
 80057d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80057d2:	4b86      	ldr	r3, [pc, #536]	@ (80059ec <_dtoa_r+0x2dc>)
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005a00 <_dtoa_r+0x2f0>
 80057da:	f000 bd40 	b.w	800625e <_dtoa_r+0xb4e>
 80057de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80057e2:	aa14      	add	r2, sp, #80	@ 0x50
 80057e4:	a915      	add	r1, sp, #84	@ 0x54
 80057e6:	4648      	mov	r0, r9
 80057e8:	f001 f984 	bl	8006af4 <__d2b>
 80057ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80057f0:	9002      	str	r0, [sp, #8]
 80057f2:	2e00      	cmp	r6, #0
 80057f4:	d078      	beq.n	80058e8 <_dtoa_r+0x1d8>
 80057f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80057fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005800:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005804:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005808:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800580c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005810:	4619      	mov	r1, r3
 8005812:	2200      	movs	r2, #0
 8005814:	4b76      	ldr	r3, [pc, #472]	@ (80059f0 <_dtoa_r+0x2e0>)
 8005816:	f7fa fd37 	bl	8000288 <__aeabi_dsub>
 800581a:	a36b      	add	r3, pc, #428	@ (adr r3, 80059c8 <_dtoa_r+0x2b8>)
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f7fa feea 	bl	80005f8 <__aeabi_dmul>
 8005824:	a36a      	add	r3, pc, #424	@ (adr r3, 80059d0 <_dtoa_r+0x2c0>)
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f7fa fd2f 	bl	800028c <__adddf3>
 800582e:	4604      	mov	r4, r0
 8005830:	4630      	mov	r0, r6
 8005832:	460d      	mov	r5, r1
 8005834:	f7fa fe76 	bl	8000524 <__aeabi_i2d>
 8005838:	a367      	add	r3, pc, #412	@ (adr r3, 80059d8 <_dtoa_r+0x2c8>)
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f7fa fedb 	bl	80005f8 <__aeabi_dmul>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4620      	mov	r0, r4
 8005848:	4629      	mov	r1, r5
 800584a:	f7fa fd1f 	bl	800028c <__adddf3>
 800584e:	4604      	mov	r4, r0
 8005850:	460d      	mov	r5, r1
 8005852:	f7fb f981 	bl	8000b58 <__aeabi_d2iz>
 8005856:	2200      	movs	r2, #0
 8005858:	4607      	mov	r7, r0
 800585a:	2300      	movs	r3, #0
 800585c:	4620      	mov	r0, r4
 800585e:	4629      	mov	r1, r5
 8005860:	f7fb f93c 	bl	8000adc <__aeabi_dcmplt>
 8005864:	b140      	cbz	r0, 8005878 <_dtoa_r+0x168>
 8005866:	4638      	mov	r0, r7
 8005868:	f7fa fe5c 	bl	8000524 <__aeabi_i2d>
 800586c:	4622      	mov	r2, r4
 800586e:	462b      	mov	r3, r5
 8005870:	f7fb f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005874:	b900      	cbnz	r0, 8005878 <_dtoa_r+0x168>
 8005876:	3f01      	subs	r7, #1
 8005878:	2f16      	cmp	r7, #22
 800587a:	d852      	bhi.n	8005922 <_dtoa_r+0x212>
 800587c:	4b5d      	ldr	r3, [pc, #372]	@ (80059f4 <_dtoa_r+0x2e4>)
 800587e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800588a:	f7fb f927 	bl	8000adc <__aeabi_dcmplt>
 800588e:	2800      	cmp	r0, #0
 8005890:	d049      	beq.n	8005926 <_dtoa_r+0x216>
 8005892:	3f01      	subs	r7, #1
 8005894:	2300      	movs	r3, #0
 8005896:	9310      	str	r3, [sp, #64]	@ 0x40
 8005898:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800589a:	1b9b      	subs	r3, r3, r6
 800589c:	1e5a      	subs	r2, r3, #1
 800589e:	bf45      	ittet	mi
 80058a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80058a4:	9300      	strmi	r3, [sp, #0]
 80058a6:	2300      	movpl	r3, #0
 80058a8:	2300      	movmi	r3, #0
 80058aa:	9206      	str	r2, [sp, #24]
 80058ac:	bf54      	ite	pl
 80058ae:	9300      	strpl	r3, [sp, #0]
 80058b0:	9306      	strmi	r3, [sp, #24]
 80058b2:	2f00      	cmp	r7, #0
 80058b4:	db39      	blt.n	800592a <_dtoa_r+0x21a>
 80058b6:	9b06      	ldr	r3, [sp, #24]
 80058b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80058ba:	443b      	add	r3, r7
 80058bc:	9306      	str	r3, [sp, #24]
 80058be:	2300      	movs	r3, #0
 80058c0:	9308      	str	r3, [sp, #32]
 80058c2:	9b07      	ldr	r3, [sp, #28]
 80058c4:	2b09      	cmp	r3, #9
 80058c6:	d863      	bhi.n	8005990 <_dtoa_r+0x280>
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	bfc4      	itt	gt
 80058cc:	3b04      	subgt	r3, #4
 80058ce:	9307      	strgt	r3, [sp, #28]
 80058d0:	9b07      	ldr	r3, [sp, #28]
 80058d2:	f1a3 0302 	sub.w	r3, r3, #2
 80058d6:	bfcc      	ite	gt
 80058d8:	2400      	movgt	r4, #0
 80058da:	2401      	movle	r4, #1
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d863      	bhi.n	80059a8 <_dtoa_r+0x298>
 80058e0:	e8df f003 	tbb	[pc, r3]
 80058e4:	2b375452 	.word	0x2b375452
 80058e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80058ec:	441e      	add	r6, r3
 80058ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	bfc1      	itttt	gt
 80058f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058fa:	409f      	lslgt	r7, r3
 80058fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005900:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005904:	bfd6      	itet	le
 8005906:	f1c3 0320 	rsble	r3, r3, #32
 800590a:	ea47 0003 	orrgt.w	r0, r7, r3
 800590e:	fa04 f003 	lslle.w	r0, r4, r3
 8005912:	f7fa fdf7 	bl	8000504 <__aeabi_ui2d>
 8005916:	2201      	movs	r2, #1
 8005918:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800591c:	3e01      	subs	r6, #1
 800591e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005920:	e776      	b.n	8005810 <_dtoa_r+0x100>
 8005922:	2301      	movs	r3, #1
 8005924:	e7b7      	b.n	8005896 <_dtoa_r+0x186>
 8005926:	9010      	str	r0, [sp, #64]	@ 0x40
 8005928:	e7b6      	b.n	8005898 <_dtoa_r+0x188>
 800592a:	9b00      	ldr	r3, [sp, #0]
 800592c:	1bdb      	subs	r3, r3, r7
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	427b      	negs	r3, r7
 8005932:	9308      	str	r3, [sp, #32]
 8005934:	2300      	movs	r3, #0
 8005936:	930d      	str	r3, [sp, #52]	@ 0x34
 8005938:	e7c3      	b.n	80058c2 <_dtoa_r+0x1b2>
 800593a:	2301      	movs	r3, #1
 800593c:	9309      	str	r3, [sp, #36]	@ 0x24
 800593e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005940:	eb07 0b03 	add.w	fp, r7, r3
 8005944:	f10b 0301 	add.w	r3, fp, #1
 8005948:	2b01      	cmp	r3, #1
 800594a:	9303      	str	r3, [sp, #12]
 800594c:	bfb8      	it	lt
 800594e:	2301      	movlt	r3, #1
 8005950:	e006      	b.n	8005960 <_dtoa_r+0x250>
 8005952:	2301      	movs	r3, #1
 8005954:	9309      	str	r3, [sp, #36]	@ 0x24
 8005956:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005958:	2b00      	cmp	r3, #0
 800595a:	dd28      	ble.n	80059ae <_dtoa_r+0x29e>
 800595c:	469b      	mov	fp, r3
 800595e:	9303      	str	r3, [sp, #12]
 8005960:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005964:	2100      	movs	r1, #0
 8005966:	2204      	movs	r2, #4
 8005968:	f102 0514 	add.w	r5, r2, #20
 800596c:	429d      	cmp	r5, r3
 800596e:	d926      	bls.n	80059be <_dtoa_r+0x2ae>
 8005970:	6041      	str	r1, [r0, #4]
 8005972:	4648      	mov	r0, r9
 8005974:	f000 fd9c 	bl	80064b0 <_Balloc>
 8005978:	4682      	mov	sl, r0
 800597a:	2800      	cmp	r0, #0
 800597c:	d142      	bne.n	8005a04 <_dtoa_r+0x2f4>
 800597e:	4b1e      	ldr	r3, [pc, #120]	@ (80059f8 <_dtoa_r+0x2e8>)
 8005980:	4602      	mov	r2, r0
 8005982:	f240 11af 	movw	r1, #431	@ 0x1af
 8005986:	e6da      	b.n	800573e <_dtoa_r+0x2e>
 8005988:	2300      	movs	r3, #0
 800598a:	e7e3      	b.n	8005954 <_dtoa_r+0x244>
 800598c:	2300      	movs	r3, #0
 800598e:	e7d5      	b.n	800593c <_dtoa_r+0x22c>
 8005990:	2401      	movs	r4, #1
 8005992:	2300      	movs	r3, #0
 8005994:	9307      	str	r3, [sp, #28]
 8005996:	9409      	str	r4, [sp, #36]	@ 0x24
 8005998:	f04f 3bff 	mov.w	fp, #4294967295
 800599c:	2200      	movs	r2, #0
 800599e:	f8cd b00c 	str.w	fp, [sp, #12]
 80059a2:	2312      	movs	r3, #18
 80059a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80059a6:	e7db      	b.n	8005960 <_dtoa_r+0x250>
 80059a8:	2301      	movs	r3, #1
 80059aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ac:	e7f4      	b.n	8005998 <_dtoa_r+0x288>
 80059ae:	f04f 0b01 	mov.w	fp, #1
 80059b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80059b6:	465b      	mov	r3, fp
 80059b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80059bc:	e7d0      	b.n	8005960 <_dtoa_r+0x250>
 80059be:	3101      	adds	r1, #1
 80059c0:	0052      	lsls	r2, r2, #1
 80059c2:	e7d1      	b.n	8005968 <_dtoa_r+0x258>
 80059c4:	f3af 8000 	nop.w
 80059c8:	636f4361 	.word	0x636f4361
 80059cc:	3fd287a7 	.word	0x3fd287a7
 80059d0:	8b60c8b3 	.word	0x8b60c8b3
 80059d4:	3fc68a28 	.word	0x3fc68a28
 80059d8:	509f79fb 	.word	0x509f79fb
 80059dc:	3fd34413 	.word	0x3fd34413
 80059e0:	08008001 	.word	0x08008001
 80059e4:	08008018 	.word	0x08008018
 80059e8:	7ff00000 	.word	0x7ff00000
 80059ec:	08007fd1 	.word	0x08007fd1
 80059f0:	3ff80000 	.word	0x3ff80000
 80059f4:	08008168 	.word	0x08008168
 80059f8:	08008070 	.word	0x08008070
 80059fc:	08007ffd 	.word	0x08007ffd
 8005a00:	08007fd0 	.word	0x08007fd0
 8005a04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005a08:	6018      	str	r0, [r3, #0]
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	2b0e      	cmp	r3, #14
 8005a0e:	f200 80a1 	bhi.w	8005b54 <_dtoa_r+0x444>
 8005a12:	2c00      	cmp	r4, #0
 8005a14:	f000 809e 	beq.w	8005b54 <_dtoa_r+0x444>
 8005a18:	2f00      	cmp	r7, #0
 8005a1a:	dd33      	ble.n	8005a84 <_dtoa_r+0x374>
 8005a1c:	4b9c      	ldr	r3, [pc, #624]	@ (8005c90 <_dtoa_r+0x580>)
 8005a1e:	f007 020f 	and.w	r2, r7, #15
 8005a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a26:	ed93 7b00 	vldr	d7, [r3]
 8005a2a:	05f8      	lsls	r0, r7, #23
 8005a2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005a30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a34:	d516      	bpl.n	8005a64 <_dtoa_r+0x354>
 8005a36:	4b97      	ldr	r3, [pc, #604]	@ (8005c94 <_dtoa_r+0x584>)
 8005a38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a40:	f7fa ff04 	bl	800084c <__aeabi_ddiv>
 8005a44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a48:	f004 040f 	and.w	r4, r4, #15
 8005a4c:	2603      	movs	r6, #3
 8005a4e:	4d91      	ldr	r5, [pc, #580]	@ (8005c94 <_dtoa_r+0x584>)
 8005a50:	b954      	cbnz	r4, 8005a68 <_dtoa_r+0x358>
 8005a52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a5a:	f7fa fef7 	bl	800084c <__aeabi_ddiv>
 8005a5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a62:	e028      	b.n	8005ab6 <_dtoa_r+0x3a6>
 8005a64:	2602      	movs	r6, #2
 8005a66:	e7f2      	b.n	8005a4e <_dtoa_r+0x33e>
 8005a68:	07e1      	lsls	r1, r4, #31
 8005a6a:	d508      	bpl.n	8005a7e <_dtoa_r+0x36e>
 8005a6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a74:	f7fa fdc0 	bl	80005f8 <__aeabi_dmul>
 8005a78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	1064      	asrs	r4, r4, #1
 8005a80:	3508      	adds	r5, #8
 8005a82:	e7e5      	b.n	8005a50 <_dtoa_r+0x340>
 8005a84:	f000 80af 	beq.w	8005be6 <_dtoa_r+0x4d6>
 8005a88:	427c      	negs	r4, r7
 8005a8a:	4b81      	ldr	r3, [pc, #516]	@ (8005c90 <_dtoa_r+0x580>)
 8005a8c:	4d81      	ldr	r5, [pc, #516]	@ (8005c94 <_dtoa_r+0x584>)
 8005a8e:	f004 020f 	and.w	r2, r4, #15
 8005a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a9e:	f7fa fdab 	bl	80005f8 <__aeabi_dmul>
 8005aa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aa6:	1124      	asrs	r4, r4, #4
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	2602      	movs	r6, #2
 8005aac:	2c00      	cmp	r4, #0
 8005aae:	f040 808f 	bne.w	8005bd0 <_dtoa_r+0x4c0>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1d3      	bne.n	8005a5e <_dtoa_r+0x34e>
 8005ab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ab8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8094 	beq.w	8005bea <_dtoa_r+0x4da>
 8005ac2:	4b75      	ldr	r3, [pc, #468]	@ (8005c98 <_dtoa_r+0x588>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4629      	mov	r1, r5
 8005aca:	f7fb f807 	bl	8000adc <__aeabi_dcmplt>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	f000 808b 	beq.w	8005bea <_dtoa_r+0x4da>
 8005ad4:	9b03      	ldr	r3, [sp, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 8087 	beq.w	8005bea <_dtoa_r+0x4da>
 8005adc:	f1bb 0f00 	cmp.w	fp, #0
 8005ae0:	dd34      	ble.n	8005b4c <_dtoa_r+0x43c>
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	4b6d      	ldr	r3, [pc, #436]	@ (8005c9c <_dtoa_r+0x58c>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	4629      	mov	r1, r5
 8005aea:	f7fa fd85 	bl	80005f8 <__aeabi_dmul>
 8005aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005af2:	f107 38ff 	add.w	r8, r7, #4294967295
 8005af6:	3601      	adds	r6, #1
 8005af8:	465c      	mov	r4, fp
 8005afa:	4630      	mov	r0, r6
 8005afc:	f7fa fd12 	bl	8000524 <__aeabi_i2d>
 8005b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b04:	f7fa fd78 	bl	80005f8 <__aeabi_dmul>
 8005b08:	4b65      	ldr	r3, [pc, #404]	@ (8005ca0 <_dtoa_r+0x590>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f7fa fbbe 	bl	800028c <__adddf3>
 8005b10:	4605      	mov	r5, r0
 8005b12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b16:	2c00      	cmp	r4, #0
 8005b18:	d16a      	bne.n	8005bf0 <_dtoa_r+0x4e0>
 8005b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b1e:	4b61      	ldr	r3, [pc, #388]	@ (8005ca4 <_dtoa_r+0x594>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	f7fa fbb1 	bl	8000288 <__aeabi_dsub>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b2e:	462a      	mov	r2, r5
 8005b30:	4633      	mov	r3, r6
 8005b32:	f7fa fff1 	bl	8000b18 <__aeabi_dcmpgt>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	f040 8298 	bne.w	800606c <_dtoa_r+0x95c>
 8005b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b40:	462a      	mov	r2, r5
 8005b42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b46:	f7fa ffc9 	bl	8000adc <__aeabi_dcmplt>
 8005b4a:	bb38      	cbnz	r0, 8005b9c <_dtoa_r+0x48c>
 8005b4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005b50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f2c0 8157 	blt.w	8005e0a <_dtoa_r+0x6fa>
 8005b5c:	2f0e      	cmp	r7, #14
 8005b5e:	f300 8154 	bgt.w	8005e0a <_dtoa_r+0x6fa>
 8005b62:	4b4b      	ldr	r3, [pc, #300]	@ (8005c90 <_dtoa_r+0x580>)
 8005b64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b68:	ed93 7b00 	vldr	d7, [r3]
 8005b6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	ed8d 7b00 	vstr	d7, [sp]
 8005b74:	f280 80e5 	bge.w	8005d42 <_dtoa_r+0x632>
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f300 80e1 	bgt.w	8005d42 <_dtoa_r+0x632>
 8005b80:	d10c      	bne.n	8005b9c <_dtoa_r+0x48c>
 8005b82:	4b48      	ldr	r3, [pc, #288]	@ (8005ca4 <_dtoa_r+0x594>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	ec51 0b17 	vmov	r0, r1, d7
 8005b8a:	f7fa fd35 	bl	80005f8 <__aeabi_dmul>
 8005b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b92:	f7fa ffb7 	bl	8000b04 <__aeabi_dcmpge>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f000 8266 	beq.w	8006068 <_dtoa_r+0x958>
 8005b9c:	2400      	movs	r4, #0
 8005b9e:	4625      	mov	r5, r4
 8005ba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ba2:	4656      	mov	r6, sl
 8005ba4:	ea6f 0803 	mvn.w	r8, r3
 8005ba8:	2700      	movs	r7, #0
 8005baa:	4621      	mov	r1, r4
 8005bac:	4648      	mov	r0, r9
 8005bae:	f000 fcbf 	bl	8006530 <_Bfree>
 8005bb2:	2d00      	cmp	r5, #0
 8005bb4:	f000 80bd 	beq.w	8005d32 <_dtoa_r+0x622>
 8005bb8:	b12f      	cbz	r7, 8005bc6 <_dtoa_r+0x4b6>
 8005bba:	42af      	cmp	r7, r5
 8005bbc:	d003      	beq.n	8005bc6 <_dtoa_r+0x4b6>
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	4648      	mov	r0, r9
 8005bc2:	f000 fcb5 	bl	8006530 <_Bfree>
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4648      	mov	r0, r9
 8005bca:	f000 fcb1 	bl	8006530 <_Bfree>
 8005bce:	e0b0      	b.n	8005d32 <_dtoa_r+0x622>
 8005bd0:	07e2      	lsls	r2, r4, #31
 8005bd2:	d505      	bpl.n	8005be0 <_dtoa_r+0x4d0>
 8005bd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bd8:	f7fa fd0e 	bl	80005f8 <__aeabi_dmul>
 8005bdc:	3601      	adds	r6, #1
 8005bde:	2301      	movs	r3, #1
 8005be0:	1064      	asrs	r4, r4, #1
 8005be2:	3508      	adds	r5, #8
 8005be4:	e762      	b.n	8005aac <_dtoa_r+0x39c>
 8005be6:	2602      	movs	r6, #2
 8005be8:	e765      	b.n	8005ab6 <_dtoa_r+0x3a6>
 8005bea:	9c03      	ldr	r4, [sp, #12]
 8005bec:	46b8      	mov	r8, r7
 8005bee:	e784      	b.n	8005afa <_dtoa_r+0x3ea>
 8005bf0:	4b27      	ldr	r3, [pc, #156]	@ (8005c90 <_dtoa_r+0x580>)
 8005bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005bf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bfc:	4454      	add	r4, sl
 8005bfe:	2900      	cmp	r1, #0
 8005c00:	d054      	beq.n	8005cac <_dtoa_r+0x59c>
 8005c02:	4929      	ldr	r1, [pc, #164]	@ (8005ca8 <_dtoa_r+0x598>)
 8005c04:	2000      	movs	r0, #0
 8005c06:	f7fa fe21 	bl	800084c <__aeabi_ddiv>
 8005c0a:	4633      	mov	r3, r6
 8005c0c:	462a      	mov	r2, r5
 8005c0e:	f7fa fb3b 	bl	8000288 <__aeabi_dsub>
 8005c12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c16:	4656      	mov	r6, sl
 8005c18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c1c:	f7fa ff9c 	bl	8000b58 <__aeabi_d2iz>
 8005c20:	4605      	mov	r5, r0
 8005c22:	f7fa fc7f 	bl	8000524 <__aeabi_i2d>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c2e:	f7fa fb2b 	bl	8000288 <__aeabi_dsub>
 8005c32:	3530      	adds	r5, #48	@ 0x30
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c3c:	f806 5b01 	strb.w	r5, [r6], #1
 8005c40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c44:	f7fa ff4a 	bl	8000adc <__aeabi_dcmplt>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d172      	bne.n	8005d32 <_dtoa_r+0x622>
 8005c4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c50:	4911      	ldr	r1, [pc, #68]	@ (8005c98 <_dtoa_r+0x588>)
 8005c52:	2000      	movs	r0, #0
 8005c54:	f7fa fb18 	bl	8000288 <__aeabi_dsub>
 8005c58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c5c:	f7fa ff3e 	bl	8000adc <__aeabi_dcmplt>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	f040 80b4 	bne.w	8005dce <_dtoa_r+0x6be>
 8005c66:	42a6      	cmp	r6, r4
 8005c68:	f43f af70 	beq.w	8005b4c <_dtoa_r+0x43c>
 8005c6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005c70:	4b0a      	ldr	r3, [pc, #40]	@ (8005c9c <_dtoa_r+0x58c>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	f7fa fcc0 	bl	80005f8 <__aeabi_dmul>
 8005c78:	4b08      	ldr	r3, [pc, #32]	@ (8005c9c <_dtoa_r+0x58c>)
 8005c7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c7e:	2200      	movs	r2, #0
 8005c80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c84:	f7fa fcb8 	bl	80005f8 <__aeabi_dmul>
 8005c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c8c:	e7c4      	b.n	8005c18 <_dtoa_r+0x508>
 8005c8e:	bf00      	nop
 8005c90:	08008168 	.word	0x08008168
 8005c94:	08008140 	.word	0x08008140
 8005c98:	3ff00000 	.word	0x3ff00000
 8005c9c:	40240000 	.word	0x40240000
 8005ca0:	401c0000 	.word	0x401c0000
 8005ca4:	40140000 	.word	0x40140000
 8005ca8:	3fe00000 	.word	0x3fe00000
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f7fa fca2 	bl	80005f8 <__aeabi_dmul>
 8005cb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005cb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005cba:	4656      	mov	r6, sl
 8005cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cc0:	f7fa ff4a 	bl	8000b58 <__aeabi_d2iz>
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	f7fa fc2d 	bl	8000524 <__aeabi_i2d>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cd2:	f7fa fad9 	bl	8000288 <__aeabi_dsub>
 8005cd6:	3530      	adds	r5, #48	@ 0x30
 8005cd8:	f806 5b01 	strb.w	r5, [r6], #1
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	42a6      	cmp	r6, r4
 8005ce2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	d124      	bne.n	8005d36 <_dtoa_r+0x626>
 8005cec:	4baf      	ldr	r3, [pc, #700]	@ (8005fac <_dtoa_r+0x89c>)
 8005cee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005cf2:	f7fa facb 	bl	800028c <__adddf3>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cfe:	f7fa ff0b 	bl	8000b18 <__aeabi_dcmpgt>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d163      	bne.n	8005dce <_dtoa_r+0x6be>
 8005d06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005d0a:	49a8      	ldr	r1, [pc, #672]	@ (8005fac <_dtoa_r+0x89c>)
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f7fa fabb 	bl	8000288 <__aeabi_dsub>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d1a:	f7fa fedf 	bl	8000adc <__aeabi_dcmplt>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f43f af14 	beq.w	8005b4c <_dtoa_r+0x43c>
 8005d24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005d26:	1e73      	subs	r3, r6, #1
 8005d28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d2e:	2b30      	cmp	r3, #48	@ 0x30
 8005d30:	d0f8      	beq.n	8005d24 <_dtoa_r+0x614>
 8005d32:	4647      	mov	r7, r8
 8005d34:	e03b      	b.n	8005dae <_dtoa_r+0x69e>
 8005d36:	4b9e      	ldr	r3, [pc, #632]	@ (8005fb0 <_dtoa_r+0x8a0>)
 8005d38:	f7fa fc5e 	bl	80005f8 <__aeabi_dmul>
 8005d3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d40:	e7bc      	b.n	8005cbc <_dtoa_r+0x5ac>
 8005d42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005d46:	4656      	mov	r6, sl
 8005d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f7fa fd7c 	bl	800084c <__aeabi_ddiv>
 8005d54:	f7fa ff00 	bl	8000b58 <__aeabi_d2iz>
 8005d58:	4680      	mov	r8, r0
 8005d5a:	f7fa fbe3 	bl	8000524 <__aeabi_i2d>
 8005d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d62:	f7fa fc49 	bl	80005f8 <__aeabi_dmul>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d72:	f7fa fa89 	bl	8000288 <__aeabi_dsub>
 8005d76:	f806 4b01 	strb.w	r4, [r6], #1
 8005d7a:	9d03      	ldr	r5, [sp, #12]
 8005d7c:	eba6 040a 	sub.w	r4, r6, sl
 8005d80:	42a5      	cmp	r5, r4
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	d133      	bne.n	8005df0 <_dtoa_r+0x6e0>
 8005d88:	f7fa fa80 	bl	800028c <__adddf3>
 8005d8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d90:	4604      	mov	r4, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	f7fa fec0 	bl	8000b18 <__aeabi_dcmpgt>
 8005d98:	b9c0      	cbnz	r0, 8005dcc <_dtoa_r+0x6bc>
 8005d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d9e:	4620      	mov	r0, r4
 8005da0:	4629      	mov	r1, r5
 8005da2:	f7fa fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 8005da6:	b110      	cbz	r0, 8005dae <_dtoa_r+0x69e>
 8005da8:	f018 0f01 	tst.w	r8, #1
 8005dac:	d10e      	bne.n	8005dcc <_dtoa_r+0x6bc>
 8005dae:	9902      	ldr	r1, [sp, #8]
 8005db0:	4648      	mov	r0, r9
 8005db2:	f000 fbbd 	bl	8006530 <_Bfree>
 8005db6:	2300      	movs	r3, #0
 8005db8:	7033      	strb	r3, [r6, #0]
 8005dba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005dbc:	3701      	adds	r7, #1
 8005dbe:	601f      	str	r7, [r3, #0]
 8005dc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 824b 	beq.w	800625e <_dtoa_r+0xb4e>
 8005dc8:	601e      	str	r6, [r3, #0]
 8005dca:	e248      	b.n	800625e <_dtoa_r+0xb4e>
 8005dcc:	46b8      	mov	r8, r7
 8005dce:	4633      	mov	r3, r6
 8005dd0:	461e      	mov	r6, r3
 8005dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dd6:	2a39      	cmp	r2, #57	@ 0x39
 8005dd8:	d106      	bne.n	8005de8 <_dtoa_r+0x6d8>
 8005dda:	459a      	cmp	sl, r3
 8005ddc:	d1f8      	bne.n	8005dd0 <_dtoa_r+0x6c0>
 8005dde:	2230      	movs	r2, #48	@ 0x30
 8005de0:	f108 0801 	add.w	r8, r8, #1
 8005de4:	f88a 2000 	strb.w	r2, [sl]
 8005de8:	781a      	ldrb	r2, [r3, #0]
 8005dea:	3201      	adds	r2, #1
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	e7a0      	b.n	8005d32 <_dtoa_r+0x622>
 8005df0:	4b6f      	ldr	r3, [pc, #444]	@ (8005fb0 <_dtoa_r+0x8a0>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	f7fa fc00 	bl	80005f8 <__aeabi_dmul>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	f7fa fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d09f      	beq.n	8005d48 <_dtoa_r+0x638>
 8005e08:	e7d1      	b.n	8005dae <_dtoa_r+0x69e>
 8005e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	f000 80ea 	beq.w	8005fe6 <_dtoa_r+0x8d6>
 8005e12:	9a07      	ldr	r2, [sp, #28]
 8005e14:	2a01      	cmp	r2, #1
 8005e16:	f300 80cd 	bgt.w	8005fb4 <_dtoa_r+0x8a4>
 8005e1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e1c:	2a00      	cmp	r2, #0
 8005e1e:	f000 80c1 	beq.w	8005fa4 <_dtoa_r+0x894>
 8005e22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e26:	9c08      	ldr	r4, [sp, #32]
 8005e28:	9e00      	ldr	r6, [sp, #0]
 8005e2a:	9a00      	ldr	r2, [sp, #0]
 8005e2c:	441a      	add	r2, r3
 8005e2e:	9200      	str	r2, [sp, #0]
 8005e30:	9a06      	ldr	r2, [sp, #24]
 8005e32:	2101      	movs	r1, #1
 8005e34:	441a      	add	r2, r3
 8005e36:	4648      	mov	r0, r9
 8005e38:	9206      	str	r2, [sp, #24]
 8005e3a:	f000 fc2d 	bl	8006698 <__i2b>
 8005e3e:	4605      	mov	r5, r0
 8005e40:	b166      	cbz	r6, 8005e5c <_dtoa_r+0x74c>
 8005e42:	9b06      	ldr	r3, [sp, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	dd09      	ble.n	8005e5c <_dtoa_r+0x74c>
 8005e48:	42b3      	cmp	r3, r6
 8005e4a:	9a00      	ldr	r2, [sp, #0]
 8005e4c:	bfa8      	it	ge
 8005e4e:	4633      	movge	r3, r6
 8005e50:	1ad2      	subs	r2, r2, r3
 8005e52:	9200      	str	r2, [sp, #0]
 8005e54:	9a06      	ldr	r2, [sp, #24]
 8005e56:	1af6      	subs	r6, r6, r3
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	9306      	str	r3, [sp, #24]
 8005e5c:	9b08      	ldr	r3, [sp, #32]
 8005e5e:	b30b      	cbz	r3, 8005ea4 <_dtoa_r+0x794>
 8005e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 80c6 	beq.w	8005ff4 <_dtoa_r+0x8e4>
 8005e68:	2c00      	cmp	r4, #0
 8005e6a:	f000 80c0 	beq.w	8005fee <_dtoa_r+0x8de>
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4622      	mov	r2, r4
 8005e72:	4648      	mov	r0, r9
 8005e74:	f000 fcc8 	bl	8006808 <__pow5mult>
 8005e78:	9a02      	ldr	r2, [sp, #8]
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	4648      	mov	r0, r9
 8005e80:	f000 fc20 	bl	80066c4 <__multiply>
 8005e84:	9902      	ldr	r1, [sp, #8]
 8005e86:	4680      	mov	r8, r0
 8005e88:	4648      	mov	r0, r9
 8005e8a:	f000 fb51 	bl	8006530 <_Bfree>
 8005e8e:	9b08      	ldr	r3, [sp, #32]
 8005e90:	1b1b      	subs	r3, r3, r4
 8005e92:	9308      	str	r3, [sp, #32]
 8005e94:	f000 80b1 	beq.w	8005ffa <_dtoa_r+0x8ea>
 8005e98:	9a08      	ldr	r2, [sp, #32]
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	4648      	mov	r0, r9
 8005e9e:	f000 fcb3 	bl	8006808 <__pow5mult>
 8005ea2:	9002      	str	r0, [sp, #8]
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	4648      	mov	r0, r9
 8005ea8:	f000 fbf6 	bl	8006698 <__i2b>
 8005eac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005eae:	4604      	mov	r4, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 81d8 	beq.w	8006266 <_dtoa_r+0xb56>
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4601      	mov	r1, r0
 8005eba:	4648      	mov	r0, r9
 8005ebc:	f000 fca4 	bl	8006808 <__pow5mult>
 8005ec0:	9b07      	ldr	r3, [sp, #28]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	f300 809f 	bgt.w	8006008 <_dtoa_r+0x8f8>
 8005eca:	9b04      	ldr	r3, [sp, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f040 8097 	bne.w	8006000 <_dtoa_r+0x8f0>
 8005ed2:	9b05      	ldr	r3, [sp, #20]
 8005ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f040 8093 	bne.w	8006004 <_dtoa_r+0x8f4>
 8005ede:	9b05      	ldr	r3, [sp, #20]
 8005ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ee4:	0d1b      	lsrs	r3, r3, #20
 8005ee6:	051b      	lsls	r3, r3, #20
 8005ee8:	b133      	cbz	r3, 8005ef8 <_dtoa_r+0x7e8>
 8005eea:	9b00      	ldr	r3, [sp, #0]
 8005eec:	3301      	adds	r3, #1
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	9b06      	ldr	r3, [sp, #24]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	9306      	str	r3, [sp, #24]
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	9308      	str	r3, [sp, #32]
 8005efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 81b8 	beq.w	8006272 <_dtoa_r+0xb62>
 8005f02:	6923      	ldr	r3, [r4, #16]
 8005f04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f08:	6918      	ldr	r0, [r3, #16]
 8005f0a:	f000 fb79 	bl	8006600 <__hi0bits>
 8005f0e:	f1c0 0020 	rsb	r0, r0, #32
 8005f12:	9b06      	ldr	r3, [sp, #24]
 8005f14:	4418      	add	r0, r3
 8005f16:	f010 001f 	ands.w	r0, r0, #31
 8005f1a:	f000 8082 	beq.w	8006022 <_dtoa_r+0x912>
 8005f1e:	f1c0 0320 	rsb	r3, r0, #32
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	dd73      	ble.n	800600e <_dtoa_r+0x8fe>
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	f1c0 001c 	rsb	r0, r0, #28
 8005f2c:	4403      	add	r3, r0
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	9b06      	ldr	r3, [sp, #24]
 8005f32:	4403      	add	r3, r0
 8005f34:	4406      	add	r6, r0
 8005f36:	9306      	str	r3, [sp, #24]
 8005f38:	9b00      	ldr	r3, [sp, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dd05      	ble.n	8005f4a <_dtoa_r+0x83a>
 8005f3e:	9902      	ldr	r1, [sp, #8]
 8005f40:	461a      	mov	r2, r3
 8005f42:	4648      	mov	r0, r9
 8005f44:	f000 fcba 	bl	80068bc <__lshift>
 8005f48:	9002      	str	r0, [sp, #8]
 8005f4a:	9b06      	ldr	r3, [sp, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dd05      	ble.n	8005f5c <_dtoa_r+0x84c>
 8005f50:	4621      	mov	r1, r4
 8005f52:	461a      	mov	r2, r3
 8005f54:	4648      	mov	r0, r9
 8005f56:	f000 fcb1 	bl	80068bc <__lshift>
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d061      	beq.n	8006026 <_dtoa_r+0x916>
 8005f62:	9802      	ldr	r0, [sp, #8]
 8005f64:	4621      	mov	r1, r4
 8005f66:	f000 fd15 	bl	8006994 <__mcmp>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	da5b      	bge.n	8006026 <_dtoa_r+0x916>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9902      	ldr	r1, [sp, #8]
 8005f72:	220a      	movs	r2, #10
 8005f74:	4648      	mov	r0, r9
 8005f76:	f000 fafd 	bl	8006574 <__multadd>
 8005f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f7c:	9002      	str	r0, [sp, #8]
 8005f7e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8177 	beq.w	8006276 <_dtoa_r+0xb66>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	220a      	movs	r2, #10
 8005f8e:	4648      	mov	r0, r9
 8005f90:	f000 faf0 	bl	8006574 <__multadd>
 8005f94:	f1bb 0f00 	cmp.w	fp, #0
 8005f98:	4605      	mov	r5, r0
 8005f9a:	dc6f      	bgt.n	800607c <_dtoa_r+0x96c>
 8005f9c:	9b07      	ldr	r3, [sp, #28]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	dc49      	bgt.n	8006036 <_dtoa_r+0x926>
 8005fa2:	e06b      	b.n	800607c <_dtoa_r+0x96c>
 8005fa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005faa:	e73c      	b.n	8005e26 <_dtoa_r+0x716>
 8005fac:	3fe00000 	.word	0x3fe00000
 8005fb0:	40240000 	.word	0x40240000
 8005fb4:	9b03      	ldr	r3, [sp, #12]
 8005fb6:	1e5c      	subs	r4, r3, #1
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	42a3      	cmp	r3, r4
 8005fbc:	db09      	blt.n	8005fd2 <_dtoa_r+0x8c2>
 8005fbe:	1b1c      	subs	r4, r3, r4
 8005fc0:	9b03      	ldr	r3, [sp, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f6bf af30 	bge.w	8005e28 <_dtoa_r+0x718>
 8005fc8:	9b00      	ldr	r3, [sp, #0]
 8005fca:	9a03      	ldr	r2, [sp, #12]
 8005fcc:	1a9e      	subs	r6, r3, r2
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e72b      	b.n	8005e2a <_dtoa_r+0x71a>
 8005fd2:	9b08      	ldr	r3, [sp, #32]
 8005fd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005fd6:	9408      	str	r4, [sp, #32]
 8005fd8:	1ae3      	subs	r3, r4, r3
 8005fda:	441a      	add	r2, r3
 8005fdc:	9e00      	ldr	r6, [sp, #0]
 8005fde:	9b03      	ldr	r3, [sp, #12]
 8005fe0:	920d      	str	r2, [sp, #52]	@ 0x34
 8005fe2:	2400      	movs	r4, #0
 8005fe4:	e721      	b.n	8005e2a <_dtoa_r+0x71a>
 8005fe6:	9c08      	ldr	r4, [sp, #32]
 8005fe8:	9e00      	ldr	r6, [sp, #0]
 8005fea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005fec:	e728      	b.n	8005e40 <_dtoa_r+0x730>
 8005fee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005ff2:	e751      	b.n	8005e98 <_dtoa_r+0x788>
 8005ff4:	9a08      	ldr	r2, [sp, #32]
 8005ff6:	9902      	ldr	r1, [sp, #8]
 8005ff8:	e750      	b.n	8005e9c <_dtoa_r+0x78c>
 8005ffa:	f8cd 8008 	str.w	r8, [sp, #8]
 8005ffe:	e751      	b.n	8005ea4 <_dtoa_r+0x794>
 8006000:	2300      	movs	r3, #0
 8006002:	e779      	b.n	8005ef8 <_dtoa_r+0x7e8>
 8006004:	9b04      	ldr	r3, [sp, #16]
 8006006:	e777      	b.n	8005ef8 <_dtoa_r+0x7e8>
 8006008:	2300      	movs	r3, #0
 800600a:	9308      	str	r3, [sp, #32]
 800600c:	e779      	b.n	8005f02 <_dtoa_r+0x7f2>
 800600e:	d093      	beq.n	8005f38 <_dtoa_r+0x828>
 8006010:	9a00      	ldr	r2, [sp, #0]
 8006012:	331c      	adds	r3, #28
 8006014:	441a      	add	r2, r3
 8006016:	9200      	str	r2, [sp, #0]
 8006018:	9a06      	ldr	r2, [sp, #24]
 800601a:	441a      	add	r2, r3
 800601c:	441e      	add	r6, r3
 800601e:	9206      	str	r2, [sp, #24]
 8006020:	e78a      	b.n	8005f38 <_dtoa_r+0x828>
 8006022:	4603      	mov	r3, r0
 8006024:	e7f4      	b.n	8006010 <_dtoa_r+0x900>
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	46b8      	mov	r8, r7
 800602c:	dc20      	bgt.n	8006070 <_dtoa_r+0x960>
 800602e:	469b      	mov	fp, r3
 8006030:	9b07      	ldr	r3, [sp, #28]
 8006032:	2b02      	cmp	r3, #2
 8006034:	dd1e      	ble.n	8006074 <_dtoa_r+0x964>
 8006036:	f1bb 0f00 	cmp.w	fp, #0
 800603a:	f47f adb1 	bne.w	8005ba0 <_dtoa_r+0x490>
 800603e:	4621      	mov	r1, r4
 8006040:	465b      	mov	r3, fp
 8006042:	2205      	movs	r2, #5
 8006044:	4648      	mov	r0, r9
 8006046:	f000 fa95 	bl	8006574 <__multadd>
 800604a:	4601      	mov	r1, r0
 800604c:	4604      	mov	r4, r0
 800604e:	9802      	ldr	r0, [sp, #8]
 8006050:	f000 fca0 	bl	8006994 <__mcmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	f77f ada3 	ble.w	8005ba0 <_dtoa_r+0x490>
 800605a:	4656      	mov	r6, sl
 800605c:	2331      	movs	r3, #49	@ 0x31
 800605e:	f806 3b01 	strb.w	r3, [r6], #1
 8006062:	f108 0801 	add.w	r8, r8, #1
 8006066:	e59f      	b.n	8005ba8 <_dtoa_r+0x498>
 8006068:	9c03      	ldr	r4, [sp, #12]
 800606a:	46b8      	mov	r8, r7
 800606c:	4625      	mov	r5, r4
 800606e:	e7f4      	b.n	800605a <_dtoa_r+0x94a>
 8006070:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8101 	beq.w	800627e <_dtoa_r+0xb6e>
 800607c:	2e00      	cmp	r6, #0
 800607e:	dd05      	ble.n	800608c <_dtoa_r+0x97c>
 8006080:	4629      	mov	r1, r5
 8006082:	4632      	mov	r2, r6
 8006084:	4648      	mov	r0, r9
 8006086:	f000 fc19 	bl	80068bc <__lshift>
 800608a:	4605      	mov	r5, r0
 800608c:	9b08      	ldr	r3, [sp, #32]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d05c      	beq.n	800614c <_dtoa_r+0xa3c>
 8006092:	6869      	ldr	r1, [r5, #4]
 8006094:	4648      	mov	r0, r9
 8006096:	f000 fa0b 	bl	80064b0 <_Balloc>
 800609a:	4606      	mov	r6, r0
 800609c:	b928      	cbnz	r0, 80060aa <_dtoa_r+0x99a>
 800609e:	4b82      	ldr	r3, [pc, #520]	@ (80062a8 <_dtoa_r+0xb98>)
 80060a0:	4602      	mov	r2, r0
 80060a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80060a6:	f7ff bb4a 	b.w	800573e <_dtoa_r+0x2e>
 80060aa:	692a      	ldr	r2, [r5, #16]
 80060ac:	3202      	adds	r2, #2
 80060ae:	0092      	lsls	r2, r2, #2
 80060b0:	f105 010c 	add.w	r1, r5, #12
 80060b4:	300c      	adds	r0, #12
 80060b6:	f000 fff7 	bl	80070a8 <memcpy>
 80060ba:	2201      	movs	r2, #1
 80060bc:	4631      	mov	r1, r6
 80060be:	4648      	mov	r0, r9
 80060c0:	f000 fbfc 	bl	80068bc <__lshift>
 80060c4:	f10a 0301 	add.w	r3, sl, #1
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	eb0a 030b 	add.w	r3, sl, fp
 80060ce:	9308      	str	r3, [sp, #32]
 80060d0:	9b04      	ldr	r3, [sp, #16]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	462f      	mov	r7, r5
 80060d8:	9306      	str	r3, [sp, #24]
 80060da:	4605      	mov	r5, r0
 80060dc:	9b00      	ldr	r3, [sp, #0]
 80060de:	9802      	ldr	r0, [sp, #8]
 80060e0:	4621      	mov	r1, r4
 80060e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80060e6:	f7ff fa8a 	bl	80055fe <quorem>
 80060ea:	4603      	mov	r3, r0
 80060ec:	3330      	adds	r3, #48	@ 0x30
 80060ee:	9003      	str	r0, [sp, #12]
 80060f0:	4639      	mov	r1, r7
 80060f2:	9802      	ldr	r0, [sp, #8]
 80060f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060f6:	f000 fc4d 	bl	8006994 <__mcmp>
 80060fa:	462a      	mov	r2, r5
 80060fc:	9004      	str	r0, [sp, #16]
 80060fe:	4621      	mov	r1, r4
 8006100:	4648      	mov	r0, r9
 8006102:	f000 fc63 	bl	80069cc <__mdiff>
 8006106:	68c2      	ldr	r2, [r0, #12]
 8006108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800610a:	4606      	mov	r6, r0
 800610c:	bb02      	cbnz	r2, 8006150 <_dtoa_r+0xa40>
 800610e:	4601      	mov	r1, r0
 8006110:	9802      	ldr	r0, [sp, #8]
 8006112:	f000 fc3f 	bl	8006994 <__mcmp>
 8006116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006118:	4602      	mov	r2, r0
 800611a:	4631      	mov	r1, r6
 800611c:	4648      	mov	r0, r9
 800611e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006120:	9309      	str	r3, [sp, #36]	@ 0x24
 8006122:	f000 fa05 	bl	8006530 <_Bfree>
 8006126:	9b07      	ldr	r3, [sp, #28]
 8006128:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800612a:	9e00      	ldr	r6, [sp, #0]
 800612c:	ea42 0103 	orr.w	r1, r2, r3
 8006130:	9b06      	ldr	r3, [sp, #24]
 8006132:	4319      	orrs	r1, r3
 8006134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006136:	d10d      	bne.n	8006154 <_dtoa_r+0xa44>
 8006138:	2b39      	cmp	r3, #57	@ 0x39
 800613a:	d027      	beq.n	800618c <_dtoa_r+0xa7c>
 800613c:	9a04      	ldr	r2, [sp, #16]
 800613e:	2a00      	cmp	r2, #0
 8006140:	dd01      	ble.n	8006146 <_dtoa_r+0xa36>
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	3331      	adds	r3, #49	@ 0x31
 8006146:	f88b 3000 	strb.w	r3, [fp]
 800614a:	e52e      	b.n	8005baa <_dtoa_r+0x49a>
 800614c:	4628      	mov	r0, r5
 800614e:	e7b9      	b.n	80060c4 <_dtoa_r+0x9b4>
 8006150:	2201      	movs	r2, #1
 8006152:	e7e2      	b.n	800611a <_dtoa_r+0xa0a>
 8006154:	9904      	ldr	r1, [sp, #16]
 8006156:	2900      	cmp	r1, #0
 8006158:	db04      	blt.n	8006164 <_dtoa_r+0xa54>
 800615a:	9807      	ldr	r0, [sp, #28]
 800615c:	4301      	orrs	r1, r0
 800615e:	9806      	ldr	r0, [sp, #24]
 8006160:	4301      	orrs	r1, r0
 8006162:	d120      	bne.n	80061a6 <_dtoa_r+0xa96>
 8006164:	2a00      	cmp	r2, #0
 8006166:	ddee      	ble.n	8006146 <_dtoa_r+0xa36>
 8006168:	9902      	ldr	r1, [sp, #8]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	2201      	movs	r2, #1
 800616e:	4648      	mov	r0, r9
 8006170:	f000 fba4 	bl	80068bc <__lshift>
 8006174:	4621      	mov	r1, r4
 8006176:	9002      	str	r0, [sp, #8]
 8006178:	f000 fc0c 	bl	8006994 <__mcmp>
 800617c:	2800      	cmp	r0, #0
 800617e:	9b00      	ldr	r3, [sp, #0]
 8006180:	dc02      	bgt.n	8006188 <_dtoa_r+0xa78>
 8006182:	d1e0      	bne.n	8006146 <_dtoa_r+0xa36>
 8006184:	07da      	lsls	r2, r3, #31
 8006186:	d5de      	bpl.n	8006146 <_dtoa_r+0xa36>
 8006188:	2b39      	cmp	r3, #57	@ 0x39
 800618a:	d1da      	bne.n	8006142 <_dtoa_r+0xa32>
 800618c:	2339      	movs	r3, #57	@ 0x39
 800618e:	f88b 3000 	strb.w	r3, [fp]
 8006192:	4633      	mov	r3, r6
 8006194:	461e      	mov	r6, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800619c:	2a39      	cmp	r2, #57	@ 0x39
 800619e:	d04e      	beq.n	800623e <_dtoa_r+0xb2e>
 80061a0:	3201      	adds	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	e501      	b.n	8005baa <_dtoa_r+0x49a>
 80061a6:	2a00      	cmp	r2, #0
 80061a8:	dd03      	ble.n	80061b2 <_dtoa_r+0xaa2>
 80061aa:	2b39      	cmp	r3, #57	@ 0x39
 80061ac:	d0ee      	beq.n	800618c <_dtoa_r+0xa7c>
 80061ae:	3301      	adds	r3, #1
 80061b0:	e7c9      	b.n	8006146 <_dtoa_r+0xa36>
 80061b2:	9a00      	ldr	r2, [sp, #0]
 80061b4:	9908      	ldr	r1, [sp, #32]
 80061b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061ba:	428a      	cmp	r2, r1
 80061bc:	d028      	beq.n	8006210 <_dtoa_r+0xb00>
 80061be:	9902      	ldr	r1, [sp, #8]
 80061c0:	2300      	movs	r3, #0
 80061c2:	220a      	movs	r2, #10
 80061c4:	4648      	mov	r0, r9
 80061c6:	f000 f9d5 	bl	8006574 <__multadd>
 80061ca:	42af      	cmp	r7, r5
 80061cc:	9002      	str	r0, [sp, #8]
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	f04f 020a 	mov.w	r2, #10
 80061d6:	4639      	mov	r1, r7
 80061d8:	4648      	mov	r0, r9
 80061da:	d107      	bne.n	80061ec <_dtoa_r+0xadc>
 80061dc:	f000 f9ca 	bl	8006574 <__multadd>
 80061e0:	4607      	mov	r7, r0
 80061e2:	4605      	mov	r5, r0
 80061e4:	9b00      	ldr	r3, [sp, #0]
 80061e6:	3301      	adds	r3, #1
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	e777      	b.n	80060dc <_dtoa_r+0x9cc>
 80061ec:	f000 f9c2 	bl	8006574 <__multadd>
 80061f0:	4629      	mov	r1, r5
 80061f2:	4607      	mov	r7, r0
 80061f4:	2300      	movs	r3, #0
 80061f6:	220a      	movs	r2, #10
 80061f8:	4648      	mov	r0, r9
 80061fa:	f000 f9bb 	bl	8006574 <__multadd>
 80061fe:	4605      	mov	r5, r0
 8006200:	e7f0      	b.n	80061e4 <_dtoa_r+0xad4>
 8006202:	f1bb 0f00 	cmp.w	fp, #0
 8006206:	bfcc      	ite	gt
 8006208:	465e      	movgt	r6, fp
 800620a:	2601      	movle	r6, #1
 800620c:	4456      	add	r6, sl
 800620e:	2700      	movs	r7, #0
 8006210:	9902      	ldr	r1, [sp, #8]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2201      	movs	r2, #1
 8006216:	4648      	mov	r0, r9
 8006218:	f000 fb50 	bl	80068bc <__lshift>
 800621c:	4621      	mov	r1, r4
 800621e:	9002      	str	r0, [sp, #8]
 8006220:	f000 fbb8 	bl	8006994 <__mcmp>
 8006224:	2800      	cmp	r0, #0
 8006226:	dcb4      	bgt.n	8006192 <_dtoa_r+0xa82>
 8006228:	d102      	bne.n	8006230 <_dtoa_r+0xb20>
 800622a:	9b00      	ldr	r3, [sp, #0]
 800622c:	07db      	lsls	r3, r3, #31
 800622e:	d4b0      	bmi.n	8006192 <_dtoa_r+0xa82>
 8006230:	4633      	mov	r3, r6
 8006232:	461e      	mov	r6, r3
 8006234:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006238:	2a30      	cmp	r2, #48	@ 0x30
 800623a:	d0fa      	beq.n	8006232 <_dtoa_r+0xb22>
 800623c:	e4b5      	b.n	8005baa <_dtoa_r+0x49a>
 800623e:	459a      	cmp	sl, r3
 8006240:	d1a8      	bne.n	8006194 <_dtoa_r+0xa84>
 8006242:	2331      	movs	r3, #49	@ 0x31
 8006244:	f108 0801 	add.w	r8, r8, #1
 8006248:	f88a 3000 	strb.w	r3, [sl]
 800624c:	e4ad      	b.n	8005baa <_dtoa_r+0x49a>
 800624e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006250:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80062ac <_dtoa_r+0xb9c>
 8006254:	b11b      	cbz	r3, 800625e <_dtoa_r+0xb4e>
 8006256:	f10a 0308 	add.w	r3, sl, #8
 800625a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	4650      	mov	r0, sl
 8006260:	b017      	add	sp, #92	@ 0x5c
 8006262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006266:	9b07      	ldr	r3, [sp, #28]
 8006268:	2b01      	cmp	r3, #1
 800626a:	f77f ae2e 	ble.w	8005eca <_dtoa_r+0x7ba>
 800626e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006270:	9308      	str	r3, [sp, #32]
 8006272:	2001      	movs	r0, #1
 8006274:	e64d      	b.n	8005f12 <_dtoa_r+0x802>
 8006276:	f1bb 0f00 	cmp.w	fp, #0
 800627a:	f77f aed9 	ble.w	8006030 <_dtoa_r+0x920>
 800627e:	4656      	mov	r6, sl
 8006280:	9802      	ldr	r0, [sp, #8]
 8006282:	4621      	mov	r1, r4
 8006284:	f7ff f9bb 	bl	80055fe <quorem>
 8006288:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800628c:	f806 3b01 	strb.w	r3, [r6], #1
 8006290:	eba6 020a 	sub.w	r2, r6, sl
 8006294:	4593      	cmp	fp, r2
 8006296:	ddb4      	ble.n	8006202 <_dtoa_r+0xaf2>
 8006298:	9902      	ldr	r1, [sp, #8]
 800629a:	2300      	movs	r3, #0
 800629c:	220a      	movs	r2, #10
 800629e:	4648      	mov	r0, r9
 80062a0:	f000 f968 	bl	8006574 <__multadd>
 80062a4:	9002      	str	r0, [sp, #8]
 80062a6:	e7eb      	b.n	8006280 <_dtoa_r+0xb70>
 80062a8:	08008070 	.word	0x08008070
 80062ac:	08007ff4 	.word	0x08007ff4

080062b0 <_free_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4605      	mov	r5, r0
 80062b4:	2900      	cmp	r1, #0
 80062b6:	d041      	beq.n	800633c <_free_r+0x8c>
 80062b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062bc:	1f0c      	subs	r4, r1, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bfb8      	it	lt
 80062c2:	18e4      	addlt	r4, r4, r3
 80062c4:	f000 f8e8 	bl	8006498 <__malloc_lock>
 80062c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006340 <_free_r+0x90>)
 80062ca:	6813      	ldr	r3, [r2, #0]
 80062cc:	b933      	cbnz	r3, 80062dc <_free_r+0x2c>
 80062ce:	6063      	str	r3, [r4, #4]
 80062d0:	6014      	str	r4, [r2, #0]
 80062d2:	4628      	mov	r0, r5
 80062d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062d8:	f000 b8e4 	b.w	80064a4 <__malloc_unlock>
 80062dc:	42a3      	cmp	r3, r4
 80062de:	d908      	bls.n	80062f2 <_free_r+0x42>
 80062e0:	6820      	ldr	r0, [r4, #0]
 80062e2:	1821      	adds	r1, r4, r0
 80062e4:	428b      	cmp	r3, r1
 80062e6:	bf01      	itttt	eq
 80062e8:	6819      	ldreq	r1, [r3, #0]
 80062ea:	685b      	ldreq	r3, [r3, #4]
 80062ec:	1809      	addeq	r1, r1, r0
 80062ee:	6021      	streq	r1, [r4, #0]
 80062f0:	e7ed      	b.n	80062ce <_free_r+0x1e>
 80062f2:	461a      	mov	r2, r3
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	b10b      	cbz	r3, 80062fc <_free_r+0x4c>
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	d9fa      	bls.n	80062f2 <_free_r+0x42>
 80062fc:	6811      	ldr	r1, [r2, #0]
 80062fe:	1850      	adds	r0, r2, r1
 8006300:	42a0      	cmp	r0, r4
 8006302:	d10b      	bne.n	800631c <_free_r+0x6c>
 8006304:	6820      	ldr	r0, [r4, #0]
 8006306:	4401      	add	r1, r0
 8006308:	1850      	adds	r0, r2, r1
 800630a:	4283      	cmp	r3, r0
 800630c:	6011      	str	r1, [r2, #0]
 800630e:	d1e0      	bne.n	80062d2 <_free_r+0x22>
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	6053      	str	r3, [r2, #4]
 8006316:	4408      	add	r0, r1
 8006318:	6010      	str	r0, [r2, #0]
 800631a:	e7da      	b.n	80062d2 <_free_r+0x22>
 800631c:	d902      	bls.n	8006324 <_free_r+0x74>
 800631e:	230c      	movs	r3, #12
 8006320:	602b      	str	r3, [r5, #0]
 8006322:	e7d6      	b.n	80062d2 <_free_r+0x22>
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	1821      	adds	r1, r4, r0
 8006328:	428b      	cmp	r3, r1
 800632a:	bf04      	itt	eq
 800632c:	6819      	ldreq	r1, [r3, #0]
 800632e:	685b      	ldreq	r3, [r3, #4]
 8006330:	6063      	str	r3, [r4, #4]
 8006332:	bf04      	itt	eq
 8006334:	1809      	addeq	r1, r1, r0
 8006336:	6021      	streq	r1, [r4, #0]
 8006338:	6054      	str	r4, [r2, #4]
 800633a:	e7ca      	b.n	80062d2 <_free_r+0x22>
 800633c:	bd38      	pop	{r3, r4, r5, pc}
 800633e:	bf00      	nop
 8006340:	20000418 	.word	0x20000418

08006344 <malloc>:
 8006344:	4b02      	ldr	r3, [pc, #8]	@ (8006350 <malloc+0xc>)
 8006346:	4601      	mov	r1, r0
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	f000 b825 	b.w	8006398 <_malloc_r>
 800634e:	bf00      	nop
 8006350:	2000001c 	.word	0x2000001c

08006354 <sbrk_aligned>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	4e0f      	ldr	r6, [pc, #60]	@ (8006394 <sbrk_aligned+0x40>)
 8006358:	460c      	mov	r4, r1
 800635a:	6831      	ldr	r1, [r6, #0]
 800635c:	4605      	mov	r5, r0
 800635e:	b911      	cbnz	r1, 8006366 <sbrk_aligned+0x12>
 8006360:	f000 fe92 	bl	8007088 <_sbrk_r>
 8006364:	6030      	str	r0, [r6, #0]
 8006366:	4621      	mov	r1, r4
 8006368:	4628      	mov	r0, r5
 800636a:	f000 fe8d 	bl	8007088 <_sbrk_r>
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	d103      	bne.n	800637a <sbrk_aligned+0x26>
 8006372:	f04f 34ff 	mov.w	r4, #4294967295
 8006376:	4620      	mov	r0, r4
 8006378:	bd70      	pop	{r4, r5, r6, pc}
 800637a:	1cc4      	adds	r4, r0, #3
 800637c:	f024 0403 	bic.w	r4, r4, #3
 8006380:	42a0      	cmp	r0, r4
 8006382:	d0f8      	beq.n	8006376 <sbrk_aligned+0x22>
 8006384:	1a21      	subs	r1, r4, r0
 8006386:	4628      	mov	r0, r5
 8006388:	f000 fe7e 	bl	8007088 <_sbrk_r>
 800638c:	3001      	adds	r0, #1
 800638e:	d1f2      	bne.n	8006376 <sbrk_aligned+0x22>
 8006390:	e7ef      	b.n	8006372 <sbrk_aligned+0x1e>
 8006392:	bf00      	nop
 8006394:	20000414 	.word	0x20000414

08006398 <_malloc_r>:
 8006398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800639c:	1ccd      	adds	r5, r1, #3
 800639e:	f025 0503 	bic.w	r5, r5, #3
 80063a2:	3508      	adds	r5, #8
 80063a4:	2d0c      	cmp	r5, #12
 80063a6:	bf38      	it	cc
 80063a8:	250c      	movcc	r5, #12
 80063aa:	2d00      	cmp	r5, #0
 80063ac:	4606      	mov	r6, r0
 80063ae:	db01      	blt.n	80063b4 <_malloc_r+0x1c>
 80063b0:	42a9      	cmp	r1, r5
 80063b2:	d904      	bls.n	80063be <_malloc_r+0x26>
 80063b4:	230c      	movs	r3, #12
 80063b6:	6033      	str	r3, [r6, #0]
 80063b8:	2000      	movs	r0, #0
 80063ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006494 <_malloc_r+0xfc>
 80063c2:	f000 f869 	bl	8006498 <__malloc_lock>
 80063c6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ca:	461c      	mov	r4, r3
 80063cc:	bb44      	cbnz	r4, 8006420 <_malloc_r+0x88>
 80063ce:	4629      	mov	r1, r5
 80063d0:	4630      	mov	r0, r6
 80063d2:	f7ff ffbf 	bl	8006354 <sbrk_aligned>
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	4604      	mov	r4, r0
 80063da:	d158      	bne.n	800648e <_malloc_r+0xf6>
 80063dc:	f8d8 4000 	ldr.w	r4, [r8]
 80063e0:	4627      	mov	r7, r4
 80063e2:	2f00      	cmp	r7, #0
 80063e4:	d143      	bne.n	800646e <_malloc_r+0xd6>
 80063e6:	2c00      	cmp	r4, #0
 80063e8:	d04b      	beq.n	8006482 <_malloc_r+0xea>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	4639      	mov	r1, r7
 80063ee:	4630      	mov	r0, r6
 80063f0:	eb04 0903 	add.w	r9, r4, r3
 80063f4:	f000 fe48 	bl	8007088 <_sbrk_r>
 80063f8:	4581      	cmp	r9, r0
 80063fa:	d142      	bne.n	8006482 <_malloc_r+0xea>
 80063fc:	6821      	ldr	r1, [r4, #0]
 80063fe:	1a6d      	subs	r5, r5, r1
 8006400:	4629      	mov	r1, r5
 8006402:	4630      	mov	r0, r6
 8006404:	f7ff ffa6 	bl	8006354 <sbrk_aligned>
 8006408:	3001      	adds	r0, #1
 800640a:	d03a      	beq.n	8006482 <_malloc_r+0xea>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	442b      	add	r3, r5
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	f8d8 3000 	ldr.w	r3, [r8]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	bb62      	cbnz	r2, 8006474 <_malloc_r+0xdc>
 800641a:	f8c8 7000 	str.w	r7, [r8]
 800641e:	e00f      	b.n	8006440 <_malloc_r+0xa8>
 8006420:	6822      	ldr	r2, [r4, #0]
 8006422:	1b52      	subs	r2, r2, r5
 8006424:	d420      	bmi.n	8006468 <_malloc_r+0xd0>
 8006426:	2a0b      	cmp	r2, #11
 8006428:	d917      	bls.n	800645a <_malloc_r+0xc2>
 800642a:	1961      	adds	r1, r4, r5
 800642c:	42a3      	cmp	r3, r4
 800642e:	6025      	str	r5, [r4, #0]
 8006430:	bf18      	it	ne
 8006432:	6059      	strne	r1, [r3, #4]
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	bf08      	it	eq
 8006438:	f8c8 1000 	streq.w	r1, [r8]
 800643c:	5162      	str	r2, [r4, r5]
 800643e:	604b      	str	r3, [r1, #4]
 8006440:	4630      	mov	r0, r6
 8006442:	f000 f82f 	bl	80064a4 <__malloc_unlock>
 8006446:	f104 000b 	add.w	r0, r4, #11
 800644a:	1d23      	adds	r3, r4, #4
 800644c:	f020 0007 	bic.w	r0, r0, #7
 8006450:	1ac2      	subs	r2, r0, r3
 8006452:	bf1c      	itt	ne
 8006454:	1a1b      	subne	r3, r3, r0
 8006456:	50a3      	strne	r3, [r4, r2]
 8006458:	e7af      	b.n	80063ba <_malloc_r+0x22>
 800645a:	6862      	ldr	r2, [r4, #4]
 800645c:	42a3      	cmp	r3, r4
 800645e:	bf0c      	ite	eq
 8006460:	f8c8 2000 	streq.w	r2, [r8]
 8006464:	605a      	strne	r2, [r3, #4]
 8006466:	e7eb      	b.n	8006440 <_malloc_r+0xa8>
 8006468:	4623      	mov	r3, r4
 800646a:	6864      	ldr	r4, [r4, #4]
 800646c:	e7ae      	b.n	80063cc <_malloc_r+0x34>
 800646e:	463c      	mov	r4, r7
 8006470:	687f      	ldr	r7, [r7, #4]
 8006472:	e7b6      	b.n	80063e2 <_malloc_r+0x4a>
 8006474:	461a      	mov	r2, r3
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	42a3      	cmp	r3, r4
 800647a:	d1fb      	bne.n	8006474 <_malloc_r+0xdc>
 800647c:	2300      	movs	r3, #0
 800647e:	6053      	str	r3, [r2, #4]
 8006480:	e7de      	b.n	8006440 <_malloc_r+0xa8>
 8006482:	230c      	movs	r3, #12
 8006484:	6033      	str	r3, [r6, #0]
 8006486:	4630      	mov	r0, r6
 8006488:	f000 f80c 	bl	80064a4 <__malloc_unlock>
 800648c:	e794      	b.n	80063b8 <_malloc_r+0x20>
 800648e:	6005      	str	r5, [r0, #0]
 8006490:	e7d6      	b.n	8006440 <_malloc_r+0xa8>
 8006492:	bf00      	nop
 8006494:	20000418 	.word	0x20000418

08006498 <__malloc_lock>:
 8006498:	4801      	ldr	r0, [pc, #4]	@ (80064a0 <__malloc_lock+0x8>)
 800649a:	f7ff b8ae 	b.w	80055fa <__retarget_lock_acquire_recursive>
 800649e:	bf00      	nop
 80064a0:	20000410 	.word	0x20000410

080064a4 <__malloc_unlock>:
 80064a4:	4801      	ldr	r0, [pc, #4]	@ (80064ac <__malloc_unlock+0x8>)
 80064a6:	f7ff b8a9 	b.w	80055fc <__retarget_lock_release_recursive>
 80064aa:	bf00      	nop
 80064ac:	20000410 	.word	0x20000410

080064b0 <_Balloc>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	69c6      	ldr	r6, [r0, #28]
 80064b4:	4604      	mov	r4, r0
 80064b6:	460d      	mov	r5, r1
 80064b8:	b976      	cbnz	r6, 80064d8 <_Balloc+0x28>
 80064ba:	2010      	movs	r0, #16
 80064bc:	f7ff ff42 	bl	8006344 <malloc>
 80064c0:	4602      	mov	r2, r0
 80064c2:	61e0      	str	r0, [r4, #28]
 80064c4:	b920      	cbnz	r0, 80064d0 <_Balloc+0x20>
 80064c6:	4b18      	ldr	r3, [pc, #96]	@ (8006528 <_Balloc+0x78>)
 80064c8:	4818      	ldr	r0, [pc, #96]	@ (800652c <_Balloc+0x7c>)
 80064ca:	216b      	movs	r1, #107	@ 0x6b
 80064cc:	f000 fdfa 	bl	80070c4 <__assert_func>
 80064d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064d4:	6006      	str	r6, [r0, #0]
 80064d6:	60c6      	str	r6, [r0, #12]
 80064d8:	69e6      	ldr	r6, [r4, #28]
 80064da:	68f3      	ldr	r3, [r6, #12]
 80064dc:	b183      	cbz	r3, 8006500 <_Balloc+0x50>
 80064de:	69e3      	ldr	r3, [r4, #28]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064e6:	b9b8      	cbnz	r0, 8006518 <_Balloc+0x68>
 80064e8:	2101      	movs	r1, #1
 80064ea:	fa01 f605 	lsl.w	r6, r1, r5
 80064ee:	1d72      	adds	r2, r6, #5
 80064f0:	0092      	lsls	r2, r2, #2
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 fe04 	bl	8007100 <_calloc_r>
 80064f8:	b160      	cbz	r0, 8006514 <_Balloc+0x64>
 80064fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064fe:	e00e      	b.n	800651e <_Balloc+0x6e>
 8006500:	2221      	movs	r2, #33	@ 0x21
 8006502:	2104      	movs	r1, #4
 8006504:	4620      	mov	r0, r4
 8006506:	f000 fdfb 	bl	8007100 <_calloc_r>
 800650a:	69e3      	ldr	r3, [r4, #28]
 800650c:	60f0      	str	r0, [r6, #12]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e4      	bne.n	80064de <_Balloc+0x2e>
 8006514:	2000      	movs	r0, #0
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	6802      	ldr	r2, [r0, #0]
 800651a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800651e:	2300      	movs	r3, #0
 8006520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006524:	e7f7      	b.n	8006516 <_Balloc+0x66>
 8006526:	bf00      	nop
 8006528:	08008001 	.word	0x08008001
 800652c:	08008081 	.word	0x08008081

08006530 <_Bfree>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	69c6      	ldr	r6, [r0, #28]
 8006534:	4605      	mov	r5, r0
 8006536:	460c      	mov	r4, r1
 8006538:	b976      	cbnz	r6, 8006558 <_Bfree+0x28>
 800653a:	2010      	movs	r0, #16
 800653c:	f7ff ff02 	bl	8006344 <malloc>
 8006540:	4602      	mov	r2, r0
 8006542:	61e8      	str	r0, [r5, #28]
 8006544:	b920      	cbnz	r0, 8006550 <_Bfree+0x20>
 8006546:	4b09      	ldr	r3, [pc, #36]	@ (800656c <_Bfree+0x3c>)
 8006548:	4809      	ldr	r0, [pc, #36]	@ (8006570 <_Bfree+0x40>)
 800654a:	218f      	movs	r1, #143	@ 0x8f
 800654c:	f000 fdba 	bl	80070c4 <__assert_func>
 8006550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006554:	6006      	str	r6, [r0, #0]
 8006556:	60c6      	str	r6, [r0, #12]
 8006558:	b13c      	cbz	r4, 800656a <_Bfree+0x3a>
 800655a:	69eb      	ldr	r3, [r5, #28]
 800655c:	6862      	ldr	r2, [r4, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006564:	6021      	str	r1, [r4, #0]
 8006566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800656a:	bd70      	pop	{r4, r5, r6, pc}
 800656c:	08008001 	.word	0x08008001
 8006570:	08008081 	.word	0x08008081

08006574 <__multadd>:
 8006574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006578:	690d      	ldr	r5, [r1, #16]
 800657a:	4607      	mov	r7, r0
 800657c:	460c      	mov	r4, r1
 800657e:	461e      	mov	r6, r3
 8006580:	f101 0c14 	add.w	ip, r1, #20
 8006584:	2000      	movs	r0, #0
 8006586:	f8dc 3000 	ldr.w	r3, [ip]
 800658a:	b299      	uxth	r1, r3
 800658c:	fb02 6101 	mla	r1, r2, r1, r6
 8006590:	0c1e      	lsrs	r6, r3, #16
 8006592:	0c0b      	lsrs	r3, r1, #16
 8006594:	fb02 3306 	mla	r3, r2, r6, r3
 8006598:	b289      	uxth	r1, r1
 800659a:	3001      	adds	r0, #1
 800659c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065a0:	4285      	cmp	r5, r0
 80065a2:	f84c 1b04 	str.w	r1, [ip], #4
 80065a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065aa:	dcec      	bgt.n	8006586 <__multadd+0x12>
 80065ac:	b30e      	cbz	r6, 80065f2 <__multadd+0x7e>
 80065ae:	68a3      	ldr	r3, [r4, #8]
 80065b0:	42ab      	cmp	r3, r5
 80065b2:	dc19      	bgt.n	80065e8 <__multadd+0x74>
 80065b4:	6861      	ldr	r1, [r4, #4]
 80065b6:	4638      	mov	r0, r7
 80065b8:	3101      	adds	r1, #1
 80065ba:	f7ff ff79 	bl	80064b0 <_Balloc>
 80065be:	4680      	mov	r8, r0
 80065c0:	b928      	cbnz	r0, 80065ce <__multadd+0x5a>
 80065c2:	4602      	mov	r2, r0
 80065c4:	4b0c      	ldr	r3, [pc, #48]	@ (80065f8 <__multadd+0x84>)
 80065c6:	480d      	ldr	r0, [pc, #52]	@ (80065fc <__multadd+0x88>)
 80065c8:	21ba      	movs	r1, #186	@ 0xba
 80065ca:	f000 fd7b 	bl	80070c4 <__assert_func>
 80065ce:	6922      	ldr	r2, [r4, #16]
 80065d0:	3202      	adds	r2, #2
 80065d2:	f104 010c 	add.w	r1, r4, #12
 80065d6:	0092      	lsls	r2, r2, #2
 80065d8:	300c      	adds	r0, #12
 80065da:	f000 fd65 	bl	80070a8 <memcpy>
 80065de:	4621      	mov	r1, r4
 80065e0:	4638      	mov	r0, r7
 80065e2:	f7ff ffa5 	bl	8006530 <_Bfree>
 80065e6:	4644      	mov	r4, r8
 80065e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065ec:	3501      	adds	r5, #1
 80065ee:	615e      	str	r6, [r3, #20]
 80065f0:	6125      	str	r5, [r4, #16]
 80065f2:	4620      	mov	r0, r4
 80065f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f8:	08008070 	.word	0x08008070
 80065fc:	08008081 	.word	0x08008081

08006600 <__hi0bits>:
 8006600:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006604:	4603      	mov	r3, r0
 8006606:	bf36      	itet	cc
 8006608:	0403      	lslcc	r3, r0, #16
 800660a:	2000      	movcs	r0, #0
 800660c:	2010      	movcc	r0, #16
 800660e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006612:	bf3c      	itt	cc
 8006614:	021b      	lslcc	r3, r3, #8
 8006616:	3008      	addcc	r0, #8
 8006618:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800661c:	bf3c      	itt	cc
 800661e:	011b      	lslcc	r3, r3, #4
 8006620:	3004      	addcc	r0, #4
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006626:	bf3c      	itt	cc
 8006628:	009b      	lslcc	r3, r3, #2
 800662a:	3002      	addcc	r0, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	db05      	blt.n	800663c <__hi0bits+0x3c>
 8006630:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006634:	f100 0001 	add.w	r0, r0, #1
 8006638:	bf08      	it	eq
 800663a:	2020      	moveq	r0, #32
 800663c:	4770      	bx	lr

0800663e <__lo0bits>:
 800663e:	6803      	ldr	r3, [r0, #0]
 8006640:	4602      	mov	r2, r0
 8006642:	f013 0007 	ands.w	r0, r3, #7
 8006646:	d00b      	beq.n	8006660 <__lo0bits+0x22>
 8006648:	07d9      	lsls	r1, r3, #31
 800664a:	d421      	bmi.n	8006690 <__lo0bits+0x52>
 800664c:	0798      	lsls	r0, r3, #30
 800664e:	bf49      	itett	mi
 8006650:	085b      	lsrmi	r3, r3, #1
 8006652:	089b      	lsrpl	r3, r3, #2
 8006654:	2001      	movmi	r0, #1
 8006656:	6013      	strmi	r3, [r2, #0]
 8006658:	bf5c      	itt	pl
 800665a:	6013      	strpl	r3, [r2, #0]
 800665c:	2002      	movpl	r0, #2
 800665e:	4770      	bx	lr
 8006660:	b299      	uxth	r1, r3
 8006662:	b909      	cbnz	r1, 8006668 <__lo0bits+0x2a>
 8006664:	0c1b      	lsrs	r3, r3, #16
 8006666:	2010      	movs	r0, #16
 8006668:	b2d9      	uxtb	r1, r3
 800666a:	b909      	cbnz	r1, 8006670 <__lo0bits+0x32>
 800666c:	3008      	adds	r0, #8
 800666e:	0a1b      	lsrs	r3, r3, #8
 8006670:	0719      	lsls	r1, r3, #28
 8006672:	bf04      	itt	eq
 8006674:	091b      	lsreq	r3, r3, #4
 8006676:	3004      	addeq	r0, #4
 8006678:	0799      	lsls	r1, r3, #30
 800667a:	bf04      	itt	eq
 800667c:	089b      	lsreq	r3, r3, #2
 800667e:	3002      	addeq	r0, #2
 8006680:	07d9      	lsls	r1, r3, #31
 8006682:	d403      	bmi.n	800668c <__lo0bits+0x4e>
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	f100 0001 	add.w	r0, r0, #1
 800668a:	d003      	beq.n	8006694 <__lo0bits+0x56>
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	4770      	bx	lr
 8006690:	2000      	movs	r0, #0
 8006692:	4770      	bx	lr
 8006694:	2020      	movs	r0, #32
 8006696:	4770      	bx	lr

08006698 <__i2b>:
 8006698:	b510      	push	{r4, lr}
 800669a:	460c      	mov	r4, r1
 800669c:	2101      	movs	r1, #1
 800669e:	f7ff ff07 	bl	80064b0 <_Balloc>
 80066a2:	4602      	mov	r2, r0
 80066a4:	b928      	cbnz	r0, 80066b2 <__i2b+0x1a>
 80066a6:	4b05      	ldr	r3, [pc, #20]	@ (80066bc <__i2b+0x24>)
 80066a8:	4805      	ldr	r0, [pc, #20]	@ (80066c0 <__i2b+0x28>)
 80066aa:	f240 1145 	movw	r1, #325	@ 0x145
 80066ae:	f000 fd09 	bl	80070c4 <__assert_func>
 80066b2:	2301      	movs	r3, #1
 80066b4:	6144      	str	r4, [r0, #20]
 80066b6:	6103      	str	r3, [r0, #16]
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	bf00      	nop
 80066bc:	08008070 	.word	0x08008070
 80066c0:	08008081 	.word	0x08008081

080066c4 <__multiply>:
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	4617      	mov	r7, r2
 80066ca:	690a      	ldr	r2, [r1, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	bfa8      	it	ge
 80066d2:	463b      	movge	r3, r7
 80066d4:	4689      	mov	r9, r1
 80066d6:	bfa4      	itt	ge
 80066d8:	460f      	movge	r7, r1
 80066da:	4699      	movge	r9, r3
 80066dc:	693d      	ldr	r5, [r7, #16]
 80066de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	eb05 060a 	add.w	r6, r5, sl
 80066ea:	42b3      	cmp	r3, r6
 80066ec:	b085      	sub	sp, #20
 80066ee:	bfb8      	it	lt
 80066f0:	3101      	addlt	r1, #1
 80066f2:	f7ff fedd 	bl	80064b0 <_Balloc>
 80066f6:	b930      	cbnz	r0, 8006706 <__multiply+0x42>
 80066f8:	4602      	mov	r2, r0
 80066fa:	4b41      	ldr	r3, [pc, #260]	@ (8006800 <__multiply+0x13c>)
 80066fc:	4841      	ldr	r0, [pc, #260]	@ (8006804 <__multiply+0x140>)
 80066fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006702:	f000 fcdf 	bl	80070c4 <__assert_func>
 8006706:	f100 0414 	add.w	r4, r0, #20
 800670a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800670e:	4623      	mov	r3, r4
 8006710:	2200      	movs	r2, #0
 8006712:	4573      	cmp	r3, lr
 8006714:	d320      	bcc.n	8006758 <__multiply+0x94>
 8006716:	f107 0814 	add.w	r8, r7, #20
 800671a:	f109 0114 	add.w	r1, r9, #20
 800671e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006722:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006726:	9302      	str	r3, [sp, #8]
 8006728:	1beb      	subs	r3, r5, r7
 800672a:	3b15      	subs	r3, #21
 800672c:	f023 0303 	bic.w	r3, r3, #3
 8006730:	3304      	adds	r3, #4
 8006732:	3715      	adds	r7, #21
 8006734:	42bd      	cmp	r5, r7
 8006736:	bf38      	it	cc
 8006738:	2304      	movcc	r3, #4
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	9b02      	ldr	r3, [sp, #8]
 800673e:	9103      	str	r1, [sp, #12]
 8006740:	428b      	cmp	r3, r1
 8006742:	d80c      	bhi.n	800675e <__multiply+0x9a>
 8006744:	2e00      	cmp	r6, #0
 8006746:	dd03      	ble.n	8006750 <__multiply+0x8c>
 8006748:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800674c:	2b00      	cmp	r3, #0
 800674e:	d055      	beq.n	80067fc <__multiply+0x138>
 8006750:	6106      	str	r6, [r0, #16]
 8006752:	b005      	add	sp, #20
 8006754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006758:	f843 2b04 	str.w	r2, [r3], #4
 800675c:	e7d9      	b.n	8006712 <__multiply+0x4e>
 800675e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006762:	f1ba 0f00 	cmp.w	sl, #0
 8006766:	d01f      	beq.n	80067a8 <__multiply+0xe4>
 8006768:	46c4      	mov	ip, r8
 800676a:	46a1      	mov	r9, r4
 800676c:	2700      	movs	r7, #0
 800676e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006772:	f8d9 3000 	ldr.w	r3, [r9]
 8006776:	fa1f fb82 	uxth.w	fp, r2
 800677a:	b29b      	uxth	r3, r3
 800677c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006780:	443b      	add	r3, r7
 8006782:	f8d9 7000 	ldr.w	r7, [r9]
 8006786:	0c12      	lsrs	r2, r2, #16
 8006788:	0c3f      	lsrs	r7, r7, #16
 800678a:	fb0a 7202 	mla	r2, sl, r2, r7
 800678e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006792:	b29b      	uxth	r3, r3
 8006794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006798:	4565      	cmp	r5, ip
 800679a:	f849 3b04 	str.w	r3, [r9], #4
 800679e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80067a2:	d8e4      	bhi.n	800676e <__multiply+0xaa>
 80067a4:	9b01      	ldr	r3, [sp, #4]
 80067a6:	50e7      	str	r7, [r4, r3]
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80067ae:	3104      	adds	r1, #4
 80067b0:	f1b9 0f00 	cmp.w	r9, #0
 80067b4:	d020      	beq.n	80067f8 <__multiply+0x134>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	4647      	mov	r7, r8
 80067ba:	46a4      	mov	ip, r4
 80067bc:	f04f 0a00 	mov.w	sl, #0
 80067c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80067c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80067c8:	fb09 220b 	mla	r2, r9, fp, r2
 80067cc:	4452      	add	r2, sl
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067d4:	f84c 3b04 	str.w	r3, [ip], #4
 80067d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80067dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80067e4:	fb09 330a 	mla	r3, r9, sl, r3
 80067e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80067ec:	42bd      	cmp	r5, r7
 80067ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067f2:	d8e5      	bhi.n	80067c0 <__multiply+0xfc>
 80067f4:	9a01      	ldr	r2, [sp, #4]
 80067f6:	50a3      	str	r3, [r4, r2]
 80067f8:	3404      	adds	r4, #4
 80067fa:	e79f      	b.n	800673c <__multiply+0x78>
 80067fc:	3e01      	subs	r6, #1
 80067fe:	e7a1      	b.n	8006744 <__multiply+0x80>
 8006800:	08008070 	.word	0x08008070
 8006804:	08008081 	.word	0x08008081

08006808 <__pow5mult>:
 8006808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800680c:	4615      	mov	r5, r2
 800680e:	f012 0203 	ands.w	r2, r2, #3
 8006812:	4607      	mov	r7, r0
 8006814:	460e      	mov	r6, r1
 8006816:	d007      	beq.n	8006828 <__pow5mult+0x20>
 8006818:	4c25      	ldr	r4, [pc, #148]	@ (80068b0 <__pow5mult+0xa8>)
 800681a:	3a01      	subs	r2, #1
 800681c:	2300      	movs	r3, #0
 800681e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006822:	f7ff fea7 	bl	8006574 <__multadd>
 8006826:	4606      	mov	r6, r0
 8006828:	10ad      	asrs	r5, r5, #2
 800682a:	d03d      	beq.n	80068a8 <__pow5mult+0xa0>
 800682c:	69fc      	ldr	r4, [r7, #28]
 800682e:	b97c      	cbnz	r4, 8006850 <__pow5mult+0x48>
 8006830:	2010      	movs	r0, #16
 8006832:	f7ff fd87 	bl	8006344 <malloc>
 8006836:	4602      	mov	r2, r0
 8006838:	61f8      	str	r0, [r7, #28]
 800683a:	b928      	cbnz	r0, 8006848 <__pow5mult+0x40>
 800683c:	4b1d      	ldr	r3, [pc, #116]	@ (80068b4 <__pow5mult+0xac>)
 800683e:	481e      	ldr	r0, [pc, #120]	@ (80068b8 <__pow5mult+0xb0>)
 8006840:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006844:	f000 fc3e 	bl	80070c4 <__assert_func>
 8006848:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800684c:	6004      	str	r4, [r0, #0]
 800684e:	60c4      	str	r4, [r0, #12]
 8006850:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006854:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006858:	b94c      	cbnz	r4, 800686e <__pow5mult+0x66>
 800685a:	f240 2171 	movw	r1, #625	@ 0x271
 800685e:	4638      	mov	r0, r7
 8006860:	f7ff ff1a 	bl	8006698 <__i2b>
 8006864:	2300      	movs	r3, #0
 8006866:	f8c8 0008 	str.w	r0, [r8, #8]
 800686a:	4604      	mov	r4, r0
 800686c:	6003      	str	r3, [r0, #0]
 800686e:	f04f 0900 	mov.w	r9, #0
 8006872:	07eb      	lsls	r3, r5, #31
 8006874:	d50a      	bpl.n	800688c <__pow5mult+0x84>
 8006876:	4631      	mov	r1, r6
 8006878:	4622      	mov	r2, r4
 800687a:	4638      	mov	r0, r7
 800687c:	f7ff ff22 	bl	80066c4 <__multiply>
 8006880:	4631      	mov	r1, r6
 8006882:	4680      	mov	r8, r0
 8006884:	4638      	mov	r0, r7
 8006886:	f7ff fe53 	bl	8006530 <_Bfree>
 800688a:	4646      	mov	r6, r8
 800688c:	106d      	asrs	r5, r5, #1
 800688e:	d00b      	beq.n	80068a8 <__pow5mult+0xa0>
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	b938      	cbnz	r0, 80068a4 <__pow5mult+0x9c>
 8006894:	4622      	mov	r2, r4
 8006896:	4621      	mov	r1, r4
 8006898:	4638      	mov	r0, r7
 800689a:	f7ff ff13 	bl	80066c4 <__multiply>
 800689e:	6020      	str	r0, [r4, #0]
 80068a0:	f8c0 9000 	str.w	r9, [r0]
 80068a4:	4604      	mov	r4, r0
 80068a6:	e7e4      	b.n	8006872 <__pow5mult+0x6a>
 80068a8:	4630      	mov	r0, r6
 80068aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ae:	bf00      	nop
 80068b0:	08008134 	.word	0x08008134
 80068b4:	08008001 	.word	0x08008001
 80068b8:	08008081 	.word	0x08008081

080068bc <__lshift>:
 80068bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c0:	460c      	mov	r4, r1
 80068c2:	6849      	ldr	r1, [r1, #4]
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068ca:	68a3      	ldr	r3, [r4, #8]
 80068cc:	4607      	mov	r7, r0
 80068ce:	4691      	mov	r9, r2
 80068d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068d4:	f108 0601 	add.w	r6, r8, #1
 80068d8:	42b3      	cmp	r3, r6
 80068da:	db0b      	blt.n	80068f4 <__lshift+0x38>
 80068dc:	4638      	mov	r0, r7
 80068de:	f7ff fde7 	bl	80064b0 <_Balloc>
 80068e2:	4605      	mov	r5, r0
 80068e4:	b948      	cbnz	r0, 80068fa <__lshift+0x3e>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b28      	ldr	r3, [pc, #160]	@ (800698c <__lshift+0xd0>)
 80068ea:	4829      	ldr	r0, [pc, #164]	@ (8006990 <__lshift+0xd4>)
 80068ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068f0:	f000 fbe8 	bl	80070c4 <__assert_func>
 80068f4:	3101      	adds	r1, #1
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	e7ee      	b.n	80068d8 <__lshift+0x1c>
 80068fa:	2300      	movs	r3, #0
 80068fc:	f100 0114 	add.w	r1, r0, #20
 8006900:	f100 0210 	add.w	r2, r0, #16
 8006904:	4618      	mov	r0, r3
 8006906:	4553      	cmp	r3, sl
 8006908:	db33      	blt.n	8006972 <__lshift+0xb6>
 800690a:	6920      	ldr	r0, [r4, #16]
 800690c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006910:	f104 0314 	add.w	r3, r4, #20
 8006914:	f019 091f 	ands.w	r9, r9, #31
 8006918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800691c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006920:	d02b      	beq.n	800697a <__lshift+0xbe>
 8006922:	f1c9 0e20 	rsb	lr, r9, #32
 8006926:	468a      	mov	sl, r1
 8006928:	2200      	movs	r2, #0
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	fa00 f009 	lsl.w	r0, r0, r9
 8006930:	4310      	orrs	r0, r2
 8006932:	f84a 0b04 	str.w	r0, [sl], #4
 8006936:	f853 2b04 	ldr.w	r2, [r3], #4
 800693a:	459c      	cmp	ip, r3
 800693c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006940:	d8f3      	bhi.n	800692a <__lshift+0x6e>
 8006942:	ebac 0304 	sub.w	r3, ip, r4
 8006946:	3b15      	subs	r3, #21
 8006948:	f023 0303 	bic.w	r3, r3, #3
 800694c:	3304      	adds	r3, #4
 800694e:	f104 0015 	add.w	r0, r4, #21
 8006952:	4560      	cmp	r0, ip
 8006954:	bf88      	it	hi
 8006956:	2304      	movhi	r3, #4
 8006958:	50ca      	str	r2, [r1, r3]
 800695a:	b10a      	cbz	r2, 8006960 <__lshift+0xa4>
 800695c:	f108 0602 	add.w	r6, r8, #2
 8006960:	3e01      	subs	r6, #1
 8006962:	4638      	mov	r0, r7
 8006964:	612e      	str	r6, [r5, #16]
 8006966:	4621      	mov	r1, r4
 8006968:	f7ff fde2 	bl	8006530 <_Bfree>
 800696c:	4628      	mov	r0, r5
 800696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006972:	f842 0f04 	str.w	r0, [r2, #4]!
 8006976:	3301      	adds	r3, #1
 8006978:	e7c5      	b.n	8006906 <__lshift+0x4a>
 800697a:	3904      	subs	r1, #4
 800697c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006980:	f841 2f04 	str.w	r2, [r1, #4]!
 8006984:	459c      	cmp	ip, r3
 8006986:	d8f9      	bhi.n	800697c <__lshift+0xc0>
 8006988:	e7ea      	b.n	8006960 <__lshift+0xa4>
 800698a:	bf00      	nop
 800698c:	08008070 	.word	0x08008070
 8006990:	08008081 	.word	0x08008081

08006994 <__mcmp>:
 8006994:	690a      	ldr	r2, [r1, #16]
 8006996:	4603      	mov	r3, r0
 8006998:	6900      	ldr	r0, [r0, #16]
 800699a:	1a80      	subs	r0, r0, r2
 800699c:	b530      	push	{r4, r5, lr}
 800699e:	d10e      	bne.n	80069be <__mcmp+0x2a>
 80069a0:	3314      	adds	r3, #20
 80069a2:	3114      	adds	r1, #20
 80069a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80069a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80069ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069b4:	4295      	cmp	r5, r2
 80069b6:	d003      	beq.n	80069c0 <__mcmp+0x2c>
 80069b8:	d205      	bcs.n	80069c6 <__mcmp+0x32>
 80069ba:	f04f 30ff 	mov.w	r0, #4294967295
 80069be:	bd30      	pop	{r4, r5, pc}
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	d3f3      	bcc.n	80069ac <__mcmp+0x18>
 80069c4:	e7fb      	b.n	80069be <__mcmp+0x2a>
 80069c6:	2001      	movs	r0, #1
 80069c8:	e7f9      	b.n	80069be <__mcmp+0x2a>
	...

080069cc <__mdiff>:
 80069cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d0:	4689      	mov	r9, r1
 80069d2:	4606      	mov	r6, r0
 80069d4:	4611      	mov	r1, r2
 80069d6:	4648      	mov	r0, r9
 80069d8:	4614      	mov	r4, r2
 80069da:	f7ff ffdb 	bl	8006994 <__mcmp>
 80069de:	1e05      	subs	r5, r0, #0
 80069e0:	d112      	bne.n	8006a08 <__mdiff+0x3c>
 80069e2:	4629      	mov	r1, r5
 80069e4:	4630      	mov	r0, r6
 80069e6:	f7ff fd63 	bl	80064b0 <_Balloc>
 80069ea:	4602      	mov	r2, r0
 80069ec:	b928      	cbnz	r0, 80069fa <__mdiff+0x2e>
 80069ee:	4b3f      	ldr	r3, [pc, #252]	@ (8006aec <__mdiff+0x120>)
 80069f0:	f240 2137 	movw	r1, #567	@ 0x237
 80069f4:	483e      	ldr	r0, [pc, #248]	@ (8006af0 <__mdiff+0x124>)
 80069f6:	f000 fb65 	bl	80070c4 <__assert_func>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a00:	4610      	mov	r0, r2
 8006a02:	b003      	add	sp, #12
 8006a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a08:	bfbc      	itt	lt
 8006a0a:	464b      	movlt	r3, r9
 8006a0c:	46a1      	movlt	r9, r4
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a14:	bfba      	itte	lt
 8006a16:	461c      	movlt	r4, r3
 8006a18:	2501      	movlt	r5, #1
 8006a1a:	2500      	movge	r5, #0
 8006a1c:	f7ff fd48 	bl	80064b0 <_Balloc>
 8006a20:	4602      	mov	r2, r0
 8006a22:	b918      	cbnz	r0, 8006a2c <__mdiff+0x60>
 8006a24:	4b31      	ldr	r3, [pc, #196]	@ (8006aec <__mdiff+0x120>)
 8006a26:	f240 2145 	movw	r1, #581	@ 0x245
 8006a2a:	e7e3      	b.n	80069f4 <__mdiff+0x28>
 8006a2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a30:	6926      	ldr	r6, [r4, #16]
 8006a32:	60c5      	str	r5, [r0, #12]
 8006a34:	f109 0310 	add.w	r3, r9, #16
 8006a38:	f109 0514 	add.w	r5, r9, #20
 8006a3c:	f104 0e14 	add.w	lr, r4, #20
 8006a40:	f100 0b14 	add.w	fp, r0, #20
 8006a44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	46d9      	mov	r9, fp
 8006a50:	f04f 0c00 	mov.w	ip, #0
 8006a54:	9b01      	ldr	r3, [sp, #4]
 8006a56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a5e:	9301      	str	r3, [sp, #4]
 8006a60:	fa1f f38a 	uxth.w	r3, sl
 8006a64:	4619      	mov	r1, r3
 8006a66:	b283      	uxth	r3, r0
 8006a68:	1acb      	subs	r3, r1, r3
 8006a6a:	0c00      	lsrs	r0, r0, #16
 8006a6c:	4463      	add	r3, ip
 8006a6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a7c:	4576      	cmp	r6, lr
 8006a7e:	f849 3b04 	str.w	r3, [r9], #4
 8006a82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a86:	d8e5      	bhi.n	8006a54 <__mdiff+0x88>
 8006a88:	1b33      	subs	r3, r6, r4
 8006a8a:	3b15      	subs	r3, #21
 8006a8c:	f023 0303 	bic.w	r3, r3, #3
 8006a90:	3415      	adds	r4, #21
 8006a92:	3304      	adds	r3, #4
 8006a94:	42a6      	cmp	r6, r4
 8006a96:	bf38      	it	cc
 8006a98:	2304      	movcc	r3, #4
 8006a9a:	441d      	add	r5, r3
 8006a9c:	445b      	add	r3, fp
 8006a9e:	461e      	mov	r6, r3
 8006aa0:	462c      	mov	r4, r5
 8006aa2:	4544      	cmp	r4, r8
 8006aa4:	d30e      	bcc.n	8006ac4 <__mdiff+0xf8>
 8006aa6:	f108 0103 	add.w	r1, r8, #3
 8006aaa:	1b49      	subs	r1, r1, r5
 8006aac:	f021 0103 	bic.w	r1, r1, #3
 8006ab0:	3d03      	subs	r5, #3
 8006ab2:	45a8      	cmp	r8, r5
 8006ab4:	bf38      	it	cc
 8006ab6:	2100      	movcc	r1, #0
 8006ab8:	440b      	add	r3, r1
 8006aba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006abe:	b191      	cbz	r1, 8006ae6 <__mdiff+0x11a>
 8006ac0:	6117      	str	r7, [r2, #16]
 8006ac2:	e79d      	b.n	8006a00 <__mdiff+0x34>
 8006ac4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ac8:	46e6      	mov	lr, ip
 8006aca:	0c08      	lsrs	r0, r1, #16
 8006acc:	fa1c fc81 	uxtah	ip, ip, r1
 8006ad0:	4471      	add	r1, lr
 8006ad2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ad6:	b289      	uxth	r1, r1
 8006ad8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006adc:	f846 1b04 	str.w	r1, [r6], #4
 8006ae0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ae4:	e7dd      	b.n	8006aa2 <__mdiff+0xd6>
 8006ae6:	3f01      	subs	r7, #1
 8006ae8:	e7e7      	b.n	8006aba <__mdiff+0xee>
 8006aea:	bf00      	nop
 8006aec:	08008070 	.word	0x08008070
 8006af0:	08008081 	.word	0x08008081

08006af4 <__d2b>:
 8006af4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006af8:	460f      	mov	r7, r1
 8006afa:	2101      	movs	r1, #1
 8006afc:	ec59 8b10 	vmov	r8, r9, d0
 8006b00:	4616      	mov	r6, r2
 8006b02:	f7ff fcd5 	bl	80064b0 <_Balloc>
 8006b06:	4604      	mov	r4, r0
 8006b08:	b930      	cbnz	r0, 8006b18 <__d2b+0x24>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	4b23      	ldr	r3, [pc, #140]	@ (8006b9c <__d2b+0xa8>)
 8006b0e:	4824      	ldr	r0, [pc, #144]	@ (8006ba0 <__d2b+0xac>)
 8006b10:	f240 310f 	movw	r1, #783	@ 0x30f
 8006b14:	f000 fad6 	bl	80070c4 <__assert_func>
 8006b18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b20:	b10d      	cbz	r5, 8006b26 <__d2b+0x32>
 8006b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	f1b8 0300 	subs.w	r3, r8, #0
 8006b2c:	d023      	beq.n	8006b76 <__d2b+0x82>
 8006b2e:	4668      	mov	r0, sp
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	f7ff fd84 	bl	800663e <__lo0bits>
 8006b36:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b3a:	b1d0      	cbz	r0, 8006b72 <__d2b+0x7e>
 8006b3c:	f1c0 0320 	rsb	r3, r0, #32
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	430b      	orrs	r3, r1
 8006b46:	40c2      	lsrs	r2, r0
 8006b48:	6163      	str	r3, [r4, #20]
 8006b4a:	9201      	str	r2, [sp, #4]
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	61a3      	str	r3, [r4, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bf0c      	ite	eq
 8006b54:	2201      	moveq	r2, #1
 8006b56:	2202      	movne	r2, #2
 8006b58:	6122      	str	r2, [r4, #16]
 8006b5a:	b1a5      	cbz	r5, 8006b86 <__d2b+0x92>
 8006b5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b60:	4405      	add	r5, r0
 8006b62:	603d      	str	r5, [r7, #0]
 8006b64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b68:	6030      	str	r0, [r6, #0]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	b003      	add	sp, #12
 8006b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b72:	6161      	str	r1, [r4, #20]
 8006b74:	e7ea      	b.n	8006b4c <__d2b+0x58>
 8006b76:	a801      	add	r0, sp, #4
 8006b78:	f7ff fd61 	bl	800663e <__lo0bits>
 8006b7c:	9b01      	ldr	r3, [sp, #4]
 8006b7e:	6163      	str	r3, [r4, #20]
 8006b80:	3020      	adds	r0, #32
 8006b82:	2201      	movs	r2, #1
 8006b84:	e7e8      	b.n	8006b58 <__d2b+0x64>
 8006b86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b8e:	6038      	str	r0, [r7, #0]
 8006b90:	6918      	ldr	r0, [r3, #16]
 8006b92:	f7ff fd35 	bl	8006600 <__hi0bits>
 8006b96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b9a:	e7e5      	b.n	8006b68 <__d2b+0x74>
 8006b9c:	08008070 	.word	0x08008070
 8006ba0:	08008081 	.word	0x08008081

08006ba4 <__sfputc_r>:
 8006ba4:	6893      	ldr	r3, [r2, #8]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	b410      	push	{r4}
 8006bac:	6093      	str	r3, [r2, #8]
 8006bae:	da08      	bge.n	8006bc2 <__sfputc_r+0x1e>
 8006bb0:	6994      	ldr	r4, [r2, #24]
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	db01      	blt.n	8006bba <__sfputc_r+0x16>
 8006bb6:	290a      	cmp	r1, #10
 8006bb8:	d103      	bne.n	8006bc2 <__sfputc_r+0x1e>
 8006bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bbe:	f7fe bc0a 	b.w	80053d6 <__swbuf_r>
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	1c58      	adds	r0, r3, #1
 8006bc6:	6010      	str	r0, [r2, #0]
 8006bc8:	7019      	strb	r1, [r3, #0]
 8006bca:	4608      	mov	r0, r1
 8006bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <__sfputs_r>:
 8006bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	460f      	mov	r7, r1
 8006bd8:	4614      	mov	r4, r2
 8006bda:	18d5      	adds	r5, r2, r3
 8006bdc:	42ac      	cmp	r4, r5
 8006bde:	d101      	bne.n	8006be4 <__sfputs_r+0x12>
 8006be0:	2000      	movs	r0, #0
 8006be2:	e007      	b.n	8006bf4 <__sfputs_r+0x22>
 8006be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be8:	463a      	mov	r2, r7
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff ffda 	bl	8006ba4 <__sfputc_r>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d1f3      	bne.n	8006bdc <__sfputs_r+0xa>
 8006bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bf8 <_vfiprintf_r>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	460d      	mov	r5, r1
 8006bfe:	b09d      	sub	sp, #116	@ 0x74
 8006c00:	4614      	mov	r4, r2
 8006c02:	4698      	mov	r8, r3
 8006c04:	4606      	mov	r6, r0
 8006c06:	b118      	cbz	r0, 8006c10 <_vfiprintf_r+0x18>
 8006c08:	6a03      	ldr	r3, [r0, #32]
 8006c0a:	b90b      	cbnz	r3, 8006c10 <_vfiprintf_r+0x18>
 8006c0c:	f7fe fafa 	bl	8005204 <__sinit>
 8006c10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c12:	07d9      	lsls	r1, r3, #31
 8006c14:	d405      	bmi.n	8006c22 <_vfiprintf_r+0x2a>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	059a      	lsls	r2, r3, #22
 8006c1a:	d402      	bmi.n	8006c22 <_vfiprintf_r+0x2a>
 8006c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c1e:	f7fe fcec 	bl	80055fa <__retarget_lock_acquire_recursive>
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	071b      	lsls	r3, r3, #28
 8006c26:	d501      	bpl.n	8006c2c <_vfiprintf_r+0x34>
 8006c28:	692b      	ldr	r3, [r5, #16]
 8006c2a:	b99b      	cbnz	r3, 8006c54 <_vfiprintf_r+0x5c>
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f7fe fc10 	bl	8005454 <__swsetup_r>
 8006c34:	b170      	cbz	r0, 8006c54 <_vfiprintf_r+0x5c>
 8006c36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c38:	07dc      	lsls	r4, r3, #31
 8006c3a:	d504      	bpl.n	8006c46 <_vfiprintf_r+0x4e>
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c40:	b01d      	add	sp, #116	@ 0x74
 8006c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c46:	89ab      	ldrh	r3, [r5, #12]
 8006c48:	0598      	lsls	r0, r3, #22
 8006c4a:	d4f7      	bmi.n	8006c3c <_vfiprintf_r+0x44>
 8006c4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c4e:	f7fe fcd5 	bl	80055fc <__retarget_lock_release_recursive>
 8006c52:	e7f3      	b.n	8006c3c <_vfiprintf_r+0x44>
 8006c54:	2300      	movs	r3, #0
 8006c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c58:	2320      	movs	r3, #32
 8006c5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c62:	2330      	movs	r3, #48	@ 0x30
 8006c64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e14 <_vfiprintf_r+0x21c>
 8006c68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c6c:	f04f 0901 	mov.w	r9, #1
 8006c70:	4623      	mov	r3, r4
 8006c72:	469a      	mov	sl, r3
 8006c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c78:	b10a      	cbz	r2, 8006c7e <_vfiprintf_r+0x86>
 8006c7a:	2a25      	cmp	r2, #37	@ 0x25
 8006c7c:	d1f9      	bne.n	8006c72 <_vfiprintf_r+0x7a>
 8006c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c82:	d00b      	beq.n	8006c9c <_vfiprintf_r+0xa4>
 8006c84:	465b      	mov	r3, fp
 8006c86:	4622      	mov	r2, r4
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff ffa1 	bl	8006bd2 <__sfputs_r>
 8006c90:	3001      	adds	r0, #1
 8006c92:	f000 80a7 	beq.w	8006de4 <_vfiprintf_r+0x1ec>
 8006c96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c98:	445a      	add	r2, fp
 8006c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 809f 	beq.w	8006de4 <_vfiprintf_r+0x1ec>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cb0:	f10a 0a01 	add.w	sl, sl, #1
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	9307      	str	r3, [sp, #28]
 8006cb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cbe:	4654      	mov	r4, sl
 8006cc0:	2205      	movs	r2, #5
 8006cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc6:	4853      	ldr	r0, [pc, #332]	@ (8006e14 <_vfiprintf_r+0x21c>)
 8006cc8:	f7f9 fa82 	bl	80001d0 <memchr>
 8006ccc:	9a04      	ldr	r2, [sp, #16]
 8006cce:	b9d8      	cbnz	r0, 8006d08 <_vfiprintf_r+0x110>
 8006cd0:	06d1      	lsls	r1, r2, #27
 8006cd2:	bf44      	itt	mi
 8006cd4:	2320      	movmi	r3, #32
 8006cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cda:	0713      	lsls	r3, r2, #28
 8006cdc:	bf44      	itt	mi
 8006cde:	232b      	movmi	r3, #43	@ 0x2b
 8006ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cea:	d015      	beq.n	8006d18 <_vfiprintf_r+0x120>
 8006cec:	9a07      	ldr	r2, [sp, #28]
 8006cee:	4654      	mov	r4, sl
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	f04f 0c0a 	mov.w	ip, #10
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cfc:	3b30      	subs	r3, #48	@ 0x30
 8006cfe:	2b09      	cmp	r3, #9
 8006d00:	d94b      	bls.n	8006d9a <_vfiprintf_r+0x1a2>
 8006d02:	b1b0      	cbz	r0, 8006d32 <_vfiprintf_r+0x13a>
 8006d04:	9207      	str	r2, [sp, #28]
 8006d06:	e014      	b.n	8006d32 <_vfiprintf_r+0x13a>
 8006d08:	eba0 0308 	sub.w	r3, r0, r8
 8006d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006d10:	4313      	orrs	r3, r2
 8006d12:	9304      	str	r3, [sp, #16]
 8006d14:	46a2      	mov	sl, r4
 8006d16:	e7d2      	b.n	8006cbe <_vfiprintf_r+0xc6>
 8006d18:	9b03      	ldr	r3, [sp, #12]
 8006d1a:	1d19      	adds	r1, r3, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	9103      	str	r1, [sp, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bfbb      	ittet	lt
 8006d24:	425b      	neglt	r3, r3
 8006d26:	f042 0202 	orrlt.w	r2, r2, #2
 8006d2a:	9307      	strge	r3, [sp, #28]
 8006d2c:	9307      	strlt	r3, [sp, #28]
 8006d2e:	bfb8      	it	lt
 8006d30:	9204      	strlt	r2, [sp, #16]
 8006d32:	7823      	ldrb	r3, [r4, #0]
 8006d34:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d36:	d10a      	bne.n	8006d4e <_vfiprintf_r+0x156>
 8006d38:	7863      	ldrb	r3, [r4, #1]
 8006d3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d3c:	d132      	bne.n	8006da4 <_vfiprintf_r+0x1ac>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	1d1a      	adds	r2, r3, #4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	9203      	str	r2, [sp, #12]
 8006d46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d4a:	3402      	adds	r4, #2
 8006d4c:	9305      	str	r3, [sp, #20]
 8006d4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e24 <_vfiprintf_r+0x22c>
 8006d52:	7821      	ldrb	r1, [r4, #0]
 8006d54:	2203      	movs	r2, #3
 8006d56:	4650      	mov	r0, sl
 8006d58:	f7f9 fa3a 	bl	80001d0 <memchr>
 8006d5c:	b138      	cbz	r0, 8006d6e <_vfiprintf_r+0x176>
 8006d5e:	9b04      	ldr	r3, [sp, #16]
 8006d60:	eba0 000a 	sub.w	r0, r0, sl
 8006d64:	2240      	movs	r2, #64	@ 0x40
 8006d66:	4082      	lsls	r2, r0
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	3401      	adds	r4, #1
 8006d6c:	9304      	str	r3, [sp, #16]
 8006d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d72:	4829      	ldr	r0, [pc, #164]	@ (8006e18 <_vfiprintf_r+0x220>)
 8006d74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d78:	2206      	movs	r2, #6
 8006d7a:	f7f9 fa29 	bl	80001d0 <memchr>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d03f      	beq.n	8006e02 <_vfiprintf_r+0x20a>
 8006d82:	4b26      	ldr	r3, [pc, #152]	@ (8006e1c <_vfiprintf_r+0x224>)
 8006d84:	bb1b      	cbnz	r3, 8006dce <_vfiprintf_r+0x1d6>
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	3307      	adds	r3, #7
 8006d8a:	f023 0307 	bic.w	r3, r3, #7
 8006d8e:	3308      	adds	r3, #8
 8006d90:	9303      	str	r3, [sp, #12]
 8006d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d94:	443b      	add	r3, r7
 8006d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d98:	e76a      	b.n	8006c70 <_vfiprintf_r+0x78>
 8006d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d9e:	460c      	mov	r4, r1
 8006da0:	2001      	movs	r0, #1
 8006da2:	e7a8      	b.n	8006cf6 <_vfiprintf_r+0xfe>
 8006da4:	2300      	movs	r3, #0
 8006da6:	3401      	adds	r4, #1
 8006da8:	9305      	str	r3, [sp, #20]
 8006daa:	4619      	mov	r1, r3
 8006dac:	f04f 0c0a 	mov.w	ip, #10
 8006db0:	4620      	mov	r0, r4
 8006db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006db6:	3a30      	subs	r2, #48	@ 0x30
 8006db8:	2a09      	cmp	r2, #9
 8006dba:	d903      	bls.n	8006dc4 <_vfiprintf_r+0x1cc>
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0c6      	beq.n	8006d4e <_vfiprintf_r+0x156>
 8006dc0:	9105      	str	r1, [sp, #20]
 8006dc2:	e7c4      	b.n	8006d4e <_vfiprintf_r+0x156>
 8006dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dc8:	4604      	mov	r4, r0
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e7f0      	b.n	8006db0 <_vfiprintf_r+0x1b8>
 8006dce:	ab03      	add	r3, sp, #12
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	462a      	mov	r2, r5
 8006dd4:	4b12      	ldr	r3, [pc, #72]	@ (8006e20 <_vfiprintf_r+0x228>)
 8006dd6:	a904      	add	r1, sp, #16
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7fd fdd1 	bl	8004980 <_printf_float>
 8006dde:	4607      	mov	r7, r0
 8006de0:	1c78      	adds	r0, r7, #1
 8006de2:	d1d6      	bne.n	8006d92 <_vfiprintf_r+0x19a>
 8006de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006de6:	07d9      	lsls	r1, r3, #31
 8006de8:	d405      	bmi.n	8006df6 <_vfiprintf_r+0x1fe>
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	059a      	lsls	r2, r3, #22
 8006dee:	d402      	bmi.n	8006df6 <_vfiprintf_r+0x1fe>
 8006df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006df2:	f7fe fc03 	bl	80055fc <__retarget_lock_release_recursive>
 8006df6:	89ab      	ldrh	r3, [r5, #12]
 8006df8:	065b      	lsls	r3, r3, #25
 8006dfa:	f53f af1f 	bmi.w	8006c3c <_vfiprintf_r+0x44>
 8006dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e00:	e71e      	b.n	8006c40 <_vfiprintf_r+0x48>
 8006e02:	ab03      	add	r3, sp, #12
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	462a      	mov	r2, r5
 8006e08:	4b05      	ldr	r3, [pc, #20]	@ (8006e20 <_vfiprintf_r+0x228>)
 8006e0a:	a904      	add	r1, sp, #16
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f7fe f84f 	bl	8004eb0 <_printf_i>
 8006e12:	e7e4      	b.n	8006dde <_vfiprintf_r+0x1e6>
 8006e14:	080080da 	.word	0x080080da
 8006e18:	080080e4 	.word	0x080080e4
 8006e1c:	08004981 	.word	0x08004981
 8006e20:	08006bd3 	.word	0x08006bd3
 8006e24:	080080e0 	.word	0x080080e0

08006e28 <__sflush_r>:
 8006e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	0716      	lsls	r6, r2, #28
 8006e32:	4605      	mov	r5, r0
 8006e34:	460c      	mov	r4, r1
 8006e36:	d454      	bmi.n	8006ee2 <__sflush_r+0xba>
 8006e38:	684b      	ldr	r3, [r1, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dc02      	bgt.n	8006e44 <__sflush_r+0x1c>
 8006e3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	dd48      	ble.n	8006ed6 <__sflush_r+0xae>
 8006e44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e46:	2e00      	cmp	r6, #0
 8006e48:	d045      	beq.n	8006ed6 <__sflush_r+0xae>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e50:	682f      	ldr	r7, [r5, #0]
 8006e52:	6a21      	ldr	r1, [r4, #32]
 8006e54:	602b      	str	r3, [r5, #0]
 8006e56:	d030      	beq.n	8006eba <__sflush_r+0x92>
 8006e58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	0759      	lsls	r1, r3, #29
 8006e5e:	d505      	bpl.n	8006e6c <__sflush_r+0x44>
 8006e60:	6863      	ldr	r3, [r4, #4]
 8006e62:	1ad2      	subs	r2, r2, r3
 8006e64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e66:	b10b      	cbz	r3, 8006e6c <__sflush_r+0x44>
 8006e68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e6a:	1ad2      	subs	r2, r2, r3
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e70:	6a21      	ldr	r1, [r4, #32]
 8006e72:	4628      	mov	r0, r5
 8006e74:	47b0      	blx	r6
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	d106      	bne.n	8006e8a <__sflush_r+0x62>
 8006e7c:	6829      	ldr	r1, [r5, #0]
 8006e7e:	291d      	cmp	r1, #29
 8006e80:	d82b      	bhi.n	8006eda <__sflush_r+0xb2>
 8006e82:	4a2a      	ldr	r2, [pc, #168]	@ (8006f2c <__sflush_r+0x104>)
 8006e84:	40ca      	lsrs	r2, r1
 8006e86:	07d6      	lsls	r6, r2, #31
 8006e88:	d527      	bpl.n	8006eda <__sflush_r+0xb2>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	6062      	str	r2, [r4, #4]
 8006e8e:	04d9      	lsls	r1, r3, #19
 8006e90:	6922      	ldr	r2, [r4, #16]
 8006e92:	6022      	str	r2, [r4, #0]
 8006e94:	d504      	bpl.n	8006ea0 <__sflush_r+0x78>
 8006e96:	1c42      	adds	r2, r0, #1
 8006e98:	d101      	bne.n	8006e9e <__sflush_r+0x76>
 8006e9a:	682b      	ldr	r3, [r5, #0]
 8006e9c:	b903      	cbnz	r3, 8006ea0 <__sflush_r+0x78>
 8006e9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ea2:	602f      	str	r7, [r5, #0]
 8006ea4:	b1b9      	cbz	r1, 8006ed6 <__sflush_r+0xae>
 8006ea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006eaa:	4299      	cmp	r1, r3
 8006eac:	d002      	beq.n	8006eb4 <__sflush_r+0x8c>
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f7ff f9fe 	bl	80062b0 <_free_r>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006eb8:	e00d      	b.n	8006ed6 <__sflush_r+0xae>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b0      	blx	r6
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	1c50      	adds	r0, r2, #1
 8006ec4:	d1c9      	bne.n	8006e5a <__sflush_r+0x32>
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0c6      	beq.n	8006e5a <__sflush_r+0x32>
 8006ecc:	2b1d      	cmp	r3, #29
 8006ece:	d001      	beq.n	8006ed4 <__sflush_r+0xac>
 8006ed0:	2b16      	cmp	r3, #22
 8006ed2:	d11e      	bne.n	8006f12 <__sflush_r+0xea>
 8006ed4:	602f      	str	r7, [r5, #0]
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e022      	b.n	8006f20 <__sflush_r+0xf8>
 8006eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ede:	b21b      	sxth	r3, r3
 8006ee0:	e01b      	b.n	8006f1a <__sflush_r+0xf2>
 8006ee2:	690f      	ldr	r7, [r1, #16]
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	d0f6      	beq.n	8006ed6 <__sflush_r+0xae>
 8006ee8:	0793      	lsls	r3, r2, #30
 8006eea:	680e      	ldr	r6, [r1, #0]
 8006eec:	bf08      	it	eq
 8006eee:	694b      	ldreq	r3, [r1, #20]
 8006ef0:	600f      	str	r7, [r1, #0]
 8006ef2:	bf18      	it	ne
 8006ef4:	2300      	movne	r3, #0
 8006ef6:	eba6 0807 	sub.w	r8, r6, r7
 8006efa:	608b      	str	r3, [r1, #8]
 8006efc:	f1b8 0f00 	cmp.w	r8, #0
 8006f00:	dde9      	ble.n	8006ed6 <__sflush_r+0xae>
 8006f02:	6a21      	ldr	r1, [r4, #32]
 8006f04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f06:	4643      	mov	r3, r8
 8006f08:	463a      	mov	r2, r7
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b0      	blx	r6
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	dc08      	bgt.n	8006f24 <__sflush_r+0xfc>
 8006f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f1a:	81a3      	strh	r3, [r4, #12]
 8006f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	4407      	add	r7, r0
 8006f26:	eba8 0800 	sub.w	r8, r8, r0
 8006f2a:	e7e7      	b.n	8006efc <__sflush_r+0xd4>
 8006f2c:	20400001 	.word	0x20400001

08006f30 <_fflush_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	690b      	ldr	r3, [r1, #16]
 8006f34:	4605      	mov	r5, r0
 8006f36:	460c      	mov	r4, r1
 8006f38:	b913      	cbnz	r3, 8006f40 <_fflush_r+0x10>
 8006f3a:	2500      	movs	r5, #0
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	b118      	cbz	r0, 8006f4a <_fflush_r+0x1a>
 8006f42:	6a03      	ldr	r3, [r0, #32]
 8006f44:	b90b      	cbnz	r3, 8006f4a <_fflush_r+0x1a>
 8006f46:	f7fe f95d 	bl	8005204 <__sinit>
 8006f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f3      	beq.n	8006f3a <_fflush_r+0xa>
 8006f52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f54:	07d0      	lsls	r0, r2, #31
 8006f56:	d404      	bmi.n	8006f62 <_fflush_r+0x32>
 8006f58:	0599      	lsls	r1, r3, #22
 8006f5a:	d402      	bmi.n	8006f62 <_fflush_r+0x32>
 8006f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f5e:	f7fe fb4c 	bl	80055fa <__retarget_lock_acquire_recursive>
 8006f62:	4628      	mov	r0, r5
 8006f64:	4621      	mov	r1, r4
 8006f66:	f7ff ff5f 	bl	8006e28 <__sflush_r>
 8006f6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f6c:	07da      	lsls	r2, r3, #31
 8006f6e:	4605      	mov	r5, r0
 8006f70:	d4e4      	bmi.n	8006f3c <_fflush_r+0xc>
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	059b      	lsls	r3, r3, #22
 8006f76:	d4e1      	bmi.n	8006f3c <_fflush_r+0xc>
 8006f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f7a:	f7fe fb3f 	bl	80055fc <__retarget_lock_release_recursive>
 8006f7e:	e7dd      	b.n	8006f3c <_fflush_r+0xc>

08006f80 <__swhatbuf_r>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	460c      	mov	r4, r1
 8006f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	b096      	sub	sp, #88	@ 0x58
 8006f8c:	4615      	mov	r5, r2
 8006f8e:	461e      	mov	r6, r3
 8006f90:	da0d      	bge.n	8006fae <__swhatbuf_r+0x2e>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f98:	f04f 0100 	mov.w	r1, #0
 8006f9c:	bf14      	ite	ne
 8006f9e:	2340      	movne	r3, #64	@ 0x40
 8006fa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	6031      	str	r1, [r6, #0]
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	b016      	add	sp, #88	@ 0x58
 8006fac:	bd70      	pop	{r4, r5, r6, pc}
 8006fae:	466a      	mov	r2, sp
 8006fb0:	f000 f848 	bl	8007044 <_fstat_r>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	dbec      	blt.n	8006f92 <__swhatbuf_r+0x12>
 8006fb8:	9901      	ldr	r1, [sp, #4]
 8006fba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fc2:	4259      	negs	r1, r3
 8006fc4:	4159      	adcs	r1, r3
 8006fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fca:	e7eb      	b.n	8006fa4 <__swhatbuf_r+0x24>

08006fcc <__smakebuf_r>:
 8006fcc:	898b      	ldrh	r3, [r1, #12]
 8006fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fd0:	079d      	lsls	r5, r3, #30
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	d507      	bpl.n	8006fe8 <__smakebuf_r+0x1c>
 8006fd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	6123      	str	r3, [r4, #16]
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	6163      	str	r3, [r4, #20]
 8006fe4:	b003      	add	sp, #12
 8006fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe8:	ab01      	add	r3, sp, #4
 8006fea:	466a      	mov	r2, sp
 8006fec:	f7ff ffc8 	bl	8006f80 <__swhatbuf_r>
 8006ff0:	9f00      	ldr	r7, [sp, #0]
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7ff f9ce 	bl	8006398 <_malloc_r>
 8006ffc:	b948      	cbnz	r0, 8007012 <__smakebuf_r+0x46>
 8006ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007002:	059a      	lsls	r2, r3, #22
 8007004:	d4ee      	bmi.n	8006fe4 <__smakebuf_r+0x18>
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	f043 0302 	orr.w	r3, r3, #2
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	e7e2      	b.n	8006fd8 <__smakebuf_r+0xc>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	6020      	str	r0, [r4, #0]
 8007016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800701a:	81a3      	strh	r3, [r4, #12]
 800701c:	9b01      	ldr	r3, [sp, #4]
 800701e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007022:	b15b      	cbz	r3, 800703c <__smakebuf_r+0x70>
 8007024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007028:	4630      	mov	r0, r6
 800702a:	f000 f81d 	bl	8007068 <_isatty_r>
 800702e:	b128      	cbz	r0, 800703c <__smakebuf_r+0x70>
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	f023 0303 	bic.w	r3, r3, #3
 8007036:	f043 0301 	orr.w	r3, r3, #1
 800703a:	81a3      	strh	r3, [r4, #12]
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	431d      	orrs	r5, r3
 8007040:	81a5      	strh	r5, [r4, #12]
 8007042:	e7cf      	b.n	8006fe4 <__smakebuf_r+0x18>

08007044 <_fstat_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d07      	ldr	r5, [pc, #28]	@ (8007064 <_fstat_r+0x20>)
 8007048:	2300      	movs	r3, #0
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	4611      	mov	r1, r2
 8007050:	602b      	str	r3, [r5, #0]
 8007052:	f7fb fc25 	bl	80028a0 <_fstat>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	d102      	bne.n	8007060 <_fstat_r+0x1c>
 800705a:	682b      	ldr	r3, [r5, #0]
 800705c:	b103      	cbz	r3, 8007060 <_fstat_r+0x1c>
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	bd38      	pop	{r3, r4, r5, pc}
 8007062:	bf00      	nop
 8007064:	2000040c 	.word	0x2000040c

08007068 <_isatty_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d06      	ldr	r5, [pc, #24]	@ (8007084 <_isatty_r+0x1c>)
 800706c:	2300      	movs	r3, #0
 800706e:	4604      	mov	r4, r0
 8007070:	4608      	mov	r0, r1
 8007072:	602b      	str	r3, [r5, #0]
 8007074:	f7fb fc24 	bl	80028c0 <_isatty>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_isatty_r+0x1a>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_isatty_r+0x1a>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	2000040c 	.word	0x2000040c

08007088 <_sbrk_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d06      	ldr	r5, [pc, #24]	@ (80070a4 <_sbrk_r+0x1c>)
 800708c:	2300      	movs	r3, #0
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	f7fb fc2c 	bl	80028f0 <_sbrk>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_sbrk_r+0x1a>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_sbrk_r+0x1a>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	2000040c 	.word	0x2000040c

080070a8 <memcpy>:
 80070a8:	440a      	add	r2, r1
 80070aa:	4291      	cmp	r1, r2
 80070ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80070b0:	d100      	bne.n	80070b4 <memcpy+0xc>
 80070b2:	4770      	bx	lr
 80070b4:	b510      	push	{r4, lr}
 80070b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070be:	4291      	cmp	r1, r2
 80070c0:	d1f9      	bne.n	80070b6 <memcpy+0xe>
 80070c2:	bd10      	pop	{r4, pc}

080070c4 <__assert_func>:
 80070c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070c6:	4614      	mov	r4, r2
 80070c8:	461a      	mov	r2, r3
 80070ca:	4b09      	ldr	r3, [pc, #36]	@ (80070f0 <__assert_func+0x2c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4605      	mov	r5, r0
 80070d0:	68d8      	ldr	r0, [r3, #12]
 80070d2:	b14c      	cbz	r4, 80070e8 <__assert_func+0x24>
 80070d4:	4b07      	ldr	r3, [pc, #28]	@ (80070f4 <__assert_func+0x30>)
 80070d6:	9100      	str	r1, [sp, #0]
 80070d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070dc:	4906      	ldr	r1, [pc, #24]	@ (80070f8 <__assert_func+0x34>)
 80070de:	462b      	mov	r3, r5
 80070e0:	f000 f842 	bl	8007168 <fiprintf>
 80070e4:	f000 f852 	bl	800718c <abort>
 80070e8:	4b04      	ldr	r3, [pc, #16]	@ (80070fc <__assert_func+0x38>)
 80070ea:	461c      	mov	r4, r3
 80070ec:	e7f3      	b.n	80070d6 <__assert_func+0x12>
 80070ee:	bf00      	nop
 80070f0:	2000001c 	.word	0x2000001c
 80070f4:	080080f5 	.word	0x080080f5
 80070f8:	08008102 	.word	0x08008102
 80070fc:	08008130 	.word	0x08008130

08007100 <_calloc_r>:
 8007100:	b570      	push	{r4, r5, r6, lr}
 8007102:	fba1 5402 	umull	r5, r4, r1, r2
 8007106:	b934      	cbnz	r4, 8007116 <_calloc_r+0x16>
 8007108:	4629      	mov	r1, r5
 800710a:	f7ff f945 	bl	8006398 <_malloc_r>
 800710e:	4606      	mov	r6, r0
 8007110:	b928      	cbnz	r0, 800711e <_calloc_r+0x1e>
 8007112:	4630      	mov	r0, r6
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	220c      	movs	r2, #12
 8007118:	6002      	str	r2, [r0, #0]
 800711a:	2600      	movs	r6, #0
 800711c:	e7f9      	b.n	8007112 <_calloc_r+0x12>
 800711e:	462a      	mov	r2, r5
 8007120:	4621      	mov	r1, r4
 8007122:	f7fe f9ed 	bl	8005500 <memset>
 8007126:	e7f4      	b.n	8007112 <_calloc_r+0x12>

08007128 <__ascii_mbtowc>:
 8007128:	b082      	sub	sp, #8
 800712a:	b901      	cbnz	r1, 800712e <__ascii_mbtowc+0x6>
 800712c:	a901      	add	r1, sp, #4
 800712e:	b142      	cbz	r2, 8007142 <__ascii_mbtowc+0x1a>
 8007130:	b14b      	cbz	r3, 8007146 <__ascii_mbtowc+0x1e>
 8007132:	7813      	ldrb	r3, [r2, #0]
 8007134:	600b      	str	r3, [r1, #0]
 8007136:	7812      	ldrb	r2, [r2, #0]
 8007138:	1e10      	subs	r0, r2, #0
 800713a:	bf18      	it	ne
 800713c:	2001      	movne	r0, #1
 800713e:	b002      	add	sp, #8
 8007140:	4770      	bx	lr
 8007142:	4610      	mov	r0, r2
 8007144:	e7fb      	b.n	800713e <__ascii_mbtowc+0x16>
 8007146:	f06f 0001 	mvn.w	r0, #1
 800714a:	e7f8      	b.n	800713e <__ascii_mbtowc+0x16>

0800714c <__ascii_wctomb>:
 800714c:	4603      	mov	r3, r0
 800714e:	4608      	mov	r0, r1
 8007150:	b141      	cbz	r1, 8007164 <__ascii_wctomb+0x18>
 8007152:	2aff      	cmp	r2, #255	@ 0xff
 8007154:	d904      	bls.n	8007160 <__ascii_wctomb+0x14>
 8007156:	228a      	movs	r2, #138	@ 0x8a
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	4770      	bx	lr
 8007160:	700a      	strb	r2, [r1, #0]
 8007162:	2001      	movs	r0, #1
 8007164:	4770      	bx	lr
	...

08007168 <fiprintf>:
 8007168:	b40e      	push	{r1, r2, r3}
 800716a:	b503      	push	{r0, r1, lr}
 800716c:	4601      	mov	r1, r0
 800716e:	ab03      	add	r3, sp, #12
 8007170:	4805      	ldr	r0, [pc, #20]	@ (8007188 <fiprintf+0x20>)
 8007172:	f853 2b04 	ldr.w	r2, [r3], #4
 8007176:	6800      	ldr	r0, [r0, #0]
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	f7ff fd3d 	bl	8006bf8 <_vfiprintf_r>
 800717e:	b002      	add	sp, #8
 8007180:	f85d eb04 	ldr.w	lr, [sp], #4
 8007184:	b003      	add	sp, #12
 8007186:	4770      	bx	lr
 8007188:	2000001c 	.word	0x2000001c

0800718c <abort>:
 800718c:	b508      	push	{r3, lr}
 800718e:	2006      	movs	r0, #6
 8007190:	f000 f82c 	bl	80071ec <raise>
 8007194:	2001      	movs	r0, #1
 8007196:	f7fb fb4f 	bl	8002838 <_exit>

0800719a <_raise_r>:
 800719a:	291f      	cmp	r1, #31
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4605      	mov	r5, r0
 80071a0:	460c      	mov	r4, r1
 80071a2:	d904      	bls.n	80071ae <_raise_r+0x14>
 80071a4:	2316      	movs	r3, #22
 80071a6:	6003      	str	r3, [r0, #0]
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	bd38      	pop	{r3, r4, r5, pc}
 80071ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80071b0:	b112      	cbz	r2, 80071b8 <_raise_r+0x1e>
 80071b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071b6:	b94b      	cbnz	r3, 80071cc <_raise_r+0x32>
 80071b8:	4628      	mov	r0, r5
 80071ba:	f000 f831 	bl	8007220 <_getpid_r>
 80071be:	4622      	mov	r2, r4
 80071c0:	4601      	mov	r1, r0
 80071c2:	4628      	mov	r0, r5
 80071c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071c8:	f000 b818 	b.w	80071fc <_kill_r>
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d00a      	beq.n	80071e6 <_raise_r+0x4c>
 80071d0:	1c59      	adds	r1, r3, #1
 80071d2:	d103      	bne.n	80071dc <_raise_r+0x42>
 80071d4:	2316      	movs	r3, #22
 80071d6:	6003      	str	r3, [r0, #0]
 80071d8:	2001      	movs	r0, #1
 80071da:	e7e7      	b.n	80071ac <_raise_r+0x12>
 80071dc:	2100      	movs	r1, #0
 80071de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071e2:	4620      	mov	r0, r4
 80071e4:	4798      	blx	r3
 80071e6:	2000      	movs	r0, #0
 80071e8:	e7e0      	b.n	80071ac <_raise_r+0x12>
	...

080071ec <raise>:
 80071ec:	4b02      	ldr	r3, [pc, #8]	@ (80071f8 <raise+0xc>)
 80071ee:	4601      	mov	r1, r0
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	f7ff bfd2 	b.w	800719a <_raise_r>
 80071f6:	bf00      	nop
 80071f8:	2000001c 	.word	0x2000001c

080071fc <_kill_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d07      	ldr	r5, [pc, #28]	@ (800721c <_kill_r+0x20>)
 8007200:	2300      	movs	r3, #0
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	4611      	mov	r1, r2
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	f7fb fb05 	bl	8002818 <_kill>
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	d102      	bne.n	8007218 <_kill_r+0x1c>
 8007212:	682b      	ldr	r3, [r5, #0]
 8007214:	b103      	cbz	r3, 8007218 <_kill_r+0x1c>
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	bd38      	pop	{r3, r4, r5, pc}
 800721a:	bf00      	nop
 800721c:	2000040c 	.word	0x2000040c

08007220 <_getpid_r>:
 8007220:	f7fb baf2 	b.w	8002808 <_getpid>

08007224 <asinf>:
 8007224:	b508      	push	{r3, lr}
 8007226:	ed2d 8b02 	vpush	{d8}
 800722a:	eeb0 8a40 	vmov.f32	s16, s0
 800722e:	f000 f895 	bl	800735c <__ieee754_asinf>
 8007232:	eeb4 8a48 	vcmp.f32	s16, s16
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	eef0 8a40 	vmov.f32	s17, s0
 800723e:	d615      	bvs.n	800726c <asinf+0x48>
 8007240:	eeb0 0a48 	vmov.f32	s0, s16
 8007244:	f000 f873 	bl	800732e <fabsf>
 8007248:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800724c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007254:	dd0a      	ble.n	800726c <asinf+0x48>
 8007256:	f7fe f9a5 	bl	80055a4 <__errno>
 800725a:	ecbd 8b02 	vpop	{d8}
 800725e:	2321      	movs	r3, #33	@ 0x21
 8007260:	6003      	str	r3, [r0, #0]
 8007262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007266:	4804      	ldr	r0, [pc, #16]	@ (8007278 <asinf+0x54>)
 8007268:	f000 b872 	b.w	8007350 <nanf>
 800726c:	eeb0 0a68 	vmov.f32	s0, s17
 8007270:	ecbd 8b02 	vpop	{d8}
 8007274:	bd08      	pop	{r3, pc}
 8007276:	bf00      	nop
 8007278:	08008130 	.word	0x08008130

0800727c <atan2f>:
 800727c:	f000 b952 	b.w	8007524 <__ieee754_atan2f>

08007280 <powf>:
 8007280:	b508      	push	{r3, lr}
 8007282:	ed2d 8b04 	vpush	{d8-d9}
 8007286:	eeb0 8a60 	vmov.f32	s16, s1
 800728a:	eeb0 9a40 	vmov.f32	s18, s0
 800728e:	f000 f9e9 	bl	8007664 <__ieee754_powf>
 8007292:	eeb4 8a48 	vcmp.f32	s16, s16
 8007296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800729a:	eef0 8a40 	vmov.f32	s17, s0
 800729e:	d63e      	bvs.n	800731e <powf+0x9e>
 80072a0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80072a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a8:	d112      	bne.n	80072d0 <powf+0x50>
 80072aa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80072ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b2:	d039      	beq.n	8007328 <powf+0xa8>
 80072b4:	eeb0 0a48 	vmov.f32	s0, s16
 80072b8:	f000 f840 	bl	800733c <finitef>
 80072bc:	b378      	cbz	r0, 800731e <powf+0x9e>
 80072be:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80072c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c6:	d52a      	bpl.n	800731e <powf+0x9e>
 80072c8:	f7fe f96c 	bl	80055a4 <__errno>
 80072cc:	2322      	movs	r3, #34	@ 0x22
 80072ce:	e014      	b.n	80072fa <powf+0x7a>
 80072d0:	f000 f834 	bl	800733c <finitef>
 80072d4:	b998      	cbnz	r0, 80072fe <powf+0x7e>
 80072d6:	eeb0 0a49 	vmov.f32	s0, s18
 80072da:	f000 f82f 	bl	800733c <finitef>
 80072de:	b170      	cbz	r0, 80072fe <powf+0x7e>
 80072e0:	eeb0 0a48 	vmov.f32	s0, s16
 80072e4:	f000 f82a 	bl	800733c <finitef>
 80072e8:	b148      	cbz	r0, 80072fe <powf+0x7e>
 80072ea:	eef4 8a68 	vcmp.f32	s17, s17
 80072ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f2:	d7e9      	bvc.n	80072c8 <powf+0x48>
 80072f4:	f7fe f956 	bl	80055a4 <__errno>
 80072f8:	2321      	movs	r3, #33	@ 0x21
 80072fa:	6003      	str	r3, [r0, #0]
 80072fc:	e00f      	b.n	800731e <powf+0x9e>
 80072fe:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007306:	d10a      	bne.n	800731e <powf+0x9e>
 8007308:	eeb0 0a49 	vmov.f32	s0, s18
 800730c:	f000 f816 	bl	800733c <finitef>
 8007310:	b128      	cbz	r0, 800731e <powf+0x9e>
 8007312:	eeb0 0a48 	vmov.f32	s0, s16
 8007316:	f000 f811 	bl	800733c <finitef>
 800731a:	2800      	cmp	r0, #0
 800731c:	d1d4      	bne.n	80072c8 <powf+0x48>
 800731e:	eeb0 0a68 	vmov.f32	s0, s17
 8007322:	ecbd 8b04 	vpop	{d8-d9}
 8007326:	bd08      	pop	{r3, pc}
 8007328:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800732c:	e7f7      	b.n	800731e <powf+0x9e>

0800732e <fabsf>:
 800732e:	ee10 3a10 	vmov	r3, s0
 8007332:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007336:	ee00 3a10 	vmov	s0, r3
 800733a:	4770      	bx	lr

0800733c <finitef>:
 800733c:	ee10 3a10 	vmov	r3, s0
 8007340:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8007344:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007348:	bfac      	ite	ge
 800734a:	2000      	movge	r0, #0
 800734c:	2001      	movlt	r0, #1
 800734e:	4770      	bx	lr

08007350 <nanf>:
 8007350:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007358 <nanf+0x8>
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	7fc00000 	.word	0x7fc00000

0800735c <__ieee754_asinf>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	ee10 5a10 	vmov	r5, s0
 8007362:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8007366:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800736a:	ed2d 8b04 	vpush	{d8-d9}
 800736e:	d10c      	bne.n	800738a <__ieee754_asinf+0x2e>
 8007370:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80074e4 <__ieee754_asinf+0x188>
 8007374:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80074e8 <__ieee754_asinf+0x18c>
 8007378:	ee60 7a27 	vmul.f32	s15, s0, s15
 800737c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007380:	eeb0 0a67 	vmov.f32	s0, s15
 8007384:	ecbd 8b04 	vpop	{d8-d9}
 8007388:	bd38      	pop	{r3, r4, r5, pc}
 800738a:	d904      	bls.n	8007396 <__ieee754_asinf+0x3a>
 800738c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007390:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007394:	e7f6      	b.n	8007384 <__ieee754_asinf+0x28>
 8007396:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800739a:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800739e:	d20b      	bcs.n	80073b8 <__ieee754_asinf+0x5c>
 80073a0:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80073a4:	d252      	bcs.n	800744c <__ieee754_asinf+0xf0>
 80073a6:	eddf 7a51 	vldr	s15, [pc, #324]	@ 80074ec <__ieee754_asinf+0x190>
 80073aa:	ee70 7a27 	vadd.f32	s15, s0, s15
 80073ae:	eef4 7ae8 	vcmpe.f32	s15, s17
 80073b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b6:	dce5      	bgt.n	8007384 <__ieee754_asinf+0x28>
 80073b8:	f7ff ffb9 	bl	800732e <fabsf>
 80073bc:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80073c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80073c4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80073c8:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80074f0 <__ieee754_asinf+0x194>
 80073cc:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80074f4 <__ieee754_asinf+0x198>
 80073d0:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 80074f8 <__ieee754_asinf+0x19c>
 80073d4:	eea8 7a27 	vfma.f32	s14, s16, s15
 80073d8:	eddf 7a48 	vldr	s15, [pc, #288]	@ 80074fc <__ieee754_asinf+0x1a0>
 80073dc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80073e0:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007500 <__ieee754_asinf+0x1a4>
 80073e4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80073e8:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8007504 <__ieee754_asinf+0x1a8>
 80073ec:	eee7 7a08 	vfma.f32	s15, s14, s16
 80073f0:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8007508 <__ieee754_asinf+0x1ac>
 80073f4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80073f8:	eddf 7a44 	vldr	s15, [pc, #272]	@ 800750c <__ieee754_asinf+0x1b0>
 80073fc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8007400:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8007510 <__ieee754_asinf+0x1b4>
 8007404:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007408:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8007514 <__ieee754_asinf+0x1b8>
 800740c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8007410:	eeb0 0a48 	vmov.f32	s0, s16
 8007414:	eee7 8a88 	vfma.f32	s17, s15, s16
 8007418:	f000 fd52 	bl	8007ec0 <__ieee754_sqrtf>
 800741c:	4b3e      	ldr	r3, [pc, #248]	@ (8007518 <__ieee754_asinf+0x1bc>)
 800741e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8007422:	429c      	cmp	r4, r3
 8007424:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8007428:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800742c:	d93d      	bls.n	80074aa <__ieee754_asinf+0x14e>
 800742e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8007432:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 800751c <__ieee754_asinf+0x1c0>
 8007436:	eee0 7a26 	vfma.f32	s15, s0, s13
 800743a:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80074e8 <__ieee754_asinf+0x18c>
 800743e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007442:	2d00      	cmp	r5, #0
 8007444:	bfd8      	it	le
 8007446:	eeb1 0a40 	vnegle.f32	s0, s0
 800744a:	e79b      	b.n	8007384 <__ieee754_asinf+0x28>
 800744c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007450:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80074f4 <__ieee754_asinf+0x198>
 8007454:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80074f0 <__ieee754_asinf+0x194>
 8007458:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8007508 <__ieee754_asinf+0x1ac>
 800745c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007460:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80074fc <__ieee754_asinf+0x1a0>
 8007464:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007468:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8007500 <__ieee754_asinf+0x1a4>
 800746c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007470:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8007504 <__ieee754_asinf+0x1a8>
 8007474:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007478:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80074f8 <__ieee754_asinf+0x19c>
 800747c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007480:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800750c <__ieee754_asinf+0x1b0>
 8007484:	eee7 6a86 	vfma.f32	s13, s15, s12
 8007488:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8007510 <__ieee754_asinf+0x1b4>
 800748c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8007490:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8007514 <__ieee754_asinf+0x1b8>
 8007494:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800749c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80074a0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80074a4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80074a8:	e76c      	b.n	8007384 <__ieee754_asinf+0x28>
 80074aa:	ee10 3a10 	vmov	r3, s0
 80074ae:	f36f 030b 	bfc	r3, #0, #12
 80074b2:	ee07 3a10 	vmov	s14, r3
 80074b6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80074ba:	ee70 5a00 	vadd.f32	s11, s0, s0
 80074be:	ee30 0a07 	vadd.f32	s0, s0, s14
 80074c2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80074e4 <__ieee754_asinf+0x188>
 80074c6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80074ca:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8007520 <__ieee754_asinf+0x1c4>
 80074ce:	eee5 7a66 	vfms.f32	s15, s10, s13
 80074d2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80074d6:	eeb0 6a40 	vmov.f32	s12, s0
 80074da:	eea7 6a66 	vfms.f32	s12, s14, s13
 80074de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80074e2:	e7ac      	b.n	800743e <__ieee754_asinf+0xe2>
 80074e4:	b33bbd2e 	.word	0xb33bbd2e
 80074e8:	3fc90fdb 	.word	0x3fc90fdb
 80074ec:	7149f2ca 	.word	0x7149f2ca
 80074f0:	3a4f7f04 	.word	0x3a4f7f04
 80074f4:	3811ef08 	.word	0x3811ef08
 80074f8:	3e2aaaab 	.word	0x3e2aaaab
 80074fc:	bd241146 	.word	0xbd241146
 8007500:	3e4e0aa8 	.word	0x3e4e0aa8
 8007504:	bea6b090 	.word	0xbea6b090
 8007508:	3d9dc62e 	.word	0x3d9dc62e
 800750c:	bf303361 	.word	0xbf303361
 8007510:	4001572d 	.word	0x4001572d
 8007514:	c019d139 	.word	0xc019d139
 8007518:	3f799999 	.word	0x3f799999
 800751c:	333bbd2e 	.word	0x333bbd2e
 8007520:	3f490fdb 	.word	0x3f490fdb

08007524 <__ieee754_atan2f>:
 8007524:	ee10 2a90 	vmov	r2, s1
 8007528:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800752c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007530:	b510      	push	{r4, lr}
 8007532:	eef0 7a40 	vmov.f32	s15, s0
 8007536:	d806      	bhi.n	8007546 <__ieee754_atan2f+0x22>
 8007538:	ee10 0a10 	vmov	r0, s0
 800753c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007540:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007544:	d904      	bls.n	8007550 <__ieee754_atan2f+0x2c>
 8007546:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800754a:	eeb0 0a67 	vmov.f32	s0, s15
 800754e:	bd10      	pop	{r4, pc}
 8007550:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8007554:	d103      	bne.n	800755e <__ieee754_atan2f+0x3a>
 8007556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800755a:	f000 bb51 	b.w	8007c00 <atanf>
 800755e:	1794      	asrs	r4, r2, #30
 8007560:	f004 0402 	and.w	r4, r4, #2
 8007564:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007568:	b943      	cbnz	r3, 800757c <__ieee754_atan2f+0x58>
 800756a:	2c02      	cmp	r4, #2
 800756c:	d05e      	beq.n	800762c <__ieee754_atan2f+0x108>
 800756e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8007640 <__ieee754_atan2f+0x11c>
 8007572:	2c03      	cmp	r4, #3
 8007574:	bf08      	it	eq
 8007576:	eef0 7a47 	vmoveq.f32	s15, s14
 800757a:	e7e6      	b.n	800754a <__ieee754_atan2f+0x26>
 800757c:	b941      	cbnz	r1, 8007590 <__ieee754_atan2f+0x6c>
 800757e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8007644 <__ieee754_atan2f+0x120>
 8007582:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007648 <__ieee754_atan2f+0x124>
 8007586:	2800      	cmp	r0, #0
 8007588:	bfa8      	it	ge
 800758a:	eef0 7a47 	vmovge.f32	s15, s14
 800758e:	e7dc      	b.n	800754a <__ieee754_atan2f+0x26>
 8007590:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007594:	d110      	bne.n	80075b8 <__ieee754_atan2f+0x94>
 8007596:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800759a:	f104 34ff 	add.w	r4, r4, #4294967295
 800759e:	d107      	bne.n	80075b0 <__ieee754_atan2f+0x8c>
 80075a0:	2c02      	cmp	r4, #2
 80075a2:	d846      	bhi.n	8007632 <__ieee754_atan2f+0x10e>
 80075a4:	4b29      	ldr	r3, [pc, #164]	@ (800764c <__ieee754_atan2f+0x128>)
 80075a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80075aa:	edd3 7a00 	vldr	s15, [r3]
 80075ae:	e7cc      	b.n	800754a <__ieee754_atan2f+0x26>
 80075b0:	2c02      	cmp	r4, #2
 80075b2:	d841      	bhi.n	8007638 <__ieee754_atan2f+0x114>
 80075b4:	4b26      	ldr	r3, [pc, #152]	@ (8007650 <__ieee754_atan2f+0x12c>)
 80075b6:	e7f6      	b.n	80075a6 <__ieee754_atan2f+0x82>
 80075b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80075bc:	d0df      	beq.n	800757e <__ieee754_atan2f+0x5a>
 80075be:	1a5b      	subs	r3, r3, r1
 80075c0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80075c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80075c8:	da1a      	bge.n	8007600 <__ieee754_atan2f+0xdc>
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	da01      	bge.n	80075d2 <__ieee754_atan2f+0xae>
 80075ce:	313c      	adds	r1, #60	@ 0x3c
 80075d0:	db19      	blt.n	8007606 <__ieee754_atan2f+0xe2>
 80075d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80075d6:	f7ff feaa 	bl	800732e <fabsf>
 80075da:	f000 fb11 	bl	8007c00 <atanf>
 80075de:	eef0 7a40 	vmov.f32	s15, s0
 80075e2:	2c01      	cmp	r4, #1
 80075e4:	d012      	beq.n	800760c <__ieee754_atan2f+0xe8>
 80075e6:	2c02      	cmp	r4, #2
 80075e8:	d017      	beq.n	800761a <__ieee754_atan2f+0xf6>
 80075ea:	2c00      	cmp	r4, #0
 80075ec:	d0ad      	beq.n	800754a <__ieee754_atan2f+0x26>
 80075ee:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007654 <__ieee754_atan2f+0x130>
 80075f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075f6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007658 <__ieee754_atan2f+0x134>
 80075fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075fe:	e7a4      	b.n	800754a <__ieee754_atan2f+0x26>
 8007600:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8007648 <__ieee754_atan2f+0x124>
 8007604:	e7ed      	b.n	80075e2 <__ieee754_atan2f+0xbe>
 8007606:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800765c <__ieee754_atan2f+0x138>
 800760a:	e7ea      	b.n	80075e2 <__ieee754_atan2f+0xbe>
 800760c:	ee17 3a90 	vmov	r3, s15
 8007610:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007614:	ee07 3a90 	vmov	s15, r3
 8007618:	e797      	b.n	800754a <__ieee754_atan2f+0x26>
 800761a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007654 <__ieee754_atan2f+0x130>
 800761e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007622:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007658 <__ieee754_atan2f+0x134>
 8007626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800762a:	e78e      	b.n	800754a <__ieee754_atan2f+0x26>
 800762c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8007658 <__ieee754_atan2f+0x134>
 8007630:	e78b      	b.n	800754a <__ieee754_atan2f+0x26>
 8007632:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8007660 <__ieee754_atan2f+0x13c>
 8007636:	e788      	b.n	800754a <__ieee754_atan2f+0x26>
 8007638:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800765c <__ieee754_atan2f+0x138>
 800763c:	e785      	b.n	800754a <__ieee754_atan2f+0x26>
 800763e:	bf00      	nop
 8007640:	c0490fdb 	.word	0xc0490fdb
 8007644:	bfc90fdb 	.word	0xbfc90fdb
 8007648:	3fc90fdb 	.word	0x3fc90fdb
 800764c:	08008340 	.word	0x08008340
 8007650:	08008334 	.word	0x08008334
 8007654:	33bbbd2e 	.word	0x33bbbd2e
 8007658:	40490fdb 	.word	0x40490fdb
 800765c:	00000000 	.word	0x00000000
 8007660:	3f490fdb 	.word	0x3f490fdb

08007664 <__ieee754_powf>:
 8007664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007668:	ee10 4a90 	vmov	r4, s1
 800766c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8007670:	ed2d 8b02 	vpush	{d8}
 8007674:	ee10 6a10 	vmov	r6, s0
 8007678:	eeb0 8a40 	vmov.f32	s16, s0
 800767c:	eef0 8a60 	vmov.f32	s17, s1
 8007680:	d10c      	bne.n	800769c <__ieee754_powf+0x38>
 8007682:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8007686:	0076      	lsls	r6, r6, #1
 8007688:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800768c:	f240 8274 	bls.w	8007b78 <__ieee754_powf+0x514>
 8007690:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007694:	ecbd 8b02 	vpop	{d8}
 8007698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800769c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80076a0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80076a4:	d802      	bhi.n	80076ac <__ieee754_powf+0x48>
 80076a6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80076aa:	d908      	bls.n	80076be <__ieee754_powf+0x5a>
 80076ac:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80076b0:	d1ee      	bne.n	8007690 <__ieee754_powf+0x2c>
 80076b2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80076b6:	0064      	lsls	r4, r4, #1
 80076b8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80076bc:	e7e6      	b.n	800768c <__ieee754_powf+0x28>
 80076be:	2e00      	cmp	r6, #0
 80076c0:	da1f      	bge.n	8007702 <__ieee754_powf+0x9e>
 80076c2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80076c6:	f080 8260 	bcs.w	8007b8a <__ieee754_powf+0x526>
 80076ca:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80076ce:	d32f      	bcc.n	8007730 <__ieee754_powf+0xcc>
 80076d0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80076d4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80076d8:	fa49 f503 	asr.w	r5, r9, r3
 80076dc:	fa05 f303 	lsl.w	r3, r5, r3
 80076e0:	454b      	cmp	r3, r9
 80076e2:	d123      	bne.n	800772c <__ieee754_powf+0xc8>
 80076e4:	f005 0501 	and.w	r5, r5, #1
 80076e8:	f1c5 0502 	rsb	r5, r5, #2
 80076ec:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80076f0:	d11f      	bne.n	8007732 <__ieee754_powf+0xce>
 80076f2:	2c00      	cmp	r4, #0
 80076f4:	f280 8246 	bge.w	8007b84 <__ieee754_powf+0x520>
 80076f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80076fc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007700:	e7c8      	b.n	8007694 <__ieee754_powf+0x30>
 8007702:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007706:	d111      	bne.n	800772c <__ieee754_powf+0xc8>
 8007708:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800770c:	f000 8234 	beq.w	8007b78 <__ieee754_powf+0x514>
 8007710:	d906      	bls.n	8007720 <__ieee754_powf+0xbc>
 8007712:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8007a28 <__ieee754_powf+0x3c4>
 8007716:	2c00      	cmp	r4, #0
 8007718:	bfa8      	it	ge
 800771a:	eeb0 0a68 	vmovge.f32	s0, s17
 800771e:	e7b9      	b.n	8007694 <__ieee754_powf+0x30>
 8007720:	2c00      	cmp	r4, #0
 8007722:	f280 822c 	bge.w	8007b7e <__ieee754_powf+0x51a>
 8007726:	eeb1 0a68 	vneg.f32	s0, s17
 800772a:	e7b3      	b.n	8007694 <__ieee754_powf+0x30>
 800772c:	2500      	movs	r5, #0
 800772e:	e7dd      	b.n	80076ec <__ieee754_powf+0x88>
 8007730:	2500      	movs	r5, #0
 8007732:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8007736:	d102      	bne.n	800773e <__ieee754_powf+0xda>
 8007738:	ee28 0a08 	vmul.f32	s0, s16, s16
 800773c:	e7aa      	b.n	8007694 <__ieee754_powf+0x30>
 800773e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8007742:	f040 8227 	bne.w	8007b94 <__ieee754_powf+0x530>
 8007746:	2e00      	cmp	r6, #0
 8007748:	f2c0 8224 	blt.w	8007b94 <__ieee754_powf+0x530>
 800774c:	eeb0 0a48 	vmov.f32	s0, s16
 8007750:	ecbd 8b02 	vpop	{d8}
 8007754:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007758:	f000 bbb2 	b.w	8007ec0 <__ieee754_sqrtf>
 800775c:	2d01      	cmp	r5, #1
 800775e:	d199      	bne.n	8007694 <__ieee754_powf+0x30>
 8007760:	eeb1 0a40 	vneg.f32	s0, s0
 8007764:	e796      	b.n	8007694 <__ieee754_powf+0x30>
 8007766:	0ff0      	lsrs	r0, r6, #31
 8007768:	3801      	subs	r0, #1
 800776a:	ea55 0300 	orrs.w	r3, r5, r0
 800776e:	d104      	bne.n	800777a <__ieee754_powf+0x116>
 8007770:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007774:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007778:	e78c      	b.n	8007694 <__ieee754_powf+0x30>
 800777a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800777e:	d96d      	bls.n	800785c <__ieee754_powf+0x1f8>
 8007780:	4baa      	ldr	r3, [pc, #680]	@ (8007a2c <__ieee754_powf+0x3c8>)
 8007782:	4598      	cmp	r8, r3
 8007784:	d808      	bhi.n	8007798 <__ieee754_powf+0x134>
 8007786:	2c00      	cmp	r4, #0
 8007788:	da0b      	bge.n	80077a2 <__ieee754_powf+0x13e>
 800778a:	2000      	movs	r0, #0
 800778c:	ecbd 8b02 	vpop	{d8}
 8007790:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007794:	f000 bb8e 	b.w	8007eb4 <__math_oflowf>
 8007798:	4ba5      	ldr	r3, [pc, #660]	@ (8007a30 <__ieee754_powf+0x3cc>)
 800779a:	4598      	cmp	r8, r3
 800779c:	d908      	bls.n	80077b0 <__ieee754_powf+0x14c>
 800779e:	2c00      	cmp	r4, #0
 80077a0:	dcf3      	bgt.n	800778a <__ieee754_powf+0x126>
 80077a2:	2000      	movs	r0, #0
 80077a4:	ecbd 8b02 	vpop	{d8}
 80077a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077ac:	f000 bb7c 	b.w	8007ea8 <__math_uflowf>
 80077b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80077b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80077b8:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8007a34 <__ieee754_powf+0x3d0>
 80077bc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80077c0:	eee0 6a67 	vfms.f32	s13, s0, s15
 80077c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80077c8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80077cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80077d0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8007a38 <__ieee754_powf+0x3d4>
 80077d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077d8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8007a3c <__ieee754_powf+0x3d8>
 80077dc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80077e0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8007a40 <__ieee754_powf+0x3dc>
 80077e4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80077e8:	eeb0 7a67 	vmov.f32	s14, s15
 80077ec:	eea0 7a26 	vfma.f32	s14, s0, s13
 80077f0:	ee17 3a10 	vmov	r3, s14
 80077f4:	f36f 030b 	bfc	r3, #0, #12
 80077f8:	ee07 3a10 	vmov	s14, r3
 80077fc:	eeb0 6a47 	vmov.f32	s12, s14
 8007800:	eea0 6a66 	vfms.f32	s12, s0, s13
 8007804:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007808:	3d01      	subs	r5, #1
 800780a:	4305      	orrs	r5, r0
 800780c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007810:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8007814:	f36f 040b 	bfc	r4, #0, #12
 8007818:	bf18      	it	ne
 800781a:	eeb0 8a66 	vmovne.f32	s16, s13
 800781e:	ee06 4a90 	vmov	s13, r4
 8007822:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007826:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800782a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800782e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8007832:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007836:	ee17 1a10 	vmov	r1, s14
 800783a:	2900      	cmp	r1, #0
 800783c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007840:	f340 80dd 	ble.w	80079fe <__ieee754_powf+0x39a>
 8007844:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8007848:	f240 80ca 	bls.w	80079e0 <__ieee754_powf+0x37c>
 800784c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007854:	bf4c      	ite	mi
 8007856:	2001      	movmi	r0, #1
 8007858:	2000      	movpl	r0, #0
 800785a:	e797      	b.n	800778c <__ieee754_powf+0x128>
 800785c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007860:	bf01      	itttt	eq
 8007862:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8007a44 <__ieee754_powf+0x3e0>
 8007866:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800786a:	f06f 0317 	mvneq.w	r3, #23
 800786e:	ee17 7a90 	vmoveq	r7, s15
 8007872:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8007876:	bf18      	it	ne
 8007878:	2300      	movne	r3, #0
 800787a:	3a7f      	subs	r2, #127	@ 0x7f
 800787c:	441a      	add	r2, r3
 800787e:	4b72      	ldr	r3, [pc, #456]	@ (8007a48 <__ieee754_powf+0x3e4>)
 8007880:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8007884:	429f      	cmp	r7, r3
 8007886:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800788a:	dd06      	ble.n	800789a <__ieee754_powf+0x236>
 800788c:	4b6f      	ldr	r3, [pc, #444]	@ (8007a4c <__ieee754_powf+0x3e8>)
 800788e:	429f      	cmp	r7, r3
 8007890:	f340 80a4 	ble.w	80079dc <__ieee754_powf+0x378>
 8007894:	3201      	adds	r2, #1
 8007896:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800789a:	2600      	movs	r6, #0
 800789c:	4b6c      	ldr	r3, [pc, #432]	@ (8007a50 <__ieee754_powf+0x3ec>)
 800789e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80078a2:	ee07 1a10 	vmov	s14, r1
 80078a6:	edd3 5a00 	vldr	s11, [r3]
 80078aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007a54 <__ieee754_powf+0x3f0>)
 80078ac:	ee75 7a87 	vadd.f32	s15, s11, s14
 80078b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078b4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80078b8:	1049      	asrs	r1, r1, #1
 80078ba:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80078be:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80078c2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80078c6:	ee37 6a65 	vsub.f32	s12, s14, s11
 80078ca:	ee07 1a90 	vmov	s15, r1
 80078ce:	ee26 5a24 	vmul.f32	s10, s12, s9
 80078d2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80078d6:	ee15 7a10 	vmov	r7, s10
 80078da:	401f      	ands	r7, r3
 80078dc:	ee06 7a90 	vmov	s13, r7
 80078e0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80078e4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80078e8:	ee65 7a05 	vmul.f32	s15, s10, s10
 80078ec:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80078f0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007a58 <__ieee754_powf+0x3f4>
 80078f4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8007a5c <__ieee754_powf+0x3f8>
 80078f8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80078fc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8007a60 <__ieee754_powf+0x3fc>
 8007900:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007904:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8007a34 <__ieee754_powf+0x3d0>
 8007908:	eee7 5a27 	vfma.f32	s11, s14, s15
 800790c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8007a64 <__ieee754_powf+0x400>
 8007910:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007914:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8007a68 <__ieee754_powf+0x404>
 8007918:	ee26 6a24 	vmul.f32	s12, s12, s9
 800791c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007920:	ee35 7a26 	vadd.f32	s14, s10, s13
 8007924:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8007928:	ee27 7a06 	vmul.f32	s14, s14, s12
 800792c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8007930:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8007934:	eef0 5a67 	vmov.f32	s11, s15
 8007938:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800793c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007940:	ee15 1a90 	vmov	r1, s11
 8007944:	4019      	ands	r1, r3
 8007946:	ee05 1a90 	vmov	s11, r1
 800794a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800794e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8007952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007956:	ee67 7a85 	vmul.f32	s15, s15, s10
 800795a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800795e:	eeb0 6a67 	vmov.f32	s12, s15
 8007962:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007966:	ee16 1a10 	vmov	r1, s12
 800796a:	4019      	ands	r1, r3
 800796c:	ee06 1a10 	vmov	s12, r1
 8007970:	eeb0 7a46 	vmov.f32	s14, s12
 8007974:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8007978:	493c      	ldr	r1, [pc, #240]	@ (8007a6c <__ieee754_powf+0x408>)
 800797a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800797e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007982:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8007a70 <__ieee754_powf+0x40c>
 8007986:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8007a74 <__ieee754_powf+0x410>
 800798a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800798e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007a78 <__ieee754_powf+0x414>
 8007992:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007996:	ed91 7a00 	vldr	s14, [r1]
 800799a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800799e:	ee07 2a10 	vmov	s14, r2
 80079a2:	4a36      	ldr	r2, [pc, #216]	@ (8007a7c <__ieee754_powf+0x418>)
 80079a4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80079a8:	eeb0 7a67 	vmov.f32	s14, s15
 80079ac:	eea6 7a25 	vfma.f32	s14, s12, s11
 80079b0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80079b4:	ed92 5a00 	vldr	s10, [r2]
 80079b8:	ee37 7a05 	vadd.f32	s14, s14, s10
 80079bc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80079c0:	ee17 2a10 	vmov	r2, s14
 80079c4:	401a      	ands	r2, r3
 80079c6:	ee07 2a10 	vmov	s14, r2
 80079ca:	ee77 6a66 	vsub.f32	s13, s14, s13
 80079ce:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80079d2:	eee6 6a65 	vfms.f32	s13, s12, s11
 80079d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80079da:	e715      	b.n	8007808 <__ieee754_powf+0x1a4>
 80079dc:	2601      	movs	r6, #1
 80079de:	e75d      	b.n	800789c <__ieee754_powf+0x238>
 80079e0:	d152      	bne.n	8007a88 <__ieee754_powf+0x424>
 80079e2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007a80 <__ieee754_powf+0x41c>
 80079e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80079ea:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80079ee:	eef4 6ac7 	vcmpe.f32	s13, s14
 80079f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f6:	f73f af29 	bgt.w	800784c <__ieee754_powf+0x1e8>
 80079fa:	2386      	movs	r3, #134	@ 0x86
 80079fc:	e048      	b.n	8007a90 <__ieee754_powf+0x42c>
 80079fe:	4a21      	ldr	r2, [pc, #132]	@ (8007a84 <__ieee754_powf+0x420>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d907      	bls.n	8007a14 <__ieee754_powf+0x3b0>
 8007a04:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a0c:	bf4c      	ite	mi
 8007a0e:	2001      	movmi	r0, #1
 8007a10:	2000      	movpl	r0, #0
 8007a12:	e6c7      	b.n	80077a4 <__ieee754_powf+0x140>
 8007a14:	d138      	bne.n	8007a88 <__ieee754_powf+0x424>
 8007a16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a1a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a22:	dbea      	blt.n	80079fa <__ieee754_powf+0x396>
 8007a24:	e7ee      	b.n	8007a04 <__ieee754_powf+0x3a0>
 8007a26:	bf00      	nop
 8007a28:	00000000 	.word	0x00000000
 8007a2c:	3f7ffff3 	.word	0x3f7ffff3
 8007a30:	3f800007 	.word	0x3f800007
 8007a34:	3eaaaaab 	.word	0x3eaaaaab
 8007a38:	3fb8aa00 	.word	0x3fb8aa00
 8007a3c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007a40:	36eca570 	.word	0x36eca570
 8007a44:	4b800000 	.word	0x4b800000
 8007a48:	001cc471 	.word	0x001cc471
 8007a4c:	005db3d6 	.word	0x005db3d6
 8007a50:	0800835c 	.word	0x0800835c
 8007a54:	fffff000 	.word	0xfffff000
 8007a58:	3e6c3255 	.word	0x3e6c3255
 8007a5c:	3e53f142 	.word	0x3e53f142
 8007a60:	3e8ba305 	.word	0x3e8ba305
 8007a64:	3edb6db7 	.word	0x3edb6db7
 8007a68:	3f19999a 	.word	0x3f19999a
 8007a6c:	0800834c 	.word	0x0800834c
 8007a70:	3f76384f 	.word	0x3f76384f
 8007a74:	3f763800 	.word	0x3f763800
 8007a78:	369dc3a0 	.word	0x369dc3a0
 8007a7c:	08008354 	.word	0x08008354
 8007a80:	3338aa3c 	.word	0x3338aa3c
 8007a84:	43160000 	.word	0x43160000
 8007a88:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8007a8c:	d96f      	bls.n	8007b6e <__ieee754_powf+0x50a>
 8007a8e:	15db      	asrs	r3, r3, #23
 8007a90:	3b7e      	subs	r3, #126	@ 0x7e
 8007a92:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8007a96:	4118      	asrs	r0, r3
 8007a98:	4408      	add	r0, r1
 8007a9a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8007bd8 <__ieee754_powf+0x574>)
 8007aa0:	3b7f      	subs	r3, #127	@ 0x7f
 8007aa2:	411a      	asrs	r2, r3
 8007aa4:	4002      	ands	r2, r0
 8007aa6:	ee07 2a10 	vmov	s14, r2
 8007aaa:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8007aae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8007ab2:	f1c3 0317 	rsb	r3, r3, #23
 8007ab6:	4118      	asrs	r0, r3
 8007ab8:	2900      	cmp	r1, #0
 8007aba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007abe:	bfb8      	it	lt
 8007ac0:	4240      	neglt	r0, r0
 8007ac2:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8007ac6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8007bdc <__ieee754_powf+0x578>
 8007aca:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8007be0 <__ieee754_powf+0x57c>
 8007ace:	ee16 3a90 	vmov	r3, s13
 8007ad2:	f36f 030b 	bfc	r3, #0, #12
 8007ad6:	ee06 3a90 	vmov	s13, r3
 8007ada:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007ade:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007ae2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007ae6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8007be4 <__ieee754_powf+0x580>
 8007aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007aee:	eee0 7a87 	vfma.f32	s15, s1, s14
 8007af2:	eeb0 7a67 	vmov.f32	s14, s15
 8007af6:	eea6 7a86 	vfma.f32	s14, s13, s12
 8007afa:	eef0 5a47 	vmov.f32	s11, s14
 8007afe:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8007b02:	ee67 6a07 	vmul.f32	s13, s14, s14
 8007b06:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007b0a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8007be8 <__ieee754_powf+0x584>
 8007b0e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8007bec <__ieee754_powf+0x588>
 8007b12:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007b16:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8007bf0 <__ieee754_powf+0x58c>
 8007b1a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8007b1e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8007bf4 <__ieee754_powf+0x590>
 8007b22:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8007b26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007bf8 <__ieee754_powf+0x594>
 8007b2a:	eee6 5a26 	vfma.f32	s11, s12, s13
 8007b2e:	eeb0 6a47 	vmov.f32	s12, s14
 8007b32:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8007b36:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007b3a:	ee67 5a06 	vmul.f32	s11, s14, s12
 8007b3e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007b42:	eee7 7a27 	vfma.f32	s15, s14, s15
 8007b46:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007b4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007b56:	ee10 3a10 	vmov	r3, s0
 8007b5a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007b5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b62:	da06      	bge.n	8007b72 <__ieee754_powf+0x50e>
 8007b64:	f000 f920 	bl	8007da8 <scalbnf>
 8007b68:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007b6c:	e592      	b.n	8007694 <__ieee754_powf+0x30>
 8007b6e:	2000      	movs	r0, #0
 8007b70:	e7a7      	b.n	8007ac2 <__ieee754_powf+0x45e>
 8007b72:	ee00 3a10 	vmov	s0, r3
 8007b76:	e7f7      	b.n	8007b68 <__ieee754_powf+0x504>
 8007b78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007b7c:	e58a      	b.n	8007694 <__ieee754_powf+0x30>
 8007b7e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8007bfc <__ieee754_powf+0x598>
 8007b82:	e587      	b.n	8007694 <__ieee754_powf+0x30>
 8007b84:	eeb0 0a48 	vmov.f32	s0, s16
 8007b88:	e584      	b.n	8007694 <__ieee754_powf+0x30>
 8007b8a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007b8e:	f43f adbb 	beq.w	8007708 <__ieee754_powf+0xa4>
 8007b92:	2502      	movs	r5, #2
 8007b94:	eeb0 0a48 	vmov.f32	s0, s16
 8007b98:	f7ff fbc9 	bl	800732e <fabsf>
 8007b9c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8007ba0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8007ba4:	4647      	mov	r7, r8
 8007ba6:	d003      	beq.n	8007bb0 <__ieee754_powf+0x54c>
 8007ba8:	f1b8 0f00 	cmp.w	r8, #0
 8007bac:	f47f addb 	bne.w	8007766 <__ieee754_powf+0x102>
 8007bb0:	2c00      	cmp	r4, #0
 8007bb2:	bfbc      	itt	lt
 8007bb4:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8007bb8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007bbc:	2e00      	cmp	r6, #0
 8007bbe:	f6bf ad69 	bge.w	8007694 <__ieee754_powf+0x30>
 8007bc2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8007bc6:	ea58 0805 	orrs.w	r8, r8, r5
 8007bca:	f47f adc7 	bne.w	800775c <__ieee754_powf+0xf8>
 8007bce:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007bd2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007bd6:	e55d      	b.n	8007694 <__ieee754_powf+0x30>
 8007bd8:	ff800000 	.word	0xff800000
 8007bdc:	3f317218 	.word	0x3f317218
 8007be0:	3f317200 	.word	0x3f317200
 8007be4:	35bfbe8c 	.word	0x35bfbe8c
 8007be8:	b5ddea0e 	.word	0xb5ddea0e
 8007bec:	3331bb4c 	.word	0x3331bb4c
 8007bf0:	388ab355 	.word	0x388ab355
 8007bf4:	bb360b61 	.word	0xbb360b61
 8007bf8:	3e2aaaab 	.word	0x3e2aaaab
 8007bfc:	00000000 	.word	0x00000000

08007c00 <atanf>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	ee10 5a10 	vmov	r5, s0
 8007c06:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8007c0a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8007c0e:	eef0 7a40 	vmov.f32	s15, s0
 8007c12:	d310      	bcc.n	8007c36 <atanf+0x36>
 8007c14:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8007c18:	d904      	bls.n	8007c24 <atanf+0x24>
 8007c1a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8007d5c <atanf+0x15c>
 8007c28:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8007d60 <atanf+0x160>
 8007c2c:	2d00      	cmp	r5, #0
 8007c2e:	bfc8      	it	gt
 8007c30:	eef0 7a47 	vmovgt.f32	s15, s14
 8007c34:	e7f3      	b.n	8007c1e <atanf+0x1e>
 8007c36:	4b4b      	ldr	r3, [pc, #300]	@ (8007d64 <atanf+0x164>)
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	d810      	bhi.n	8007c5e <atanf+0x5e>
 8007c3c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8007c40:	d20a      	bcs.n	8007c58 <atanf+0x58>
 8007c42:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8007d68 <atanf+0x168>
 8007c46:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c4e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c56:	dce2      	bgt.n	8007c1e <atanf+0x1e>
 8007c58:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5c:	e013      	b.n	8007c86 <atanf+0x86>
 8007c5e:	f7ff fb66 	bl	800732e <fabsf>
 8007c62:	4b42      	ldr	r3, [pc, #264]	@ (8007d6c <atanf+0x16c>)
 8007c64:	429c      	cmp	r4, r3
 8007c66:	d84f      	bhi.n	8007d08 <atanf+0x108>
 8007c68:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	d841      	bhi.n	8007cf4 <atanf+0xf4>
 8007c70:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8007c74:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8007c78:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007c8c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8007d70 <atanf+0x170>
 8007c90:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8007d74 <atanf+0x174>
 8007c94:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8007d78 <atanf+0x178>
 8007c98:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007c9c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007ca0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8007d7c <atanf+0x17c>
 8007ca4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007ca8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8007d80 <atanf+0x180>
 8007cac:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007cb0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8007d84 <atanf+0x184>
 8007cb4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007cb8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007d88 <atanf+0x188>
 8007cbc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007cc0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8007d8c <atanf+0x18c>
 8007cc4:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007cc8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007d90 <atanf+0x190>
 8007ccc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007cd0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8007d94 <atanf+0x194>
 8007cd4:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007cd8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007d98 <atanf+0x198>
 8007cdc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007ce0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007ce4:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007ce8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007cec:	d121      	bne.n	8007d32 <atanf+0x132>
 8007cee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cf2:	e794      	b.n	8007c1e <atanf+0x1e>
 8007cf4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007cf8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007cfc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007d00:	2301      	movs	r3, #1
 8007d02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007d06:	e7be      	b.n	8007c86 <atanf+0x86>
 8007d08:	4b24      	ldr	r3, [pc, #144]	@ (8007d9c <atanf+0x19c>)
 8007d0a:	429c      	cmp	r4, r3
 8007d0c:	d80b      	bhi.n	8007d26 <atanf+0x126>
 8007d0e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8007d12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d16:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d24:	e7af      	b.n	8007c86 <atanf+0x86>
 8007d26:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8007d2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e7a9      	b.n	8007c86 <atanf+0x86>
 8007d32:	4a1b      	ldr	r2, [pc, #108]	@ (8007da0 <atanf+0x1a0>)
 8007d34:	491b      	ldr	r1, [pc, #108]	@ (8007da4 <atanf+0x1a4>)
 8007d36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007d3a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007d3e:	edd3 6a00 	vldr	s13, [r3]
 8007d42:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007d46:	2d00      	cmp	r5, #0
 8007d48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d4c:	edd2 7a00 	vldr	s15, [r2]
 8007d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d54:	bfb8      	it	lt
 8007d56:	eef1 7a67 	vneglt.f32	s15, s15
 8007d5a:	e760      	b.n	8007c1e <atanf+0x1e>
 8007d5c:	bfc90fdb 	.word	0xbfc90fdb
 8007d60:	3fc90fdb 	.word	0x3fc90fdb
 8007d64:	3edfffff 	.word	0x3edfffff
 8007d68:	7149f2ca 	.word	0x7149f2ca
 8007d6c:	3f97ffff 	.word	0x3f97ffff
 8007d70:	3c8569d7 	.word	0x3c8569d7
 8007d74:	3d4bda59 	.word	0x3d4bda59
 8007d78:	bd6ef16b 	.word	0xbd6ef16b
 8007d7c:	3d886b35 	.word	0x3d886b35
 8007d80:	3dba2e6e 	.word	0x3dba2e6e
 8007d84:	3e124925 	.word	0x3e124925
 8007d88:	3eaaaaab 	.word	0x3eaaaaab
 8007d8c:	bd15a221 	.word	0xbd15a221
 8007d90:	bd9d8795 	.word	0xbd9d8795
 8007d94:	bde38e38 	.word	0xbde38e38
 8007d98:	be4ccccd 	.word	0xbe4ccccd
 8007d9c:	401bffff 	.word	0x401bffff
 8007da0:	08008374 	.word	0x08008374
 8007da4:	08008364 	.word	0x08008364

08007da8 <scalbnf>:
 8007da8:	ee10 3a10 	vmov	r3, s0
 8007dac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007db0:	d02b      	beq.n	8007e0a <scalbnf+0x62>
 8007db2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007db6:	d302      	bcc.n	8007dbe <scalbnf+0x16>
 8007db8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007dbc:	4770      	bx	lr
 8007dbe:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007dc2:	d123      	bne.n	8007e0c <scalbnf+0x64>
 8007dc4:	4b24      	ldr	r3, [pc, #144]	@ (8007e58 <scalbnf+0xb0>)
 8007dc6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007e5c <scalbnf+0xb4>
 8007dca:	4298      	cmp	r0, r3
 8007dcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007dd0:	db17      	blt.n	8007e02 <scalbnf+0x5a>
 8007dd2:	ee10 3a10 	vmov	r3, s0
 8007dd6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007dda:	3a19      	subs	r2, #25
 8007ddc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007de0:	4288      	cmp	r0, r1
 8007de2:	dd15      	ble.n	8007e10 <scalbnf+0x68>
 8007de4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007e60 <scalbnf+0xb8>
 8007de8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007e64 <scalbnf+0xbc>
 8007dec:	ee10 3a10 	vmov	r3, s0
 8007df0:	eeb0 7a67 	vmov.f32	s14, s15
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bfb8      	it	lt
 8007df8:	eef0 7a66 	vmovlt.f32	s15, s13
 8007dfc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007e00:	4770      	bx	lr
 8007e02:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007e68 <scalbnf+0xc0>
 8007e06:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007e0a:	4770      	bx	lr
 8007e0c:	0dd2      	lsrs	r2, r2, #23
 8007e0e:	e7e5      	b.n	8007ddc <scalbnf+0x34>
 8007e10:	4410      	add	r0, r2
 8007e12:	28fe      	cmp	r0, #254	@ 0xfe
 8007e14:	dce6      	bgt.n	8007de4 <scalbnf+0x3c>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	dd06      	ble.n	8007e28 <scalbnf+0x80>
 8007e1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007e1e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007e22:	ee00 3a10 	vmov	s0, r3
 8007e26:	4770      	bx	lr
 8007e28:	f110 0f16 	cmn.w	r0, #22
 8007e2c:	da09      	bge.n	8007e42 <scalbnf+0x9a>
 8007e2e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8007e68 <scalbnf+0xc0>
 8007e32:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007e6c <scalbnf+0xc4>
 8007e36:	ee10 3a10 	vmov	r3, s0
 8007e3a:	eeb0 7a67 	vmov.f32	s14, s15
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	e7d9      	b.n	8007df6 <scalbnf+0x4e>
 8007e42:	3019      	adds	r0, #25
 8007e44:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007e48:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007e4c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007e70 <scalbnf+0xc8>
 8007e50:	ee07 3a90 	vmov	s15, r3
 8007e54:	e7d7      	b.n	8007e06 <scalbnf+0x5e>
 8007e56:	bf00      	nop
 8007e58:	ffff3cb0 	.word	0xffff3cb0
 8007e5c:	4c000000 	.word	0x4c000000
 8007e60:	7149f2ca 	.word	0x7149f2ca
 8007e64:	f149f2ca 	.word	0xf149f2ca
 8007e68:	0da24260 	.word	0x0da24260
 8007e6c:	8da24260 	.word	0x8da24260
 8007e70:	33000000 	.word	0x33000000

08007e74 <with_errnof>:
 8007e74:	b510      	push	{r4, lr}
 8007e76:	ed2d 8b02 	vpush	{d8}
 8007e7a:	eeb0 8a40 	vmov.f32	s16, s0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	f7fd fb90 	bl	80055a4 <__errno>
 8007e84:	eeb0 0a48 	vmov.f32	s0, s16
 8007e88:	ecbd 8b02 	vpop	{d8}
 8007e8c:	6004      	str	r4, [r0, #0]
 8007e8e:	bd10      	pop	{r4, pc}

08007e90 <xflowf>:
 8007e90:	b130      	cbz	r0, 8007ea0 <xflowf+0x10>
 8007e92:	eef1 7a40 	vneg.f32	s15, s0
 8007e96:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007e9a:	2022      	movs	r0, #34	@ 0x22
 8007e9c:	f7ff bfea 	b.w	8007e74 <with_errnof>
 8007ea0:	eef0 7a40 	vmov.f32	s15, s0
 8007ea4:	e7f7      	b.n	8007e96 <xflowf+0x6>
	...

08007ea8 <__math_uflowf>:
 8007ea8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007eb0 <__math_uflowf+0x8>
 8007eac:	f7ff bff0 	b.w	8007e90 <xflowf>
 8007eb0:	10000000 	.word	0x10000000

08007eb4 <__math_oflowf>:
 8007eb4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007ebc <__math_oflowf+0x8>
 8007eb8:	f7ff bfea 	b.w	8007e90 <xflowf>
 8007ebc:	70000000 	.word	0x70000000

08007ec0 <__ieee754_sqrtf>:
 8007ec0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007ec4:	4770      	bx	lr
	...

08007ec8 <_init>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	bf00      	nop
 8007ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ece:	bc08      	pop	{r3}
 8007ed0:	469e      	mov	lr, r3
 8007ed2:	4770      	bx	lr

08007ed4 <_fini>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	bf00      	nop
 8007ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eda:	bc08      	pop	{r3}
 8007edc:	469e      	mov	lr, r3
 8007ede:	4770      	bx	lr
