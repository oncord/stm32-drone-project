
EEPROM data management.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edbc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  0800ef50  0800ef50  0000ff50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f744  0800f744  000111d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f744  0800f744  00010744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f74c  0800f74c  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f74c  0800f74c  0001074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f750  0800f750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800f754  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111d8  2**0
                  CONTENTS
 10 .bss          000004f4  200001d8  200001d8  000111d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006cc  200006cc  000111d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ef0  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a2e  00000000  00000000  000270f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0002ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ae  00000000  00000000  0002c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026385  00000000  00000000  0002d18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b1a  00000000  00000000  00053513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dce5c  00000000  00000000  0006c02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148e89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e48  00000000  00000000  00148ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0014fd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef34 	.word	0x0800ef34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800ef34 	.word	0x0800ef34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	619a      	str	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	041a      	lsls	r2, r3, #16
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	619a      	str	r2, [r3, #24]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <AT24C08_Page_Write>:
#include "AT24C08.h"

I2C_HandleTypeDef hi2c;

void AT24C08_Page_Write(unsigned char page, unsigned char *data, unsigned char len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af04      	add	r7, sp, #16
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page * 16) >> 8) << 1 | 0xA0;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	121b      	asrs	r3, r3, #8
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	73fb      	strb	r3, [r7, #15]
	unsigned char memAddress = (page * 16) & 0xff;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f3e:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <AT24C08_Page_Write+0x68>)
 8000f40:	f7ff ffd6 	bl	8000ef0 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c, devAddress, memAddress, I2C_MEMADD_SIZE_8BIT, &data, sizeof(len), 1);
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	b299      	uxth	r1, r3
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	463b      	mov	r3, r7
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	4808      	ldr	r0, [pc, #32]	@ (8000f7c <AT24C08_Page_Write+0x6c>)
 8000f5c:	f006 ff34 	bl	8007dc8 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f005 fb03 	bl	800656c <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6a:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <AT24C08_Page_Write+0x68>)
 8000f6c:	f7ff ffb2 	bl	8000ed4 <LL_GPIO_SetOutputPin>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	200001f4 	.word	0x200001f4

08000f80 <AT24C08_Page_Read>:
void AT24C08_Page_Read(unsigned char page, unsigned char *data, unsigned char len)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af04      	add	r7, sp, #16
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page * 16) >> 8) << 1 | 0xA0;
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	121b      	asrs	r3, r3, #8
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	73fb      	strb	r3, [r7, #15]
	unsigned char memAddress = (page * 16) & 0xff;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c, devAddress, memAddress, I2C_MEMADD_SIZE_8BIT, &data, sizeof(len), 1);
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	b299      	uxth	r1, r3
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	463b      	mov	r3, r7
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <AT24C08_Page_Read+0x50>)
 8000fc2:	f006 fffb 	bl	8007fbc <HAL_I2C_Mem_Read>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001f4 	.word	0x200001f4

08000fd4 <EP_PID_Gain_Write>:

void EP_PID_Gain_Write(unsigned char id, float PGain, float IGain, float DGain)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	@ 0x30
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fe0:	edc7 0a01 	vstr	s1, [r7, #4]
 8000fe4:	ed87 1a00 	vstr	s2, [r7]
 8000fe8:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	buf_write[0] = 0x45;
 8000fea:	2345      	movs	r3, #69	@ 0x45
 8000fec:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8000fee:	2350      	movs	r3, #80	@ 0x50
 8000ff0:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	76bb      	strb	r3, [r7, #26]

	parser.f = PGain;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8000ffa:	7d3b      	ldrb	r3, [r7, #20]
 8000ffc:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8001002:	7dbb      	ldrb	r3, [r7, #22]
 8001004:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	77bb      	strb	r3, [r7, #30]

	parser.f = IGain;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 800100e:	7d3b      	ldrb	r3, [r7, #20]
 8001010:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8001012:	7d7b      	ldrb	r3, [r7, #21]
 8001014:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8001018:	7dbb      	ldrb	r3, [r7, #22]
 800101a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	buf_write[10] = parser.byte[3];
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	parser.f = DGain;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8001028:	7d3b      	ldrb	r3, [r7, #20]
 800102a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	buf_write[12] = parser.byte[1];
 800102e:	7d7b      	ldrb	r3, [r7, #21]
 8001030:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	buf_write[13] = parser.byte[2];
 8001034:	7dbb      	ldrb	r3, [r7, #22]
 8001036:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	buf_write[14] = parser.byte[3];
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	unsigned char chksum = 0xff;
 8001040:	23ff      	movs	r3, #255	@ 0xff
 8001042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (int i = 0; i < 15; i++) chksum -= buf_write[i];
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800104a:	e00c      	b.n	8001066 <EP_PID_Gain_Write+0x92>
 800104c:	f107 0218 	add.w	r2, r7, #24
 8001050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001052:	4413      	add	r3, r2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001062:	3301      	adds	r3, #1
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001068:	2b0e      	cmp	r3, #14
 800106a:	ddef      	ble.n	800104c <EP_PID_Gain_Write+0x78>

	buf_write[15] = chksum;
 800106c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	switch (id)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d83e      	bhi.n	80010f8 <EP_PID_Gain_Write+0x124>
 800107a:	a201      	add	r2, pc, #4	@ (adr r2, 8001080 <EP_PID_Gain_Write+0xac>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	08001099 	.word	0x08001099
 8001084:	080010a9 	.word	0x080010a9
 8001088:	080010b9 	.word	0x080010b9
 800108c:	080010c9 	.word	0x080010c9
 8001090:	080010d9 	.word	0x080010d9
 8001094:	080010e9 	.word	0x080010e9
	{
	case 0:
		AT24C08_Page_Write(0, &buf_write[0], 16);
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2210      	movs	r2, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ff35 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010a6:	e027      	b.n	80010f8 <EP_PID_Gain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1, &buf_write[0], 16);
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	2210      	movs	r2, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff ff2d 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010b6:	e01f      	b.n	80010f8 <EP_PID_Gain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2, &buf_write[0], 16);
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	2210      	movs	r2, #16
 80010be:	4619      	mov	r1, r3
 80010c0:	2002      	movs	r0, #2
 80010c2:	f7ff ff25 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010c6:	e017      	b.n	80010f8 <EP_PID_Gain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3, &buf_write[0], 16);
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	2210      	movs	r2, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	2003      	movs	r0, #3
 80010d2:	f7ff ff1d 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010d6:	e00f      	b.n	80010f8 <EP_PID_Gain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4, &buf_write[0], 16);
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	2210      	movs	r2, #16
 80010de:	4619      	mov	r1, r3
 80010e0:	2004      	movs	r0, #4
 80010e2:	f7ff ff15 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010e6:	e007      	b.n	80010f8 <EP_PID_Gain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5, &buf_write[0], 16);
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	2210      	movs	r2, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	2005      	movs	r0, #5
 80010f2:	f7ff ff0d 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010f6:	bf00      	nop
	}
}
 80010f8:	bf00      	nop
 80010fa:	3730      	adds	r7, #48	@ 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <EP_PID_Gain_Read>:

unsigned char EP_PID_Gain_Read(unsigned char id, float *PGain, float *IGain, float *DGain)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	@ 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch (id)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b05      	cmp	r3, #5
 8001114:	d83e      	bhi.n	8001194 <EP_PID_Gain_Read+0x94>
 8001116:	a201      	add	r2, pc, #4	@ (adr r2, 800111c <EP_PID_Gain_Read+0x1c>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	08001135 	.word	0x08001135
 8001120:	08001145 	.word	0x08001145
 8001124:	08001155 	.word	0x08001155
 8001128:	08001165 	.word	0x08001165
 800112c:	08001175 	.word	0x08001175
 8001130:	08001185 	.word	0x08001185
	{
	case 0:
		AT24C08_Page_Read(0, &buf_read[0], 16);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2210      	movs	r2, #16
 800113a:	4619      	mov	r1, r3
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff ff1f 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001142:	e027      	b.n	8001194 <EP_PID_Gain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1, &buf_read[0], 16);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2210      	movs	r2, #16
 800114a:	4619      	mov	r1, r3
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ff17 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001152:	e01f      	b.n	8001194 <EP_PID_Gain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2, &buf_read[0], 16);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2210      	movs	r2, #16
 800115a:	4619      	mov	r1, r3
 800115c:	2002      	movs	r0, #2
 800115e:	f7ff ff0f 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001162:	e017      	b.n	8001194 <EP_PID_Gain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3, &buf_read[0], 16);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2210      	movs	r2, #16
 800116a:	4619      	mov	r1, r3
 800116c:	2003      	movs	r0, #3
 800116e:	f7ff ff07 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001172:	e00f      	b.n	8001194 <EP_PID_Gain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4, &buf_read[0], 16);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2210      	movs	r2, #16
 800117a:	4619      	mov	r1, r3
 800117c:	2004      	movs	r0, #4
 800117e:	f7ff feff 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001182:	e007      	b.n	8001194 <EP_PID_Gain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5, &buf_read[0], 16);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2210      	movs	r2, #16
 800118a:	4619      	mov	r1, r3
 800118c:	2005      	movs	r0, #5
 800118e:	f7ff fef7 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001192:	bf00      	nop
	}

	for (int i = 0; i < 15; i++) printf("\n%d\n", buf_read[i]);
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001198:	e00b      	b.n	80011b2 <EP_PID_Gain_Read+0xb2>
 800119a:	f107 0214 	add.w	r2, r7, #20
 800119e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	482b      	ldr	r0, [pc, #172]	@ (8001254 <EP_PID_Gain_Read+0x154>)
 80011a8:	f00b f896 	bl	800c2d8 <iprintf>
 80011ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ae:	3301      	adds	r3, #1
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b4:	2b0e      	cmp	r3, #14
 80011b6:	ddf0      	ble.n	800119a <EP_PID_Gain_Read+0x9a>

	unsigned char chksum = 0xff;
 80011b8:	23ff      	movs	r3, #255	@ 0xff
 80011ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	for (int i = 0; i < 15; i++) chksum -= buf_read[i];
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c2:	e00c      	b.n	80011de <EP_PID_Gain_Read+0xde>
 80011c4:	f107 0214 	add.w	r2, r7, #20
 80011c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ca:	4413      	add	r3, r2
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	3301      	adds	r3, #1
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e0:	2b0e      	cmp	r3, #14
 80011e2:	ddef      	ble.n	80011c4 <EP_PID_Gain_Read+0xc4>

	if (buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 80011e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011e8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d12b      	bne.n	8001248 <EP_PID_Gain_Read+0x148>
 80011f0:	7d3b      	ldrb	r3, [r7, #20]
 80011f2:	2b45      	cmp	r3, #69	@ 0x45
 80011f4:	d128      	bne.n	8001248 <EP_PID_Gain_Read+0x148>
 80011f6:	7d7b      	ldrb	r3, [r7, #21]
 80011f8:	2b50      	cmp	r3, #80	@ 0x50
 80011fa:	d125      	bne.n	8001248 <EP_PID_Gain_Read+0x148>
	{
		// proportional gain
		parser.byte[0] = buf_read[3];
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	743b      	strb	r3, [r7, #16]
		parser.byte[1] = buf_read[4];
 8001200:	7e3b      	ldrb	r3, [r7, #24]
 8001202:	747b      	strb	r3, [r7, #17]
		parser.byte[2] = buf_read[5];
 8001204:	7e7b      	ldrb	r3, [r7, #25]
 8001206:	74bb      	strb	r3, [r7, #18]
		parser.byte[3] = buf_read[6];
 8001208:	7ebb      	ldrb	r3, [r7, #26]
 800120a:	74fb      	strb	r3, [r7, #19]
		*PGain = parser.f;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	601a      	str	r2, [r3, #0]

		// integral gain
		parser.byte[0] = buf_read[7];
 8001212:	7efb      	ldrb	r3, [r7, #27]
 8001214:	743b      	strb	r3, [r7, #16]
		parser.byte[1] = buf_read[8];
 8001216:	7f3b      	ldrb	r3, [r7, #28]
 8001218:	747b      	strb	r3, [r7, #17]
		parser.byte[2] = buf_read[9];
 800121a:	7f7b      	ldrb	r3, [r7, #29]
 800121c:	74bb      	strb	r3, [r7, #18]
		parser.byte[3] = buf_read[10];
 800121e:	7fbb      	ldrb	r3, [r7, #30]
 8001220:	74fb      	strb	r3, [r7, #19]
		*IGain = parser.f;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	601a      	str	r2, [r3, #0]

		// derivative gain
		parser.byte[0] = buf_read[11];
 8001228:	7ffb      	ldrb	r3, [r7, #31]
 800122a:	743b      	strb	r3, [r7, #16]
		parser.byte[1] = buf_read[12];
 800122c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001230:	747b      	strb	r3, [r7, #17]
		parser.byte[2] = buf_read[13];
 8001232:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001236:	74bb      	strb	r3, [r7, #18]
		parser.byte[3] = buf_read[14];
 8001238:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800123c:	74fb      	strb	r3, [r7, #19]
		*DGain = parser.f;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	601a      	str	r2, [r3, #0]

		return 0;
 8001244:	2300      	movs	r3, #0
 8001246:	e000      	b.n	800124a <EP_PID_Gain_Read+0x14a>
	}

	return 1;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	3730      	adds	r7, #48	@ 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	0800ef50 	.word	0x0800ef50

08001258 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	601a      	str	r2, [r3, #0]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f023 0210 	bic.w	r2, r3, #16
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	605a      	str	r2, [r3, #4]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d101      	bne.n	80012dc <LL_SPI_IsActiveFlag_TXE+0x18>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <LL_SPI_IsActiveFlag_TXE+0x1a>
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	330c      	adds	r3, #12
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	330c      	adds	r3, #12
 8001316:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	78fa      	ldrb	r2, [r7, #3]
 800131c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_GPIO_IsInputPinSet>:
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	4013      	ands	r3, r2
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_GPIO_SetOutputPin>:
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	619a      	str	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_GPIO_ResetOutputPin>:
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	041a      	lsls	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	619a      	str	r2, [r3, #24]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800139a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800139c:	4907      	ldr	r1, [pc, #28]	@ (80013bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4013      	ands	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40023800 	.word	0x40023800

080013c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013cc:	4907      	ldr	r1, [pc, #28]	@ (80013ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80013d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4013      	ands	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40023800 	.word	0x40023800

080013f0 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b090      	sub	sp, #64	@ 0x40
 80013f4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80013f6:	f107 0318 	add.w	r3, r7, #24
 80013fa:	2228      	movs	r2, #40	@ 0x28
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f00b f8b2 	bl	800c568 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001414:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001418:	f7ff ffd2 	bl	80013c0 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800141c:	2002      	movs	r0, #2
 800141e:	f7ff ffb7 	bl	8001390 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001422:	2004      	movs	r0, #4
 8001424:	f7ff ffb4 	bl	8001390 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ffb1 	bl	8001390 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800142e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001432:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001434:	2302      	movs	r3, #2
 8001436:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001444:	2305      	movs	r3, #5
 8001446:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4841      	ldr	r0, [pc, #260]	@ (8001554 <BNO080_GPIO_SPI_Initialization+0x164>)
 800144e:	f009 fa20 	bl	800a892 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001456:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800145a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001460:	2302      	movs	r3, #2
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001464:	2301      	movs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001468:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800146e:	2318      	movs	r3, #24
 8001470:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001472:	2300      	movs	r3, #0
 8001474:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800147a:	230a      	movs	r3, #10
 800147c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4619      	mov	r1, r3
 8001484:	4834      	ldr	r0, [pc, #208]	@ (8001558 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001486:	f009 fbe2 	bl	800ac4e <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800148a:	2100      	movs	r1, #0
 800148c:	4832      	ldr	r0, [pc, #200]	@ (8001558 <BNO080_GPIO_SPI_Initialization+0x168>)
 800148e:	f7ff fef3 	bl	8001278 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001492:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001496:	4831      	ldr	r0, [pc, #196]	@ (800155c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001498:	f7ff ff6a 	bl	8001370 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 800149c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014a0:	482c      	ldr	r0, [pc, #176]	@ (8001554 <BNO080_GPIO_SPI_Initialization+0x164>)
 80014a2:	f7ff ff65 	bl	8001370 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80014a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014aa:	482d      	ldr	r0, [pc, #180]	@ (8001560 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014ac:	f7ff ff60 	bl	8001370 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80014b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014b6:	2301      	movs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	4822      	ldr	r0, [pc, #136]	@ (8001554 <BNO080_GPIO_SPI_Initialization+0x164>)
 80014cc:	f009 f9e1 	bl	800a892 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80014d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014d4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80014e6:	463b      	mov	r3, r7
 80014e8:	4619      	mov	r1, r3
 80014ea:	481c      	ldr	r0, [pc, #112]	@ (800155c <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014ec:	f009 f9d1 	bl	800a892 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80014f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014f6:	2301      	movs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	4815      	ldr	r0, [pc, #84]	@ (8001560 <BNO080_GPIO_SPI_Initialization+0x170>)
 800150c:	f009 f9c1 	bl	800a892 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 8001510:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001514:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800151a:	2301      	movs	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800151e:	463b      	mov	r3, r7
 8001520:	4619      	mov	r1, r3
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001524:	f009 f9b5 	bl	800a892 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001528:	480b      	ldr	r0, [pc, #44]	@ (8001558 <BNO080_GPIO_SPI_Initialization+0x168>)
 800152a:	f7ff fe95 	bl	8001258 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800152e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001532:	4808      	ldr	r0, [pc, #32]	@ (8001554 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001534:	f7ff ff0e 	bl	8001354 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001538:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800153c:	4808      	ldr	r0, [pc, #32]	@ (8001560 <BNO080_GPIO_SPI_Initialization+0x170>)
 800153e:	f7ff ff09 	bl	8001354 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001542:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001548:	f7ff ff04 	bl	8001354 <LL_GPIO_SetOutputPin>
}
 800154c:	bf00      	nop
 800154e:	3740      	adds	r7, #64	@ 0x40
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40020400 	.word	0x40020400
 8001558:	40003800 	.word	0x40003800
 800155c:	40020800 	.word	0x40020800
 8001560:	40020000 	.word	0x40020000

08001564 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	BNO080_GPIO_SPI_Initialization();
 8001568:	f7ff ff42 	bl	80013f0 <BNO080_GPIO_SPI_Initialization>

	printf("Checking BNO080...\n");
 800156c:	4825      	ldr	r0, [pc, #148]	@ (8001604 <BNO080_Initialization+0xa0>)
 800156e:	f00a ff1b 	bl	800c3a8 <puts>

	CHIP_DESELECT(BNO080);
 8001572:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001576:	4824      	ldr	r0, [pc, #144]	@ (8001608 <BNO080_Initialization+0xa4>)
 8001578:	f7ff feec 	bl	8001354 <LL_GPIO_SetOutputPin>

	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800157c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001580:	4822      	ldr	r0, [pc, #136]	@ (800160c <BNO080_Initialization+0xa8>)
 8001582:	f7ff fee7 	bl	8001354 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001586:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800158a:	4821      	ldr	r0, [pc, #132]	@ (8001610 <BNO080_Initialization+0xac>)
 800158c:	f7ff fef0 	bl	8001370 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001590:	20c8      	movs	r0, #200	@ 0xc8
 8001592:	f004 ffeb 	bl	800656c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001596:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800159a:	481d      	ldr	r0, [pc, #116]	@ (8001610 <BNO080_Initialization+0xac>)
 800159c:	f7ff feda 	bl	8001354 <LL_GPIO_SetOutputPin>

	BNO080_waitForSPI(); //Wait until INT pin goes low.
 80015a0:	f000 fc44 	bl	8001e2c <BNO080_waitForSPI>

	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80015a4:	f000 fc42 	bl	8001e2c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80015a8:	f000 fc64 	bl	8001e74 <BNO080_receivePacket>

	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80015ac:	f000 fc3e 	bl	8001e2c <BNO080_waitForSPI>
	BNO080_receivePacket();
 80015b0:	f000 fc60 	bl	8001e74 <BNO080_receivePacket>

	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <BNO080_Initialization+0xb0>)
 80015b6:	22f9      	movs	r2, #249	@ 0xf9
 80015b8:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <BNO080_Initialization+0xb0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	705a      	strb	r2, [r3, #1]

	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80015c0:	2102      	movs	r1, #2
 80015c2:	2002      	movs	r0, #2
 80015c4:	f000 fcc8 	bl	8001f58 <BNO080_sendPacket>

	//Now we wait for response
	BNO080_waitForSPI();
 80015c8:	f000 fc30 	bl	8001e2c <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80015cc:	f000 fc52 	bl	8001e74 <BNO080_receivePacket>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d10b      	bne.n	80015ee <BNO080_Initialization+0x8a>
	{
		//printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <BNO080_Initialization+0xb0>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2bf8      	cmp	r3, #248	@ 0xf8
 80015dc:	d107      	bne.n	80015ee <BNO080_Initialization+0x8a>
		{
			printf("BNO080 who_am_i = 0x%02x...OK\n\n", shtpData[0]);
 80015de:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <BNO080_Initialization+0xb0>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <BNO080_Initialization+0xb4>)
 80015e6:	f00a fe77 	bl	800c2d8 <iprintf>
			return (0);
 80015ea:	2300      	movs	r3, #0
 80015ec:	e007      	b.n	80015fe <BNO080_Initialization+0x9a>
		}// Sensor OK
	}

	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <BNO080_Initialization+0xb0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	22f8      	movs	r2, #248	@ 0xf8
 80015f4:	4619      	mov	r1, r3
 80015f6:	4809      	ldr	r0, [pc, #36]	@ (800161c <BNO080_Initialization+0xb8>)
 80015f8:	f00a fe6e 	bl	800c2d8 <iprintf>
	return (1); //Something went wrong
 80015fc:	2301      	movs	r3, #1
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	0800ef58 	.word	0x0800ef58
 8001608:	40020400 	.word	0x40020400
 800160c:	40020000 	.word	0x40020000
 8001610:	40020800 	.word	0x40020800
 8001614:	2000024c 	.word	0x2000024c
 8001618:	0800ef6c 	.word	0x0800ef6c
 800161c:	0800ef8c 	.word	0x0800ef8c

08001620 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 800162a:	bf00      	nop
 800162c:	480c      	ldr	r0, [pc, #48]	@ (8001660 <SPI2_SendByte+0x40>)
 800162e:	f7ff fe49 	bl	80012c4 <LL_SPI_IsActiveFlag_TXE>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f9      	beq.n	800162c <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4619      	mov	r1, r3
 800163c:	4808      	ldr	r0, [pc, #32]	@ (8001660 <SPI2_SendByte+0x40>)
 800163e:	f7ff fe62 	bl	8001306 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 8001642:	bf00      	nop
 8001644:	4806      	ldr	r0, [pc, #24]	@ (8001660 <SPI2_SendByte+0x40>)
 8001646:	f7ff fe2a 	bl	800129e <LL_SPI_IsActiveFlag_RXNE>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f9      	beq.n	8001644 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8001650:	4803      	ldr	r0, [pc, #12]	@ (8001660 <SPI2_SendByte+0x40>)
 8001652:	f7ff fe4a 	bl	80012ea <LL_SPI_ReceiveData8>
 8001656:	4603      	mov	r3, r0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40003800 	.word	0x40003800

08001664 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001668:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800166c:	4811      	ldr	r0, [pc, #68]	@ (80016b4 <BNO080_dataAvailable+0x50>)
 800166e:	f7ff fe5c 	bl	800132a <LL_GPIO_IsInputPinSet>
 8001672:	4603      	mov	r3, r0
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <BNO080_dataAvailable+0x18>
		return (0);
 8001678:	2300      	movs	r3, #0
 800167a:	e019      	b.n	80016b0 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 800167c:	f000 fbfa 	bl	8001e74 <BNO080_receivePacket>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d113      	bne.n	80016ae <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001686:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <BNO080_dataAvailable+0x54>)
 8001688:	789b      	ldrb	r3, [r3, #2]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d107      	bne.n	800169e <BNO080_dataAvailable+0x3a>
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <BNO080_dataAvailable+0x58>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2bfb      	cmp	r3, #251	@ 0xfb
 8001694:	d103      	bne.n	800169e <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001696:	f000 f82f 	bl	80016f8 <BNO080_parseInputReport>
			return (1);
 800169a:	2301      	movs	r3, #1
 800169c:	e008      	b.n	80016b0 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <BNO080_dataAvailable+0x54>)
 80016a0:	789b      	ldrb	r3, [r3, #2]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d103      	bne.n	80016ae <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80016a6:	f000 f80b 	bl	80016c0 <BNO080_parseCommandReport>
			return (1);
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40020800 	.word	0x40020800
 80016b8:	20000248 	.word	0x20000248
 80016bc:	2000024c 	.word	0x2000024c

080016c0 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <BNO080_parseCommandReport+0x30>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2bf1      	cmp	r3, #241	@ 0xf1
 80016cc:	d109      	bne.n	80016e2 <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <BNO080_parseCommandReport+0x30>)
 80016d0:	789b      	ldrb	r3, [r3, #2]
 80016d2:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b07      	cmp	r3, #7
 80016d8:	d103      	bne.n	80016e2 <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <BNO080_parseCommandReport+0x30>)
 80016dc:	795a      	ldrb	r2, [r3, #5]
 80016de:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <BNO080_parseCommandReport+0x34>)
 80016e0:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	2000024c 	.word	0x2000024c
 80016f4:	20000310 	.word	0x20000310

080016f8 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 80016fe:	4b9b      	ldr	r3, [pc, #620]	@ (800196c <BNO080_parseInputReport+0x274>)
 8001700:	785b      	ldrb	r3, [r3, #1]
 8001702:	b21b      	sxth	r3, r3
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	4b98      	ldr	r3, [pc, #608]	@ (800196c <BNO080_parseInputReport+0x274>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b21b      	sxth	r3, r3
 800170e:	4313      	orrs	r3, r2
 8001710:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8001712:	8a3b      	ldrh	r3, [r7, #16]
 8001714:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001718:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 800171a:	8a3b      	ldrh	r3, [r7, #16]
 800171c:	3b04      	subs	r3, #4
 800171e:	b29b      	uxth	r3, r3
 8001720:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8001722:	4b93      	ldr	r3, [pc, #588]	@ (8001970 <BNO080_parseInputReport+0x278>)
 8001724:	791b      	ldrb	r3, [r3, #4]
 8001726:	061a      	lsls	r2, r3, #24
 8001728:	4b91      	ldr	r3, [pc, #580]	@ (8001970 <BNO080_parseInputReport+0x278>)
 800172a:	78db      	ldrb	r3, [r3, #3]
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	4b8f      	ldr	r3, [pc, #572]	@ (8001970 <BNO080_parseInputReport+0x278>)
 8001732:	789b      	ldrb	r3, [r3, #2]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	4313      	orrs	r3, r2
 8001738:	4a8d      	ldr	r2, [pc, #564]	@ (8001970 <BNO080_parseInputReport+0x278>)
 800173a:	7852      	ldrb	r2, [r2, #1]
 800173c:	4313      	orrs	r3, r2
 800173e:	4a8d      	ldr	r2, [pc, #564]	@ (8001974 <BNO080_parseInputReport+0x27c>)
 8001740:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8001742:	4b8b      	ldr	r3, [pc, #556]	@ (8001970 <BNO080_parseInputReport+0x278>)
 8001744:	79db      	ldrb	r3, [r3, #7]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 800174c:	4b88      	ldr	r3, [pc, #544]	@ (8001970 <BNO080_parseInputReport+0x278>)
 800174e:	7a9b      	ldrb	r3, [r3, #10]
 8001750:	b21b      	sxth	r3, r3
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	b21a      	sxth	r2, r3
 8001756:	4b86      	ldr	r3, [pc, #536]	@ (8001970 <BNO080_parseInputReport+0x278>)
 8001758:	7a5b      	ldrb	r3, [r3, #9]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21b      	sxth	r3, r3
 8001760:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8001762:	4b83      	ldr	r3, [pc, #524]	@ (8001970 <BNO080_parseInputReport+0x278>)
 8001764:	7b1b      	ldrb	r3, [r3, #12]
 8001766:	b21b      	sxth	r3, r3
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b21a      	sxth	r2, r3
 800176c:	4b80      	ldr	r3, [pc, #512]	@ (8001970 <BNO080_parseInputReport+0x278>)
 800176e:	7adb      	ldrb	r3, [r3, #11]
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b21b      	sxth	r3, r3
 8001776:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001778:	4b7d      	ldr	r3, [pc, #500]	@ (8001970 <BNO080_parseInputReport+0x278>)
 800177a:	7b9b      	ldrb	r3, [r3, #14]
 800177c:	b21b      	sxth	r3, r3
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	4b7b      	ldr	r3, [pc, #492]	@ (8001970 <BNO080_parseInputReport+0x278>)
 8001784:	7b5b      	ldrb	r3, [r3, #13]
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b21b      	sxth	r3, r3
 800178c:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8001796:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800179a:	2b0e      	cmp	r3, #14
 800179c:	dd0a      	ble.n	80017b4 <BNO080_parseInputReport+0xbc>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 800179e:	4b74      	ldr	r3, [pc, #464]	@ (8001970 <BNO080_parseInputReport+0x278>)
 80017a0:	7c1b      	ldrb	r3, [r3, #16]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	4b71      	ldr	r3, [pc, #452]	@ (8001970 <BNO080_parseInputReport+0x278>)
 80017aa:	7bdb      	ldrb	r3, [r3, #15]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 80017b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	dd0a      	ble.n	80017d2 <BNO080_parseInputReport+0xda>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 80017bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001970 <BNO080_parseInputReport+0x278>)
 80017be:	7c9b      	ldrb	r3, [r3, #18]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001970 <BNO080_parseInputReport+0x278>)
 80017c8:	7c5b      	ldrb	r3, [r3, #17]
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 80017d2:	4b67      	ldr	r3, [pc, #412]	@ (8001970 <BNO080_parseInputReport+0x278>)
 80017d4:	795b      	ldrb	r3, [r3, #5]
 80017d6:	2b1e      	cmp	r3, #30
 80017d8:	dc46      	bgt.n	8001868 <BNO080_parseInputReport+0x170>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f340 80bf 	ble.w	800195e <BNO080_parseInputReport+0x266>
 80017e0:	3b01      	subs	r3, #1
 80017e2:	2b1d      	cmp	r3, #29
 80017e4:	f200 80bb 	bhi.w	800195e <BNO080_parseInputReport+0x266>
 80017e8:	a201      	add	r2, pc, #4	@ (adr r2, 80017f0 <BNO080_parseInputReport+0xf8>)
 80017ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ee:	bf00      	nop
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	080018a7 	.word	0x080018a7
 80017f8:	080018c3 	.word	0x080018c3
 80017fc:	0800188b 	.word	0x0800188b
 8001800:	080018df 	.word	0x080018df
 8001804:	0800195f 	.word	0x0800195f
 8001808:	0800195f 	.word	0x0800195f
 800180c:	080018df 	.word	0x080018df
 8001810:	0800195f 	.word	0x0800195f
 8001814:	0800195f 	.word	0x0800195f
 8001818:	0800195f 	.word	0x0800195f
 800181c:	0800195f 	.word	0x0800195f
 8001820:	0800195f 	.word	0x0800195f
 8001824:	0800195f 	.word	0x0800195f
 8001828:	0800195f 	.word	0x0800195f
 800182c:	0800195f 	.word	0x0800195f
 8001830:	08001907 	.word	0x08001907
 8001834:	0800195f 	.word	0x0800195f
 8001838:	0800190f 	.word	0x0800190f
 800183c:	0800195f 	.word	0x0800195f
 8001840:	0800195f 	.word	0x0800195f
 8001844:	0800195f 	.word	0x0800195f
 8001848:	0800195f 	.word	0x0800195f
 800184c:	0800195f 	.word	0x0800195f
 8001850:	0800195f 	.word	0x0800195f
 8001854:	0800195f 	.word	0x0800195f
 8001858:	0800195f 	.word	0x0800195f
 800185c:	0800195f 	.word	0x0800195f
 8001860:	0800195f 	.word	0x0800195f
 8001864:	08001919 	.word	0x08001919
 8001868:	2bf1      	cmp	r3, #241	@ 0xf1
 800186a:	d06d      	beq.n	8001948 <BNO080_parseInputReport+0x250>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800186c:	e077      	b.n	800195e <BNO080_parseInputReport+0x266>
			accelAccuracy = status;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <BNO080_parseInputReport+0x280>)
 8001874:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8001876:	4a41      	ldr	r2, [pc, #260]	@ (800197c <BNO080_parseInputReport+0x284>)
 8001878:	89bb      	ldrh	r3, [r7, #12]
 800187a:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 800187c:	4a40      	ldr	r2, [pc, #256]	@ (8001980 <BNO080_parseInputReport+0x288>)
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8001882:	4a40      	ldr	r2, [pc, #256]	@ (8001984 <BNO080_parseInputReport+0x28c>)
 8001884:	893b      	ldrh	r3, [r7, #8]
 8001886:	8013      	strh	r3, [r2, #0]
			break;
 8001888:	e069      	b.n	800195e <BNO080_parseInputReport+0x266>
			accelLinAccuracy = status;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b3e      	ldr	r3, [pc, #248]	@ (8001988 <BNO080_parseInputReport+0x290>)
 8001890:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8001892:	4a3e      	ldr	r2, [pc, #248]	@ (800198c <BNO080_parseInputReport+0x294>)
 8001894:	89bb      	ldrh	r3, [r7, #12]
 8001896:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001898:	4a3d      	ldr	r2, [pc, #244]	@ (8001990 <BNO080_parseInputReport+0x298>)
 800189a:	897b      	ldrh	r3, [r7, #10]
 800189c:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800189e:	4a3d      	ldr	r2, [pc, #244]	@ (8001994 <BNO080_parseInputReport+0x29c>)
 80018a0:	893b      	ldrh	r3, [r7, #8]
 80018a2:	8013      	strh	r3, [r2, #0]
			break;
 80018a4:	e05b      	b.n	800195e <BNO080_parseInputReport+0x266>
			gyroAccuracy = status;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <BNO080_parseInputReport+0x2a0>)
 80018ac:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 80018ae:	4a3b      	ldr	r2, [pc, #236]	@ (800199c <BNO080_parseInputReport+0x2a4>)
 80018b0:	89bb      	ldrh	r3, [r7, #12]
 80018b2:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 80018b4:	4a3a      	ldr	r2, [pc, #232]	@ (80019a0 <BNO080_parseInputReport+0x2a8>)
 80018b6:	897b      	ldrh	r3, [r7, #10]
 80018b8:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 80018ba:	4a3a      	ldr	r2, [pc, #232]	@ (80019a4 <BNO080_parseInputReport+0x2ac>)
 80018bc:	893b      	ldrh	r3, [r7, #8]
 80018be:	8013      	strh	r3, [r2, #0]
			break;
 80018c0:	e04d      	b.n	800195e <BNO080_parseInputReport+0x266>
			magAccuracy = status;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b38      	ldr	r3, [pc, #224]	@ (80019a8 <BNO080_parseInputReport+0x2b0>)
 80018c8:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 80018ca:	4a38      	ldr	r2, [pc, #224]	@ (80019ac <BNO080_parseInputReport+0x2b4>)
 80018cc:	89bb      	ldrh	r3, [r7, #12]
 80018ce:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 80018d0:	4a37      	ldr	r2, [pc, #220]	@ (80019b0 <BNO080_parseInputReport+0x2b8>)
 80018d2:	897b      	ldrh	r3, [r7, #10]
 80018d4:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 80018d6:	4a37      	ldr	r2, [pc, #220]	@ (80019b4 <BNO080_parseInputReport+0x2bc>)
 80018d8:	893b      	ldrh	r3, [r7, #8]
 80018da:	8013      	strh	r3, [r2, #0]
			break;
 80018dc:	e03f      	b.n	800195e <BNO080_parseInputReport+0x266>
			quatAccuracy = status;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <BNO080_parseInputReport+0x2c0>)
 80018e4:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 80018e6:	4a35      	ldr	r2, [pc, #212]	@ (80019bc <BNO080_parseInputReport+0x2c4>)
 80018e8:	89bb      	ldrh	r3, [r7, #12]
 80018ea:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 80018ec:	4a34      	ldr	r2, [pc, #208]	@ (80019c0 <BNO080_parseInputReport+0x2c8>)
 80018ee:	897b      	ldrh	r3, [r7, #10]
 80018f0:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80018f2:	4a34      	ldr	r2, [pc, #208]	@ (80019c4 <BNO080_parseInputReport+0x2cc>)
 80018f4:	893b      	ldrh	r3, [r7, #8]
 80018f6:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80018f8:	4a33      	ldr	r2, [pc, #204]	@ (80019c8 <BNO080_parseInputReport+0x2d0>)
 80018fa:	8afb      	ldrh	r3, [r7, #22]
 80018fc:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80018fe:	4a33      	ldr	r2, [pc, #204]	@ (80019cc <BNO080_parseInputReport+0x2d4>)
 8001900:	8abb      	ldrh	r3, [r7, #20]
 8001902:	8013      	strh	r3, [r2, #0]
			break;
 8001904:	e02b      	b.n	800195e <BNO080_parseInputReport+0x266>
			stepCount = data3; //Bytes 8/9
 8001906:	4a32      	ldr	r2, [pc, #200]	@ (80019d0 <BNO080_parseInputReport+0x2d8>)
 8001908:	893b      	ldrh	r3, [r7, #8]
 800190a:	8013      	strh	r3, [r2, #0]
			break;
 800190c:	e027      	b.n	800195e <BNO080_parseInputReport+0x266>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <BNO080_parseInputReport+0x278>)
 8001910:	7a5a      	ldrb	r2, [r3, #9]
 8001912:	4b30      	ldr	r3, [pc, #192]	@ (80019d4 <BNO080_parseInputReport+0x2dc>)
 8001914:	701a      	strb	r2, [r3, #0]
			break;
 8001916:	e022      	b.n	800195e <BNO080_parseInputReport+0x266>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001918:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <BNO080_parseInputReport+0x278>)
 800191a:	7a9a      	ldrb	r2, [r3, #10]
 800191c:	4b2e      	ldr	r3, [pc, #184]	@ (80019d8 <BNO080_parseInputReport+0x2e0>)
 800191e:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001920:	2300      	movs	r3, #0
 8001922:	74fb      	strb	r3, [r7, #19]
 8001924:	e00c      	b.n	8001940 <BNO080_parseInputReport+0x248>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001926:	7cfb      	ldrb	r3, [r7, #19]
 8001928:	f103 020b 	add.w	r2, r3, #11
 800192c:	4b2b      	ldr	r3, [pc, #172]	@ (80019dc <BNO080_parseInputReport+0x2e4>)
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	7cfb      	ldrb	r3, [r7, #19]
 8001932:	440b      	add	r3, r1
 8001934:	490e      	ldr	r1, [pc, #56]	@ (8001970 <BNO080_parseInputReport+0x278>)
 8001936:	5c8a      	ldrb	r2, [r1, r2]
 8001938:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800193a:	7cfb      	ldrb	r3, [r7, #19]
 800193c:	3301      	adds	r3, #1
 800193e:	74fb      	strb	r3, [r7, #19]
 8001940:	7cfb      	ldrb	r3, [r7, #19]
 8001942:	2b08      	cmp	r3, #8
 8001944:	d9ef      	bls.n	8001926 <BNO080_parseInputReport+0x22e>
			break;
 8001946:	e00a      	b.n	800195e <BNO080_parseInputReport+0x266>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <BNO080_parseInputReport+0x278>)
 800194a:	79db      	ldrb	r3, [r3, #7]
 800194c:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b07      	cmp	r3, #7
 8001952:	d103      	bne.n	800195c <BNO080_parseInputReport+0x264>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <BNO080_parseInputReport+0x278>)
 8001956:	7a9a      	ldrb	r2, [r3, #10]
 8001958:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <BNO080_parseInputReport+0x2e8>)
 800195a:	701a      	strb	r2, [r3, #0]
			break;
 800195c:	bf00      	nop
}
 800195e:	bf00      	nop
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000248 	.word	0x20000248
 8001970:	2000024c 	.word	0x2000024c
 8001974:	20000304 	.word	0x20000304
 8001978:	200002da 	.word	0x200002da
 800197c:	200002d4 	.word	0x200002d4
 8001980:	200002d6 	.word	0x200002d6
 8001984:	200002d8 	.word	0x200002d8
 8001988:	200002e2 	.word	0x200002e2
 800198c:	200002dc 	.word	0x200002dc
 8001990:	200002de 	.word	0x200002de
 8001994:	200002e0 	.word	0x200002e0
 8001998:	200002ea 	.word	0x200002ea
 800199c:	200002e4 	.word	0x200002e4
 80019a0:	200002e6 	.word	0x200002e6
 80019a4:	200002e8 	.word	0x200002e8
 80019a8:	200002f2 	.word	0x200002f2
 80019ac:	200002ec 	.word	0x200002ec
 80019b0:	200002ee 	.word	0x200002ee
 80019b4:	200002f0 	.word	0x200002f0
 80019b8:	200002fe 	.word	0x200002fe
 80019bc:	200002f4 	.word	0x200002f4
 80019c0:	200002f6 	.word	0x200002f6
 80019c4:	200002f8 	.word	0x200002f8
 80019c8:	200002fa 	.word	0x200002fa
 80019cc:	200002fc 	.word	0x200002fc
 80019d0:	20000300 	.word	0x20000300
 80019d4:	20000308 	.word	0x20000308
 80019d8:	20000309 	.word	0x20000309
 80019dc:	2000030c 	.word	0x2000030c
 80019e0:	20000310 	.word	0x20000310

080019e4 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <BNO080_getQuatI+0x24>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4a07      	ldr	r2, [pc, #28]	@ (8001a0c <BNO080_getQuatI+0x28>)
 80019f0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f8bb 	bl	8001b74 <BNO080_qToFloat>
 80019fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a02:	eeb0 0a67 	vmov.f32	s0, s15
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200002f4 	.word	0x200002f4
 8001a0c:	20000000 	.word	0x20000000

08001a10 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <BNO080_getQuatJ+0x24>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4a07      	ldr	r2, [pc, #28]	@ (8001a38 <BNO080_getQuatJ+0x28>)
 8001a1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f8a5 	bl	8001b74 <BNO080_qToFloat>
 8001a2a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200002f6 	.word	0x200002f6
 8001a38:	20000000 	.word	0x20000000

08001a3c <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001a40:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <BNO080_getQuatK+0x24>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <BNO080_getQuatK+0x28>)
 8001a48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f88f 	bl	8001b74 <BNO080_qToFloat>
 8001a56:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200002f8 	.word	0x200002f8
 8001a64:	20000000 	.word	0x20000000

08001a68 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001a6c:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <BNO080_getQuatReal+0x24>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <BNO080_getQuatReal+0x28>)
 8001a74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f879 	bl	8001b74 <BNO080_qToFloat>
 8001a82:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a86:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200002fa 	.word	0x200002fa
 8001a90:	20000000 	.word	0x20000000

08001a94 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001a98:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <BNO080_getQuatRadianAccuracy+0x24>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <BNO080_getQuatRadianAccuracy+0x28>)
 8001aa0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f863 	bl	8001b74 <BNO080_qToFloat>
 8001aae:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200002fc 	.word	0x200002fc
 8001abc:	20000000 	.word	0x20000000

08001ac0 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001ac4:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <BNO080_getQuatAccuracy+0x14>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	200002fe 	.word	0x200002fe

08001ad8 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001adc:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <BNO080_getMagX+0x24>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <BNO080_getMagX+0x28>)
 8001ae4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f841 	bl	8001b74 <BNO080_qToFloat>
 8001af2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200002ec 	.word	0x200002ec
 8001b00:	20000002 	.word	0x20000002

08001b04 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001b08:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <BNO080_getMagY+0x24>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4a07      	ldr	r2, [pc, #28]	@ (8001b2c <BNO080_getMagY+0x28>)
 8001b10:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f82b 	bl	8001b74 <BNO080_qToFloat>
 8001b1e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b22:	eeb0 0a67 	vmov.f32	s0, s15
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200002ee 	.word	0x200002ee
 8001b2c:	20000002 	.word	0x20000002

08001b30 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001b34:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <BNO080_getMagZ+0x24>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <BNO080_getMagZ+0x28>)
 8001b3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 f815 	bl	8001b74 <BNO080_qToFloat>
 8001b4a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200002f0 	.word	0x200002f0
 8001b58:	20000002 	.word	0x20000002

08001b5c <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <BNO080_getMagAccuracy+0x14>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	200002f2 	.word	0x200002f2

08001b74 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	ed2d 8b02 	vpush	{d8}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460a      	mov	r2, r1
 8001b82:	80fb      	strh	r3, [r7, #6]
 8001b84:	4613      	mov	r3, r2
 8001b86:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001b94:	797b      	ldrb	r3, [r7, #5]
 8001b96:	425b      	negs	r3, r3
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba0:	eef0 0a67 	vmov.f32	s1, s15
 8001ba4:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001ba8:	f00c fba0 	bl	800e2ec <powf>
 8001bac:	eef0 7a40 	vmov.f32	s15, s0
 8001bb0:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	ecbd 8b02 	vpop	{d8}
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	2005      	movs	r0, #5
 8001bd4:	f000 f83a 	bl	8001c4c <BNO080_setFeatureCommand>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <BNO080_enableGameRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	2200      	movs	r2, #0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	2008      	movs	r0, #8
 8001bf2:	f000 f82b 	bl	8001c4c <BNO080_setFeatureCommand>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	2003      	movs	r0, #3
 8001c10:	f000 f81c 	bl	8001c4c <BNO080_setFeatureCommand>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001c20:	2004      	movs	r0, #4
 8001c22:	f000 f885 	bl	8001d30 <BNO080_sendCalibrateCommand>
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <BNO080_calibrationComplete+0x1c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <BNO080_calibrationComplete+0x10>
		return (1);
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <BNO080_calibrationComplete+0x12>
	return (0);
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	20000310 	.word	0x20000310

08001c4c <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001c5a:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001c5c:	22fd      	movs	r2, #253	@ 0xfd
 8001c5e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001c60:	4a22      	ldr	r2, [pc, #136]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001c72:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001c7e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001c88:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001c92:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	0e1b      	lsrs	r3, r3, #24
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001c9c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001cbc:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001cc6:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001cd0:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0e1b      	lsrs	r3, r3, #24
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <BNO080_setFeatureCommand+0xa0>)
 8001cda:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001cdc:	2111      	movs	r1, #17
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f000 f93a 	bl	8001f58 <BNO080_sendPacket>
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000024c 	.word	0x2000024c

08001cf0 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <BNO080_sendCommand+0x38>)
 8001cfc:	22f2      	movs	r2, #242	@ 0xf2
 8001cfe:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <BNO080_sendCommand+0x3c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	b2d1      	uxtb	r1, r2
 8001d08:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <BNO080_sendCommand+0x3c>)
 8001d0a:	7011      	strb	r1, [r2, #0]
 8001d0c:	4a06      	ldr	r2, [pc, #24]	@ (8001d28 <BNO080_sendCommand+0x38>)
 8001d0e:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001d10:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <BNO080_sendCommand+0x38>)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001d16:	210c      	movs	r1, #12
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f000 f91d 	bl	8001f58 <BNO080_sendPacket>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000024c 	.word	0x2000024c
 8001d2c:	200002d2 	.word	0x200002d2

08001d30 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e006      	b.n	8001d4e <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	4a1d      	ldr	r2, [pc, #116]	@ (8001db8 <BNO080_sendCalibrateCommand+0x88>)
 8001d44:	2100      	movs	r1, #0
 8001d46:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b0b      	cmp	r3, #11
 8001d52:	d9f5      	bls.n	8001d40 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <BNO080_sendCalibrateCommand+0x88>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	70da      	strb	r2, [r3, #3]
 8001d60:	e020      	b.n	8001da4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d103      	bne.n	8001d70 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001d68:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <BNO080_sendCalibrateCommand+0x88>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	711a      	strb	r2, [r3, #4]
 8001d6e:	e019      	b.n	8001da4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d103      	bne.n	8001d7e <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <BNO080_sendCalibrateCommand+0x88>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	715a      	strb	r2, [r3, #5]
 8001d7c:	e012      	b.n	8001da4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d103      	bne.n	8001d8c <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <BNO080_sendCalibrateCommand+0x88>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	71da      	strb	r2, [r3, #7]
 8001d8a:	e00b      	b.n	8001da4 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d108      	bne.n	8001da4 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <BNO080_sendCalibrateCommand+0x88>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001d98:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <BNO080_sendCalibrateCommand+0x88>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <BNO080_sendCalibrateCommand+0x88>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <BNO080_sendCalibrateCommand+0x8c>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001daa:	2007      	movs	r0, #7
 8001dac:	f7ff ffa0 	bl	8001cf0 <BNO080_sendCommand>
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000024c 	.word	0x2000024c
 8001dbc:	20000310 	.word	0x20000310

08001dc0 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	e006      	b.n	8001dda <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <BNO080_requestCalibrationStatus+0x34>)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	71fb      	strb	r3, [r7, #7]
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	2b0b      	cmp	r3, #11
 8001dde:	d9f5      	bls.n	8001dcc <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <BNO080_requestCalibrationStatus+0x34>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001de6:	2007      	movs	r0, #7
 8001de8:	f7ff ff82 	bl	8001cf0 <BNO080_sendCommand>
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000024c 	.word	0x2000024c

08001df8 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dfe:	2303      	movs	r3, #3
 8001e00:	71fb      	strb	r3, [r7, #7]
 8001e02:	e006      	b.n	8001e12 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	4a08      	ldr	r2, [pc, #32]	@ (8001e28 <BNO080_saveCalibration+0x30>)
 8001e08:	2100      	movs	r1, #0
 8001e0a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	71fb      	strb	r3, [r7, #7]
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b0b      	cmp	r3, #11
 8001e16:	d9f5      	bls.n	8001e04 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001e18:	2006      	movs	r0, #6
 8001e1a:	f7ff ff69 	bl	8001cf0 <BNO080_sendCommand>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000024c 	.word	0x2000024c

08001e2c <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	e00c      	b.n	8001e52 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001e38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e3c:	480b      	ldr	r0, [pc, #44]	@ (8001e6c <BNO080_waitForSPI+0x40>)
 8001e3e:	f7ff fa74 	bl	800132a <LL_GPIO_IsInputPinSet>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e00a      	b.n	8001e62 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d1ee      	bne.n	8001e38 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <BNO080_waitForSPI+0x44>)
 8001e5c:	f00a faa4 	bl	800c3a8 <puts>
	return (0);
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	0800efd8 	.word	0x0800efd8

08001e74 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001e7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e7e:	4832      	ldr	r0, [pc, #200]	@ (8001f48 <BNO080_receivePacket+0xd4>)
 8001e80:	f7ff fa53 	bl	800132a <LL_GPIO_IsInputPinSet>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e057      	b.n	8001f3e <BNO080_receivePacket+0xca>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001e8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e92:	482e      	ldr	r0, [pc, #184]	@ (8001f4c <BNO080_receivePacket+0xd8>)
 8001e94:	f7ff fa6c 	bl	8001370 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff fbc1 	bl	8001620 <SPI2_SendByte>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fbbc 	bl	8001620 <SPI2_SendByte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff fbb7 	bl	8001620 <SPI2_SendByte>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff fbb2 	bl	8001620 <SPI2_SendByte>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001ec0:	4a23      	ldr	r2, [pc, #140]	@ (8001f50 <BNO080_receivePacket+0xdc>)
 8001ec2:	7b7b      	ldrb	r3, [r7, #13]
 8001ec4:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001ec6:	4a22      	ldr	r2, [pc, #136]	@ (8001f50 <BNO080_receivePacket+0xdc>)
 8001ec8:	7b3b      	ldrb	r3, [r7, #12]
 8001eca:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001ecc:	4a20      	ldr	r2, [pc, #128]	@ (8001f50 <BNO080_receivePacket+0xdc>)
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <BNO080_receivePacket+0xdc>)
 8001ed4:	7abb      	ldrb	r3, [r7, #10]
 8001ed6:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001ed8:	7b3b      	ldrb	r3, [r7, #12]
 8001eda:	b21b      	sxth	r3, r3
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	7b7b      	ldrb	r3, [r7, #13]
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001ee8:	893b      	ldrh	r3, [r7, #8]
 8001eea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001eee:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001ef0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <BNO080_receivePacket+0x88>
	{
		//Packet is empty
		return (0); //All done
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e020      	b.n	8001f3e <BNO080_receivePacket+0xca>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001efc:	893b      	ldrh	r3, [r7, #8]
 8001efe:	3b04      	subs	r3, #4
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001f04:	2300      	movs	r3, #0
 8001f06:	81fb      	strh	r3, [r7, #14]
 8001f08:	e00e      	b.n	8001f28 <BNO080_receivePacket+0xb4>
	{
		incoming = SPI2_SendByte(0xFF);
 8001f0a:	20ff      	movs	r0, #255	@ 0xff
 8001f0c:	f7ff fb88 	bl	8001620 <SPI2_SendByte>
 8001f10:	4603      	mov	r3, r0
 8001f12:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001f14:	89fb      	ldrh	r3, [r7, #14]
 8001f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f18:	d803      	bhi.n	8001f22 <BNO080_receivePacket+0xae>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	490d      	ldr	r1, [pc, #52]	@ (8001f54 <BNO080_receivePacket+0xe0>)
 8001f1e:	79fa      	ldrb	r2, [r7, #7]
 8001f20:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001f22:	89fb      	ldrh	r3, [r7, #14]
 8001f24:	3301      	adds	r3, #1
 8001f26:	81fb      	strh	r3, [r7, #14]
 8001f28:	89fa      	ldrh	r2, [r7, #14]
 8001f2a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dbeb      	blt.n	8001f0a <BNO080_receivePacket+0x96>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001f32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f36:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <BNO080_receivePacket+0xd8>)
 8001f38:	f7ff fa0c 	bl	8001354 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	20000248 	.word	0x20000248
 8001f54:	2000024c 	.word	0x2000024c

08001f58 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	460a      	mov	r2, r1
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	4613      	mov	r3, r2
 8001f66:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001f6e:	f7ff ff5d 	bl	8001e2c <BNO080_waitForSPI>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e032      	b.n	8001fe2 <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001f7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f80:	481a      	ldr	r0, [pc, #104]	@ (8001fec <BNO080_sendPacket+0x94>)
 8001f82:	f7ff f9f5 	bl	8001370 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001f86:	7bbb      	ldrb	r3, [r7, #14]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fb49 	bl	8001620 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001f8e:	7bbb      	ldrb	r3, [r7, #14]
 8001f90:	121b      	asrs	r3, r3, #8
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fb43 	bl	8001620 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fb3f 	bl	8001620 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	4a12      	ldr	r2, [pc, #72]	@ (8001ff0 <BNO080_sendPacket+0x98>)
 8001fa6:	5cd2      	ldrb	r2, [r2, r3]
 8001fa8:	1c51      	adds	r1, r2, #1
 8001faa:	b2c8      	uxtb	r0, r1
 8001fac:	4910      	ldr	r1, [pc, #64]	@ (8001ff0 <BNO080_sendPacket+0x98>)
 8001fae:	54c8      	strb	r0, [r1, r3]
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7ff fb35 	bl	8001620 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e008      	b.n	8001fce <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff4 <BNO080_sendPacket+0x9c>)
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fb2c 	bl	8001620 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3f2      	bcc.n	8001fbc <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001fd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fda:	4804      	ldr	r0, [pc, #16]	@ (8001fec <BNO080_sendPacket+0x94>)
 8001fdc:	f7ff f9ba 	bl	8001354 <LL_GPIO_SetOutputPin>

	return (1);
 8001fe0:	2301      	movs	r3, #1
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	200002cc 	.word	0x200002cc
 8001ff4:	2000024c 	.word	0x2000024c

08001ff8 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8002004:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002008:	81fb      	strh	r3, [r7, #14]

	for (int i = 0; i < len - 2; i++)
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	e00a      	b.n	8002026 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < len - 2; i++)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3301      	adds	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	3b02      	subs	r3, #2
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	dbef      	blt.n	8002010 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff) == data[30]) && ((chksum >> 8) == data[31]);
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	321e      	adds	r2, #30
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	4293      	cmp	r3, r2
 800203c:	d109      	bne.n	8002052 <iBus_Check_CHKSUM+0x5a>
 800203e:	89fb      	ldrh	r3, [r7, #14]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	b29b      	uxth	r3, r3
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	321f      	adds	r2, #31
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <iBus_Check_CHKSUM+0x5a>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <iBus_Check_CHKSUM+0x5c>
 8002052:	2300      	movs	r3, #0
 8002054:	b2db      	uxtb	r3, r3
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <iBus_Parse>:

void iBus_Parse(unsigned char *data, FSiA6B_iBus* iBus)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3] << 8) & 0x0fff;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3302      	adds	r3, #2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b21a      	sxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3303      	adds	r3, #3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b21b      	sxth	r3, r3
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	b21b      	sxth	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b21b      	sxth	r3, r3
 8002084:	b29b      	uxth	r3, r3
 8002086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208a:	b29a      	uxth	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5] << 8) & 0x0fff;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3304      	adds	r3, #4
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b21a      	sxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3305      	adds	r3, #5
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b21b      	sxth	r3, r3
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	4313      	orrs	r3, r2
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7] << 8) & 0x0fff;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3306      	adds	r3, #6
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3307      	adds	r3, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	4313      	orrs	r3, r2
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9] << 8) & 0x0fff;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3308      	adds	r3, #8
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b21a      	sxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3309      	adds	r3, #9
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11] << 8) & 0x0fff;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	330a      	adds	r3, #10
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b21a      	sxth	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	330b      	adds	r3, #11
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b21b      	sxth	r3, r3
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21b      	sxth	r3, r3
 8002114:	b29b      	uxth	r3, r3
 8002116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211a:	b29a      	uxth	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13] << 8) & 0x0fff;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	330c      	adds	r3, #12
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b21a      	sxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	330d      	adds	r3, #13
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b21b      	sxth	r3, r3
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	b21b      	sxth	r3, r3
 8002134:	4313      	orrs	r3, r2
 8002136:	b21b      	sxth	r3, r3
 8002138:	b29b      	uxth	r3, r3
 800213a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213e:	b29a      	uxth	r2, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	819a      	strh	r2, [r3, #12]

	iBus->FailSafe = data[13] >> 4;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	330d      	adds	r3, #13
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	b2da      	uxtb	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	751a      	strb	r2, [r3, #20]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7d1b      	ldrb	r3, [r3, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_SPI_Enable>:
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	601a      	str	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_SPI_SetStandard>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f023 0210 	bic.w	r2, r3, #16
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	605a      	str	r2, [r3, #4]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_SPI_IsActiveFlag_RXNE>:
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <LL_SPI_IsActiveFlag_RXNE+0x18>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_SPI_IsActiveFlag_TXE>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d101      	bne.n	8002204 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_SPI_ReceiveData8>:
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	330c      	adds	r3, #12
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b2db      	uxtb	r3, r3
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_SPI_TransmitData8>:
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	330c      	adds	r3, #12
 800223e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	701a      	strb	r2, [r3, #0]
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_GPIO_IsInputPinSet>:
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4013      	ands	r3, r2
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	bf0c      	ite	eq
 800226a:	2301      	moveq	r3, #1
 800226c:	2300      	movne	r3, #0
 800226e:	b2db      	uxtb	r3, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_GPIO_SetOutputPin>:
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	619a      	str	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_GPIO_ResetOutputPin>:
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	041a      	lsls	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	619a      	str	r2, [r3, #24]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <LL_AHB1_GRP1_EnableClock>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022c4:	4907      	ldr	r1, [pc, #28]	@ (80022e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4013      	ands	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40023800 	.word	0x40023800

080022e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80022f0:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022f4:	4907      	ldr	r1, [pc, #28]	@ (8002314 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40023800 	.word	0x40023800

08002318 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b090      	sub	sp, #64	@ 0x40
 800231c:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800231e:	f107 0318 	add.w	r3, r7, #24
 8002322:	2228      	movs	r2, #40	@ 0x28
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f00a f91e 	bl	800c568 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	463b      	mov	r3, r7
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]
 800233a:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800233c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002340:	f7ff ffd2 	bl	80022e8 <LL_APB2_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002344:	2001      	movs	r0, #1
 8002346:	f7ff ffb7 	bl	80022b8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800234a:	2004      	movs	r0, #4
 800234c:	f7ff ffb4 	bl	80022b8 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002350:	23e0      	movs	r3, #224	@ 0xe0
 8002352:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002354:	2302      	movs	r3, #2
 8002356:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002364:	2305      	movs	r3, #5
 8002366:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	463b      	mov	r3, r7
 800236a:	4619      	mov	r1, r3
 800236c:	4825      	ldr	r0, [pc, #148]	@ (8002404 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800236e:	f008 fa90 	bl	800a892 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002376:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800237a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002380:	2302      	movs	r3, #2
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002384:	2301      	movs	r3, #1
 8002386:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800238e:	2310      	movs	r3, #16
 8002390:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002392:	2300      	movs	r3, #0
 8002394:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800239a:	230a      	movs	r3, #10
 800239c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800239e:	f107 0318 	add.w	r3, r7, #24
 80023a2:	4619      	mov	r1, r3
 80023a4:	4818      	ldr	r0, [pc, #96]	@ (8002408 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80023a6:	f008 fc52 	bl	800ac4e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80023aa:	2100      	movs	r1, #0
 80023ac:	4816      	ldr	r0, [pc, #88]	@ (8002408 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80023ae:	f7ff fef7 	bl	80021a0 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80023b2:	2110      	movs	r1, #16
 80023b4:	4815      	ldr	r0, [pc, #84]	@ (800240c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80023b6:	f7ff ff6f 	bl	8002298 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80023ba:	2310      	movs	r3, #16
 80023bc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023be:	2301      	movs	r3, #1
 80023c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80023ce:	463b      	mov	r3, r7
 80023d0:	4619      	mov	r1, r3
 80023d2:	480e      	ldr	r0, [pc, #56]	@ (800240c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80023d4:	f008 fa5d 	bl	800a892 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80023d8:	2320      	movs	r3, #32
 80023da:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80023dc:	2300      	movs	r3, #0
 80023de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80023e0:	2301      	movs	r3, #1
 80023e2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80023e4:	463b      	mov	r3, r7
 80023e6:	4619      	mov	r1, r3
 80023e8:	4808      	ldr	r0, [pc, #32]	@ (800240c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80023ea:	f008 fa52 	bl	800a892 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80023ee:	4806      	ldr	r0, [pc, #24]	@ (8002408 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80023f0:	f7ff fec6 	bl	8002180 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80023f4:	2110      	movs	r1, #16
 80023f6:	4805      	ldr	r0, [pc, #20]	@ (800240c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80023f8:	f7ff ff40 	bl	800227c <LL_GPIO_SetOutputPin>
}
 80023fc:	bf00      	nop
 80023fe:	3740      	adds	r7, #64	@ 0x40
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40020000 	.word	0x40020000
 8002408:	40013000 	.word	0x40013000
 800240c:	40020800 	.word	0x40020800

08002410 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800241a:	bf00      	nop
 800241c:	480c      	ldr	r0, [pc, #48]	@ (8002450 <SPI1_SendByte+0x40>)
 800241e:	f7ff fee5 	bl	80021ec <LL_SPI_IsActiveFlag_TXE>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f9      	beq.n	800241c <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	4619      	mov	r1, r3
 800242c:	4808      	ldr	r0, [pc, #32]	@ (8002450 <SPI1_SendByte+0x40>)
 800242e:	f7ff fefe 	bl	800222e <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8002432:	bf00      	nop
 8002434:	4806      	ldr	r0, [pc, #24]	@ (8002450 <SPI1_SendByte+0x40>)
 8002436:	f7ff fec6 	bl	80021c6 <LL_SPI_IsActiveFlag_RXNE>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f9      	beq.n	8002434 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002440:	4803      	ldr	r0, [pc, #12]	@ (8002450 <SPI1_SendByte+0x40>)
 8002442:	f7ff fee6 	bl	8002212 <LL_SPI_ReceiveData8>
 8002446:	4603      	mov	r3, r0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40013000 	.word	0x40013000

08002454 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800245e:	2110      	movs	r1, #16
 8002460:	480b      	ldr	r0, [pc, #44]	@ (8002490 <ICM20602_Readbyte+0x3c>)
 8002462:	f7ff ff19 	bl	8002298 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ffce 	bl	8002410 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002474:	2000      	movs	r0, #0
 8002476:	f7ff ffcb 	bl	8002410 <SPI1_SendByte>
 800247a:	4603      	mov	r3, r0
 800247c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800247e:	2110      	movs	r1, #16
 8002480:	4803      	ldr	r0, [pc, #12]	@ (8002490 <ICM20602_Readbyte+0x3c>)
 8002482:	f7ff fefb 	bl	800227c <LL_GPIO_SetOutputPin>

	return val;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40020800 	.word	0x40020800

08002494 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	603a      	str	r2, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
 80024a0:	460b      	mov	r3, r1
 80024a2:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 80024a8:	2110      	movs	r1, #16
 80024aa:	4810      	ldr	r0, [pc, #64]	@ (80024ec <ICM20602_Readbytes+0x58>)
 80024ac:	f7ff fef4 	bl	8002298 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ffa9 	bl	8002410 <SPI1_SendByte>
	while(i < len)
 80024be:	e009      	b.n	80024d4 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	60fa      	str	r2, [r7, #12]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	18d4      	adds	r4, r2, r3
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7ff ffa0 	bl	8002410 <SPI1_SendByte>
 80024d0:	4603      	mov	r3, r0
 80024d2:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80024d4:	79bb      	ldrb	r3, [r7, #6]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3f1      	bcc.n	80024c0 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 80024dc:	2110      	movs	r1, #16
 80024de:	4803      	ldr	r0, [pc, #12]	@ (80024ec <ICM20602_Readbytes+0x58>)
 80024e0:	f7ff fecc 	bl	800227c <LL_GPIO_SetOutputPin>
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	40020800 	.word	0x40020800

080024f0 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	460a      	mov	r2, r1
 80024fa:	71fb      	strb	r3, [r7, #7]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8002500:	2110      	movs	r1, #16
 8002502:	480b      	ldr	r0, [pc, #44]	@ (8002530 <ICM20602_Writebyte+0x40>)
 8002504:	f7ff fec8 	bl	8002298 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800250e:	b2db      	uxtb	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff7d 	bl	8002410 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8002516:	79bb      	ldrb	r3, [r7, #6]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff79 	bl	8002410 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 800251e:	2110      	movs	r1, #16
 8002520:	4803      	ldr	r0, [pc, #12]	@ (8002530 <ICM20602_Writebyte+0x40>)
 8002522:	f7ff feab 	bl	800227c <LL_GPIO_SetOutputPin>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40020800 	.word	0x40020800

08002534 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002548:	463b      	mov	r3, r7
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	809a      	strh	r2, [r3, #4]

	ICM20602_GPIO_SPI_Initialization();
 8002550:	f7ff fee2 	bl	8002318 <ICM20602_GPIO_SPI_Initialization>

	printf("Checking ICM20602...");
 8002554:	4833      	ldr	r0, [pc, #204]	@ (8002624 <ICM20602_Initialization+0xf0>)
 8002556:	f009 febf 	bl	800c2d8 <iprintf>

	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I);
 800255a:	2075      	movs	r0, #117	@ 0x75
 800255c:	f7ff ff7a 	bl	8002454 <ICM20602_Readbyte>
 8002560:	4603      	mov	r3, r0
 8002562:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b12      	cmp	r3, #18
 8002568:	d105      	bne.n	8002576 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	4619      	mov	r1, r3
 800256e:	482e      	ldr	r0, [pc, #184]	@ (8002628 <ICM20602_Initialization+0xf4>)
 8002570:	f009 feb2 	bl	800c2d8 <iprintf>
 8002574:	e012      	b.n	800259c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b12      	cmp	r3, #18
 800257a:	d00f      	beq.n	800259c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800257c:	2075      	movs	r0, #117	@ 0x75
 800257e:	f7ff ff69 	bl	8002454 <ICM20602_Readbyte>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b12      	cmp	r3, #18
 800258a:	d007      	beq.n	800259c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2212      	movs	r2, #18
 8002590:	4619      	mov	r1, r3
 8002592:	4826      	ldr	r0, [pc, #152]	@ (800262c <ICM20602_Initialization+0xf8>)
 8002594:	f009 fea0 	bl	800c2d8 <iprintf>
			return 1; //ERROR
 8002598:	2301      	movs	r3, #1
 800259a:	e03f      	b.n	800261c <ICM20602_Initialization+0xe8>
		}
	}

	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 800259c:	2180      	movs	r1, #128	@ 0x80
 800259e:	206b      	movs	r0, #107	@ 0x6b
 80025a0:	f7ff ffa6 	bl	80024f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025a4:	2032      	movs	r0, #50	@ 0x32
 80025a6:	f003 ffe1 	bl	800656c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80025aa:	2101      	movs	r1, #1
 80025ac:	206b      	movs	r0, #107	@ 0x6b
 80025ae:	f7ff ff9f 	bl	80024f0 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 80025b2:	2032      	movs	r0, #50	@ 0x32
 80025b4:	f003 ffda 	bl	800656c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 80025b8:	2138      	movs	r1, #56	@ 0x38
 80025ba:	206c      	movs	r0, #108	@ 0x6c
 80025bc:	f7ff ff98 	bl	80024f0 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 80025c0:	2032      	movs	r0, #50	@ 0x32
 80025c2:	f003 ffd3 	bl	800656c <HAL_Delay>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80025c6:	2100      	movs	r1, #0
 80025c8:	2019      	movs	r0, #25
 80025ca:	f7ff ff91 	bl	80024f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025ce:	2032      	movs	r0, #50	@ 0x32
 80025d0:	f003 ffcc 	bl	800656c <HAL_Delay>

	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80025d4:	2105      	movs	r1, #5
 80025d6:	201a      	movs	r0, #26
 80025d8:	f7ff ff8a 	bl	80024f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025dc:	2032      	movs	r0, #50	@ 0x32
 80025de:	f003 ffc5 	bl	800656c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80025e2:	2118      	movs	r1, #24
 80025e4:	201b      	movs	r0, #27
 80025e6:	f7ff ff83 	bl	80024f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025ea:	2032      	movs	r0, #50	@ 0x32
 80025ec:	f003 ffbe 	bl	800656c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80025f0:	2118      	movs	r1, #24
 80025f2:	201c      	movs	r0, #28
 80025f4:	f7ff ff7c 	bl	80024f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 80025f8:	2032      	movs	r0, #50	@ 0x32
 80025fa:	f003 ffb7 	bl	800656c <HAL_Delay>

	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80025fe:	2103      	movs	r1, #3
 8002600:	201d      	movs	r0, #29
 8002602:	f7ff ff75 	bl	80024f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002606:	2032      	movs	r0, #50	@ 0x32
 8002608:	f003 ffb0 	bl	800656c <HAL_Delay>

	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 800260c:	2101      	movs	r1, #1
 800260e:	2038      	movs	r0, #56	@ 0x38
 8002610:	f7ff ff6e 	bl	80024f0 <ICM20602_Writebyte>
	HAL_Delay(50);
 8002614:	2032      	movs	r0, #50	@ 0x32
 8002616:	f003 ffa9 	bl	800656c <HAL_Delay>
//
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	0800efec 	.word	0x0800efec
 8002628:	0800f004 	.word	0x0800f004
 800262c:	0800f028 	.word	0x0800f028

08002630 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	461a      	mov	r2, r3
 800263e:	2106      	movs	r1, #6
 8002640:	2043      	movs	r0, #67	@ 0x43
 8002642:	f7ff ff27 	bl	8002494 <ICM20602_Readbytes>

	gyro[0] = ((data[0] << 8) | data[1]);
 8002646:	7a3b      	ldrb	r3, [r7, #8]
 8002648:	b21b      	sxth	r3, r3
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	b21a      	sxth	r2, r3
 800264e:	7a7b      	ldrb	r3, [r7, #9]
 8002650:	b21b      	sxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b21a      	sxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 800265a:	7abb      	ldrb	r3, [r7, #10]
 800265c:	b21b      	sxth	r3, r3
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	b219      	sxth	r1, r3
 8002662:	7afb      	ldrb	r3, [r7, #11]
 8002664:	b21a      	sxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3302      	adds	r3, #2
 800266a:	430a      	orrs	r2, r1
 800266c:	b212      	sxth	r2, r2
 800266e:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 8002670:	7b3b      	ldrb	r3, [r7, #12]
 8002672:	b21b      	sxth	r3, r3
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	b219      	sxth	r1, r3
 8002678:	7b7b      	ldrb	r3, [r7, #13]
 800267a:	b21a      	sxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	430a      	orrs	r2, r1
 8002682:	b212      	sxth	r2, r2
 8002684:	801a      	strh	r2, [r3, #0]
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8002694:	2120      	movs	r1, #32
 8002696:	4803      	ldr	r0, [pc, #12]	@ (80026a4 <ICM20602_DataReady+0x14>)
 8002698:	f7ff fddb 	bl	8002252 <LL_GPIO_IsInputPinSet>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40020800 	.word	0x40020800

080026a8 <LL_SPI_Enable>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	601a      	str	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_SPI_SetStandard>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f023 0210 	bic.w	r2, r3, #16
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	605a      	str	r2, [r3, #4]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_SPI_IsActiveFlag_RXNE>:
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_SPI_IsActiveFlag_TXE>:
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b02      	cmp	r3, #2
 8002726:	d101      	bne.n	800272c <LL_SPI_IsActiveFlag_TXE+0x18>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_SPI_ReceiveData8>:
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	330c      	adds	r3, #12
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b2db      	uxtb	r3, r3
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_SPI_TransmitData8>:
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	330c      	adds	r3, #12
 8002766:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	701a      	strb	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_GPIO_IsInputPinSet>:
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4013      	ands	r3, r2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	bf0c      	ite	eq
 8002792:	2301      	moveq	r3, #1
 8002794:	2300      	movne	r3, #0
 8002796:	b2db      	uxtb	r3, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_GPIO_SetOutputPin>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	619a      	str	r2, [r3, #24]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_GPIO_ResetOutputPin>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <LL_AHB1_GRP1_EnableClock>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ec:	4907      	ldr	r1, [pc, #28]	@ (800280c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4013      	ands	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40023800 	.word	0x40023800

08002810 <LL_APB1_GRP1_EnableClock>:
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <LL_APB1_GRP1_EnableClock+0x2c>)
 800281a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800281c:	4907      	ldr	r1, [pc, #28]	@ (800283c <LL_APB1_GRP1_EnableClock+0x2c>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4313      	orrs	r3, r2
 8002822:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40023800 	.word	0x40023800

08002840 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b090      	sub	sp, #64	@ 0x40
 8002844:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002846:	f107 0318 	add.w	r3, r7, #24
 800284a:	2228      	movs	r2, #40	@ 0x28
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f009 fe8a 	bl	800c568 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	463b      	mov	r3, r7
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
 8002860:	611a      	str	r2, [r3, #16]
 8002862:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002864:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002868:	f7ff ffd2 	bl	8002810 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800286c:	2002      	movs	r0, #2
 800286e:	f7ff ffb7 	bl	80027e0 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002872:	2338      	movs	r3, #56	@ 0x38
 8002874:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002876:	2302      	movs	r3, #2
 8002878:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002886:	2306      	movs	r3, #6
 8002888:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288a:	463b      	mov	r3, r7
 800288c:	4619      	mov	r1, r3
 800288e:	4826      	ldr	r0, [pc, #152]	@ (8002928 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002890:	f007 ffff 	bl	800a892 <LL_GPIO_Init>

	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002898:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800289c:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80028a2:	2302      	movs	r3, #2
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80028aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 80028b0:	2308      	movs	r3, #8
 80028b2:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80028b4:	2300      	movs	r3, #0
 80028b6:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80028bc:	230a      	movs	r3, #10
 80028be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 80028c0:	f107 0318 	add.w	r3, r7, #24
 80028c4:	4619      	mov	r1, r3
 80028c6:	4819      	ldr	r0, [pc, #100]	@ (800292c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80028c8:	f008 f9c1 	bl	800ac4e <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80028cc:	2100      	movs	r1, #0
 80028ce:	4817      	ldr	r0, [pc, #92]	@ (800292c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80028d0:	f7ff fefa 	bl	80026c8 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 80028d4:	2140      	movs	r1, #64	@ 0x40
 80028d6:	4814      	ldr	r0, [pc, #80]	@ (8002928 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80028d8:	f7ff ff72 	bl	80027c0 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 80028dc:	2340      	movs	r3, #64	@ 0x40
 80028de:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028e0:	2301      	movs	r3, #1
 80028e2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 80028f0:	463b      	mov	r3, r7
 80028f2:	4619      	mov	r1, r3
 80028f4:	480c      	ldr	r0, [pc, #48]	@ (8002928 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80028f6:	f007 ffcc 	bl	800a892 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 80028fa:	2380      	movs	r3, #128	@ 0x80
 80028fc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002902:	2301      	movs	r3, #1
 8002904:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 8002906:	463b      	mov	r3, r7
 8002908:	4619      	mov	r1, r3
 800290a:	4807      	ldr	r0, [pc, #28]	@ (8002928 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800290c:	f007 ffc1 	bl	800a892 <LL_GPIO_Init>

	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8002910:	4806      	ldr	r0, [pc, #24]	@ (800292c <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8002912:	f7ff fec9 	bl	80026a8 <LL_SPI_Enable>

	CHIP_DESELECT(LPS22HH);
 8002916:	2140      	movs	r1, #64	@ 0x40
 8002918:	4803      	ldr	r0, [pc, #12]	@ (8002928 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800291a:	f7ff ff43 	bl	80027a4 <LL_GPIO_SetOutputPin>
}
 800291e:	bf00      	nop
 8002920:	3740      	adds	r7, #64	@ 0x40
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40020400 	.word	0x40020400
 800292c:	40003c00 	.word	0x40003c00

08002930 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 800293a:	bf00      	nop
 800293c:	480c      	ldr	r0, [pc, #48]	@ (8002970 <SPI3_SendByte+0x40>)
 800293e:	f7ff fee9 	bl	8002714 <LL_SPI_IsActiveFlag_TXE>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f9      	beq.n	800293c <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	4619      	mov	r1, r3
 800294c:	4808      	ldr	r0, [pc, #32]	@ (8002970 <SPI3_SendByte+0x40>)
 800294e:	f7ff ff02 	bl	8002756 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 8002952:	bf00      	nop
 8002954:	4806      	ldr	r0, [pc, #24]	@ (8002970 <SPI3_SendByte+0x40>)
 8002956:	f7ff feca 	bl	80026ee <LL_SPI_IsActiveFlag_RXNE>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f9      	beq.n	8002954 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 8002960:	4803      	ldr	r0, [pc, #12]	@ (8002970 <SPI3_SendByte+0x40>)
 8002962:	f7ff feea 	bl	800273a <LL_SPI_ReceiveData8>
 8002966:	4603      	mov	r3, r0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40003c00 	.word	0x40003c00

08002974 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 800297e:	2140      	movs	r1, #64	@ 0x40
 8002980:	480b      	ldr	r0, [pc, #44]	@ (80029b0 <LPS22HH_Readbyte+0x3c>)
 8002982:	f7ff ff1d 	bl	80027c0 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ffce 	bl	8002930 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8002994:	2000      	movs	r0, #0
 8002996:	f7ff ffcb 	bl	8002930 <SPI3_SendByte>
 800299a:	4603      	mov	r3, r0
 800299c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 800299e:	2140      	movs	r1, #64	@ 0x40
 80029a0:	4803      	ldr	r0, [pc, #12]	@ (80029b0 <LPS22HH_Readbyte+0x3c>)
 80029a2:	f7ff feff 	bl	80027a4 <LL_GPIO_SetOutputPin>

	return val;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40020400 	.word	0x40020400

080029b4 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	603a      	str	r2, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
 80029c0:	460b      	mov	r3, r1
 80029c2:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 80029c8:	2140      	movs	r1, #64	@ 0x40
 80029ca:	4810      	ldr	r0, [pc, #64]	@ (8002a0c <LPS22HH_Readbytes+0x58>)
 80029cc:	f7ff fef8 	bl	80027c0 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ffa9 	bl	8002930 <SPI3_SendByte>
	while(i < len)
 80029de:	e009      	b.n	80029f4 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	60fa      	str	r2, [r7, #12]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	18d4      	adds	r4, r2, r3
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7ff ffa0 	bl	8002930 <SPI3_SendByte>
 80029f0:	4603      	mov	r3, r0
 80029f2:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80029f4:	79bb      	ldrb	r3, [r7, #6]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d3f1      	bcc.n	80029e0 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 80029fc:	2140      	movs	r1, #64	@ 0x40
 80029fe:	4803      	ldr	r0, [pc, #12]	@ (8002a0c <LPS22HH_Readbytes+0x58>)
 8002a00:	f7ff fed0 	bl	80027a4 <LL_GPIO_SetOutputPin>
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd90      	pop	{r4, r7, pc}
 8002a0c:	40020400 	.word	0x40020400

08002a10 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	460a      	mov	r2, r1
 8002a1a:	71fb      	strb	r3, [r7, #7]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002a20:	2140      	movs	r1, #64	@ 0x40
 8002a22:	480b      	ldr	r0, [pc, #44]	@ (8002a50 <LPS22HH_Writebyte+0x40>)
 8002a24:	f7ff fecc 	bl	80027c0 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff7d 	bl	8002930 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8002a36:	79bb      	ldrb	r3, [r7, #6]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff79 	bl	8002930 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002a3e:	2140      	movs	r1, #64	@ 0x40
 8002a40:	4803      	ldr	r0, [pc, #12]	@ (8002a50 <LPS22HH_Writebyte+0x40>)
 8002a42:	f7ff feaf 	bl	80027a4 <LL_GPIO_SetOutputPin>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40020400 	.word	0x40020400

08002a54 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	71fb      	strb	r3, [r7, #7]

	LPS22HH_GPIO_SPI_Initialization();
 8002a5e:	f7ff feef 	bl	8002840 <LPS22HH_GPIO_SPI_Initialization>

	printf("Checking LPS22HH...\n");
 8002a62:	4841      	ldr	r0, [pc, #260]	@ (8002b68 <LPS22HH_Initialization+0x114>)
 8002a64:	f009 fca0 	bl	800c3a8 <puts>

	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F);
 8002a68:	200f      	movs	r0, #15
 8002a6a:	f7ff ff83 	bl	8002974 <LPS22HH_Readbyte>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a76:	d105      	bne.n	8002a84 <LPS22HH_Initialization+0x30>
	{
		printf("LPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	483b      	ldr	r0, [pc, #236]	@ (8002b6c <LPS22HH_Initialization+0x118>)
 8002a7e:	f009 fc2b 	bl	800c2d8 <iprintf>
 8002a82:	e012      	b.n	8002aaa <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a88:	d00f      	beq.n	8002aaa <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002a8a:	200f      	movs	r0, #15
 8002a8c:	f7ff ff72 	bl	8002974 <LPS22HH_Readbyte>
 8002a90:	4603      	mov	r3, r0
 8002a92:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a98:	d007      	beq.n	8002aaa <LPS22HH_Initialization+0x56>
			printf( "LPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	22b3      	movs	r2, #179	@ 0xb3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4833      	ldr	r0, [pc, #204]	@ (8002b70 <LPS22HH_Initialization+0x11c>)
 8002aa2:	f009 fc19 	bl	800c2d8 <iprintf>
			return 1; //ERROR
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e059      	b.n	8002b5e <LPS22HH_Initialization+0x10a>
		}
	}

	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002aaa:	2104      	movs	r1, #4
 8002aac:	2011      	movs	r0, #17
 8002aae:	f7ff ffaf 	bl	8002a10 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8002ab2:	2011      	movs	r0, #17
 8002ab4:	f7ff ff5e 	bl	8002974 <LPS22HH_Readbyte>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f7      	bne.n	8002ab2 <LPS22HH_Initialization+0x5e>

	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002ac2:	2010      	movs	r0, #16
 8002ac4:	f7ff ff56 	bl	8002974 <LPS22HH_Readbyte>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002acc:	79bb      	ldrb	r3, [r7, #6]
 8002ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ad2:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002ad4:	79bb      	ldrb	r3, [r7, #6]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	2010      	movs	r0, #16
 8002ada:	f7ff ff99 	bl	8002a10 <LPS22HH_Writebyte>
	temp_reg = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002ae2:	2010      	movs	r0, #16
 8002ae4:	f7ff ff46 	bl	8002974 <LPS22HH_Readbyte>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);

	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002aec:	2010      	movs	r0, #16
 8002aee:	f7ff ff41 	bl	8002974 <LPS22HH_Readbyte>
 8002af2:	4603      	mov	r3, r0
 8002af4:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002af6:	79bb      	ldrb	r3, [r7, #6]
 8002af8:	f043 030c 	orr.w	r3, r3, #12
 8002afc:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002afe:	79bb      	ldrb	r3, [r7, #6]
 8002b00:	4619      	mov	r1, r3
 8002b02:	2010      	movs	r0, #16
 8002b04:	f7ff ff84 	bl	8002a10 <LPS22HH_Writebyte>

	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002b08:	2010      	movs	r0, #16
 8002b0a:	f7ff ff33 	bl	8002974 <LPS22HH_Readbyte>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002b1a:	79bb      	ldrb	r3, [r7, #6]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	2010      	movs	r0, #16
 8002b20:	f7ff ff76 	bl	8002a10 <LPS22HH_Writebyte>

	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002b24:	2011      	movs	r0, #17
 8002b26:	f7ff ff25 	bl	8002974 <LPS22HH_Readbyte>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002b2e:	79bb      	ldrb	r3, [r7, #6]
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002b36:	79bb      	ldrb	r3, [r7, #6]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	2011      	movs	r0, #17
 8002b3c:	f7ff ff68 	bl	8002a10 <LPS22HH_Writebyte>

	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002b40:	2012      	movs	r0, #18
 8002b42:	f7ff ff17 	bl	8002974 <LPS22HH_Readbyte>
 8002b46:	4603      	mov	r3, r0
 8002b48:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002b4a:	79bb      	ldrb	r3, [r7, #6]
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002b52:	79bb      	ldrb	r3, [r7, #6]
 8002b54:	4619      	mov	r1, r3
 8002b56:	2012      	movs	r0, #18
 8002b58:	f7ff ff5a 	bl	8002a10 <LPS22HH_Writebyte>

	return 0; //OK
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	0800f054 	.word	0x0800f054
 8002b6c:	0800f068 	.word	0x0800f068
 8002b70:	0800f08c 	.word	0x0800f08c

08002b74 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002b78:	2180      	movs	r1, #128	@ 0x80
 8002b7a:	4803      	ldr	r0, [pc, #12]	@ (8002b88 <LPS22HH_DataReady+0x14>)
 8002b7c:	f7ff fdfd 	bl	800277a <LL_GPIO_IsInputPinSet>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40020400 	.word	0x40020400

08002b8c <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	2103      	movs	r1, #3
 8002b98:	2028      	movs	r0, #40	@ 0x28
 8002b9a:	f7ff ff0b 	bl	80029b4 <LPS22HH_Readbytes>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	202b      	movs	r0, #43	@ 0x2b
 8002bb4:	f7ff fefe 	bl	80029b4 <LPS22HH_Readbytes>
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <getAltitude2>:
{
	return (powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8002bca:	edc7 0a00 	vstr	s1, [r7]
	return ((powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0f) * (temperature + 273.15f)) / 0.0065f;
 8002bce:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002c18 <getAltitude2+0x58>
 8002bd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bda:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8002c1c <getAltitude2+0x5c>
 8002bde:	eeb0 0a47 	vmov.f32	s0, s14
 8002be2:	f00b fb83 	bl	800e2ec <powf>
 8002be6:	eef0 7a40 	vmov.f32	s15, s0
 8002bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002bf2:	edd7 7a00 	vldr	s15, [r7]
 8002bf6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002c20 <getAltitude2+0x60>
 8002bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c02:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002c24 <getAltitude2+0x64>
 8002c06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c0a:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	447d5000 	.word	0x447d5000
 8002c1c:	3e42c9b7 	.word	0x3e42c9b7
 8002c20:	43889333 	.word	0x43889333
 8002c24:	3bd4fdf4 	.word	0x3bd4fdf4

08002c28 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	@ 0x28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float roll, pitch, yaw;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	ed93 7a00 	vldr	s14, [r3]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	edd3 6a00 	vldr	s13, [r3]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	edd3 6a00 	vldr	s13, [r3]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3308      	adds	r3, #8
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	330c      	adds	r3, #12
 8002c74:	edd3 6a00 	vldr	s13, [r3]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8c:	f000 f900 	bl	8002e90 <invSqrt>
 8002c90:	ed87 0a07 	vstr	s0, [r7, #28]

	q1 = q[0] * norm; //x
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca2:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	edd3 7a00 	vldr	s15, [r3]
 8002cae:	ed97 7a07 	vldr	s14, [r7, #28]
 8002cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb6:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cca:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	330c      	adds	r3, #12
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cde:	edc7 7a03 	vstr	s15, [r7, #12]

	pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8002ce2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ce6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cee:	edd7 6a06 	vldr	s13, [r7, #24]
 8002cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d06:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002d0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d16:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d22:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d26:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d2e:	eef0 0a67 	vmov.f32	s1, s15
 8002d32:	eeb0 0a66 	vmov.f32	s0, s13
 8002d36:	f00b fad7 	bl	800e2e8 <atan2f>
 8002d3a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8002d3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d4a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d62:	f00b fa95 	bl	800e290 <asinf>
 8002d66:	eef0 7a40 	vmov.f32	s15, s0
 8002d6a:	eef1 7a67 	vneg.f32	s15, s15
 8002d6e:	edc7 7a02 	vstr	s15, [r7, #8]
	yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8002d72:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d76:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002d82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d92:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d96:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002d9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002da2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002da6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002daa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002dae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002db2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002db6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbe:	eef0 0a67 	vmov.f32	s1, s15
 8002dc2:	eeb0 0a66 	vmov.f32	s0, s13
 8002dc6:	f00b fa8f 	bl	800e2e8 <atan2f>
 8002dca:	ed87 0a08 	vstr	s0, [r7, #32]

	pitch *= _180_DIV_PI;
 8002dce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002dd2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002e78 <Quaternion_Update+0x250>
 8002dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dda:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	roll  *= _180_DIV_PI;
 8002dde:	edd7 7a02 	vldr	s15, [r7, #8]
 8002de2:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002e78 <Quaternion_Update+0x250>
 8002de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dea:	edc7 7a02 	vstr	s15, [r7, #8]
	yaw   *= _180_DIV_PI;
 8002dee:	edd7 7a08 	vldr	s15, [r7, #32]
 8002df2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002e78 <Quaternion_Update+0x250>
 8002df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dfa:	edc7 7a08 	vstr	s15, [r7, #32]

	if(yaw >=0)
 8002dfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0a:	db08      	blt.n	8002e1e <Quaternion_Update+0x1f6>
		yaw = 360.f - yaw;
 8002e0c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002e7c <Quaternion_Update+0x254>
 8002e10:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e18:	edc7 7a08 	vstr	s15, [r7, #32]
 8002e1c:	e005      	b.n	8002e2a <Quaternion_Update+0x202>
	else
		yaw = -yaw;
 8002e1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e22:	eef1 7a67 	vneg.f32	s15, s15
 8002e26:	edc7 7a08 	vstr	s15, [r7, #32]


	if(pitch >=0)
 8002e2a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e36:	db08      	blt.n	8002e4a <Quaternion_Update+0x222>
		pitch = 180.f - pitch;
 8002e38:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002e80 <Quaternion_Update+0x258>
 8002e3c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e44:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002e48:	e009      	b.n	8002e5e <Quaternion_Update+0x236>
	else
		pitch = -(pitch+ 180.f);
 8002e4a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e4e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002e80 <Quaternion_Update+0x258>
 8002e52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e56:	eef1 7a67 	vneg.f32	s15, s15
 8002e5a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	BNO080_Roll = roll;
 8002e5e:	4a09      	ldr	r2, [pc, #36]	@ (8002e84 <Quaternion_Update+0x25c>)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	6013      	str	r3, [r2, #0]
	BNO080_Pitch = pitch;
 8002e64:	4a08      	ldr	r2, [pc, #32]	@ (8002e88 <Quaternion_Update+0x260>)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	6013      	str	r3, [r2, #0]
	BNO080_Yaw = yaw;
 8002e6a:	4a08      	ldr	r2, [pc, #32]	@ (8002e8c <Quaternion_Update+0x264>)
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	6013      	str	r3, [r2, #0]
}
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	@ 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	42652ee1 	.word	0x42652ee1
 8002e7c:	43b40000 	.word	0x43b40000
 8002e80:	43340000 	.word	0x43340000
 8002e84:	20000364 	.word	0x20000364
 8002e88:	20000368 	.word	0x20000368
 8002e8c:	2000036c 	.word	0x2000036c

08002e90 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002e9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e9e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002eae:	f107 0310 	add.w	r3, r7, #16
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	105a      	asrs	r2, r3, #1
 8002eba:	4b12      	ldr	r3, [pc, #72]	@ (8002f04 <invSqrt+0x74>)
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002ec8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ecc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ed0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002edc:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002ee0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ee4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eec:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	ee07 3a90 	vmov	s15, r3
}
 8002ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	5f3759df 	.word	0x5f3759df

08002f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4907      	ldr	r1, [pc, #28]	@ (8002f5c <__NVIC_EnableIRQ+0x38>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	@ (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	@ (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
         );
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	@ 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_SPI_SetStandard>:
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 0210 	bic.w	r2, r3, #16
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	605a      	str	r2, [r3, #4]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	601a      	str	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	601a      	str	r2, [r3, #0]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1a      	ldr	r2, [r3, #32]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	401a      	ands	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d01c      	beq.n	8003112 <LL_TIM_OC_EnableFast+0x4a>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d017      	beq.n	800310e <LL_TIM_OC_EnableFast+0x46>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d012      	beq.n	800310a <LL_TIM_OC_EnableFast+0x42>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b40      	cmp	r3, #64	@ 0x40
 80030e8:	d00d      	beq.n	8003106 <LL_TIM_OC_EnableFast+0x3e>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f0:	d007      	beq.n	8003102 <LL_TIM_OC_EnableFast+0x3a>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f8:	d101      	bne.n	80030fe <LL_TIM_OC_EnableFast+0x36>
 80030fa:	2305      	movs	r3, #5
 80030fc:	e00a      	b.n	8003114 <LL_TIM_OC_EnableFast+0x4c>
 80030fe:	2306      	movs	r3, #6
 8003100:	e008      	b.n	8003114 <LL_TIM_OC_EnableFast+0x4c>
 8003102:	2304      	movs	r3, #4
 8003104:	e006      	b.n	8003114 <LL_TIM_OC_EnableFast+0x4c>
 8003106:	2303      	movs	r3, #3
 8003108:	e004      	b.n	8003114 <LL_TIM_OC_EnableFast+0x4c>
 800310a:	2302      	movs	r3, #2
 800310c:	e002      	b.n	8003114 <LL_TIM_OC_EnableFast+0x4c>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <LL_TIM_OC_EnableFast+0x4c>
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3318      	adds	r3, #24
 800311a:	4619      	mov	r1, r3
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	4a0a      	ldr	r2, [pc, #40]	@ (8003148 <LL_TIM_OC_EnableFast+0x80>)
 8003120:	5cd3      	ldrb	r3, [r2, r3]
 8003122:	440b      	add	r3, r1
 8003124:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	4907      	ldr	r1, [pc, #28]	@ (800314c <LL_TIM_OC_EnableFast+0x84>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	4619      	mov	r1, r3
 8003132:	2304      	movs	r3, #4
 8003134:	408b      	lsls	r3, r1
 8003136:	431a      	orrs	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	601a      	str	r2, [r3, #0]

}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	0800f350 	.word	0x0800f350
 800314c:	0800f358 	.word	0x0800f358

08003150 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d01c      	beq.n	800319a <LL_TIM_OC_EnablePreload+0x4a>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b04      	cmp	r3, #4
 8003164:	d017      	beq.n	8003196 <LL_TIM_OC_EnablePreload+0x46>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b10      	cmp	r3, #16
 800316a:	d012      	beq.n	8003192 <LL_TIM_OC_EnablePreload+0x42>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b40      	cmp	r3, #64	@ 0x40
 8003170:	d00d      	beq.n	800318e <LL_TIM_OC_EnablePreload+0x3e>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003178:	d007      	beq.n	800318a <LL_TIM_OC_EnablePreload+0x3a>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003180:	d101      	bne.n	8003186 <LL_TIM_OC_EnablePreload+0x36>
 8003182:	2305      	movs	r3, #5
 8003184:	e00a      	b.n	800319c <LL_TIM_OC_EnablePreload+0x4c>
 8003186:	2306      	movs	r3, #6
 8003188:	e008      	b.n	800319c <LL_TIM_OC_EnablePreload+0x4c>
 800318a:	2304      	movs	r3, #4
 800318c:	e006      	b.n	800319c <LL_TIM_OC_EnablePreload+0x4c>
 800318e:	2303      	movs	r3, #3
 8003190:	e004      	b.n	800319c <LL_TIM_OC_EnablePreload+0x4c>
 8003192:	2302      	movs	r3, #2
 8003194:	e002      	b.n	800319c <LL_TIM_OC_EnablePreload+0x4c>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <LL_TIM_OC_EnablePreload+0x4c>
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3318      	adds	r3, #24
 80031a2:	4619      	mov	r1, r3
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	4a0a      	ldr	r2, [pc, #40]	@ (80031d0 <LL_TIM_OC_EnablePreload+0x80>)
 80031a8:	5cd3      	ldrb	r3, [r2, r3]
 80031aa:	440b      	add	r3, r1
 80031ac:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	4907      	ldr	r1, [pc, #28]	@ (80031d4 <LL_TIM_OC_EnablePreload+0x84>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	4619      	mov	r1, r3
 80031ba:	2308      	movs	r3, #8
 80031bc:	408b      	lsls	r3, r1
 80031be:	431a      	orrs	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	601a      	str	r2, [r3, #0]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	0800f350 	.word	0x0800f350
 80031d4:	0800f358 	.word	0x0800f358

080031d8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031ea:	f023 0307 	bic.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	609a      	str	r2, [r3, #8]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	609a      	str	r2, [r3, #8]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	60da      	str	r2, [r3, #12]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	615a      	str	r2, [r3, #20]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	330c      	adds	r3, #12
 80032c0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f043 0320 	orr.w	r3, r3, #32
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	330c      	adds	r3, #12
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	61ba      	str	r2, [r7, #24]
 80032da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6979      	ldr	r1, [r7, #20]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	613b      	str	r3, [r7, #16]
   return(result);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e7      	bne.n	80032bc <LL_USART_EnableIT_RXNE+0x8>
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	3724      	adds	r7, #36	@ 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	605a      	str	r2, [r3, #4]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_GPIO_SetOutputPin>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	619a      	str	r2, [r3, #24]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LL_GPIO_ResetOutputPin>:
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	041a      	lsls	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	619a      	str	r2, [r3, #24]
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	4013      	ands	r3, r2
 8003368:	041a      	lsls	r2, r3, #16
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	43d9      	mvns	r1, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	400b      	ands	r3, r1
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	619a      	str	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_AHB1_GRP1_EnableClock>:
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800338c:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800338e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003390:	4907      	ldr	r1, [pc, #28]	@ (80033b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4313      	orrs	r3, r2
 8003396:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800339a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4013      	ands	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033a2:	68fb      	ldr	r3, [r7, #12]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40023800 	.word	0x40023800

080033b4 <LL_APB1_GRP1_EnableClock>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80033bc:	4b08      	ldr	r3, [pc, #32]	@ (80033e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c0:	4907      	ldr	r1, [pc, #28]	@ (80033e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80033c8:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4013      	ands	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033d2:	68fb      	ldr	r3, [r7, #12]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	40023800 	.word	0x40023800

080033e4 <LL_APB2_GRP1_EnableClock>:
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80033ec:	4b08      	ldr	r3, [pc, #32]	@ (8003410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80033ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033f0:	4907      	ldr	r1, [pc, #28]	@ (8003410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80033fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4013      	ands	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003402:	68fb      	ldr	r3, [r7, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40023800 	.word	0x40023800

08003414 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i ++)
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	e00d      	b.n	8003442 <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p + i));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	4413      	add	r3, r2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	4619      	mov	r1, r3
 8003430:	4808      	ldr	r0, [pc, #32]	@ (8003454 <_write+0x40>)
 8003432:	f7ff ff62 	bl	80032fa <LL_USART_TransmitData8>
		HAL_Delay(1);
 8003436:	2001      	movs	r0, #1
 8003438:	f003 f898 	bl	800656c <HAL_Delay>
	for (int i = 0; i < len; i ++)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	3301      	adds	r3, #1
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	dbed      	blt.n	8003426 <_write+0x12>
	}
	return len;
 800344a:	687b      	ldr	r3, [r7, #4]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40011400 	.word	0x40011400

08003458 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b090      	sub	sp, #64	@ 0x40
 800345c:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	float q[4]; // array to store components of quaternion (x, y, z, w)
	float quatRadianAccuracy;
	unsigned short adcVal;
	short gyro_x_offset = 34, gyro_y_offset = -5, gyro_z_offset = -37;
 800345e:	2322      	movs	r3, #34	@ 0x22
 8003460:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003462:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8003466:	843b      	strh	r3, [r7, #32]
 8003468:	f64f 73db 	movw	r3, #65499	@ 0xffdb
 800346c:	83fb      	strh	r3, [r7, #30]

	unsigned char motor_arm_flag = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	unsigned short iBus_prev_SwA = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	86bb      	strh	r3, [r7, #52]	@ 0x34
	unsigned char iBus_rx_cnt = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800347e:	f003 f803 	bl	8006488 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003482:	f001 fa9d 	bl	80049c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003486:	f001 fef7 	bl	8005278 <MX_GPIO_Init>
	MX_DMA_Init();
 800348a:	f001 fed5 	bl	8005238 <MX_DMA_Init>
	MX_TIM3_Init();
 800348e:	f001 fc83 	bl	8004d98 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 8003492:	f001 fe71 	bl	8005178 <MX_USART6_UART_Init>
	MX_SPI2_Init();
 8003496:	f001 fbd9 	bl	8004c4c <MX_SPI2_Init>
	MX_SPI1_Init();
 800349a:	f001 fb85 	bl	8004ba8 <MX_SPI1_Init>
	MX_SPI3_Init();
 800349e:	f001 fc29 	bl	8004cf4 <MX_SPI3_Init>
	MX_UART5_Init();
 80034a2:	f001 fdc7 	bl	8005034 <MX_UART5_Init>
	MX_TIM5_Init();
 80034a6:	f001 fce9 	bl	8004e7c <MX_TIM5_Init>
	MX_I2C1_Init();
 80034aa:	f001 fb45 	bl	8004b38 <MX_I2C1_Init>
	MX_ADC1_Init();
 80034ae:	f001 faf1 	bl	8004a94 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80034b2:	f001 fe37 	bl	8005124 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 80034b6:	f001 fd83 	bl	8004fc0 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	/* enable timer for buzzer */
	LL_TIM_EnableCounter(TIM3);
 80034ba:	488e      	ldr	r0, [pc, #568]	@ (80036f4 <main+0x29c>)
 80034bc:	f7ff fdc0 	bl	8003040 <LL_TIM_EnableCounter>

	/* enable interrupt pins */
	LL_USART_EnableIT_RXNE(USART6);
 80034c0:	488d      	ldr	r0, [pc, #564]	@ (80036f8 <main+0x2a0>)
 80034c2:	f7ff fef7 	bl	80032b4 <LL_USART_EnableIT_RXNE>
	// TODO: enable interrupt pin for GPS module
	LL_USART_EnableIT_RXNE(UART5);
 80034c6:	488d      	ldr	r0, [pc, #564]	@ (80036fc <main+0x2a4>)
 80034c8:	f7ff fef4 	bl	80032b4 <LL_USART_EnableIT_RXNE>
	// TODO: initialize M8N GPS module
	// initialize timer for generating PWM signals to motors
	LL_TIM_EnableCounter(TIM5);
 80034cc:	488c      	ldr	r0, [pc, #560]	@ (8003700 <main+0x2a8>)
 80034ce:	f7ff fdb7 	bl	8003040 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 80034d2:	2101      	movs	r1, #1
 80034d4:	488a      	ldr	r0, [pc, #552]	@ (8003700 <main+0x2a8>)
 80034d6:	f7ff fdd3 	bl	8003080 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 80034da:	2110      	movs	r1, #16
 80034dc:	4888      	ldr	r0, [pc, #544]	@ (8003700 <main+0x2a8>)
 80034de:	f7ff fdcf 	bl	8003080 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 80034e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034e6:	4886      	ldr	r0, [pc, #536]	@ (8003700 <main+0x2a8>)
 80034e8:	f7ff fdca 	bl	8003080 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 80034ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034f0:	4883      	ldr	r0, [pc, #524]	@ (8003700 <main+0x2a8>)
 80034f2:	f7ff fdc5 	bl	8003080 <LL_TIM_CC_EnableChannel>
	// direct memory access for ADC value
	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 80034f6:	1dbb      	adds	r3, r7, #6
 80034f8:	2201      	movs	r2, #1
 80034fa:	4619      	mov	r1, r3
 80034fc:	4881      	ldr	r0, [pc, #516]	@ (8003704 <main+0x2ac>)
 80034fe:	f003 f89d 	bl	800663c <HAL_ADC_Start_DMA>
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8003502:	2201      	movs	r2, #1
 8003504:	4980      	ldr	r1, [pc, #512]	@ (8003708 <main+0x2b0>)
 8003506:	4881      	ldr	r0, [pc, #516]	@ (800370c <main+0x2b4>)
 8003508:	f006 f8e7 	bl	80096da <HAL_UART_Receive_IT>

	LL_TIM_EnableCounter(TIM7); // 10Hz, 50Hz, 1kHz loop
 800350c:	4880      	ldr	r0, [pc, #512]	@ (8003710 <main+0x2b8>)
 800350e:	f7ff fd97 	bl	8003040 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM7);
 8003512:	487f      	ldr	r0, [pc, #508]	@ (8003710 <main+0x2b8>)
 8003514:	f7ff fe98 	bl	8003248 <LL_TIM_EnableIT_UPDATE>

	/* initialize external peripherals (sensors, telemetry) */

	TIM3->PSC = 1000;
 8003518:	4b76      	ldr	r3, [pc, #472]	@ (80036f4 <main+0x29c>)
 800351a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800351e:	629a      	str	r2, [r3, #40]	@ 0x28
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003520:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003524:	4873      	ldr	r0, [pc, #460]	@ (80036f4 <main+0x29c>)
 8003526:	f7ff fdab 	bl	8003080 <LL_TIM_CC_EnableChannel>
	HAL_Delay(60);
 800352a:	203c      	movs	r0, #60	@ 0x3c
 800352c:	f003 f81e 	bl	800656c <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003530:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003534:	486f      	ldr	r0, [pc, #444]	@ (80036f4 <main+0x29c>)
 8003536:	f7ff fdb4 	bl	80030a2 <LL_TIM_CC_DisableChannel>
	HAL_Delay(60);
 800353a:	203c      	movs	r0, #60	@ 0x3c
 800353c:	f003 f816 	bl	800656c <HAL_Delay>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003540:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003544:	486b      	ldr	r0, [pc, #428]	@ (80036f4 <main+0x29c>)
 8003546:	f7ff fd9b 	bl	8003080 <LL_TIM_CC_EnableChannel>
	HAL_Delay(60);
 800354a:	203c      	movs	r0, #60	@ 0x3c
 800354c:	f003 f80e 	bl	800656c <HAL_Delay>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003550:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003554:	4867      	ldr	r0, [pc, #412]	@ (80036f4 <main+0x29c>)
 8003556:	f7ff fda4 	bl	80030a2 <LL_TIM_CC_DisableChannel>
	HAL_Delay(60);
 800355a:	203c      	movs	r0, #60	@ 0x3c
 800355c:	f003 f806 	bl	800656c <HAL_Delay>

	printf("checking sensor connection...\n");
 8003560:	486c      	ldr	r0, [pc, #432]	@ (8003714 <main+0x2bc>)
 8003562:	f008 ff21 	bl	800c3a8 <puts>

	// initialize 9-axis sensor for rotation vector
	if(BNO080_Initialization())
 8003566:	f7fd fffd 	bl	8001564 <BNO080_Initialization>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03b      	beq.n	80035e8 <main+0x190>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003570:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003574:	485f      	ldr	r0, [pc, #380]	@ (80036f4 <main+0x29c>)
 8003576:	f7ff fd83 	bl	8003080 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1000;
 800357a:	4b5e      	ldr	r3, [pc, #376]	@ (80036f4 <main+0x29c>)
 800357c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003580:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003582:	2064      	movs	r0, #100	@ 0x64
 8003584:	f002 fff2 	bl	800656c <HAL_Delay>
		TIM3->PSC = 1500;
 8003588:	4b5a      	ldr	r3, [pc, #360]	@ (80036f4 <main+0x29c>)
 800358a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800358e:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003590:	2064      	movs	r0, #100	@ 0x64
 8003592:	f002 ffeb 	bl	800656c <HAL_Delay>
		TIM3->PSC = 2000;
 8003596:	4b57      	ldr	r3, [pc, #348]	@ (80036f4 <main+0x29c>)
 8003598:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800359c:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 800359e:	2064      	movs	r0, #100	@ 0x64
 80035a0:	f002 ffe4 	bl	800656c <HAL_Delay>

		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80035a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035a8:	4852      	ldr	r0, [pc, #328]	@ (80036f4 <main+0x29c>)
 80035aa:	f7ff fd7a 	bl	80030a2 <LL_TIM_CC_DisableChannel>

		printf("\nBNO080 couldn't initialize. Shutting down...");
 80035ae:	485a      	ldr	r0, [pc, #360]	@ (8003718 <main+0x2c0>)
 80035b0:	f008 fe92 	bl	800c2d8 <iprintf>
		while (1)
		{
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80035b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035b8:	484e      	ldr	r0, [pc, #312]	@ (80036f4 <main+0x29c>)
 80035ba:	f7ff fd72 	bl	80030a2 <LL_TIM_CC_DisableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 80035be:	2101      	movs	r1, #1
 80035c0:	4856      	ldr	r0, [pc, #344]	@ (800371c <main+0x2c4>)
 80035c2:	f7ff fec6 	bl	8003352 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 80035c6:	20c8      	movs	r0, #200	@ 0xc8
 80035c8:	f002 ffd0 	bl	800656c <HAL_Delay>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80035cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035d0:	4848      	ldr	r0, [pc, #288]	@ (80036f4 <main+0x29c>)
 80035d2:	f7ff fd55 	bl	8003080 <LL_TIM_CC_EnableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 80035d6:	2101      	movs	r1, #1
 80035d8:	4850      	ldr	r0, [pc, #320]	@ (800371c <main+0x2c4>)
 80035da:	f7ff feba 	bl	8003352 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 80035de:	20c8      	movs	r0, #200	@ 0xc8
 80035e0:	f002 ffc4 	bl	800656c <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80035e4:	bf00      	nop
 80035e6:	e7e5      	b.n	80035b4 <main+0x15c>
		}
	}
	BNO080_enableRotationVector(2500);
 80035e8:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80035ec:	f7fe fae9 	bl	8001bc2 <BNO080_enableRotationVector>

	// initialize 6-axis sensor for angular velocity
	if(ICM20602_Initialization())
 80035f0:	f7fe ffa0 	bl	8002534 <ICM20602_Initialization>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d03b      	beq.n	8003672 <main+0x21a>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80035fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035fe:	483d      	ldr	r0, [pc, #244]	@ (80036f4 <main+0x29c>)
 8003600:	f7ff fd3e 	bl	8003080 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1000;
 8003604:	4b3b      	ldr	r3, [pc, #236]	@ (80036f4 <main+0x29c>)
 8003606:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 800360c:	2064      	movs	r0, #100	@ 0x64
 800360e:	f002 ffad 	bl	800656c <HAL_Delay>
		TIM3->PSC = 1500;
 8003612:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <main+0x29c>)
 8003614:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003618:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 800361a:	2064      	movs	r0, #100	@ 0x64
 800361c:	f002 ffa6 	bl	800656c <HAL_Delay>
		TIM3->PSC = 2000;
 8003620:	4b34      	ldr	r3, [pc, #208]	@ (80036f4 <main+0x29c>)
 8003622:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003626:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003628:	2064      	movs	r0, #100	@ 0x64
 800362a:	f002 ff9f 	bl	800656c <HAL_Delay>

		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800362e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003632:	4830      	ldr	r0, [pc, #192]	@ (80036f4 <main+0x29c>)
 8003634:	f7ff fd35 	bl	80030a2 <LL_TIM_CC_DisableChannel>

		printf("\nICM20602 couldn't initialize. Shutting down...");
 8003638:	4839      	ldr	r0, [pc, #228]	@ (8003720 <main+0x2c8>)
 800363a:	f008 fe4d 	bl	800c2d8 <iprintf>
		while (1)
		{
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800363e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003642:	482c      	ldr	r0, [pc, #176]	@ (80036f4 <main+0x29c>)
 8003644:	f7ff fd2d 	bl	80030a2 <LL_TIM_CC_DisableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003648:	2102      	movs	r1, #2
 800364a:	4834      	ldr	r0, [pc, #208]	@ (800371c <main+0x2c4>)
 800364c:	f7ff fe81 	bl	8003352 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 8003650:	20c8      	movs	r0, #200	@ 0xc8
 8003652:	f002 ff8b 	bl	800656c <HAL_Delay>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003656:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800365a:	4826      	ldr	r0, [pc, #152]	@ (80036f4 <main+0x29c>)
 800365c:	f7ff fd10 	bl	8003080 <LL_TIM_CC_EnableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8003660:	2102      	movs	r1, #2
 8003662:	482e      	ldr	r0, [pc, #184]	@ (800371c <main+0x2c4>)
 8003664:	f7ff fe75 	bl	8003352 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 8003668:	20c8      	movs	r0, #200	@ 0xc8
 800366a:	f002 ff7f 	bl	800656c <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800366e:	bf00      	nop
 8003670:	e7e5      	b.n	800363e <main+0x1e6>
		}
	}

	// initialize barometric sensor for altitude
	if(LPS22HH_Initialization())
 8003672:	f7ff f9ef 	bl	8002a54 <LPS22HH_Initialization>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d055      	beq.n	8003728 <main+0x2d0>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800367c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003680:	481c      	ldr	r0, [pc, #112]	@ (80036f4 <main+0x29c>)
 8003682:	f7ff fcfd 	bl	8003080 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1000;
 8003686:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <main+0x29c>)
 8003688:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800368c:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 800368e:	2064      	movs	r0, #100	@ 0x64
 8003690:	f002 ff6c 	bl	800656c <HAL_Delay>
		TIM3->PSC = 1500;
 8003694:	4b17      	ldr	r3, [pc, #92]	@ (80036f4 <main+0x29c>)
 8003696:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 800369c:	2064      	movs	r0, #100	@ 0x64
 800369e:	f002 ff65 	bl	800656c <HAL_Delay>
		TIM3->PSC = 2000;
 80036a2:	4b14      	ldr	r3, [pc, #80]	@ (80036f4 <main+0x29c>)
 80036a4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80036a8:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 80036aa:	2064      	movs	r0, #100	@ 0x64
 80036ac:	f002 ff5e 	bl	800656c <HAL_Delay>

		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80036b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036b4:	480f      	ldr	r0, [pc, #60]	@ (80036f4 <main+0x29c>)
 80036b6:	f7ff fcf4 	bl	80030a2 <LL_TIM_CC_DisableChannel>

		printf("\nLPS22HH couldn't initialize. Shutting down...");
 80036ba:	481a      	ldr	r0, [pc, #104]	@ (8003724 <main+0x2cc>)
 80036bc:	f008 fe0c 	bl	800c2d8 <iprintf>
		while (1)
		{
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80036c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036c4:	480b      	ldr	r0, [pc, #44]	@ (80036f4 <main+0x29c>)
 80036c6:	f7ff fcec 	bl	80030a2 <LL_TIM_CC_DisableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 80036ca:	2104      	movs	r1, #4
 80036cc:	4813      	ldr	r0, [pc, #76]	@ (800371c <main+0x2c4>)
 80036ce:	f7ff fe40 	bl	8003352 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 80036d2:	20c8      	movs	r0, #200	@ 0xc8
 80036d4:	f002 ff4a 	bl	800656c <HAL_Delay>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80036d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036dc:	4805      	ldr	r0, [pc, #20]	@ (80036f4 <main+0x29c>)
 80036de:	f7ff fccf 	bl	8003080 <LL_TIM_CC_EnableChannel>
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 80036e2:	2104      	movs	r1, #4
 80036e4:	480d      	ldr	r0, [pc, #52]	@ (800371c <main+0x2c4>)
 80036e6:	f7ff fe34 	bl	8003352 <LL_GPIO_TogglePin>
			HAL_Delay(200);
 80036ea:	20c8      	movs	r0, #200	@ 0xc8
 80036ec:	f002 ff3e 	bl	800656c <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80036f0:	bf00      	nop
 80036f2:	e7e5      	b.n	80036c0 <main+0x268>
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40011400 	.word	0x40011400
 80036fc:	40005000 	.word	0x40005000
 8003700:	40000c00 	.word	0x40000c00
 8003704:	20000370 	.word	0x20000370
 8003708:	2000056d 	.word	0x2000056d
 800370c:	2000046c 	.word	0x2000046c
 8003710:	40001400 	.word	0x40001400
 8003714:	0800f0b8 	.word	0x0800f0b8
 8003718:	0800f0d8 	.word	0x0800f0d8
 800371c:	40020800 	.word	0x40020800
 8003720:	0800f108 	.word	0x0800f108
 8003724:	0800f138 	.word	0x0800f138
		}
	}

	ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 8003728:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800372c:	4613      	mov	r3, r2
 800372e:	07db      	lsls	r3, r3, #31
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	121b      	asrs	r3, r3, #8
 8003736:	4619      	mov	r1, r3
 8003738:	2013      	movs	r0, #19
 800373a:	f7fe fed9 	bl	80024f0 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 800373e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8003742:	4613      	mov	r3, r2
 8003744:	07db      	lsls	r3, r3, #31
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4619      	mov	r1, r3
 800374c:	2014      	movs	r0, #20
 800374e:	f7fe fecf 	bl	80024f0 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 8003752:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003756:	4613      	mov	r3, r2
 8003758:	07db      	lsls	r3, r3, #31
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	121b      	asrs	r3, r3, #8
 8003760:	4619      	mov	r1, r3
 8003762:	2015      	movs	r0, #21
 8003764:	f7fe fec4 	bl	80024f0 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 8003768:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800376c:	4613      	mov	r3, r2
 800376e:	07db      	lsls	r3, r3, #31
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4619      	mov	r1, r3
 8003776:	2016      	movs	r0, #22
 8003778:	f7fe feba 	bl	80024f0 <ICM20602_Writebyte>

	ICM20602_Writebyte(0x17, (gyro_z_offset*-2)>>8);
 800377c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003780:	4613      	mov	r3, r2
 8003782:	07db      	lsls	r3, r3, #31
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	121b      	asrs	r3, r3, #8
 800378a:	4619      	mov	r1, r3
 800378c:	2017      	movs	r0, #23
 800378e:	f7fe feaf 	bl	80024f0 <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_z_offset*-2));
 8003792:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003796:	4613      	mov	r3, r2
 8003798:	07db      	lsls	r3, r3, #31
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4619      	mov	r1, r3
 80037a0:	2018      	movs	r0, #24
 80037a2:	f7fe fea5 	bl	80024f0 <ICM20602_Writebyte>

	printf("loading PID gain...\n");
 80037a6:	48b1      	ldr	r0, [pc, #708]	@ (8003a6c <main+0x614>)
 80037a8:	f008 fdfe 	bl	800c3a8 <puts>

	if(EP_PID_Gain_Read(0, &roll_in_kp, &roll_in_ki, &roll_in_kd) || EP_PID_Gain_Read(1, &roll_out_kp, &roll_out_ki, &roll_out_kd) || EP_PID_Gain_Read(2, &pitch_in_kp, &pitch_in_ki, &pitch_in_kd) || EP_PID_Gain_Read(3, &pitch_out_kp, &pitch_out_ki, &pitch_out_kd) || EP_PID_Gain_Read(4, &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd) || EP_PID_Gain_Read(5, &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd))
 80037ac:	4bb0      	ldr	r3, [pc, #704]	@ (8003a70 <main+0x618>)
 80037ae:	4ab1      	ldr	r2, [pc, #708]	@ (8003a74 <main+0x61c>)
 80037b0:	49b1      	ldr	r1, [pc, #708]	@ (8003a78 <main+0x620>)
 80037b2:	2000      	movs	r0, #0
 80037b4:	f7fd fca4 	bl	8001100 <EP_PID_Gain_Read>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d12c      	bne.n	8003818 <main+0x3c0>
 80037be:	4baf      	ldr	r3, [pc, #700]	@ (8003a7c <main+0x624>)
 80037c0:	4aaf      	ldr	r2, [pc, #700]	@ (8003a80 <main+0x628>)
 80037c2:	49b0      	ldr	r1, [pc, #704]	@ (8003a84 <main+0x62c>)
 80037c4:	2001      	movs	r0, #1
 80037c6:	f7fd fc9b 	bl	8001100 <EP_PID_Gain_Read>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d123      	bne.n	8003818 <main+0x3c0>
 80037d0:	4bad      	ldr	r3, [pc, #692]	@ (8003a88 <main+0x630>)
 80037d2:	4aae      	ldr	r2, [pc, #696]	@ (8003a8c <main+0x634>)
 80037d4:	49ae      	ldr	r1, [pc, #696]	@ (8003a90 <main+0x638>)
 80037d6:	2002      	movs	r0, #2
 80037d8:	f7fd fc92 	bl	8001100 <EP_PID_Gain_Read>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11a      	bne.n	8003818 <main+0x3c0>
 80037e2:	4bac      	ldr	r3, [pc, #688]	@ (8003a94 <main+0x63c>)
 80037e4:	4aac      	ldr	r2, [pc, #688]	@ (8003a98 <main+0x640>)
 80037e6:	49ad      	ldr	r1, [pc, #692]	@ (8003a9c <main+0x644>)
 80037e8:	2003      	movs	r0, #3
 80037ea:	f7fd fc89 	bl	8001100 <EP_PID_Gain_Read>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d111      	bne.n	8003818 <main+0x3c0>
 80037f4:	4baa      	ldr	r3, [pc, #680]	@ (8003aa0 <main+0x648>)
 80037f6:	4aab      	ldr	r2, [pc, #684]	@ (8003aa4 <main+0x64c>)
 80037f8:	49ab      	ldr	r1, [pc, #684]	@ (8003aa8 <main+0x650>)
 80037fa:	2004      	movs	r0, #4
 80037fc:	f7fd fc80 	bl	8001100 <EP_PID_Gain_Read>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d108      	bne.n	8003818 <main+0x3c0>
 8003806:	4ba9      	ldr	r3, [pc, #676]	@ (8003aac <main+0x654>)
 8003808:	4aa9      	ldr	r2, [pc, #676]	@ (8003ab0 <main+0x658>)
 800380a:	49aa      	ldr	r1, [pc, #680]	@ (8003ab4 <main+0x65c>)
 800380c:	2005      	movs	r0, #5
 800380e:	f7fd fc77 	bl	8001100 <EP_PID_Gain_Read>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d026      	beq.n	8003866 <main+0x40e>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003818:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800381c:	48a6      	ldr	r0, [pc, #664]	@ (8003ab8 <main+0x660>)
 800381e:	f7ff fc2f 	bl	8003080 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1000;
 8003822:	4ba5      	ldr	r3, [pc, #660]	@ (8003ab8 <main+0x660>)
 8003824:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003828:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 800382a:	2064      	movs	r0, #100	@ 0x64
 800382c:	f002 fe9e 	bl	800656c <HAL_Delay>
		TIM3->PSC = 1500;
 8003830:	4ba1      	ldr	r3, [pc, #644]	@ (8003ab8 <main+0x660>)
 8003832:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003836:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003838:	2064      	movs	r0, #100	@ 0x64
 800383a:	f002 fe97 	bl	800656c <HAL_Delay>
		TIM3->PSC = 2000;
 800383e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ab8 <main+0x660>)
 8003840:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003844:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 8003846:	2064      	movs	r0, #100	@ 0x64
 8003848:	f002 fe90 	bl	800656c <HAL_Delay>

		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800384c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003850:	4899      	ldr	r0, [pc, #612]	@ (8003ab8 <main+0x660>)
 8003852:	f7ff fc26 	bl	80030a2 <LL_TIM_CC_DisableChannel>

		HAL_Delay(500);
 8003856:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800385a:	f002 fe87 	bl	800656c <HAL_Delay>

		printf("\ncouldn't load PID gain...\n");
 800385e:	4897      	ldr	r0, [pc, #604]	@ (8003abc <main+0x664>)
 8003860:	f008 fda2 	bl	800c3a8 <puts>
 8003864:	e098      	b.n	8003998 <main+0x540>
	}
	else
	{
		Encode_MSG_PID_Gain(&radio_tx_buf[0], 0, roll_in_kp, roll_in_ki, roll_in_kd);
 8003866:	4b84      	ldr	r3, [pc, #528]	@ (8003a78 <main+0x620>)
 8003868:	edd3 7a00 	vldr	s15, [r3]
 800386c:	4b81      	ldr	r3, [pc, #516]	@ (8003a74 <main+0x61c>)
 800386e:	ed93 7a00 	vldr	s14, [r3]
 8003872:	4b7f      	ldr	r3, [pc, #508]	@ (8003a70 <main+0x618>)
 8003874:	edd3 6a00 	vldr	s13, [r3]
 8003878:	eeb0 1a66 	vmov.f32	s2, s13
 800387c:	eef0 0a47 	vmov.f32	s1, s14
 8003880:	eeb0 0a67 	vmov.f32	s0, s15
 8003884:	2100      	movs	r1, #0
 8003886:	488e      	ldr	r0, [pc, #568]	@ (8003ac0 <main+0x668>)
 8003888:	f002 f9fc 	bl	8005c84 <Encode_MSG_PID_Gain>
		HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 800388c:	230a      	movs	r3, #10
 800388e:	2214      	movs	r2, #20
 8003890:	498b      	ldr	r1, [pc, #556]	@ (8003ac0 <main+0x668>)
 8003892:	488c      	ldr	r0, [pc, #560]	@ (8003ac4 <main+0x66c>)
 8003894:	f005 fe60 	bl	8009558 <HAL_UART_Transmit>

		Encode_MSG_PID_Gain(&radio_tx_buf[0], 1, roll_out_kp, roll_out_ki, roll_out_kd);
 8003898:	4b7a      	ldr	r3, [pc, #488]	@ (8003a84 <main+0x62c>)
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	4b78      	ldr	r3, [pc, #480]	@ (8003a80 <main+0x628>)
 80038a0:	ed93 7a00 	vldr	s14, [r3]
 80038a4:	4b75      	ldr	r3, [pc, #468]	@ (8003a7c <main+0x624>)
 80038a6:	edd3 6a00 	vldr	s13, [r3]
 80038aa:	eeb0 1a66 	vmov.f32	s2, s13
 80038ae:	eef0 0a47 	vmov.f32	s1, s14
 80038b2:	eeb0 0a67 	vmov.f32	s0, s15
 80038b6:	2101      	movs	r1, #1
 80038b8:	4881      	ldr	r0, [pc, #516]	@ (8003ac0 <main+0x668>)
 80038ba:	f002 f9e3 	bl	8005c84 <Encode_MSG_PID_Gain>
		HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 80038be:	230a      	movs	r3, #10
 80038c0:	2214      	movs	r2, #20
 80038c2:	497f      	ldr	r1, [pc, #508]	@ (8003ac0 <main+0x668>)
 80038c4:	487f      	ldr	r0, [pc, #508]	@ (8003ac4 <main+0x66c>)
 80038c6:	f005 fe47 	bl	8009558 <HAL_UART_Transmit>

		Encode_MSG_PID_Gain(&radio_tx_buf[0], 2, pitch_in_kp, pitch_in_ki, pitch_in_kd);
 80038ca:	4b71      	ldr	r3, [pc, #452]	@ (8003a90 <main+0x638>)
 80038cc:	edd3 7a00 	vldr	s15, [r3]
 80038d0:	4b6e      	ldr	r3, [pc, #440]	@ (8003a8c <main+0x634>)
 80038d2:	ed93 7a00 	vldr	s14, [r3]
 80038d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a88 <main+0x630>)
 80038d8:	edd3 6a00 	vldr	s13, [r3]
 80038dc:	eeb0 1a66 	vmov.f32	s2, s13
 80038e0:	eef0 0a47 	vmov.f32	s1, s14
 80038e4:	eeb0 0a67 	vmov.f32	s0, s15
 80038e8:	2102      	movs	r1, #2
 80038ea:	4875      	ldr	r0, [pc, #468]	@ (8003ac0 <main+0x668>)
 80038ec:	f002 f9ca 	bl	8005c84 <Encode_MSG_PID_Gain>
		HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 80038f0:	230a      	movs	r3, #10
 80038f2:	2214      	movs	r2, #20
 80038f4:	4972      	ldr	r1, [pc, #456]	@ (8003ac0 <main+0x668>)
 80038f6:	4873      	ldr	r0, [pc, #460]	@ (8003ac4 <main+0x66c>)
 80038f8:	f005 fe2e 	bl	8009558 <HAL_UART_Transmit>

		Encode_MSG_PID_Gain(&radio_tx_buf[0], 3, pitch_out_kp, pitch_out_ki, pitch_out_kd);
 80038fc:	4b67      	ldr	r3, [pc, #412]	@ (8003a9c <main+0x644>)
 80038fe:	edd3 7a00 	vldr	s15, [r3]
 8003902:	4b65      	ldr	r3, [pc, #404]	@ (8003a98 <main+0x640>)
 8003904:	ed93 7a00 	vldr	s14, [r3]
 8003908:	4b62      	ldr	r3, [pc, #392]	@ (8003a94 <main+0x63c>)
 800390a:	edd3 6a00 	vldr	s13, [r3]
 800390e:	eeb0 1a66 	vmov.f32	s2, s13
 8003912:	eef0 0a47 	vmov.f32	s1, s14
 8003916:	eeb0 0a67 	vmov.f32	s0, s15
 800391a:	2103      	movs	r1, #3
 800391c:	4868      	ldr	r0, [pc, #416]	@ (8003ac0 <main+0x668>)
 800391e:	f002 f9b1 	bl	8005c84 <Encode_MSG_PID_Gain>
		HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 8003922:	230a      	movs	r3, #10
 8003924:	2214      	movs	r2, #20
 8003926:	4966      	ldr	r1, [pc, #408]	@ (8003ac0 <main+0x668>)
 8003928:	4866      	ldr	r0, [pc, #408]	@ (8003ac4 <main+0x66c>)
 800392a:	f005 fe15 	bl	8009558 <HAL_UART_Transmit>

		Encode_MSG_PID_Gain(&radio_tx_buf[0], 4, yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 800392e:	4b5e      	ldr	r3, [pc, #376]	@ (8003aa8 <main+0x650>)
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	4b5b      	ldr	r3, [pc, #364]	@ (8003aa4 <main+0x64c>)
 8003936:	ed93 7a00 	vldr	s14, [r3]
 800393a:	4b59      	ldr	r3, [pc, #356]	@ (8003aa0 <main+0x648>)
 800393c:	edd3 6a00 	vldr	s13, [r3]
 8003940:	eeb0 1a66 	vmov.f32	s2, s13
 8003944:	eef0 0a47 	vmov.f32	s1, s14
 8003948:	eeb0 0a67 	vmov.f32	s0, s15
 800394c:	2104      	movs	r1, #4
 800394e:	485c      	ldr	r0, [pc, #368]	@ (8003ac0 <main+0x668>)
 8003950:	f002 f998 	bl	8005c84 <Encode_MSG_PID_Gain>
		HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 8003954:	230a      	movs	r3, #10
 8003956:	2214      	movs	r2, #20
 8003958:	4959      	ldr	r1, [pc, #356]	@ (8003ac0 <main+0x668>)
 800395a:	485a      	ldr	r0, [pc, #360]	@ (8003ac4 <main+0x66c>)
 800395c:	f005 fdfc 	bl	8009558 <HAL_UART_Transmit>

		Encode_MSG_PID_Gain(&radio_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8003960:	4b54      	ldr	r3, [pc, #336]	@ (8003ab4 <main+0x65c>)
 8003962:	edd3 7a00 	vldr	s15, [r3]
 8003966:	4b52      	ldr	r3, [pc, #328]	@ (8003ab0 <main+0x658>)
 8003968:	ed93 7a00 	vldr	s14, [r3]
 800396c:	4b4f      	ldr	r3, [pc, #316]	@ (8003aac <main+0x654>)
 800396e:	edd3 6a00 	vldr	s13, [r3]
 8003972:	eeb0 1a66 	vmov.f32	s2, s13
 8003976:	eef0 0a47 	vmov.f32	s1, s14
 800397a:	eeb0 0a67 	vmov.f32	s0, s15
 800397e:	2105      	movs	r1, #5
 8003980:	484f      	ldr	r0, [pc, #316]	@ (8003ac0 <main+0x668>)
 8003982:	f002 f97f 	bl	8005c84 <Encode_MSG_PID_Gain>
		HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 8003986:	230a      	movs	r3, #10
 8003988:	2214      	movs	r2, #20
 800398a:	494d      	ldr	r1, [pc, #308]	@ (8003ac0 <main+0x668>)
 800398c:	484d      	ldr	r0, [pc, #308]	@ (8003ac4 <main+0x66c>)
 800398e:	f005 fde3 	bl	8009558 <HAL_UART_Transmit>

		printf("\nall gains OK\n\n");
 8003992:	484d      	ldr	r0, [pc, #308]	@ (8003ac8 <main+0x670>)
 8003994:	f008 fd08 	bl	800c3a8 <puts>
	}

	//block until iBus connection established
	while (!iBus_Connection_Status())
 8003998:	e015      	b.n	80039c6 <main+0x56e>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800399a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800399e:	4846      	ldr	r0, [pc, #280]	@ (8003ab8 <main+0x660>)
 80039a0:	f7ff fb6e 	bl	8003080 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 5000;
 80039a4:	4b44      	ldr	r3, [pc, #272]	@ (8003ab8 <main+0x660>)
 80039a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039aa:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(500);
 80039ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039b0:	f002 fddc 	bl	800656c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80039b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039b8:	483f      	ldr	r0, [pc, #252]	@ (8003ab8 <main+0x660>)
 80039ba:	f7ff fb72 	bl	80030a2 <LL_TIM_CC_DisableChannel>
		HAL_Delay(500);
 80039be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039c2:	f002 fdd3 	bl	800656c <HAL_Delay>
	while (!iBus_Connection_Status())
 80039c6:	f001 febb 	bl	8005740 <iBus_Connection_Status>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0e4      	beq.n	800399a <main+0x542>
	}

	// calibration switch active?
	if (iBus.SwC == 2000)
 80039d0:	4b3e      	ldr	r3, [pc, #248]	@ (8003acc <main+0x674>)
 80039d2:	899b      	ldrh	r3, [r3, #12]
 80039d4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80039d8:	d17a      	bne.n	8003ad0 <main+0x678>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80039da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039de:	4836      	ldr	r0, [pc, #216]	@ (8003ab8 <main+0x660>)
 80039e0:	f7ff fb4e 	bl	8003080 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1500;
 80039e4:	4b34      	ldr	r3, [pc, #208]	@ (8003ab8 <main+0x660>)
 80039e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80039ea:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 80039ec:	20c8      	movs	r0, #200	@ 0xc8
 80039ee:	f002 fdbd 	bl	800656c <HAL_Delay>
		TIM3->PSC = 2000;
 80039f2:	4b31      	ldr	r3, [pc, #196]	@ (8003ab8 <main+0x660>)
 80039f4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80039f8:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 80039fa:	20c8      	movs	r0, #200	@ 0xc8
 80039fc:	f002 fdb6 	bl	800656c <HAL_Delay>
		TIM3->PSC = 1500;
 8003a00:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab8 <main+0x660>)
 8003a02:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003a06:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003a08:	20c8      	movs	r0, #200	@ 0xc8
 8003a0a:	f002 fdaf 	bl	800656c <HAL_Delay>
		TIM3->PSC = 2000;
 8003a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab8 <main+0x660>)
 8003a10:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003a14:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003a16:	20c8      	movs	r0, #200	@ 0xc8
 8003a18:	f002 fda8 	bl	800656c <HAL_Delay>

		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a20:	4825      	ldr	r0, [pc, #148]	@ (8003ab8 <main+0x660>)
 8003a22:	f7ff fb3e 	bl	80030a2 <LL_TIM_CC_DisableChannel>

		ESC_Calibration();
 8003a26:	f001 fcd3 	bl	80053d0 <ESC_Calibration>
		while (iBus.SwC != 1000)
 8003a2a:	e019      	b.n	8003a60 <main+0x608>
		{
			iBus_Connection_Status();
 8003a2c:	f001 fe88 	bl	8005740 <iBus_Connection_Status>

			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a34:	4820      	ldr	r0, [pc, #128]	@ (8003ab8 <main+0x660>)
 8003a36:	f7ff fb23 	bl	8003080 <LL_TIM_CC_EnableChannel>

			TIM3->PSC = 2000;
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab8 <main+0x660>)
 8003a3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003a40:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003a42:	20c8      	movs	r0, #200	@ 0xc8
 8003a44:	f002 fd92 	bl	800656c <HAL_Delay>
			TIM3->PSC = 2500;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <main+0x660>)
 8003a4a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003a4e:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003a50:	20c8      	movs	r0, #200	@ 0xc8
 8003a52:	f002 fd8b 	bl	800656c <HAL_Delay>

			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003a56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a5a:	4817      	ldr	r0, [pc, #92]	@ (8003ab8 <main+0x660>)
 8003a5c:	f7ff fb21 	bl	80030a2 <LL_TIM_CC_DisableChannel>
		while (iBus.SwC != 1000)
 8003a60:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <main+0x674>)
 8003a62:	899b      	ldrh	r3, [r3, #12]
 8003a64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a68:	d1e0      	bne.n	8003a2c <main+0x5d4>
 8003a6a:	e099      	b.n	8003ba0 <main+0x748>
 8003a6c:	0800f168 	.word	0x0800f168
 8003a70:	20000500 	.word	0x20000500
 8003a74:	200004fc 	.word	0x200004fc
 8003a78:	200004f8 	.word	0x200004f8
 8003a7c:	2000050c 	.word	0x2000050c
 8003a80:	20000508 	.word	0x20000508
 8003a84:	20000504 	.word	0x20000504
 8003a88:	20000518 	.word	0x20000518
 8003a8c:	20000514 	.word	0x20000514
 8003a90:	20000510 	.word	0x20000510
 8003a94:	20000524 	.word	0x20000524
 8003a98:	20000520 	.word	0x20000520
 8003a9c:	2000051c 	.word	0x2000051c
 8003aa0:	20000530 	.word	0x20000530
 8003aa4:	2000052c 	.word	0x2000052c
 8003aa8:	20000528 	.word	0x20000528
 8003aac:	2000053c 	.word	0x2000053c
 8003ab0:	20000538 	.word	0x20000538
 8003ab4:	20000534 	.word	0x20000534
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	0800f17c 	.word	0x0800f17c
 8003ac0:	200004b4 	.word	0x200004b4
 8003ac4:	2000046c 	.word	0x2000046c
 8003ac8:	0800f198 	.word	0x0800f198
 8003acc:	20000314 	.word	0x20000314
		}
	}
	else if (iBus.SwC == 1500)
 8003ad0:	4b27      	ldr	r3, [pc, #156]	@ (8003b70 <main+0x718>)
 8003ad2:	899b      	ldrh	r3, [r3, #12]
 8003ad4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d161      	bne.n	8003ba0 <main+0x748>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003adc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ae0:	4824      	ldr	r0, [pc, #144]	@ (8003b74 <main+0x71c>)
 8003ae2:	f7ff facd 	bl	8003080 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1500;
 8003ae6:	4b23      	ldr	r3, [pc, #140]	@ (8003b74 <main+0x71c>)
 8003ae8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003aec:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003aee:	20c8      	movs	r0, #200	@ 0xc8
 8003af0:	f002 fd3c 	bl	800656c <HAL_Delay>
		TIM3->PSC = 2000;
 8003af4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b74 <main+0x71c>)
 8003af6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003afa:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003afc:	20c8      	movs	r0, #200	@ 0xc8
 8003afe:	f002 fd35 	bl	800656c <HAL_Delay>
		TIM3->PSC = 1500;
 8003b02:	4b1c      	ldr	r3, [pc, #112]	@ (8003b74 <main+0x71c>)
 8003b04:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b08:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b0a:	20c8      	movs	r0, #200	@ 0xc8
 8003b0c:	f002 fd2e 	bl	800656c <HAL_Delay>
		TIM3->PSC = 2000;
 8003b10:	4b18      	ldr	r3, [pc, #96]	@ (8003b74 <main+0x71c>)
 8003b12:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b16:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(200);
 8003b18:	20c8      	movs	r0, #200	@ 0xc8
 8003b1a:	f002 fd27 	bl	800656c <HAL_Delay>

		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b22:	4814      	ldr	r0, [pc, #80]	@ (8003b74 <main+0x71c>)
 8003b24:	f7ff fabd 	bl	80030a2 <LL_TIM_CC_DisableChannel>

		BNO080_Calibration();
 8003b28:	f001 fc80 	bl	800542c <BNO080_Calibration>
		while (iBus.SwC != 1000)
 8003b2c:	e019      	b.n	8003b62 <main+0x70a>
		{
			iBus_Connection_Status();
 8003b2e:	f001 fe07 	bl	8005740 <iBus_Connection_Status>

			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b36:	480f      	ldr	r0, [pc, #60]	@ (8003b74 <main+0x71c>)
 8003b38:	f7ff faa2 	bl	8003080 <LL_TIM_CC_EnableChannel>

			TIM3->PSC = 2000;
 8003b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b74 <main+0x71c>)
 8003b3e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b42:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003b44:	20c8      	movs	r0, #200	@ 0xc8
 8003b46:	f002 fd11 	bl	800656c <HAL_Delay>
			TIM3->PSC = 2500;
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b74 <main+0x71c>)
 8003b4c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003b50:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(200);
 8003b52:	20c8      	movs	r0, #200	@ 0xc8
 8003b54:	f002 fd0a 	bl	800656c <HAL_Delay>

			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b5c:	4805      	ldr	r0, [pc, #20]	@ (8003b74 <main+0x71c>)
 8003b5e:	f7ff faa0 	bl	80030a2 <LL_TIM_CC_DisableChannel>
		while (iBus.SwC != 1000)
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <main+0x718>)
 8003b64:	899b      	ldrh	r3, [r3, #12]
 8003b66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b6a:	d1e0      	bne.n	8003b2e <main+0x6d6>
		}
	}

	// ensure throttle stick is at minimum upon startup
	while (!iBus_Throttle_Min() || iBus.SwA == 2000)
 8003b6c:	e018      	b.n	8003ba0 <main+0x748>
 8003b6e:	bf00      	nop
 8003b70:	20000314 	.word	0x20000314
 8003b74:	40000400 	.word	0x40000400
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b7c:	48b1      	ldr	r0, [pc, #708]	@ (8003e44 <main+0x9ec>)
 8003b7e:	f7ff fa7f 	bl	8003080 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1000;
 8003b82:	4bb0      	ldr	r3, [pc, #704]	@ (8003e44 <main+0x9ec>)
 8003b84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b88:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(70);
 8003b8a:	2046      	movs	r0, #70	@ 0x46
 8003b8c:	f002 fcee 	bl	800656c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003b90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b94:	48ab      	ldr	r0, [pc, #684]	@ (8003e44 <main+0x9ec>)
 8003b96:	f7ff fa84 	bl	80030a2 <LL_TIM_CC_DisableChannel>
		HAL_Delay(70);
 8003b9a:	2046      	movs	r0, #70	@ 0x46
 8003b9c:	f002 fce6 	bl	800656c <HAL_Delay>
	while (!iBus_Throttle_Min() || iBus.SwA == 2000)
 8003ba0:	f001 fbea 	bl	8005378 <iBus_Throttle_Min>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0e6      	beq.n	8003b78 <main+0x720>
 8003baa:	4ba7      	ldr	r3, [pc, #668]	@ (8003e48 <main+0x9f0>)
 8003bac:	891b      	ldrh	r3, [r3, #8]
 8003bae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003bb2:	d0e1      	beq.n	8003b78 <main+0x720>
	}

	// buzzer to indicate successful startup
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003bb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bb8:	48a2      	ldr	r0, [pc, #648]	@ (8003e44 <main+0x9ec>)
 8003bba:	f7ff fa61 	bl	8003080 <LL_TIM_CC_EnableChannel>

	TIM3->PSC = 2000;
 8003bbe:	4ba1      	ldr	r3, [pc, #644]	@ (8003e44 <main+0x9ec>)
 8003bc0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003bc4:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8003bc6:	2064      	movs	r0, #100	@ 0x64
 8003bc8:	f002 fcd0 	bl	800656c <HAL_Delay>
	TIM3->PSC = 1500;
 8003bcc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e44 <main+0x9ec>)
 8003bce:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003bd2:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8003bd4:	2064      	movs	r0, #100	@ 0x64
 8003bd6:	f002 fcc9 	bl	800656c <HAL_Delay>
	TIM3->PSC = 1000;
 8003bda:	4b9a      	ldr	r3, [pc, #616]	@ (8003e44 <main+0x9ec>)
 8003bdc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003be0:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(100);
 8003be2:	2064      	movs	r0, #100	@ 0x64
 8003be4:	f002 fcc2 	bl	800656c <HAL_Delay>

	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003be8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bec:	4895      	ldr	r0, [pc, #596]	@ (8003e44 <main+0x9ec>)
 8003bee:	f7ff fa58 	bl	80030a2 <LL_TIM_CC_DisableChannel>

	printf("start...\n");
 8003bf2:	4896      	ldr	r0, [pc, #600]	@ (8003e4c <main+0x9f4>)
 8003bf4:	f008 fbd8 	bl	800c3a8 <puts>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (tim7_1ms_flag)
 8003bf8:	4b95      	ldr	r3, [pc, #596]	@ (8003e50 <main+0x9f8>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 80da 	beq.w	8003db6 <main+0x95e>
		{
			tim7_1ms_flag = 0;
 8003c02:	4b93      	ldr	r3, [pc, #588]	@ (8003e50 <main+0x9f8>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]

			ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - (iBus.RV - 1500) * 5 + (iBus.RH - 1500) * 5 - (iBus.LH - 1500) * 5;
 8003c08:	4b8f      	ldr	r3, [pc, #572]	@ (8003e48 <main+0x9f0>)
 8003c0a:	889b      	ldrh	r3, [r3, #4]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	4b8c      	ldr	r3, [pc, #560]	@ (8003e48 <main+0x9f0>)
 8003c18:	885b      	ldrh	r3, [r3, #2]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	0389      	lsls	r1, r1, #14
 8003c1e:	1ac9      	subs	r1, r1, r3
 8003c20:	0089      	lsls	r1, r1, #2
 8003c22:	1acb      	subs	r3, r1, r3
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	4b87      	ldr	r3, [pc, #540]	@ (8003e48 <main+0x9f0>)
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	0089      	lsls	r1, r1, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	4b83      	ldr	r3, [pc, #524]	@ (8003e48 <main+0x9f0>)
 8003c3c:	88db      	ldrh	r3, [r3, #6]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	0389      	lsls	r1, r1, #14
 8003c42:	1ac9      	subs	r1, r1, r3
 8003c44:	0089      	lsls	r1, r1, #2
 8003c46:	1acb      	subs	r3, r1, r3
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003c52:	3334      	adds	r3, #52	@ 0x34
 8003c54:	863b      	strh	r3, [r7, #48]	@ 0x30
			ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + (iBus.RV - 1500) * 5 + (iBus.RH - 1500) * 5 + (iBus.LH - 1500) * 5;
 8003c56:	4b7c      	ldr	r3, [pc, #496]	@ (8003e48 <main+0x9f0>)
 8003c58:	889b      	ldrh	r3, [r3, #4]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	0092      	lsls	r2, r2, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	4b78      	ldr	r3, [pc, #480]	@ (8003e48 <main+0x9f0>)
 8003c66:	885b      	ldrh	r3, [r3, #2]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	0089      	lsls	r1, r1, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	4b74      	ldr	r3, [pc, #464]	@ (8003e48 <main+0x9f0>)
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	0089      	lsls	r1, r1, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	4b70      	ldr	r3, [pc, #448]	@ (8003e48 <main+0x9f0>)
 8003c86:	88db      	ldrh	r3, [r3, #6]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	0089      	lsls	r1, r1, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	4413      	add	r3, r2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f5a3 43a7 	sub.w	r3, r3, #21376	@ 0x5380
 8003c98:	3b7c      	subs	r3, #124	@ 0x7c
 8003c9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + (iBus.RV - 1500) * 5 - (iBus.RH - 1500) * 5 - (iBus.LH - 1500) * 5;
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e48 <main+0x9f0>)
 8003c9e:	889b      	ldrh	r3, [r3, #4]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	0092      	lsls	r2, r2, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	4b67      	ldr	r3, [pc, #412]	@ (8003e48 <main+0x9f0>)
 8003cac:	885b      	ldrh	r3, [r3, #2]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	0089      	lsls	r1, r1, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	4b63      	ldr	r3, [pc, #396]	@ (8003e48 <main+0x9f0>)
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	0389      	lsls	r1, r1, #14
 8003cc2:	1ac9      	subs	r1, r1, r3
 8003cc4:	0089      	lsls	r1, r1, #2
 8003cc6:	1acb      	subs	r3, r1, r3
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	4b5e      	ldr	r3, [pc, #376]	@ (8003e48 <main+0x9f0>)
 8003cd0:	88db      	ldrh	r3, [r3, #6]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	0389      	lsls	r1, r1, #14
 8003cd6:	1ac9      	subs	r1, r1, r3
 8003cd8:	0089      	lsls	r1, r1, #2
 8003cda:	1acb      	subs	r3, r1, r3
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003ce6:	3334      	adds	r3, #52	@ 0x34
 8003ce8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - (iBus.RV - 1500) * 5 - (iBus.RH - 1500) * 5 + (iBus.LH - 1500) * 5;
 8003cea:	4b57      	ldr	r3, [pc, #348]	@ (8003e48 <main+0x9f0>)
 8003cec:	889b      	ldrh	r3, [r3, #4]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	0092      	lsls	r2, r2, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	4b53      	ldr	r3, [pc, #332]	@ (8003e48 <main+0x9f0>)
 8003cfa:	885b      	ldrh	r3, [r3, #2]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	0389      	lsls	r1, r1, #14
 8003d00:	1ac9      	subs	r1, r1, r3
 8003d02:	0089      	lsls	r1, r1, #2
 8003d04:	1acb      	subs	r3, r1, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	4b4e      	ldr	r3, [pc, #312]	@ (8003e48 <main+0x9f0>)
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	4619      	mov	r1, r3
 8003d12:	0389      	lsls	r1, r1, #14
 8003d14:	1ac9      	subs	r1, r1, r3
 8003d16:	0089      	lsls	r1, r1, #2
 8003d18:	1acb      	subs	r3, r1, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	4b49      	ldr	r3, [pc, #292]	@ (8003e48 <main+0x9f0>)
 8003d22:	88db      	ldrh	r3, [r3, #6]
 8003d24:	4619      	mov	r1, r3
 8003d26:	0089      	lsls	r1, r1, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003d34:	3334      	adds	r3, #52	@ 0x34
 8003d36:	857b      	strh	r3, [r7, #42]	@ 0x2a

			printf("%f\t%f\n", BNO080_Pitch, ICM20602.gyro_x);
 8003d38:	4b46      	ldr	r3, [pc, #280]	@ (8003e54 <main+0x9fc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fc fc03 	bl	8000548 <__aeabi_f2d>
 8003d42:	4604      	mov	r4, r0
 8003d44:	460d      	mov	r5, r1
 8003d46:	4b44      	ldr	r3, [pc, #272]	@ (8003e58 <main+0xa00>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fc fbfc 	bl	8000548 <__aeabi_f2d>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	e9cd 2300 	strd	r2, r3, [sp]
 8003d58:	4622      	mov	r2, r4
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	483f      	ldr	r0, [pc, #252]	@ (8003e5c <main+0xa04>)
 8003d5e:	f008 fabb 	bl	800c2d8 <iprintf>
			printf("%f\t%f\n", BNO080_Roll, ICM20602.gyro_y);
 8003d62:	4b3f      	ldr	r3, [pc, #252]	@ (8003e60 <main+0xa08>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fbee 	bl	8000548 <__aeabi_f2d>
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	460d      	mov	r5, r1
 8003d70:	4b39      	ldr	r3, [pc, #228]	@ (8003e58 <main+0xa00>)
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fc fbe7 	bl	8000548 <__aeabi_f2d>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	e9cd 2300 	strd	r2, r3, [sp]
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	4835      	ldr	r0, [pc, #212]	@ (8003e5c <main+0xa04>)
 8003d88:	f008 faa6 	bl	800c2d8 <iprintf>
			printf("%f\t%f\n", BNO080_Yaw, ICM20602.gyro_z);
 8003d8c:	4b35      	ldr	r3, [pc, #212]	@ (8003e64 <main+0xa0c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fc fbd9 	bl	8000548 <__aeabi_f2d>
 8003d96:	4604      	mov	r4, r0
 8003d98:	460d      	mov	r5, r1
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e58 <main+0xa00>)
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fc fbd2 	bl	8000548 <__aeabi_f2d>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	e9cd 2300 	strd	r2, r3, [sp]
 8003dac:	4622      	mov	r2, r4
 8003dae:	462b      	mov	r3, r5
 8003db0:	482a      	ldr	r0, [pc, #168]	@ (8003e5c <main+0xa04>)
 8003db2:	f008 fa91 	bl	800c2d8 <iprintf>
		}

		if (iBus.SwA == 2000 && iBus_prev_SwA != 2000)
 8003db6:	4b24      	ldr	r3, [pc, #144]	@ (8003e48 <main+0x9f0>)
 8003db8:	891b      	ldrh	r3, [r3, #8]
 8003dba:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003dbe:	d121      	bne.n	8003e04 <main+0x9ac>
 8003dc0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003dc2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003dc6:	d01d      	beq.n	8003e04 <main+0x9ac>
		{
			if (iBus.LV < 1010)
 8003dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e48 <main+0x9f0>)
 8003dca:	889b      	ldrh	r3, [r3, #4]
 8003dcc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d803      	bhi.n	8003ddc <main+0x984>
			{
				motor_arm_flag = 1;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003dda:	e013      	b.n	8003e04 <main+0x9ac>
			}
			else
			{
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ddc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003de0:	4818      	ldr	r0, [pc, #96]	@ (8003e44 <main+0x9ec>)
 8003de2:	f7ff f94d 	bl	8003080 <LL_TIM_CC_EnableChannel>

				TIM3->PSC = 1000;
 8003de6:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <main+0x9ec>)
 8003de8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003dec:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(70);
 8003dee:	2046      	movs	r0, #70	@ 0x46
 8003df0:	f002 fbbc 	bl	800656c <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003df4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003df8:	4812      	ldr	r0, [pc, #72]	@ (8003e44 <main+0x9ec>)
 8003dfa:	f7ff f952 	bl	80030a2 <LL_TIM_CC_DisableChannel>
				HAL_Delay(70);
 8003dfe:	2046      	movs	r0, #70	@ 0x46
 8003e00:	f002 fbb4 	bl	800656c <HAL_Delay>
			}
		}
		iBus_prev_SwA = iBus.SwA;
 8003e04:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <main+0x9f0>)
 8003e06:	891b      	ldrh	r3, [r3, #8]
 8003e08:	86bb      	strh	r3, [r7, #52]	@ 0x34

		if (iBus.SwA != 2000)
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e48 <main+0x9f0>)
 8003e0c:	891b      	ldrh	r3, [r3, #8]
 8003e0e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003e12:	d002      	beq.n	8003e1a <main+0x9c2>
		{
			motor_arm_flag = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		if (motor_arm_flag)
 8003e1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d073      	beq.n	8003f0a <main+0xab2>
		{
			if (!failsafe_flag)
 8003e22:	4b11      	ldr	r3, [pc, #68]	@ (8003e68 <main+0xa10>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d15e      	bne.n	8003ee8 <main+0xa90>
			{
				TIM5->CCR1 = ccr1 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr1;
 8003e2a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003e2c:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d81b      	bhi.n	8003e6c <main+0xa14>
 8003e34:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003e36:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	bf38      	it	cc
 8003e3e:	4613      	movcc	r3, r2
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	e015      	b.n	8003e70 <main+0xa18>
 8003e44:	40000400 	.word	0x40000400
 8003e48:	20000314 	.word	0x20000314
 8003e4c:	0800f1a8 	.word	0x0800f1a8
 8003e50:	2000056e 	.word	0x2000056e
 8003e54:	20000368 	.word	0x20000368
 8003e58:	2000032c 	.word	0x2000032c
 8003e5c:	0800f1b4 	.word	0x0800f1b4
 8003e60:	20000364 	.word	0x20000364
 8003e64:	2000036c 	.word	0x2000036c
 8003e68:	20000540 	.word	0x20000540
 8003e6c:	f245 2308 	movw	r3, #21000	@ 0x5208
 8003e70:	4a60      	ldr	r2, [pc, #384]	@ (8003ff4 <main+0xb9c>)
 8003e72:	6353      	str	r3, [r2, #52]	@ 0x34
				TIM5->CCR2 = ccr2 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr2;
 8003e74:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003e76:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d809      	bhi.n	8003e92 <main+0xa3a>
 8003e7e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003e80:	f642 22f7 	movw	r2, #10999	@ 0x2af7
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <main+0xa34>
 8003e88:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003e8a:	e004      	b.n	8003e96 <main+0xa3e>
 8003e8c:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8003e90:	e001      	b.n	8003e96 <main+0xa3e>
 8003e92:	f245 2308 	movw	r3, #21000	@ 0x5208
 8003e96:	4a57      	ldr	r2, [pc, #348]	@ (8003ff4 <main+0xb9c>)
 8003e98:	6393      	str	r3, [r2, #56]	@ 0x38
				TIM5->CCR3 = ccr3 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr3;
 8003e9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003e9c:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d809      	bhi.n	8003eb8 <main+0xa60>
 8003ea4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003ea6:	f642 22f7 	movw	r2, #10999	@ 0x2af7
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <main+0xa5a>
 8003eae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003eb0:	e004      	b.n	8003ebc <main+0xa64>
 8003eb2:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8003eb6:	e001      	b.n	8003ebc <main+0xa64>
 8003eb8:	f245 2308 	movw	r3, #21000	@ 0x5208
 8003ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8003ff4 <main+0xb9c>)
 8003ebe:	63d3      	str	r3, [r2, #60]	@ 0x3c
				TIM5->CCR4 = ccr4 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr4;
 8003ec0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003ec2:	f245 2208 	movw	r2, #21000	@ 0x5208
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d809      	bhi.n	8003ede <main+0xa86>
 8003eca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003ecc:	f642 22f7 	movw	r2, #10999	@ 0x2af7
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <main+0xa80>
 8003ed4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003ed6:	e004      	b.n	8003ee2 <main+0xa8a>
 8003ed8:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8003edc:	e001      	b.n	8003ee2 <main+0xa8a>
 8003ede:	f245 2308 	movw	r3, #21000	@ 0x5208
 8003ee2:	4a44      	ldr	r2, [pc, #272]	@ (8003ff4 <main+0xb9c>)
 8003ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ee6:	e020      	b.n	8003f2a <main+0xad2>
			}
			else
			{
				TIM5->CCR1 = 10500;
 8003ee8:	4b42      	ldr	r3, [pc, #264]	@ (8003ff4 <main+0xb9c>)
 8003eea:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003eee:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM5->CCR2 = 10500;
 8003ef0:	4b40      	ldr	r3, [pc, #256]	@ (8003ff4 <main+0xb9c>)
 8003ef2:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003ef6:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM5->CCR3 = 10500;
 8003ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff4 <main+0xb9c>)
 8003efa:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003efe:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM5->CCR4 = 10500;
 8003f00:	4b3c      	ldr	r3, [pc, #240]	@ (8003ff4 <main+0xb9c>)
 8003f02:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003f06:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f08:	e00f      	b.n	8003f2a <main+0xad2>
			}
		}
		else
		{
			TIM5->CCR1 = 10500;
 8003f0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff4 <main+0xb9c>)
 8003f0c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003f10:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM5->CCR2 = 10500;
 8003f12:	4b38      	ldr	r3, [pc, #224]	@ (8003ff4 <main+0xb9c>)
 8003f14:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003f18:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM5->CCR3 = 10500;
 8003f1a:	4b36      	ldr	r3, [pc, #216]	@ (8003ff4 <main+0xb9c>)
 8003f1c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003f20:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM5->CCR4 = 10500;
 8003f22:	4b34      	ldr	r3, [pc, #208]	@ (8003ff4 <main+0xb9c>)
 8003f24:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003f28:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		if (radio_rx_cplt_flag)
 8003f2a:	4b33      	ldr	r3, [pc, #204]	@ (8003ff8 <main+0xba0>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 83a2 	beq.w	8004678 <main+0x1220>
		{
			radio_rx_cplt_flag = 0;
 8003f34:	4b30      	ldr	r3, [pc, #192]	@ (8003ff8 <main+0xba0>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]

			if (iBus.SwA == 1000)
 8003f3a:	4b30      	ldr	r3, [pc, #192]	@ (8003ffc <main+0xba4>)
 8003f3c:	891b      	ldrh	r3, [r3, #8]
 8003f3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f42:	f040 8399 	bne.w	8004678 <main+0x1220>
			{
				unsigned char chksum = 0xff;
 8003f46:	23ff      	movs	r3, #255	@ 0xff
 8003f48:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
				for (int i = 0; i < 19; i++) chksum = chksum - radio_rx_buf[i];
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f50:	e00b      	b.n	8003f6a <main+0xb12>
 8003f52:	4a2b      	ldr	r2, [pc, #172]	@ (8004000 <main+0xba8>)
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	4413      	add	r3, r2
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	3301      	adds	r3, #1
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	2b12      	cmp	r3, #18
 8003f6e:	ddf0      	ble.n	8003f52 <main+0xafa>

				if (chksum == radio_rx_buf[19])
 8003f70:	4b23      	ldr	r3, [pc, #140]	@ (8004000 <main+0xba8>)
 8003f72:	7cdb      	ldrb	r3, [r3, #19]
 8003f74:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	f040 837d 	bne.w	8004678 <main+0x1220>
				{
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f82:	4820      	ldr	r0, [pc, #128]	@ (8004004 <main+0xbac>)
 8003f84:	f7ff f87c 	bl	8003080 <LL_TIM_CC_EnableChannel>

					TIM3->PSC = 1000;
 8003f88:	4b1e      	ldr	r3, [pc, #120]	@ (8004004 <main+0xbac>)
 8003f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f8e:	629a      	str	r2, [r3, #40]	@ 0x28
					HAL_Delay(10);
 8003f90:	200a      	movs	r0, #10
 8003f92:	f002 faeb 	bl	800656c <HAL_Delay>

					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003f96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f9a:	481a      	ldr	r0, [pc, #104]	@ (8004004 <main+0xbac>)
 8003f9c:	f7ff f881 	bl	80030a2 <LL_TIM_CC_DisableChannel>

					switch (radio_rx_buf[2])
 8003fa0:	4b17      	ldr	r3, [pc, #92]	@ (8004000 <main+0xba8>)
 8003fa2:	789b      	ldrb	r3, [r3, #2]
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	f200 8367 	bhi.w	8004678 <main+0x1220>
 8003faa:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <main+0xb58>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08004009 	.word	0x08004009
 8003fb4:	0800408b 	.word	0x0800408b
 8003fb8:	0800410d 	.word	0x0800410d
 8003fbc:	0800418f 	.word	0x0800418f
 8003fc0:	08004211 	.word	0x08004211
 8003fc4:	08004293 	.word	0x08004293
 8003fc8:	08004679 	.word	0x08004679
 8003fcc:	08004679 	.word	0x08004679
 8003fd0:	08004679 	.word	0x08004679
 8003fd4:	08004679 	.word	0x08004679
 8003fd8:	08004679 	.word	0x08004679
 8003fdc:	08004679 	.word	0x08004679
 8003fe0:	08004679 	.word	0x08004679
 8003fe4:	08004679 	.word	0x08004679
 8003fe8:	08004679 	.word	0x08004679
 8003fec:	08004679 	.word	0x08004679
 8003ff0:	08004379 	.word	0x08004379
 8003ff4:	40000c00 	.word	0x40000c00
 8003ff8:	200004f0 	.word	0x200004f0
 8003ffc:	20000314 	.word	0x20000314
 8004000:	200004dc 	.word	0x200004dc
 8004004:	40000400 	.word	0x40000400
					{
					case 0:
						roll_in_kp = *(float*)&radio_rx_buf[3];
 8004008:	4bab      	ldr	r3, [pc, #684]	@ (80042b8 <main+0xe60>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4aab      	ldr	r2, [pc, #684]	@ (80042bc <main+0xe64>)
 800400e:	6013      	str	r3, [r2, #0]
						roll_in_ki = *(float*)&radio_rx_buf[7];
 8004010:	4bab      	ldr	r3, [pc, #684]	@ (80042c0 <main+0xe68>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4aab      	ldr	r2, [pc, #684]	@ (80042c4 <main+0xe6c>)
 8004016:	6013      	str	r3, [r2, #0]
						roll_in_kd = *(float*)&radio_rx_buf[11];
 8004018:	4bab      	ldr	r3, [pc, #684]	@ (80042c8 <main+0xe70>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4aab      	ldr	r2, [pc, #684]	@ (80042cc <main+0xe74>)
 800401e:	6013      	str	r3, [r2, #0]
						EP_PID_Gain_Write(radio_rx_buf[2], roll_in_kp, roll_in_ki, roll_in_kd);
 8004020:	4bab      	ldr	r3, [pc, #684]	@ (80042d0 <main+0xe78>)
 8004022:	789b      	ldrb	r3, [r3, #2]
 8004024:	4aa5      	ldr	r2, [pc, #660]	@ (80042bc <main+0xe64>)
 8004026:	edd2 7a00 	vldr	s15, [r2]
 800402a:	4aa6      	ldr	r2, [pc, #664]	@ (80042c4 <main+0xe6c>)
 800402c:	ed92 7a00 	vldr	s14, [r2]
 8004030:	4aa6      	ldr	r2, [pc, #664]	@ (80042cc <main+0xe74>)
 8004032:	edd2 6a00 	vldr	s13, [r2]
 8004036:	eeb0 1a66 	vmov.f32	s2, s13
 800403a:	eef0 0a47 	vmov.f32	s1, s14
 800403e:	eeb0 0a67 	vmov.f32	s0, s15
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc ffc6 	bl	8000fd4 <EP_PID_Gain_Write>
						EP_PID_Gain_Read(radio_rx_buf[2], &roll_in_kp, &roll_in_ki, &roll_in_kd);
 8004048:	4ba1      	ldr	r3, [pc, #644]	@ (80042d0 <main+0xe78>)
 800404a:	7898      	ldrb	r0, [r3, #2]
 800404c:	4b9f      	ldr	r3, [pc, #636]	@ (80042cc <main+0xe74>)
 800404e:	4a9d      	ldr	r2, [pc, #628]	@ (80042c4 <main+0xe6c>)
 8004050:	499a      	ldr	r1, [pc, #616]	@ (80042bc <main+0xe64>)
 8004052:	f7fd f855 	bl	8001100 <EP_PID_Gain_Read>
						Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[2], roll_in_kp, roll_in_ki, roll_in_kd);
 8004056:	4b9e      	ldr	r3, [pc, #632]	@ (80042d0 <main+0xe78>)
 8004058:	789b      	ldrb	r3, [r3, #2]
 800405a:	4a98      	ldr	r2, [pc, #608]	@ (80042bc <main+0xe64>)
 800405c:	edd2 7a00 	vldr	s15, [r2]
 8004060:	4a98      	ldr	r2, [pc, #608]	@ (80042c4 <main+0xe6c>)
 8004062:	ed92 7a00 	vldr	s14, [r2]
 8004066:	4a99      	ldr	r2, [pc, #612]	@ (80042cc <main+0xe74>)
 8004068:	edd2 6a00 	vldr	s13, [r2]
 800406c:	eeb0 1a66 	vmov.f32	s2, s13
 8004070:	eef0 0a47 	vmov.f32	s1, s14
 8004074:	eeb0 0a67 	vmov.f32	s0, s15
 8004078:	4619      	mov	r1, r3
 800407a:	4896      	ldr	r0, [pc, #600]	@ (80042d4 <main+0xe7c>)
 800407c:	f001 fe02 	bl	8005c84 <Encode_MSG_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &radio_tx_buf[0], 20);
 8004080:	2214      	movs	r2, #20
 8004082:	4994      	ldr	r1, [pc, #592]	@ (80042d4 <main+0xe7c>)
 8004084:	4894      	ldr	r0, [pc, #592]	@ (80042d8 <main+0xe80>)
 8004086:	f005 faf2 	bl	800966e <HAL_UART_Transmit_IT>
					case 1:
						roll_out_kp = *(float*)&radio_rx_buf[3];
 800408a:	4b8b      	ldr	r3, [pc, #556]	@ (80042b8 <main+0xe60>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a93      	ldr	r2, [pc, #588]	@ (80042dc <main+0xe84>)
 8004090:	6013      	str	r3, [r2, #0]
						roll_out_ki = *(float*)&radio_rx_buf[7];
 8004092:	4b8b      	ldr	r3, [pc, #556]	@ (80042c0 <main+0xe68>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a92      	ldr	r2, [pc, #584]	@ (80042e0 <main+0xe88>)
 8004098:	6013      	str	r3, [r2, #0]
						roll_out_kd = *(float*)&radio_rx_buf[11];
 800409a:	4b8b      	ldr	r3, [pc, #556]	@ (80042c8 <main+0xe70>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a91      	ldr	r2, [pc, #580]	@ (80042e4 <main+0xe8c>)
 80040a0:	6013      	str	r3, [r2, #0]
						EP_PID_Gain_Write(radio_rx_buf[2], roll_out_kp, roll_out_ki, roll_out_kd);
 80040a2:	4b8b      	ldr	r3, [pc, #556]	@ (80042d0 <main+0xe78>)
 80040a4:	789b      	ldrb	r3, [r3, #2]
 80040a6:	4a8d      	ldr	r2, [pc, #564]	@ (80042dc <main+0xe84>)
 80040a8:	edd2 7a00 	vldr	s15, [r2]
 80040ac:	4a8c      	ldr	r2, [pc, #560]	@ (80042e0 <main+0xe88>)
 80040ae:	ed92 7a00 	vldr	s14, [r2]
 80040b2:	4a8c      	ldr	r2, [pc, #560]	@ (80042e4 <main+0xe8c>)
 80040b4:	edd2 6a00 	vldr	s13, [r2]
 80040b8:	eeb0 1a66 	vmov.f32	s2, s13
 80040bc:	eef0 0a47 	vmov.f32	s1, s14
 80040c0:	eeb0 0a67 	vmov.f32	s0, s15
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc ff85 	bl	8000fd4 <EP_PID_Gain_Write>
						EP_PID_Gain_Read(radio_rx_buf[2], &roll_out_kp, &roll_out_ki, &roll_out_kd);
 80040ca:	4b81      	ldr	r3, [pc, #516]	@ (80042d0 <main+0xe78>)
 80040cc:	7898      	ldrb	r0, [r3, #2]
 80040ce:	4b85      	ldr	r3, [pc, #532]	@ (80042e4 <main+0xe8c>)
 80040d0:	4a83      	ldr	r2, [pc, #524]	@ (80042e0 <main+0xe88>)
 80040d2:	4982      	ldr	r1, [pc, #520]	@ (80042dc <main+0xe84>)
 80040d4:	f7fd f814 	bl	8001100 <EP_PID_Gain_Read>
						Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[2], roll_out_kp, roll_out_ki, roll_out_kd);
 80040d8:	4b7d      	ldr	r3, [pc, #500]	@ (80042d0 <main+0xe78>)
 80040da:	789b      	ldrb	r3, [r3, #2]
 80040dc:	4a7f      	ldr	r2, [pc, #508]	@ (80042dc <main+0xe84>)
 80040de:	edd2 7a00 	vldr	s15, [r2]
 80040e2:	4a7f      	ldr	r2, [pc, #508]	@ (80042e0 <main+0xe88>)
 80040e4:	ed92 7a00 	vldr	s14, [r2]
 80040e8:	4a7e      	ldr	r2, [pc, #504]	@ (80042e4 <main+0xe8c>)
 80040ea:	edd2 6a00 	vldr	s13, [r2]
 80040ee:	eeb0 1a66 	vmov.f32	s2, s13
 80040f2:	eef0 0a47 	vmov.f32	s1, s14
 80040f6:	eeb0 0a67 	vmov.f32	s0, s15
 80040fa:	4619      	mov	r1, r3
 80040fc:	4875      	ldr	r0, [pc, #468]	@ (80042d4 <main+0xe7c>)
 80040fe:	f001 fdc1 	bl	8005c84 <Encode_MSG_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &radio_tx_buf[0], 20);
 8004102:	2214      	movs	r2, #20
 8004104:	4973      	ldr	r1, [pc, #460]	@ (80042d4 <main+0xe7c>)
 8004106:	4874      	ldr	r0, [pc, #464]	@ (80042d8 <main+0xe80>)
 8004108:	f005 fab1 	bl	800966e <HAL_UART_Transmit_IT>
					case 2:
						pitch_in_kp = *(float*)&radio_rx_buf[3];
 800410c:	4b6a      	ldr	r3, [pc, #424]	@ (80042b8 <main+0xe60>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a75      	ldr	r2, [pc, #468]	@ (80042e8 <main+0xe90>)
 8004112:	6013      	str	r3, [r2, #0]
						pitch_in_ki = *(float*)&radio_rx_buf[7];
 8004114:	4b6a      	ldr	r3, [pc, #424]	@ (80042c0 <main+0xe68>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a74      	ldr	r2, [pc, #464]	@ (80042ec <main+0xe94>)
 800411a:	6013      	str	r3, [r2, #0]
						pitch_in_kd = *(float*)&radio_rx_buf[11];
 800411c:	4b6a      	ldr	r3, [pc, #424]	@ (80042c8 <main+0xe70>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a73      	ldr	r2, [pc, #460]	@ (80042f0 <main+0xe98>)
 8004122:	6013      	str	r3, [r2, #0]
						EP_PID_Gain_Write(radio_rx_buf[2], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8004124:	4b6a      	ldr	r3, [pc, #424]	@ (80042d0 <main+0xe78>)
 8004126:	789b      	ldrb	r3, [r3, #2]
 8004128:	4a6f      	ldr	r2, [pc, #444]	@ (80042e8 <main+0xe90>)
 800412a:	edd2 7a00 	vldr	s15, [r2]
 800412e:	4a6f      	ldr	r2, [pc, #444]	@ (80042ec <main+0xe94>)
 8004130:	ed92 7a00 	vldr	s14, [r2]
 8004134:	4a6e      	ldr	r2, [pc, #440]	@ (80042f0 <main+0xe98>)
 8004136:	edd2 6a00 	vldr	s13, [r2]
 800413a:	eeb0 1a66 	vmov.f32	s2, s13
 800413e:	eef0 0a47 	vmov.f32	s1, s14
 8004142:	eeb0 0a67 	vmov.f32	s0, s15
 8004146:	4618      	mov	r0, r3
 8004148:	f7fc ff44 	bl	8000fd4 <EP_PID_Gain_Write>
						EP_PID_Gain_Read(radio_rx_buf[2], &pitch_in_kp, &pitch_in_ki, &pitch_in_kd);
 800414c:	4b60      	ldr	r3, [pc, #384]	@ (80042d0 <main+0xe78>)
 800414e:	7898      	ldrb	r0, [r3, #2]
 8004150:	4b67      	ldr	r3, [pc, #412]	@ (80042f0 <main+0xe98>)
 8004152:	4a66      	ldr	r2, [pc, #408]	@ (80042ec <main+0xe94>)
 8004154:	4964      	ldr	r1, [pc, #400]	@ (80042e8 <main+0xe90>)
 8004156:	f7fc ffd3 	bl	8001100 <EP_PID_Gain_Read>
						Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[2], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 800415a:	4b5d      	ldr	r3, [pc, #372]	@ (80042d0 <main+0xe78>)
 800415c:	789b      	ldrb	r3, [r3, #2]
 800415e:	4a62      	ldr	r2, [pc, #392]	@ (80042e8 <main+0xe90>)
 8004160:	edd2 7a00 	vldr	s15, [r2]
 8004164:	4a61      	ldr	r2, [pc, #388]	@ (80042ec <main+0xe94>)
 8004166:	ed92 7a00 	vldr	s14, [r2]
 800416a:	4a61      	ldr	r2, [pc, #388]	@ (80042f0 <main+0xe98>)
 800416c:	edd2 6a00 	vldr	s13, [r2]
 8004170:	eeb0 1a66 	vmov.f32	s2, s13
 8004174:	eef0 0a47 	vmov.f32	s1, s14
 8004178:	eeb0 0a67 	vmov.f32	s0, s15
 800417c:	4619      	mov	r1, r3
 800417e:	4855      	ldr	r0, [pc, #340]	@ (80042d4 <main+0xe7c>)
 8004180:	f001 fd80 	bl	8005c84 <Encode_MSG_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &radio_tx_buf[0], 20);
 8004184:	2214      	movs	r2, #20
 8004186:	4953      	ldr	r1, [pc, #332]	@ (80042d4 <main+0xe7c>)
 8004188:	4853      	ldr	r0, [pc, #332]	@ (80042d8 <main+0xe80>)
 800418a:	f005 fa70 	bl	800966e <HAL_UART_Transmit_IT>
					case 3:
						pitch_out_kp = *(float*)&radio_rx_buf[3];
 800418e:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <main+0xe60>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a58      	ldr	r2, [pc, #352]	@ (80042f4 <main+0xe9c>)
 8004194:	6013      	str	r3, [r2, #0]
						pitch_out_ki = *(float*)&radio_rx_buf[7];
 8004196:	4b4a      	ldr	r3, [pc, #296]	@ (80042c0 <main+0xe68>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a57      	ldr	r2, [pc, #348]	@ (80042f8 <main+0xea0>)
 800419c:	6013      	str	r3, [r2, #0]
						pitch_out_kd = *(float*)&radio_rx_buf[11];
 800419e:	4b4a      	ldr	r3, [pc, #296]	@ (80042c8 <main+0xe70>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a56      	ldr	r2, [pc, #344]	@ (80042fc <main+0xea4>)
 80041a4:	6013      	str	r3, [r2, #0]
						EP_PID_Gain_Write(radio_rx_buf[2], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 80041a6:	4b4a      	ldr	r3, [pc, #296]	@ (80042d0 <main+0xe78>)
 80041a8:	789b      	ldrb	r3, [r3, #2]
 80041aa:	4a52      	ldr	r2, [pc, #328]	@ (80042f4 <main+0xe9c>)
 80041ac:	edd2 7a00 	vldr	s15, [r2]
 80041b0:	4a51      	ldr	r2, [pc, #324]	@ (80042f8 <main+0xea0>)
 80041b2:	ed92 7a00 	vldr	s14, [r2]
 80041b6:	4a51      	ldr	r2, [pc, #324]	@ (80042fc <main+0xea4>)
 80041b8:	edd2 6a00 	vldr	s13, [r2]
 80041bc:	eeb0 1a66 	vmov.f32	s2, s13
 80041c0:	eef0 0a47 	vmov.f32	s1, s14
 80041c4:	eeb0 0a67 	vmov.f32	s0, s15
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc ff03 	bl	8000fd4 <EP_PID_Gain_Write>
						EP_PID_Gain_Read(radio_rx_buf[2], &pitch_out_kp, &pitch_out_ki, &pitch_out_kd);
 80041ce:	4b40      	ldr	r3, [pc, #256]	@ (80042d0 <main+0xe78>)
 80041d0:	7898      	ldrb	r0, [r3, #2]
 80041d2:	4b4a      	ldr	r3, [pc, #296]	@ (80042fc <main+0xea4>)
 80041d4:	4a48      	ldr	r2, [pc, #288]	@ (80042f8 <main+0xea0>)
 80041d6:	4947      	ldr	r1, [pc, #284]	@ (80042f4 <main+0xe9c>)
 80041d8:	f7fc ff92 	bl	8001100 <EP_PID_Gain_Read>
						Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[2], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 80041dc:	4b3c      	ldr	r3, [pc, #240]	@ (80042d0 <main+0xe78>)
 80041de:	789b      	ldrb	r3, [r3, #2]
 80041e0:	4a44      	ldr	r2, [pc, #272]	@ (80042f4 <main+0xe9c>)
 80041e2:	edd2 7a00 	vldr	s15, [r2]
 80041e6:	4a44      	ldr	r2, [pc, #272]	@ (80042f8 <main+0xea0>)
 80041e8:	ed92 7a00 	vldr	s14, [r2]
 80041ec:	4a43      	ldr	r2, [pc, #268]	@ (80042fc <main+0xea4>)
 80041ee:	edd2 6a00 	vldr	s13, [r2]
 80041f2:	eeb0 1a66 	vmov.f32	s2, s13
 80041f6:	eef0 0a47 	vmov.f32	s1, s14
 80041fa:	eeb0 0a67 	vmov.f32	s0, s15
 80041fe:	4619      	mov	r1, r3
 8004200:	4834      	ldr	r0, [pc, #208]	@ (80042d4 <main+0xe7c>)
 8004202:	f001 fd3f 	bl	8005c84 <Encode_MSG_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &radio_tx_buf[0], 20);
 8004206:	2214      	movs	r2, #20
 8004208:	4932      	ldr	r1, [pc, #200]	@ (80042d4 <main+0xe7c>)
 800420a:	4833      	ldr	r0, [pc, #204]	@ (80042d8 <main+0xe80>)
 800420c:	f005 fa2f 	bl	800966e <HAL_UART_Transmit_IT>
					case 4:
						yaw_heading_kp = *(float*)&radio_rx_buf[3];
 8004210:	4b29      	ldr	r3, [pc, #164]	@ (80042b8 <main+0xe60>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a3a      	ldr	r2, [pc, #232]	@ (8004300 <main+0xea8>)
 8004216:	6013      	str	r3, [r2, #0]
						yaw_heading_ki = *(float*)&radio_rx_buf[7];
 8004218:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <main+0xe68>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a39      	ldr	r2, [pc, #228]	@ (8004304 <main+0xeac>)
 800421e:	6013      	str	r3, [r2, #0]
						yaw_heading_kd = *(float*)&radio_rx_buf[11];
 8004220:	4b29      	ldr	r3, [pc, #164]	@ (80042c8 <main+0xe70>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a38      	ldr	r2, [pc, #224]	@ (8004308 <main+0xeb0>)
 8004226:	6013      	str	r3, [r2, #0]
						EP_PID_Gain_Write(radio_rx_buf[2], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8004228:	4b29      	ldr	r3, [pc, #164]	@ (80042d0 <main+0xe78>)
 800422a:	789b      	ldrb	r3, [r3, #2]
 800422c:	4a34      	ldr	r2, [pc, #208]	@ (8004300 <main+0xea8>)
 800422e:	edd2 7a00 	vldr	s15, [r2]
 8004232:	4a34      	ldr	r2, [pc, #208]	@ (8004304 <main+0xeac>)
 8004234:	ed92 7a00 	vldr	s14, [r2]
 8004238:	4a33      	ldr	r2, [pc, #204]	@ (8004308 <main+0xeb0>)
 800423a:	edd2 6a00 	vldr	s13, [r2]
 800423e:	eeb0 1a66 	vmov.f32	s2, s13
 8004242:	eef0 0a47 	vmov.f32	s1, s14
 8004246:	eeb0 0a67 	vmov.f32	s0, s15
 800424a:	4618      	mov	r0, r3
 800424c:	f7fc fec2 	bl	8000fd4 <EP_PID_Gain_Write>
						EP_PID_Gain_Read(radio_rx_buf[2], &yaw_heading_kp, &yaw_heading_ki, &yaw_heading_kd);
 8004250:	4b1f      	ldr	r3, [pc, #124]	@ (80042d0 <main+0xe78>)
 8004252:	7898      	ldrb	r0, [r3, #2]
 8004254:	4b2c      	ldr	r3, [pc, #176]	@ (8004308 <main+0xeb0>)
 8004256:	4a2b      	ldr	r2, [pc, #172]	@ (8004304 <main+0xeac>)
 8004258:	4929      	ldr	r1, [pc, #164]	@ (8004300 <main+0xea8>)
 800425a:	f7fc ff51 	bl	8001100 <EP_PID_Gain_Read>
						Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[2], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 800425e:	4b1c      	ldr	r3, [pc, #112]	@ (80042d0 <main+0xe78>)
 8004260:	789b      	ldrb	r3, [r3, #2]
 8004262:	4a27      	ldr	r2, [pc, #156]	@ (8004300 <main+0xea8>)
 8004264:	edd2 7a00 	vldr	s15, [r2]
 8004268:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <main+0xeac>)
 800426a:	ed92 7a00 	vldr	s14, [r2]
 800426e:	4a26      	ldr	r2, [pc, #152]	@ (8004308 <main+0xeb0>)
 8004270:	edd2 6a00 	vldr	s13, [r2]
 8004274:	eeb0 1a66 	vmov.f32	s2, s13
 8004278:	eef0 0a47 	vmov.f32	s1, s14
 800427c:	eeb0 0a67 	vmov.f32	s0, s15
 8004280:	4619      	mov	r1, r3
 8004282:	4814      	ldr	r0, [pc, #80]	@ (80042d4 <main+0xe7c>)
 8004284:	f001 fcfe 	bl	8005c84 <Encode_MSG_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &radio_tx_buf[0], 20);
 8004288:	2214      	movs	r2, #20
 800428a:	4912      	ldr	r1, [pc, #72]	@ (80042d4 <main+0xe7c>)
 800428c:	4812      	ldr	r0, [pc, #72]	@ (80042d8 <main+0xe80>)
 800428e:	f005 f9ee 	bl	800966e <HAL_UART_Transmit_IT>
					case 5:
						yaw_rate_kp = *(float*)&radio_rx_buf[3];
 8004292:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <main+0xe60>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1d      	ldr	r2, [pc, #116]	@ (800430c <main+0xeb4>)
 8004298:	6013      	str	r3, [r2, #0]
						yaw_rate_ki = *(float*)&radio_rx_buf[7];
 800429a:	4b09      	ldr	r3, [pc, #36]	@ (80042c0 <main+0xe68>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1c      	ldr	r2, [pc, #112]	@ (8004310 <main+0xeb8>)
 80042a0:	6013      	str	r3, [r2, #0]
						yaw_rate_kd = *(float*)&radio_rx_buf[11];
 80042a2:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <main+0xe70>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004314 <main+0xebc>)
 80042a8:	6013      	str	r3, [r2, #0]
						EP_PID_Gain_Write(radio_rx_buf[2], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 80042aa:	4b09      	ldr	r3, [pc, #36]	@ (80042d0 <main+0xe78>)
 80042ac:	789b      	ldrb	r3, [r3, #2]
 80042ae:	4a17      	ldr	r2, [pc, #92]	@ (800430c <main+0xeb4>)
 80042b0:	edd2 7a00 	vldr	s15, [r2]
 80042b4:	e030      	b.n	8004318 <main+0xec0>
 80042b6:	bf00      	nop
 80042b8:	200004df 	.word	0x200004df
 80042bc:	200004f8 	.word	0x200004f8
 80042c0:	200004e3 	.word	0x200004e3
 80042c4:	200004fc 	.word	0x200004fc
 80042c8:	200004e7 	.word	0x200004e7
 80042cc:	20000500 	.word	0x20000500
 80042d0:	200004dc 	.word	0x200004dc
 80042d4:	200004b4 	.word	0x200004b4
 80042d8:	2000046c 	.word	0x2000046c
 80042dc:	20000504 	.word	0x20000504
 80042e0:	20000508 	.word	0x20000508
 80042e4:	2000050c 	.word	0x2000050c
 80042e8:	20000510 	.word	0x20000510
 80042ec:	20000514 	.word	0x20000514
 80042f0:	20000518 	.word	0x20000518
 80042f4:	2000051c 	.word	0x2000051c
 80042f8:	20000520 	.word	0x20000520
 80042fc:	20000524 	.word	0x20000524
 8004300:	20000528 	.word	0x20000528
 8004304:	2000052c 	.word	0x2000052c
 8004308:	20000530 	.word	0x20000530
 800430c:	20000534 	.word	0x20000534
 8004310:	20000538 	.word	0x20000538
 8004314:	2000053c 	.word	0x2000053c
 8004318:	4a76      	ldr	r2, [pc, #472]	@ (80044f4 <main+0x109c>)
 800431a:	ed92 7a00 	vldr	s14, [r2]
 800431e:	4a76      	ldr	r2, [pc, #472]	@ (80044f8 <main+0x10a0>)
 8004320:	edd2 6a00 	vldr	s13, [r2]
 8004324:	eeb0 1a66 	vmov.f32	s2, s13
 8004328:	eef0 0a47 	vmov.f32	s1, s14
 800432c:	eeb0 0a67 	vmov.f32	s0, s15
 8004330:	4618      	mov	r0, r3
 8004332:	f7fc fe4f 	bl	8000fd4 <EP_PID_Gain_Write>
						EP_PID_Gain_Read(radio_rx_buf[2], &yaw_rate_kp, &yaw_rate_ki, &yaw_rate_kd);
 8004336:	4b71      	ldr	r3, [pc, #452]	@ (80044fc <main+0x10a4>)
 8004338:	7898      	ldrb	r0, [r3, #2]
 800433a:	4b6f      	ldr	r3, [pc, #444]	@ (80044f8 <main+0x10a0>)
 800433c:	4a6d      	ldr	r2, [pc, #436]	@ (80044f4 <main+0x109c>)
 800433e:	4970      	ldr	r1, [pc, #448]	@ (8004500 <main+0x10a8>)
 8004340:	f7fc fede 	bl	8001100 <EP_PID_Gain_Read>
						Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[2], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8004344:	4b6d      	ldr	r3, [pc, #436]	@ (80044fc <main+0x10a4>)
 8004346:	789b      	ldrb	r3, [r3, #2]
 8004348:	4a6d      	ldr	r2, [pc, #436]	@ (8004500 <main+0x10a8>)
 800434a:	edd2 7a00 	vldr	s15, [r2]
 800434e:	4a69      	ldr	r2, [pc, #420]	@ (80044f4 <main+0x109c>)
 8004350:	ed92 7a00 	vldr	s14, [r2]
 8004354:	4a68      	ldr	r2, [pc, #416]	@ (80044f8 <main+0x10a0>)
 8004356:	edd2 6a00 	vldr	s13, [r2]
 800435a:	eeb0 1a66 	vmov.f32	s2, s13
 800435e:	eef0 0a47 	vmov.f32	s1, s14
 8004362:	eeb0 0a67 	vmov.f32	s0, s15
 8004366:	4619      	mov	r1, r3
 8004368:	4866      	ldr	r0, [pc, #408]	@ (8004504 <main+0x10ac>)
 800436a:	f001 fc8b 	bl	8005c84 <Encode_MSG_PID_Gain>
						HAL_UART_Transmit_IT(&huart1, &radio_tx_buf[0], 20);
 800436e:	2214      	movs	r2, #20
 8004370:	4964      	ldr	r1, [pc, #400]	@ (8004504 <main+0x10ac>)
 8004372:	4865      	ldr	r0, [pc, #404]	@ (8004508 <main+0x10b0>)
 8004374:	f005 f97b 	bl	800966e <HAL_UART_Transmit_IT>
					case 0x10:
						switch (radio_rx_buf[3])
 8004378:	4b60      	ldr	r3, [pc, #384]	@ (80044fc <main+0x10a4>)
 800437a:	78db      	ldrb	r3, [r3, #3]
 800437c:	2b06      	cmp	r3, #6
 800437e:	f200 817a 	bhi.w	8004676 <main+0x121e>
 8004382:	a201      	add	r2, pc, #4	@ (adr r2, 8004388 <main+0xf30>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	080043a5 	.word	0x080043a5
 800438c:	080043dd 	.word	0x080043dd
 8004390:	08004415 	.word	0x08004415
 8004394:	0800444d 	.word	0x0800444d
 8004398:	08004485 	.word	0x08004485
 800439c:	080044bd 	.word	0x080044bd
 80043a0:	08004549 	.word	0x08004549
						{
						case 0:
							Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[3], roll_in_kp, roll_in_ki, roll_in_kd);
 80043a4:	4b55      	ldr	r3, [pc, #340]	@ (80044fc <main+0x10a4>)
 80043a6:	78db      	ldrb	r3, [r3, #3]
 80043a8:	4a58      	ldr	r2, [pc, #352]	@ (800450c <main+0x10b4>)
 80043aa:	edd2 7a00 	vldr	s15, [r2]
 80043ae:	4a58      	ldr	r2, [pc, #352]	@ (8004510 <main+0x10b8>)
 80043b0:	ed92 7a00 	vldr	s14, [r2]
 80043b4:	4a57      	ldr	r2, [pc, #348]	@ (8004514 <main+0x10bc>)
 80043b6:	edd2 6a00 	vldr	s13, [r2]
 80043ba:	eeb0 1a66 	vmov.f32	s2, s13
 80043be:	eef0 0a47 	vmov.f32	s1, s14
 80043c2:	eeb0 0a67 	vmov.f32	s0, s15
 80043c6:	4619      	mov	r1, r3
 80043c8:	484e      	ldr	r0, [pc, #312]	@ (8004504 <main+0x10ac>)
 80043ca:	f001 fc5b 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 80043ce:	230a      	movs	r3, #10
 80043d0:	2214      	movs	r2, #20
 80043d2:	494c      	ldr	r1, [pc, #304]	@ (8004504 <main+0x10ac>)
 80043d4:	484c      	ldr	r0, [pc, #304]	@ (8004508 <main+0x10b0>)
 80043d6:	f005 f8bf 	bl	8009558 <HAL_UART_Transmit>
							break;
 80043da:	e14c      	b.n	8004676 <main+0x121e>
						case 1:
							Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[3], roll_out_kp, roll_out_ki, roll_out_kd);
 80043dc:	4b47      	ldr	r3, [pc, #284]	@ (80044fc <main+0x10a4>)
 80043de:	78db      	ldrb	r3, [r3, #3]
 80043e0:	4a4d      	ldr	r2, [pc, #308]	@ (8004518 <main+0x10c0>)
 80043e2:	edd2 7a00 	vldr	s15, [r2]
 80043e6:	4a4d      	ldr	r2, [pc, #308]	@ (800451c <main+0x10c4>)
 80043e8:	ed92 7a00 	vldr	s14, [r2]
 80043ec:	4a4c      	ldr	r2, [pc, #304]	@ (8004520 <main+0x10c8>)
 80043ee:	edd2 6a00 	vldr	s13, [r2]
 80043f2:	eeb0 1a66 	vmov.f32	s2, s13
 80043f6:	eef0 0a47 	vmov.f32	s1, s14
 80043fa:	eeb0 0a67 	vmov.f32	s0, s15
 80043fe:	4619      	mov	r1, r3
 8004400:	4840      	ldr	r0, [pc, #256]	@ (8004504 <main+0x10ac>)
 8004402:	f001 fc3f 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 8004406:	230a      	movs	r3, #10
 8004408:	2214      	movs	r2, #20
 800440a:	493e      	ldr	r1, [pc, #248]	@ (8004504 <main+0x10ac>)
 800440c:	483e      	ldr	r0, [pc, #248]	@ (8004508 <main+0x10b0>)
 800440e:	f005 f8a3 	bl	8009558 <HAL_UART_Transmit>
							break;
 8004412:	e130      	b.n	8004676 <main+0x121e>
						case 2:
							Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[3], pitch_in_kp, pitch_in_ki, pitch_in_kd);
 8004414:	4b39      	ldr	r3, [pc, #228]	@ (80044fc <main+0x10a4>)
 8004416:	78db      	ldrb	r3, [r3, #3]
 8004418:	4a42      	ldr	r2, [pc, #264]	@ (8004524 <main+0x10cc>)
 800441a:	edd2 7a00 	vldr	s15, [r2]
 800441e:	4a42      	ldr	r2, [pc, #264]	@ (8004528 <main+0x10d0>)
 8004420:	ed92 7a00 	vldr	s14, [r2]
 8004424:	4a41      	ldr	r2, [pc, #260]	@ (800452c <main+0x10d4>)
 8004426:	edd2 6a00 	vldr	s13, [r2]
 800442a:	eeb0 1a66 	vmov.f32	s2, s13
 800442e:	eef0 0a47 	vmov.f32	s1, s14
 8004432:	eeb0 0a67 	vmov.f32	s0, s15
 8004436:	4619      	mov	r1, r3
 8004438:	4832      	ldr	r0, [pc, #200]	@ (8004504 <main+0x10ac>)
 800443a:	f001 fc23 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 800443e:	230a      	movs	r3, #10
 8004440:	2214      	movs	r2, #20
 8004442:	4930      	ldr	r1, [pc, #192]	@ (8004504 <main+0x10ac>)
 8004444:	4830      	ldr	r0, [pc, #192]	@ (8004508 <main+0x10b0>)
 8004446:	f005 f887 	bl	8009558 <HAL_UART_Transmit>
							break;
 800444a:	e114      	b.n	8004676 <main+0x121e>
						case 3:
							Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[3], pitch_out_kp, pitch_out_ki, pitch_out_kd);
 800444c:	4b2b      	ldr	r3, [pc, #172]	@ (80044fc <main+0x10a4>)
 800444e:	78db      	ldrb	r3, [r3, #3]
 8004450:	4a37      	ldr	r2, [pc, #220]	@ (8004530 <main+0x10d8>)
 8004452:	edd2 7a00 	vldr	s15, [r2]
 8004456:	4a37      	ldr	r2, [pc, #220]	@ (8004534 <main+0x10dc>)
 8004458:	ed92 7a00 	vldr	s14, [r2]
 800445c:	4a36      	ldr	r2, [pc, #216]	@ (8004538 <main+0x10e0>)
 800445e:	edd2 6a00 	vldr	s13, [r2]
 8004462:	eeb0 1a66 	vmov.f32	s2, s13
 8004466:	eef0 0a47 	vmov.f32	s1, s14
 800446a:	eeb0 0a67 	vmov.f32	s0, s15
 800446e:	4619      	mov	r1, r3
 8004470:	4824      	ldr	r0, [pc, #144]	@ (8004504 <main+0x10ac>)
 8004472:	f001 fc07 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 8004476:	230a      	movs	r3, #10
 8004478:	2214      	movs	r2, #20
 800447a:	4922      	ldr	r1, [pc, #136]	@ (8004504 <main+0x10ac>)
 800447c:	4822      	ldr	r0, [pc, #136]	@ (8004508 <main+0x10b0>)
 800447e:	f005 f86b 	bl	8009558 <HAL_UART_Transmit>
							break;
 8004482:	e0f8      	b.n	8004676 <main+0x121e>
						case 4:
							Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[3], yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8004484:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <main+0x10a4>)
 8004486:	78db      	ldrb	r3, [r3, #3]
 8004488:	4a2c      	ldr	r2, [pc, #176]	@ (800453c <main+0x10e4>)
 800448a:	edd2 7a00 	vldr	s15, [r2]
 800448e:	4a2c      	ldr	r2, [pc, #176]	@ (8004540 <main+0x10e8>)
 8004490:	ed92 7a00 	vldr	s14, [r2]
 8004494:	4a2b      	ldr	r2, [pc, #172]	@ (8004544 <main+0x10ec>)
 8004496:	edd2 6a00 	vldr	s13, [r2]
 800449a:	eeb0 1a66 	vmov.f32	s2, s13
 800449e:	eef0 0a47 	vmov.f32	s1, s14
 80044a2:	eeb0 0a67 	vmov.f32	s0, s15
 80044a6:	4619      	mov	r1, r3
 80044a8:	4816      	ldr	r0, [pc, #88]	@ (8004504 <main+0x10ac>)
 80044aa:	f001 fbeb 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 80044ae:	230a      	movs	r3, #10
 80044b0:	2214      	movs	r2, #20
 80044b2:	4914      	ldr	r1, [pc, #80]	@ (8004504 <main+0x10ac>)
 80044b4:	4814      	ldr	r0, [pc, #80]	@ (8004508 <main+0x10b0>)
 80044b6:	f005 f84f 	bl	8009558 <HAL_UART_Transmit>
							break;
 80044ba:	e0dc      	b.n	8004676 <main+0x121e>
						case 5:
							Encode_MSG_PID_Gain(&radio_tx_buf[0], radio_rx_buf[3], yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 80044bc:	4b0f      	ldr	r3, [pc, #60]	@ (80044fc <main+0x10a4>)
 80044be:	78db      	ldrb	r3, [r3, #3]
 80044c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004500 <main+0x10a8>)
 80044c2:	edd2 7a00 	vldr	s15, [r2]
 80044c6:	4a0b      	ldr	r2, [pc, #44]	@ (80044f4 <main+0x109c>)
 80044c8:	ed92 7a00 	vldr	s14, [r2]
 80044cc:	4a0a      	ldr	r2, [pc, #40]	@ (80044f8 <main+0x10a0>)
 80044ce:	edd2 6a00 	vldr	s13, [r2]
 80044d2:	eeb0 1a66 	vmov.f32	s2, s13
 80044d6:	eef0 0a47 	vmov.f32	s1, s14
 80044da:	eeb0 0a67 	vmov.f32	s0, s15
 80044de:	4619      	mov	r1, r3
 80044e0:	4808      	ldr	r0, [pc, #32]	@ (8004504 <main+0x10ac>)
 80044e2:	f001 fbcf 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 80044e6:	230a      	movs	r3, #10
 80044e8:	2214      	movs	r2, #20
 80044ea:	4906      	ldr	r1, [pc, #24]	@ (8004504 <main+0x10ac>)
 80044ec:	4806      	ldr	r0, [pc, #24]	@ (8004508 <main+0x10b0>)
 80044ee:	f005 f833 	bl	8009558 <HAL_UART_Transmit>
							break;
 80044f2:	e0c0      	b.n	8004676 <main+0x121e>
 80044f4:	20000538 	.word	0x20000538
 80044f8:	2000053c 	.word	0x2000053c
 80044fc:	200004dc 	.word	0x200004dc
 8004500:	20000534 	.word	0x20000534
 8004504:	200004b4 	.word	0x200004b4
 8004508:	2000046c 	.word	0x2000046c
 800450c:	200004f8 	.word	0x200004f8
 8004510:	200004fc 	.word	0x200004fc
 8004514:	20000500 	.word	0x20000500
 8004518:	20000504 	.word	0x20000504
 800451c:	20000508 	.word	0x20000508
 8004520:	2000050c 	.word	0x2000050c
 8004524:	20000510 	.word	0x20000510
 8004528:	20000514 	.word	0x20000514
 800452c:	20000518 	.word	0x20000518
 8004530:	2000051c 	.word	0x2000051c
 8004534:	20000520 	.word	0x20000520
 8004538:	20000524 	.word	0x20000524
 800453c:	20000528 	.word	0x20000528
 8004540:	2000052c 	.word	0x2000052c
 8004544:	20000530 	.word	0x20000530
						case 6:
							Encode_MSG_PID_Gain(&radio_tx_buf[0], 0, roll_in_kp, roll_in_ki, roll_in_kd);
 8004548:	4b6f      	ldr	r3, [pc, #444]	@ (8004708 <main+0x12b0>)
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	4b6f      	ldr	r3, [pc, #444]	@ (800470c <main+0x12b4>)
 8004550:	ed93 7a00 	vldr	s14, [r3]
 8004554:	4b6e      	ldr	r3, [pc, #440]	@ (8004710 <main+0x12b8>)
 8004556:	edd3 6a00 	vldr	s13, [r3]
 800455a:	eeb0 1a66 	vmov.f32	s2, s13
 800455e:	eef0 0a47 	vmov.f32	s1, s14
 8004562:	eeb0 0a67 	vmov.f32	s0, s15
 8004566:	2100      	movs	r1, #0
 8004568:	486a      	ldr	r0, [pc, #424]	@ (8004714 <main+0x12bc>)
 800456a:	f001 fb8b 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 800456e:	230a      	movs	r3, #10
 8004570:	2214      	movs	r2, #20
 8004572:	4968      	ldr	r1, [pc, #416]	@ (8004714 <main+0x12bc>)
 8004574:	4868      	ldr	r0, [pc, #416]	@ (8004718 <main+0x12c0>)
 8004576:	f004 ffef 	bl	8009558 <HAL_UART_Transmit>
							Encode_MSG_PID_Gain(&radio_tx_buf[0], 1, roll_out_kp, roll_out_ki, roll_out_kd);
 800457a:	4b68      	ldr	r3, [pc, #416]	@ (800471c <main+0x12c4>)
 800457c:	edd3 7a00 	vldr	s15, [r3]
 8004580:	4b67      	ldr	r3, [pc, #412]	@ (8004720 <main+0x12c8>)
 8004582:	ed93 7a00 	vldr	s14, [r3]
 8004586:	4b67      	ldr	r3, [pc, #412]	@ (8004724 <main+0x12cc>)
 8004588:	edd3 6a00 	vldr	s13, [r3]
 800458c:	eeb0 1a66 	vmov.f32	s2, s13
 8004590:	eef0 0a47 	vmov.f32	s1, s14
 8004594:	eeb0 0a67 	vmov.f32	s0, s15
 8004598:	2101      	movs	r1, #1
 800459a:	485e      	ldr	r0, [pc, #376]	@ (8004714 <main+0x12bc>)
 800459c:	f001 fb72 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 80045a0:	230a      	movs	r3, #10
 80045a2:	2214      	movs	r2, #20
 80045a4:	495b      	ldr	r1, [pc, #364]	@ (8004714 <main+0x12bc>)
 80045a6:	485c      	ldr	r0, [pc, #368]	@ (8004718 <main+0x12c0>)
 80045a8:	f004 ffd6 	bl	8009558 <HAL_UART_Transmit>
							Encode_MSG_PID_Gain(&radio_tx_buf[0], 2, pitch_in_kp, pitch_in_ki, pitch_in_kd);
 80045ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004728 <main+0x12d0>)
 80045ae:	edd3 7a00 	vldr	s15, [r3]
 80045b2:	4b5e      	ldr	r3, [pc, #376]	@ (800472c <main+0x12d4>)
 80045b4:	ed93 7a00 	vldr	s14, [r3]
 80045b8:	4b5d      	ldr	r3, [pc, #372]	@ (8004730 <main+0x12d8>)
 80045ba:	edd3 6a00 	vldr	s13, [r3]
 80045be:	eeb0 1a66 	vmov.f32	s2, s13
 80045c2:	eef0 0a47 	vmov.f32	s1, s14
 80045c6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ca:	2102      	movs	r1, #2
 80045cc:	4851      	ldr	r0, [pc, #324]	@ (8004714 <main+0x12bc>)
 80045ce:	f001 fb59 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 80045d2:	230a      	movs	r3, #10
 80045d4:	2214      	movs	r2, #20
 80045d6:	494f      	ldr	r1, [pc, #316]	@ (8004714 <main+0x12bc>)
 80045d8:	484f      	ldr	r0, [pc, #316]	@ (8004718 <main+0x12c0>)
 80045da:	f004 ffbd 	bl	8009558 <HAL_UART_Transmit>
							Encode_MSG_PID_Gain(&radio_tx_buf[0], 3, pitch_out_kp, pitch_out_ki, pitch_out_kd);
 80045de:	4b55      	ldr	r3, [pc, #340]	@ (8004734 <main+0x12dc>)
 80045e0:	edd3 7a00 	vldr	s15, [r3]
 80045e4:	4b54      	ldr	r3, [pc, #336]	@ (8004738 <main+0x12e0>)
 80045e6:	ed93 7a00 	vldr	s14, [r3]
 80045ea:	4b54      	ldr	r3, [pc, #336]	@ (800473c <main+0x12e4>)
 80045ec:	edd3 6a00 	vldr	s13, [r3]
 80045f0:	eeb0 1a66 	vmov.f32	s2, s13
 80045f4:	eef0 0a47 	vmov.f32	s1, s14
 80045f8:	eeb0 0a67 	vmov.f32	s0, s15
 80045fc:	2103      	movs	r1, #3
 80045fe:	4845      	ldr	r0, [pc, #276]	@ (8004714 <main+0x12bc>)
 8004600:	f001 fb40 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 8004604:	230a      	movs	r3, #10
 8004606:	2214      	movs	r2, #20
 8004608:	4942      	ldr	r1, [pc, #264]	@ (8004714 <main+0x12bc>)
 800460a:	4843      	ldr	r0, [pc, #268]	@ (8004718 <main+0x12c0>)
 800460c:	f004 ffa4 	bl	8009558 <HAL_UART_Transmit>
							Encode_MSG_PID_Gain(&radio_tx_buf[0], 4, yaw_heading_kp, yaw_heading_ki, yaw_heading_kd);
 8004610:	4b4b      	ldr	r3, [pc, #300]	@ (8004740 <main+0x12e8>)
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	4b4b      	ldr	r3, [pc, #300]	@ (8004744 <main+0x12ec>)
 8004618:	ed93 7a00 	vldr	s14, [r3]
 800461c:	4b4a      	ldr	r3, [pc, #296]	@ (8004748 <main+0x12f0>)
 800461e:	edd3 6a00 	vldr	s13, [r3]
 8004622:	eeb0 1a66 	vmov.f32	s2, s13
 8004626:	eef0 0a47 	vmov.f32	s1, s14
 800462a:	eeb0 0a67 	vmov.f32	s0, s15
 800462e:	2104      	movs	r1, #4
 8004630:	4838      	ldr	r0, [pc, #224]	@ (8004714 <main+0x12bc>)
 8004632:	f001 fb27 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 8004636:	230a      	movs	r3, #10
 8004638:	2214      	movs	r2, #20
 800463a:	4936      	ldr	r1, [pc, #216]	@ (8004714 <main+0x12bc>)
 800463c:	4836      	ldr	r0, [pc, #216]	@ (8004718 <main+0x12c0>)
 800463e:	f004 ff8b 	bl	8009558 <HAL_UART_Transmit>
							Encode_MSG_PID_Gain(&radio_tx_buf[0], 5, yaw_rate_kp, yaw_rate_ki, yaw_rate_kd);
 8004642:	4b42      	ldr	r3, [pc, #264]	@ (800474c <main+0x12f4>)
 8004644:	edd3 7a00 	vldr	s15, [r3]
 8004648:	4b41      	ldr	r3, [pc, #260]	@ (8004750 <main+0x12f8>)
 800464a:	ed93 7a00 	vldr	s14, [r3]
 800464e:	4b41      	ldr	r3, [pc, #260]	@ (8004754 <main+0x12fc>)
 8004650:	edd3 6a00 	vldr	s13, [r3]
 8004654:	eeb0 1a66 	vmov.f32	s2, s13
 8004658:	eef0 0a47 	vmov.f32	s1, s14
 800465c:	eeb0 0a67 	vmov.f32	s0, s15
 8004660:	2105      	movs	r1, #5
 8004662:	482c      	ldr	r0, [pc, #176]	@ (8004714 <main+0x12bc>)
 8004664:	f001 fb0e 	bl	8005c84 <Encode_MSG_PID_Gain>
							HAL_UART_Transmit(&huart1, &radio_tx_buf[0], 20, 10);
 8004668:	230a      	movs	r3, #10
 800466a:	2214      	movs	r2, #20
 800466c:	4929      	ldr	r1, [pc, #164]	@ (8004714 <main+0x12bc>)
 800466e:	482a      	ldr	r0, [pc, #168]	@ (8004718 <main+0x12c0>)
 8004670:	f004 ff72 	bl	8009558 <HAL_UART_Transmit>
							break;
 8004674:	bf00      	nop
						}
						break;
 8004676:	bf00      	nop
					}
				}
			}
		}

		if (tim7_20ms_flag && !tim7_100ms_flag)
 8004678:	4b37      	ldr	r3, [pc, #220]	@ (8004758 <main+0x1300>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00f      	beq.n	80046a0 <main+0x1248>
 8004680:	4b36      	ldr	r3, [pc, #216]	@ (800475c <main+0x1304>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <main+0x1248>
		{
			tim7_20ms_flag = 0;
 8004688:	4b33      	ldr	r3, [pc, #204]	@ (8004758 <main+0x1300>)
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]

			Encode_MSG_AHRS(&radio_tx_buf[0]);
 800468e:	4821      	ldr	r0, [pc, #132]	@ (8004714 <main+0x12bc>)
 8004690:	f001 f8e4 	bl	800585c <Encode_MSG_AHRS>

			HAL_UART_Transmit_IT(&huart1, &radio_tx_buf[0], 20);
 8004694:	2214      	movs	r2, #20
 8004696:	491f      	ldr	r1, [pc, #124]	@ (8004714 <main+0x12bc>)
 8004698:	481f      	ldr	r0, [pc, #124]	@ (8004718 <main+0x12c0>)
 800469a:	f004 ffe8 	bl	800966e <HAL_UART_Transmit_IT>
 800469e:	e018      	b.n	80046d2 <main+0x127a>
		}
		else if (tim7_20ms_flag && tim7_100ms_flag)
 80046a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004758 <main+0x1300>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d014      	beq.n	80046d2 <main+0x127a>
 80046a8:	4b2c      	ldr	r3, [pc, #176]	@ (800475c <main+0x1304>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d010      	beq.n	80046d2 <main+0x127a>
		{
			tim7_20ms_flag = 0;
 80046b0:	4b29      	ldr	r3, [pc, #164]	@ (8004758 <main+0x1300>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 0;
 80046b6:	4b29      	ldr	r3, [pc, #164]	@ (800475c <main+0x1304>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]

			Encode_MSG_AHRS(&radio_tx_buf[0]);
 80046bc:	4815      	ldr	r0, [pc, #84]	@ (8004714 <main+0x12bc>)
 80046be:	f001 f8cd 	bl	800585c <Encode_MSG_AHRS>
			Encode_MSG_GPS(&radio_tx_buf[20]);
 80046c2:	4827      	ldr	r0, [pc, #156]	@ (8004760 <main+0x1308>)
 80046c4:	f001 fa36 	bl	8005b34 <Encode_MSG_GPS>

			HAL_UART_Transmit_IT(&huart1, &radio_tx_buf[0], 40);
 80046c8:	2228      	movs	r2, #40	@ 0x28
 80046ca:	4912      	ldr	r1, [pc, #72]	@ (8004714 <main+0x12bc>)
 80046cc:	4812      	ldr	r0, [pc, #72]	@ (8004718 <main+0x12c0>)
 80046ce:	f004 ffce 	bl	800966e <HAL_UART_Transmit_IT>
		}

		// convert ADC value to Voltage value
		batVolt = adcVal * 0.003619f;
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	ee07 3a90 	vmov	s15, r3
 80046d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004764 <main+0x130c>
 80046e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046e4:	4b20      	ldr	r3, [pc, #128]	@ (8004768 <main+0x1310>)
 80046e6:	edc3 7a00 	vstr	s15, [r3]

		if (batVolt < 10.0f)
 80046ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004768 <main+0x1310>)
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80046f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fc:	d538      	bpl.n	8004770 <main+0x1318>
		{
			low_bat_flag = 1;
 80046fe:	4b1b      	ldr	r3, [pc, #108]	@ (800476c <main+0x1314>)
 8004700:	2201      	movs	r2, #1
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	e037      	b.n	8004776 <main+0x131e>
 8004706:	bf00      	nop
 8004708:	200004f8 	.word	0x200004f8
 800470c:	200004fc 	.word	0x200004fc
 8004710:	20000500 	.word	0x20000500
 8004714:	200004b4 	.word	0x200004b4
 8004718:	2000046c 	.word	0x2000046c
 800471c:	20000504 	.word	0x20000504
 8004720:	20000508 	.word	0x20000508
 8004724:	2000050c 	.word	0x2000050c
 8004728:	20000510 	.word	0x20000510
 800472c:	20000514 	.word	0x20000514
 8004730:	20000518 	.word	0x20000518
 8004734:	2000051c 	.word	0x2000051c
 8004738:	20000520 	.word	0x20000520
 800473c:	20000524 	.word	0x20000524
 8004740:	20000528 	.word	0x20000528
 8004744:	2000052c 	.word	0x2000052c
 8004748:	20000530 	.word	0x20000530
 800474c:	20000534 	.word	0x20000534
 8004750:	20000538 	.word	0x20000538
 8004754:	2000053c 	.word	0x2000053c
 8004758:	2000056f 	.word	0x2000056f
 800475c:	20000570 	.word	0x20000570
 8004760:	200004c8 	.word	0x200004c8
 8004764:	3b6d2cbf 	.word	0x3b6d2cbf
 8004768:	200004f4 	.word	0x200004f4
 800476c:	20000541 	.word	0x20000541
		}
		else
		{
			low_bat_flag = 0;
 8004770:	4b81      	ldr	r3, [pc, #516]	@ (8004978 <main+0x1520>)
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
		}

		if (BNO080_dataAvailable())
 8004776:	f7fc ff75 	bl	8001664 <BNO080_dataAvailable>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <main+0x136a>
		{
			q[0] = BNO080_getQuatI();
 8004780:	f7fd f930 	bl	80019e4 <BNO080_getQuatI>
 8004784:	eef0 7a40 	vmov.f32	s15, s0
 8004788:	edc7 7a02 	vstr	s15, [r7, #8]
			q[1] = BNO080_getQuatJ();
 800478c:	f7fd f940 	bl	8001a10 <BNO080_getQuatJ>
 8004790:	eef0 7a40 	vmov.f32	s15, s0
 8004794:	edc7 7a03 	vstr	s15, [r7, #12]
			q[2] = BNO080_getQuatK();
 8004798:	f7fd f950 	bl	8001a3c <BNO080_getQuatK>
 800479c:	eef0 7a40 	vmov.f32	s15, s0
 80047a0:	edc7 7a04 	vstr	s15, [r7, #16]
			q[3] = BNO080_getQuatReal();
 80047a4:	f7fd f960 	bl	8001a68 <BNO080_getQuatReal>
 80047a8:	eef0 7a40 	vmov.f32	s15, s0
 80047ac:	edc7 7a05 	vstr	s15, [r7, #20]
			quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 80047b0:	f7fd f970 	bl	8001a94 <BNO080_getQuatRadianAccuracy>
 80047b4:	ed87 0a06 	vstr	s0, [r7, #24]

			Quaternion_Update(&q[0]);
 80047b8:	f107 0308 	add.w	r3, r7, #8
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fa33 	bl	8002c28 <Quaternion_Update>

			//printf("%.2f %.2f\n", BNO080_Roll, BNO080_Pitch);
		}

		if (ICM20602_DataReady())
 80047c2:	f7fd ff65 	bl	8002690 <ICM20602_DataReady>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d038      	beq.n	800483e <main+0x13e6>
		{
			ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 80047cc:	486b      	ldr	r0, [pc, #428]	@ (800497c <main+0x1524>)
 80047ce:	f7fd ff2f 	bl	8002630 <ICM20602_Get3AxisGyroRawData>

			ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 80047d2:	4b6b      	ldr	r3, [pc, #428]	@ (8004980 <main+0x1528>)
 80047d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047d8:	ee07 3a90 	vmov	s15, r3
 80047dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047e0:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004984 <main+0x152c>
 80047e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047e8:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8004988 <main+0x1530>
 80047ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047f0:	4b63      	ldr	r3, [pc, #396]	@ (8004980 <main+0x1528>)
 80047f2:	edc3 7a07 	vstr	s15, [r3, #28]
			ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 80047f6:	4b62      	ldr	r3, [pc, #392]	@ (8004980 <main+0x1528>)
 80047f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80047fc:	ee07 3a90 	vmov	s15, r3
 8004800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004804:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8004984 <main+0x152c>
 8004808:	ee27 7a87 	vmul.f32	s14, s15, s14
 800480c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8004988 <main+0x1530>
 8004810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004814:	4b5a      	ldr	r3, [pc, #360]	@ (8004980 <main+0x1528>)
 8004816:	edc3 7a08 	vstr	s15, [r3, #32]
			ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 800481a:	4b59      	ldr	r3, [pc, #356]	@ (8004980 <main+0x1528>)
 800481c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004820:	ee07 3a90 	vmov	s15, r3
 8004824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004828:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8004984 <main+0x152c>
 800482c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004830:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8004988 <main+0x1530>
 8004834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004838:	4b51      	ldr	r3, [pc, #324]	@ (8004980 <main+0x1528>)
 800483a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			//printf("%d %d %d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
			//printf("%d %d %d\n", (int)(ICM20602->gyro_x*100), (int)(ICM20602->gyro_y*100), (int)(ICM20602->gyro_z*100));
		}

		if (LPS22HH_DataReady())
 800483e:	f7fe f999 	bl	8002b74 <LPS22HH_DataReady>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d038      	beq.n	80048ba <main+0x1462>
		{
			LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 8004848:	4850      	ldr	r0, [pc, #320]	@ (800498c <main+0x1534>)
 800484a:	f7fe f99f 	bl	8002b8c <LPS22HH_GetPressure>
			LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 800484e:	4850      	ldr	r0, [pc, #320]	@ (8004990 <main+0x1538>)
 8004850:	f7fe f9a9 	bl	8002ba6 <LPS22HH_GetTemperature>

			LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f); // altitude in cms
 8004854:	4b4d      	ldr	r3, [pc, #308]	@ (800498c <main+0x1534>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004860:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8004994 <main+0x153c>
 8004864:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004868:	4b48      	ldr	r3, [pc, #288]	@ (800498c <main+0x1534>)
 800486a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004876:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8004998 <main+0x1540>
 800487a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800487e:	eef0 0a66 	vmov.f32	s1, s13
 8004882:	eeb0 0a47 	vmov.f32	s0, s14
 8004886:	f7fe f99b 	bl	8002bc0 <getAltitude2>
 800488a:	eef0 7a40 	vmov.f32	s15, s0
 800488e:	4b3f      	ldr	r3, [pc, #252]	@ (800498c <main+0x1534>)
 8004890:	edc3 7a02 	vstr	s15, [r3, #8]

			LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f - X);
 8004894:	4b3d      	ldr	r3, [pc, #244]	@ (800498c <main+0x1534>)
 8004896:	edd3 7a03 	vldr	s15, [r3, #12]
 800489a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800499c <main+0x1544>
 800489e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048a2:	4b3a      	ldr	r3, [pc, #232]	@ (800498c <main+0x1534>)
 80048a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80048a8:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049a0 <main+0x1548>
 80048ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80048b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b4:	4b35      	ldr	r3, [pc, #212]	@ (800498c <main+0x1534>)
 80048b6:	edc3 7a03 	vstr	s15, [r3, #12]

			//printf("%d %d\n", (int) (LPS22HH.baroAlt*100), (int) (LPS22HH.baroAltFilt*100));
		}

		if (ibus_rx_cplt_flag)
 80048ba:	4b3a      	ldr	r3, [pc, #232]	@ (80049a4 <main+0x154c>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d02d      	beq.n	800491e <main+0x14c6>
		{
			ibus_rx_cplt_flag = 0;
 80048c2:	4b38      	ldr	r3, [pc, #224]	@ (80049a4 <main+0x154c>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
			if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32))
 80048c8:	2120      	movs	r1, #32
 80048ca:	4837      	ldr	r0, [pc, #220]	@ (80049a8 <main+0x1550>)
 80048cc:	f7fd fb94 	bl	8001ff8 <iBus_Check_CHKSUM>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d023      	beq.n	800491e <main+0x14c6>
			{
				LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2); // toggle LED if iBus frame checksum successful --> intact iBus frame
 80048d6:	2104      	movs	r1, #4
 80048d8:	4834      	ldr	r0, [pc, #208]	@ (80049ac <main+0x1554>)
 80048da:	f7fe fd3a 	bl	8003352 <LL_GPIO_TogglePin>

				iBus_Parse(&ibus_rx_buf[0], &iBus); // parse and store switch/gimbal data in iBus structure
 80048de:	4934      	ldr	r1, [pc, #208]	@ (80049b0 <main+0x1558>)
 80048e0:	4831      	ldr	r0, [pc, #196]	@ (80049a8 <main+0x1550>)
 80048e2:	f7fd fbbe 	bl	8002062 <iBus_Parse>

				iBus_rx_cnt++;
 80048e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80048ea:	3301      	adds	r3, #1
 80048ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

				// failsafe for shutting down upon abrupt disconnect between transmitter and receiver
				if (iBus_isActiveFailsafe(&iBus))
 80048f0:	482f      	ldr	r0, [pc, #188]	@ (80049b0 <main+0x1558>)
 80048f2:	f7fd fc34 	bl	800215e <iBus_isActiveFailsafe>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <main+0x14b6>
				{
					LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80048fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004900:	482c      	ldr	r0, [pc, #176]	@ (80049b4 <main+0x155c>)
 8004902:	f7fe fbbd 	bl	8003080 <LL_TIM_CC_EnableChannel>
					failsafe_flag = 1;
 8004906:	4b2c      	ldr	r3, [pc, #176]	@ (80049b8 <main+0x1560>)
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e007      	b.n	800491e <main+0x14c6>

				}
				else
				{
					LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800490e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004912:	4828      	ldr	r0, [pc, #160]	@ (80049b4 <main+0x155c>)
 8004914:	f7fe fbc5 	bl	80030a2 <LL_TIM_CC_DisableChannel>
					failsafe_flag = 0;
 8004918:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <main+0x1560>)
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
				//
				//        	HAL_Delay(30);
			}
		}

		if (tim7_1000ms_flag)
 800491e:	4b27      	ldr	r3, [pc, #156]	@ (80049bc <main+0x1564>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <main+0x14e2>
		{
			tim7_1000ms_flag = 0;
 8004926:	4b25      	ldr	r3, [pc, #148]	@ (80049bc <main+0x1564>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
			if (!iBus_rx_cnt)
 800492c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <main+0x14e2>
			{
				failsafe_flag = 2;
 8004934:	4b20      	ldr	r3, [pc, #128]	@ (80049b8 <main+0x1560>)
 8004936:	2202      	movs	r2, #2
 8004938:	701a      	strb	r2, [r3, #0]
			}
		}

		if (failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000)
 800493a:	4b1f      	ldr	r3, [pc, #124]	@ (80049b8 <main+0x1560>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d00c      	beq.n	800495c <main+0x1504>
 8004942:	4b1d      	ldr	r3, [pc, #116]	@ (80049b8 <main+0x1560>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d008      	beq.n	800495c <main+0x1504>
 800494a:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <main+0x1520>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d004      	beq.n	800495c <main+0x1504>
 8004952:	4b17      	ldr	r3, [pc, #92]	@ (80049b0 <main+0x1558>)
 8004954:	899b      	ldrh	r3, [r3, #12]
 8004956:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800495a:	d105      	bne.n	8004968 <main+0x1510>
		{
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800495c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004960:	4814      	ldr	r0, [pc, #80]	@ (80049b4 <main+0x155c>)
 8004962:	f7fe fb8d 	bl	8003080 <LL_TIM_CC_EnableChannel>
 8004966:	e004      	b.n	8004972 <main+0x151a>
		}
		else
		{
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004968:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800496c:	4811      	ldr	r0, [pc, #68]	@ (80049b4 <main+0x155c>)
 800496e:	f7fe fb98 	bl	80030a2 <LL_TIM_CC_DisableChannel>
		if (tim7_1ms_flag)
 8004972:	f7ff b941 	b.w	8003bf8 <main+0x7a0>
 8004976:	bf00      	nop
 8004978:	20000541 	.word	0x20000541
 800497c:	20000334 	.word	0x20000334
 8004980:	2000032c 	.word	0x2000032c
 8004984:	44fa0000 	.word	0x44fa0000
 8004988:	47000000 	.word	0x47000000
 800498c:	20000354 	.word	0x20000354
 8004990:	20000358 	.word	0x20000358
 8004994:	45800000 	.word	0x45800000
 8004998:	42c80000 	.word	0x42c80000
 800499c:	3f666666 	.word	0x3f666666
 80049a0:	3dccccd0 	.word	0x3dccccd0
 80049a4:	2000056c 	.word	0x2000056c
 80049a8:	20000548 	.word	0x20000548
 80049ac:	40020800 	.word	0x40020800
 80049b0:	20000314 	.word	0x20000314
 80049b4:	40000400 	.word	0x40000400
 80049b8:	20000540 	.word	0x20000540
 80049bc:	20000571 	.word	0x20000571

080049c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b094      	sub	sp, #80	@ 0x50
 80049c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049c6:	f107 0320 	add.w	r3, r7, #32
 80049ca:	2230      	movs	r2, #48	@ 0x30
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f007 fdca 	bl	800c568 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049d4:	f107 030c 	add.w	r3, r7, #12
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	60da      	str	r2, [r3, #12]
 80049e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80049e4:	2300      	movs	r3, #0
 80049e6:	60bb      	str	r3, [r7, #8]
 80049e8:	4b28      	ldr	r3, [pc, #160]	@ (8004a8c <SystemClock_Config+0xcc>)
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	4a27      	ldr	r2, [pc, #156]	@ (8004a8c <SystemClock_Config+0xcc>)
 80049ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80049f4:	4b25      	ldr	r3, [pc, #148]	@ (8004a8c <SystemClock_Config+0xcc>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a00:	2300      	movs	r3, #0
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	4b22      	ldr	r3, [pc, #136]	@ (8004a90 <SystemClock_Config+0xd0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a21      	ldr	r2, [pc, #132]	@ (8004a90 <SystemClock_Config+0xd0>)
 8004a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b1f      	ldr	r3, [pc, #124]	@ (8004a90 <SystemClock_Config+0xd0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a24:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a26:	2302      	movs	r3, #2
 8004a28:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004a30:	2304      	movs	r3, #4
 8004a32:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8004a34:	23a8      	movs	r3, #168	@ 0xa8
 8004a36:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a40:	f107 0320 	add.w	r3, r7, #32
 8004a44:	4618      	mov	r0, r3
 8004a46:	f004 f89f 	bl	8008b88 <HAL_RCC_OscConfig>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8004a50:	f001 f96b 	bl	8005d2a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a54:	230f      	movs	r3, #15
 8004a56:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a60:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004a64:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a6a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a6c:	f107 030c 	add.w	r3, r7, #12
 8004a70:	2105      	movs	r1, #5
 8004a72:	4618      	mov	r0, r3
 8004a74:	f004 fb00 	bl	8009078 <HAL_RCC_ClockConfig>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8004a7e:	f001 f954 	bl	8005d2a <Error_Handler>
	}
}
 8004a82:	bf00      	nop
 8004a84:	3750      	adds	r7, #80	@ 0x50
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40007000 	.word	0x40007000

08004a94 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8004aa6:	4b21      	ldr	r3, [pc, #132]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004aa8:	4a21      	ldr	r2, [pc, #132]	@ (8004b30 <MX_ADC1_Init+0x9c>)
 8004aaa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004aac:	4b1f      	ldr	r3, [pc, #124]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004aae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004ab2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8004aba:	4b1c      	ldr	r3, [pc, #112]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004ac6:	4b19      	ldr	r3, [pc, #100]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004ace:	4b17      	ldr	r3, [pc, #92]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ad4:	4b15      	ldr	r3, [pc, #84]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004ad6:	4a17      	ldr	r2, [pc, #92]	@ (8004b34 <MX_ADC1_Init+0xa0>)
 8004ad8:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ada:	4b14      	ldr	r3, [pc, #80]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8004ae0:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8004ae6:	4b11      	ldr	r3, [pc, #68]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004aee:	4b0f      	ldr	r3, [pc, #60]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004af4:	480d      	ldr	r0, [pc, #52]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004af6:	f001 fd5d 	bl	80065b4 <HAL_ADC_Init>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8004b00:	f001 f913 	bl	8005d2a <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8004b04:	2308      	movs	r3, #8
 8004b06:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004b0c:	2307      	movs	r3, #7
 8004b0e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b10:	463b      	mov	r3, r7
 8004b12:	4619      	mov	r1, r3
 8004b14:	4805      	ldr	r0, [pc, #20]	@ (8004b2c <MX_ADC1_Init+0x98>)
 8004b16:	f001 fec3 	bl	80068a0 <HAL_ADC_ConfigChannel>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8004b20:	f001 f903 	bl	8005d2a <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000370 	.word	0x20000370
 8004b30:	40012000 	.word	0x40012000
 8004b34:	0f000001 	.word	0x0f000001

08004b38 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004b3c:	4b16      	ldr	r3, [pc, #88]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b3e:	4a17      	ldr	r2, [pc, #92]	@ (8004b9c <MX_I2C1_Init+0x64>)
 8004b40:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8004b42:	4b15      	ldr	r3, [pc, #84]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b44:	4a16      	ldr	r2, [pc, #88]	@ (8004ba0 <MX_I2C1_Init+0x68>)
 8004b46:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b48:	4b13      	ldr	r3, [pc, #76]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8004b4e:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b54:	4b10      	ldr	r3, [pc, #64]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b5a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8004b62:	4b0d      	ldr	r3, [pc, #52]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b68:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b74:	4808      	ldr	r0, [pc, #32]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b76:	f002 ffe3 	bl	8007b40 <HAL_I2C_Init>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8004b80:	f001 f8d3 	bl	8005d2a <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	hi2c = hi2c1;
 8004b84:	4a07      	ldr	r2, [pc, #28]	@ (8004ba4 <MX_I2C1_Init+0x6c>)
 8004b86:	4b04      	ldr	r3, [pc, #16]	@ (8004b98 <MX_I2C1_Init+0x60>)
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	2354      	movs	r3, #84	@ 0x54
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f007 fd69 	bl	800c666 <memcpy>
	/* USER CODE END I2C1_Init 2 */

}
 8004b94:	bf00      	nop
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000418 	.word	0x20000418
 8004b9c:	40005400 	.word	0x40005400
 8004ba0:	00061a80 	.word	0x00061a80
 8004ba4:	200001f4 	.word	0x200001f4

08004ba8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b090      	sub	sp, #64	@ 0x40
 8004bac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 0 */

	/* USER CODE END SPI1_Init 0 */

	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004bae:	f107 0318 	add.w	r3, r7, #24
 8004bb2:	2228      	movs	r2, #40	@ 0x28
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f007 fcd6 	bl	800c568 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
 8004bc4:	609a      	str	r2, [r3, #8]
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	611a      	str	r2, [r3, #16]
 8004bca:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004bcc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004bd0:	f7fe fc08 	bl	80033e4 <LL_APB2_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f7fe fbd5 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004bda:	23e0      	movs	r3, #224	@ 0xe0
 8004bdc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004bde:	2302      	movs	r3, #2
 8004be0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004be2:	2303      	movs	r3, #3
 8004be4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004bee:	2305      	movs	r3, #5
 8004bf0:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4813      	ldr	r0, [pc, #76]	@ (8004c44 <MX_SPI1_Init+0x9c>)
 8004bf8:	f005 fe4b 	bl	800a892 <LL_GPIO_Init>

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004c00:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004c04:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004c06:	2300      	movs	r3, #0
 8004c08:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004c12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8004c18:	2310      	movs	r3, #16
 8004c1a:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8004c24:	230a      	movs	r3, #10
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(SPI1, &SPI_InitStruct);
 8004c28:	f107 0318 	add.w	r3, r7, #24
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4806      	ldr	r0, [pc, #24]	@ (8004c48 <MX_SPI1_Init+0xa0>)
 8004c30:	f006 f80d 	bl	800ac4e <LL_SPI_Init>
	LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8004c34:	2100      	movs	r1, #0
 8004c36:	4804      	ldr	r0, [pc, #16]	@ (8004c48 <MX_SPI1_Init+0xa0>)
 8004c38:	f7fe f9ef 	bl	800301a <LL_SPI_SetStandard>
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8004c3c:	bf00      	nop
 8004c3e:	3740      	adds	r7, #64	@ 0x40
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40020000 	.word	0x40020000
 8004c48:	40013000 	.word	0x40013000

08004c4c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b090      	sub	sp, #64	@ 0x40
 8004c50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 0 */

	/* USER CODE END SPI2_Init 0 */

	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004c52:	f107 0318 	add.w	r3, r7, #24
 8004c56:	2228      	movs	r2, #40	@ 0x28
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f007 fc84 	bl	800c568 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c60:	463b      	mov	r3, r7
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	611a      	str	r2, [r3, #16]
 8004c6e:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8004c70:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004c74:	f7fe fb9e 	bl	80033b4 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004c78:	2002      	movs	r0, #2
 8004c7a:	f7fe fb83 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8004c7e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004c82:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004c84:	2302      	movs	r3, #2
 8004c86:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004c94:	2305      	movs	r3, #5
 8004c96:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c98:	463b      	mov	r3, r7
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4813      	ldr	r0, [pc, #76]	@ (8004cec <MX_SPI2_Init+0xa0>)
 8004c9e:	f005 fdf8 	bl	800a892 <LL_GPIO_Init>

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004ca6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004caa:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004cac:	2300      	movs	r3, #0
 8004cae:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8004cbe:	2318      	movs	r3, #24
 8004cc0:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8004cca:	230a      	movs	r3, #10
 8004ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(SPI2, &SPI_InitStruct);
 8004cce:	f107 0318 	add.w	r3, r7, #24
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4806      	ldr	r0, [pc, #24]	@ (8004cf0 <MX_SPI2_Init+0xa4>)
 8004cd6:	f005 ffba 	bl	800ac4e <LL_SPI_Init>
	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4804      	ldr	r0, [pc, #16]	@ (8004cf0 <MX_SPI2_Init+0xa4>)
 8004cde:	f7fe f99c 	bl	800301a <LL_SPI_SetStandard>
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8004ce2:	bf00      	nop
 8004ce4:	3740      	adds	r7, #64	@ 0x40
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40020400 	.word	0x40020400
 8004cf0:	40003800 	.word	0x40003800

08004cf4 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b090      	sub	sp, #64	@ 0x40
 8004cf8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 0 */

	/* USER CODE END SPI3_Init 0 */

	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004cfa:	f107 0318 	add.w	r3, r7, #24
 8004cfe:	2228      	movs	r2, #40	@ 0x28
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f007 fc30 	bl	800c568 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d08:	463b      	mov	r3, r7
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	605a      	str	r2, [r3, #4]
 8004d10:	609a      	str	r2, [r3, #8]
 8004d12:	60da      	str	r2, [r3, #12]
 8004d14:	611a      	str	r2, [r3, #16]
 8004d16:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8004d18:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004d1c:	f7fe fb4a 	bl	80033b4 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004d20:	2002      	movs	r0, #2
 8004d22:	f7fe fb2f 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8004d26:	2338      	movs	r3, #56	@ 0x38
 8004d28:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d36:	2300      	movs	r3, #0
 8004d38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8004d3a:	2306      	movs	r3, #6
 8004d3c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d3e:	463b      	mov	r3, r7
 8004d40:	4619      	mov	r1, r3
 8004d42:	4813      	ldr	r0, [pc, #76]	@ (8004d90 <MX_SPI3_Init+0x9c>)
 8004d44:	f005 fda5 	bl	800a892 <LL_GPIO_Init>

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004d4c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004d50:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004d56:	2302      	movs	r3, #2
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004d5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8004d64:	2308      	movs	r3, #8
 8004d66:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8004d70:	230a      	movs	r3, #10
 8004d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(SPI3, &SPI_InitStruct);
 8004d74:	f107 0318 	add.w	r3, r7, #24
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4806      	ldr	r0, [pc, #24]	@ (8004d94 <MX_SPI3_Init+0xa0>)
 8004d7c:	f005 ff67 	bl	800ac4e <LL_SPI_Init>
	LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8004d80:	2100      	movs	r1, #0
 8004d82:	4804      	ldr	r0, [pc, #16]	@ (8004d94 <MX_SPI3_Init+0xa0>)
 8004d84:	f7fe f949 	bl	800301a <LL_SPI_SetStandard>
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8004d88:	bf00      	nop
 8004d8a:	3740      	adds	r7, #64	@ 0x40
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40020400 	.word	0x40020400
 8004d94:	40003c00 	.word	0x40003c00

08004d98 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b094      	sub	sp, #80	@ 0x50
 8004d9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004d9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	605a      	str	r2, [r3, #4]
 8004da8:	609a      	str	r2, [r3, #8]
 8004daa:	60da      	str	r2, [r3, #12]
 8004dac:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004dae:	f107 031c 	add.w	r3, r7, #28
 8004db2:	2220      	movs	r2, #32
 8004db4:	2100      	movs	r1, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f007 fbd6 	bl	800c568 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dbc:	1d3b      	adds	r3, r7, #4
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
 8004dc4:	609a      	str	r2, [r3, #8]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	611a      	str	r2, [r3, #16]
 8004dca:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8004dcc:	2002      	movs	r0, #2
 8004dce:	f7fe faf1 	bl	80033b4 <LL_APB1_GRP1_EnableClock>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	TIM_InitStruct.Prescaler = 999;
 8004dd2:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8004dd6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	643b      	str	r3, [r7, #64]	@ 0x40
	TIM_InitStruct.Autoreload = 20;
 8004ddc:	2314      	movs	r3, #20
 8004dde:	647b      	str	r3, [r7, #68]	@ 0x44
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004de0:	2300      	movs	r3, #0
 8004de2:	64bb      	str	r3, [r7, #72]	@ 0x48
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004de4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004de8:	4619      	mov	r1, r3
 8004dea:	4822      	ldr	r0, [pc, #136]	@ (8004e74 <MX_TIM3_Init+0xdc>)
 8004dec:	f005 fff4 	bl	800add8 <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM3);
 8004df0:	4820      	ldr	r0, [pc, #128]	@ (8004e74 <MX_TIM3_Init+0xdc>)
 8004df2:	f7fe f935 	bl	8003060 <LL_TIM_EnableARRPreload>
	LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004df6:	2100      	movs	r1, #0
 8004df8:	481e      	ldr	r0, [pc, #120]	@ (8004e74 <MX_TIM3_Init+0xdc>)
 8004dfa:	f7fe f9ed 	bl	80031d8 <LL_TIM_SetClockSource>
	LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8004dfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e02:	481c      	ldr	r0, [pc, #112]	@ (8004e74 <MX_TIM3_Init+0xdc>)
 8004e04:	f7fe f9a4 	bl	8003150 <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004e08:	2360      	movs	r3, #96	@ 0x60
 8004e0a:	61fb      	str	r3, [r7, #28]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
	TIM_OC_InitStruct.CompareValue = 10;
 8004e14:	230a      	movs	r3, #10
 8004e16:	62bb      	str	r3, [r7, #40]	@ 0x28
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004e1c:	f107 031c 	add.w	r3, r7, #28
 8004e20:	461a      	mov	r2, r3
 8004e22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e26:	4813      	ldr	r0, [pc, #76]	@ (8004e74 <MX_TIM3_Init+0xdc>)
 8004e28:	f006 f870 	bl	800af0c <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8004e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004e30:	4810      	ldr	r0, [pc, #64]	@ (8004e74 <MX_TIM3_Init+0xdc>)
 8004e32:	f7fe f949 	bl	80030c8 <LL_TIM_OC_EnableFast>
	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8004e36:	2100      	movs	r1, #0
 8004e38:	480e      	ldr	r0, [pc, #56]	@ (8004e74 <MX_TIM3_Init+0xdc>)
 8004e3a:	f7fe f9e2 	bl	8003202 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 8004e3e:	480d      	ldr	r0, [pc, #52]	@ (8004e74 <MX_TIM3_Init+0xdc>)
 8004e40:	f7fe f9f2 	bl	8003228 <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004e44:	2002      	movs	r0, #2
 8004e46:	f7fe fa9d 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	/**TIM3 GPIO Configuration
  PB1   ------> TIM3_CH4
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e62:	1d3b      	adds	r3, r7, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4804      	ldr	r0, [pc, #16]	@ (8004e78 <MX_TIM3_Init+0xe0>)
 8004e68:	f005 fd13 	bl	800a892 <LL_GPIO_Init>

}
 8004e6c:	bf00      	nop
 8004e6e:	3750      	adds	r7, #80	@ 0x50
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40000400 	.word	0x40000400
 8004e78:	40020400 	.word	0x40020400

08004e7c <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b094      	sub	sp, #80	@ 0x50
 8004e80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004e82:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	609a      	str	r2, [r3, #8]
 8004e8e:	60da      	str	r2, [r3, #12]
 8004e90:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8004e92:	f107 031c 	add.w	r3, r7, #28
 8004e96:	2220      	movs	r2, #32
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f007 fb64 	bl	800c568 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea0:	1d3b      	adds	r3, r7, #4
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	60da      	str	r2, [r3, #12]
 8004eac:	611a      	str	r2, [r3, #16]
 8004eae:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8004eb0:	2008      	movs	r0, #8
 8004eb2:	f7fe fa7f 	bl	80033b4 <LL_APB1_GRP1_EnableClock>

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	TIM_InitStruct.Prescaler = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	643b      	str	r3, [r7, #64]	@ 0x40
	TIM_InitStruct.Autoreload = 41999;
 8004ebe:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8004ec2:	647b      	str	r3, [r7, #68]	@ 0x44
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
	LL_TIM_Init(TIM5, &TIM_InitStruct);
 8004ec8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004ecc:	4619      	mov	r1, r3
 8004ece:	483a      	ldr	r0, [pc, #232]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004ed0:	f005 ff82 	bl	800add8 <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM5);
 8004ed4:	4838      	ldr	r0, [pc, #224]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004ed6:	f7fe f8c3 	bl	8003060 <LL_TIM_EnableARRPreload>
	LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004eda:	2100      	movs	r1, #0
 8004edc:	4836      	ldr	r0, [pc, #216]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004ede:	f7fe f97b 	bl	80031d8 <LL_TIM_SetClockSource>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	4834      	ldr	r0, [pc, #208]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004ee6:	f7fe f933 	bl	8003150 <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004eea:	2360      	movs	r3, #96	@ 0x60
 8004eec:	61fb      	str	r3, [r7, #28]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
	TIM_OC_InitStruct.CompareValue = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004efa:	2300      	movs	r3, #0
 8004efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004efe:	f107 031c 	add.w	r3, r7, #28
 8004f02:	461a      	mov	r2, r3
 8004f04:	2101      	movs	r1, #1
 8004f06:	482c      	ldr	r0, [pc, #176]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f08:	f006 f800 	bl	800af0c <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	482a      	ldr	r0, [pc, #168]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f10:	f7fe f8da 	bl	80030c8 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8004f14:	2110      	movs	r1, #16
 8004f16:	4828      	ldr	r0, [pc, #160]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f18:	f7fe f91a 	bl	8003150 <LL_TIM_OC_EnablePreload>
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8004f1c:	f107 031c 	add.w	r3, r7, #28
 8004f20:	461a      	mov	r2, r3
 8004f22:	2110      	movs	r1, #16
 8004f24:	4824      	ldr	r0, [pc, #144]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f26:	f005 fff1 	bl	800af0c <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8004f2a:	2110      	movs	r1, #16
 8004f2c:	4822      	ldr	r0, [pc, #136]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f2e:	f7fe f8cb 	bl	80030c8 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8004f32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f36:	4820      	ldr	r0, [pc, #128]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f38:	f7fe f90a 	bl	8003150 <LL_TIM_OC_EnablePreload>
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004f3c:	f107 031c 	add.w	r3, r7, #28
 8004f40:	461a      	mov	r2, r3
 8004f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f46:	481c      	ldr	r0, [pc, #112]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f48:	f005 ffe0 	bl	800af0c <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8004f4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f50:	4819      	ldr	r0, [pc, #100]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f52:	f7fe f8b9 	bl	80030c8 <LL_TIM_OC_EnableFast>
	LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8004f56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f5a:	4817      	ldr	r0, [pc, #92]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f5c:	f7fe f8f8 	bl	8003150 <LL_TIM_OC_EnablePreload>
	LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004f60:	f107 031c 	add.w	r3, r7, #28
 8004f64:	461a      	mov	r2, r3
 8004f66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f6a:	4813      	ldr	r0, [pc, #76]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f6c:	f005 ffce 	bl	800af0c <LL_TIM_OC_Init>
	LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8004f70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f74:	4810      	ldr	r0, [pc, #64]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f76:	f7fe f8a7 	bl	80030c8 <LL_TIM_OC_EnableFast>
	LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	480e      	ldr	r0, [pc, #56]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f7e:	f7fe f940 	bl	8003202 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM5);
 8004f82:	480d      	ldr	r0, [pc, #52]	@ (8004fb8 <MX_TIM5_Init+0x13c>)
 8004f84:	f7fe f950 	bl	8003228 <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004f88:	2001      	movs	r0, #1
 8004f8a:	f7fe f9fb 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8004f8e:	230f      	movs	r3, #15
 8004f90:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004f92:	2302      	movs	r3, #2
 8004f94:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4804      	ldr	r0, [pc, #16]	@ (8004fbc <MX_TIM5_Init+0x140>)
 8004fac:	f005 fc71 	bl	800a892 <LL_GPIO_Init>

}
 8004fb0:	bf00      	nop
 8004fb2:	3750      	adds	r7, #80	@ 0x50
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40020000 	.word	0x40020000

08004fc0 <MX_TIM7_Init>:
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8004fc6:	1d3b      	adds	r3, r7, #4
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8004fd4:	2020      	movs	r0, #32
 8004fd6:	f7fe f9ed 	bl	80033b4 <LL_APB1_GRP1_EnableClock>

	/* TIM7 interrupt Init */
	NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004fda:	f7fd ff95 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fd ffe5 	bl	8002fb4 <NVIC_EncodePriority>
 8004fea:	4603      	mov	r3, r0
 8004fec:	4619      	mov	r1, r3
 8004fee:	2037      	movs	r0, #55	@ 0x37
 8004ff0:	f7fd ffb6 	bl	8002f60 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM7_IRQn);
 8004ff4:	2037      	movs	r0, #55	@ 0x37
 8004ff6:	f7fd ff95 	bl	8002f24 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	TIM_InitStruct.Prescaler = 41999;
 8004ffa:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8004ffe:	80bb      	strh	r3, [r7, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005000:	2300      	movs	r3, #0
 8005002:	60bb      	str	r3, [r7, #8]
	TIM_InitStruct.Autoreload = 1;
 8005004:	2301      	movs	r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
	LL_TIM_Init(TIM7, &TIM_InitStruct);
 8005008:	1d3b      	adds	r3, r7, #4
 800500a:	4619      	mov	r1, r3
 800500c:	4808      	ldr	r0, [pc, #32]	@ (8005030 <MX_TIM7_Init+0x70>)
 800500e:	f005 fee3 	bl	800add8 <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM7);
 8005012:	4807      	ldr	r0, [pc, #28]	@ (8005030 <MX_TIM7_Init+0x70>)
 8005014:	f7fe f824 	bl	8003060 <LL_TIM_EnableARRPreload>
	LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8005018:	2100      	movs	r1, #0
 800501a:	4805      	ldr	r0, [pc, #20]	@ (8005030 <MX_TIM7_Init+0x70>)
 800501c:	f7fe f8f1 	bl	8003202 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM7);
 8005020:	4803      	ldr	r0, [pc, #12]	@ (8005030 <MX_TIM7_Init+0x70>)
 8005022:	f7fe f901 	bl	8003228 <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8005026:	bf00      	nop
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40001400 	.word	0x40001400

08005034 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08e      	sub	sp, #56	@ 0x38
 8005038:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN UART5_Init 0 */

	/* USER CODE END UART5_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = {0};
 800503a:	f107 031c 	add.w	r3, r7, #28
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	609a      	str	r2, [r3, #8]
 8005046:	60da      	str	r2, [r3, #12]
 8005048:	611a      	str	r2, [r3, #16]
 800504a:	615a      	str	r2, [r3, #20]
 800504c:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800504e:	1d3b      	adds	r3, r7, #4
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	60da      	str	r2, [r3, #12]
 800505a:	611a      	str	r2, [r3, #16]
 800505c:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800505e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005062:	f7fe f9a7 	bl	80033b4 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005066:	2004      	movs	r0, #4
 8005068:	f7fe f98c 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800506c:	2008      	movs	r0, #8
 800506e:	f7fe f989 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	/**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8005072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005076:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005078:	2302      	movs	r3, #2
 800507a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800507c:	2303      	movs	r3, #3
 800507e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005088:	2308      	movs	r3, #8
 800508a:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800508c:	1d3b      	adds	r3, r7, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4821      	ldr	r0, [pc, #132]	@ (8005118 <MX_UART5_Init+0xe4>)
 8005092:	f005 fbfe 	bl	800a892 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8005096:	2304      	movs	r3, #4
 8005098:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800509a:	2302      	movs	r3, #2
 800509c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800509e:	2303      	movs	r3, #3
 80050a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80050aa:	2308      	movs	r3, #8
 80050ac:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050ae:	1d3b      	adds	r3, r7, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	481a      	ldr	r0, [pc, #104]	@ (800511c <MX_UART5_Init+0xe8>)
 80050b4:	f005 fbed 	bl	800a892 <LL_GPIO_Init>

	/* UART5 interrupt Init */
	NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80050b8:	f7fd ff26 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 80050bc:	4603      	mov	r3, r0
 80050be:	2200      	movs	r2, #0
 80050c0:	2100      	movs	r1, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fd ff76 	bl	8002fb4 <NVIC_EncodePriority>
 80050c8:	4603      	mov	r3, r0
 80050ca:	4619      	mov	r1, r3
 80050cc:	2035      	movs	r0, #53	@ 0x35
 80050ce:	f7fd ff47 	bl	8002f60 <__NVIC_SetPriority>
	NVIC_EnableIRQ(UART5_IRQn);
 80050d2:	2035      	movs	r0, #53	@ 0x35
 80050d4:	f7fd ff26 	bl	8002f24 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 80050d8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80050dc:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80050de:	2300      	movs	r3, #0
 80050e0:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80050e2:	2300      	movs	r3, #0
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 80050ea:	2304      	movs	r3, #4
 80050ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80050f2:	2300      	movs	r3, #0
 80050f4:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(UART5, &USART_InitStruct);
 80050f6:	f107 031c 	add.w	r3, r7, #28
 80050fa:	4619      	mov	r1, r3
 80050fc:	4808      	ldr	r0, [pc, #32]	@ (8005120 <MX_UART5_Init+0xec>)
 80050fe:	f006 fb53 	bl	800b7a8 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(UART5);
 8005102:	4807      	ldr	r0, [pc, #28]	@ (8005120 <MX_UART5_Init+0xec>)
 8005104:	f7fe f8c0 	bl	8003288 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(UART5);
 8005108:	4805      	ldr	r0, [pc, #20]	@ (8005120 <MX_UART5_Init+0xec>)
 800510a:	f7fe f8ad 	bl	8003268 <LL_USART_Enable>
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800510e:	bf00      	nop
 8005110:	3738      	adds	r7, #56	@ 0x38
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40020800 	.word	0x40020800
 800511c:	40020c00 	.word	0x40020c00
 8005120:	40005000 	.word	0x40005000

08005124 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8005128:	4b11      	ldr	r3, [pc, #68]	@ (8005170 <MX_USART1_UART_Init+0x4c>)
 800512a:	4a12      	ldr	r2, [pc, #72]	@ (8005174 <MX_USART1_UART_Init+0x50>)
 800512c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800512e:	4b10      	ldr	r3, [pc, #64]	@ (8005170 <MX_USART1_UART_Init+0x4c>)
 8005130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005134:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005136:	4b0e      	ldr	r3, [pc, #56]	@ (8005170 <MX_USART1_UART_Init+0x4c>)
 8005138:	2200      	movs	r2, #0
 800513a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800513c:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <MX_USART1_UART_Init+0x4c>)
 800513e:	2200      	movs	r2, #0
 8005140:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <MX_USART1_UART_Init+0x4c>)
 8005144:	2200      	movs	r2, #0
 8005146:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8005148:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <MX_USART1_UART_Init+0x4c>)
 800514a:	220c      	movs	r2, #12
 800514c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800514e:	4b08      	ldr	r3, [pc, #32]	@ (8005170 <MX_USART1_UART_Init+0x4c>)
 8005150:	2200      	movs	r2, #0
 8005152:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005154:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <MX_USART1_UART_Init+0x4c>)
 8005156:	2200      	movs	r2, #0
 8005158:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800515a:	4805      	ldr	r0, [pc, #20]	@ (8005170 <MX_USART1_UART_Init+0x4c>)
 800515c:	f004 f9ac 	bl	80094b8 <HAL_UART_Init>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8005166:	f000 fde0 	bl	8005d2a <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	2000046c 	.word	0x2000046c
 8005174:	40011000 	.word	0x40011000

08005178 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	@ 0x38
 800517c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART6_Init 0 */

	/* USER CODE END USART6_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = {0};
 800517e:	f107 031c 	add.w	r3, r7, #28
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	605a      	str	r2, [r3, #4]
 8005188:	609a      	str	r2, [r3, #8]
 800518a:	60da      	str	r2, [r3, #12]
 800518c:	611a      	str	r2, [r3, #16]
 800518e:	615a      	str	r2, [r3, #20]
 8005190:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005192:	1d3b      	adds	r3, r7, #4
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	605a      	str	r2, [r3, #4]
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	60da      	str	r2, [r3, #12]
 800519e:	611a      	str	r2, [r3, #16]
 80051a0:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80051a2:	2020      	movs	r0, #32
 80051a4:	f7fe f91e 	bl	80033e4 <LL_APB2_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80051a8:	2004      	movs	r0, #4
 80051aa:	f7fe f8eb 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	/**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80051ae:	23c0      	movs	r3, #192	@ 0xc0
 80051b0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80051b2:	2302      	movs	r3, #2
 80051b4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80051b6:	2303      	movs	r3, #3
 80051b8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80051c2:	2308      	movs	r3, #8
 80051c4:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051c6:	1d3b      	adds	r3, r7, #4
 80051c8:	4619      	mov	r1, r3
 80051ca:	4819      	ldr	r0, [pc, #100]	@ (8005230 <MX_USART6_UART_Init+0xb8>)
 80051cc:	f005 fb61 	bl	800a892 <LL_GPIO_Init>

	/* USART6 interrupt Init */
	NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80051d0:	f7fd fe9a 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2200      	movs	r2, #0
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fd feea 	bl	8002fb4 <NVIC_EncodePriority>
 80051e0:	4603      	mov	r3, r0
 80051e2:	4619      	mov	r1, r3
 80051e4:	2047      	movs	r0, #71	@ 0x47
 80051e6:	f7fd febb 	bl	8002f60 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART6_IRQn);
 80051ea:	2047      	movs	r0, #71	@ 0x47
 80051ec:	f7fd fe9a 	bl	8002f24 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 80051f0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80051f4:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80051f6:	2300      	movs	r3, #0
 80051f8:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80051fa:	2300      	movs	r3, #0
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80051fe:	2300      	movs	r3, #0
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005202:	230c      	movs	r3, #12
 8005204:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005206:	2300      	movs	r3, #0
 8005208:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800520a:	2300      	movs	r3, #0
 800520c:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART6, &USART_InitStruct);
 800520e:	f107 031c 	add.w	r3, r7, #28
 8005212:	4619      	mov	r1, r3
 8005214:	4807      	ldr	r0, [pc, #28]	@ (8005234 <MX_USART6_UART_Init+0xbc>)
 8005216:	f006 fac7 	bl	800b7a8 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART6);
 800521a:	4806      	ldr	r0, [pc, #24]	@ (8005234 <MX_USART6_UART_Init+0xbc>)
 800521c:	f7fe f834 	bl	8003288 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART6);
 8005220:	4804      	ldr	r0, [pc, #16]	@ (8005234 <MX_USART6_UART_Init+0xbc>)
 8005222:	f7fe f821 	bl	8003268 <LL_USART_Enable>
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8005226:	bf00      	nop
 8005228:	3738      	adds	r7, #56	@ 0x38
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40020800 	.word	0x40020800
 8005234:	40011400 	.word	0x40011400

08005238 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <MX_DMA_Init+0x3c>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	4a0b      	ldr	r2, [pc, #44]	@ (8005274 <MX_DMA_Init+0x3c>)
 8005248:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800524c:	6313      	str	r3, [r2, #48]	@ 0x30
 800524e:	4b09      	ldr	r3, [pc, #36]	@ (8005274 <MX_DMA_Init+0x3c>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005256:	607b      	str	r3, [r7, #4]
 8005258:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800525a:	2200      	movs	r2, #0
 800525c:	2100      	movs	r1, #0
 800525e:	2038      	movs	r0, #56	@ 0x38
 8005260:	f001 fe99 	bl	8006f96 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005264:	2038      	movs	r0, #56	@ 0x38
 8005266:	f001 feb2 	bl	8006fce <HAL_NVIC_EnableIRQ>

}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40023800 	.word	0x40023800

08005278 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527e:	463b      	mov	r3, r7
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	609a      	str	r2, [r3, #8]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	611a      	str	r2, [r3, #16]
 800528c:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800528e:	2004      	movs	r0, #4
 8005290:	f7fe f878 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8005294:	2080      	movs	r0, #128	@ 0x80
 8005296:	f7fe f875 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800529a:	2001      	movs	r0, #1
 800529c:	f7fe f872 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80052a0:	2002      	movs	r0, #2
 80052a2:	f7fe f86f 	bl	8003384 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80052a6:	2008      	movs	r0, #8
 80052a8:	f7fe f86c 	bl	8003384 <LL_AHB1_GRP1_EnableClock>

	/**/
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80052ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052b0:	482e      	ldr	r0, [pc, #184]	@ (800536c <MX_GPIO_Init+0xf4>)
 80052b2:	f7fe f831 	bl	8003318 <LL_GPIO_SetOutputPin>

	/**/
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 80052b6:	f240 2117 	movw	r1, #535	@ 0x217
 80052ba:	482c      	ldr	r0, [pc, #176]	@ (800536c <MX_GPIO_Init+0xf4>)
 80052bc:	f7fe f83a 	bl	8003334 <LL_GPIO_ResetOutputPin>
			|LL_GPIO_PIN_9);

	/**/
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 80052c0:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 80052c4:	482a      	ldr	r0, [pc, #168]	@ (8005370 <MX_GPIO_Init+0xf8>)
 80052c6:	f7fe f835 	bl	8003334 <LL_GPIO_ResetOutputPin>

	/**/
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80052ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052ce:	4829      	ldr	r0, [pc, #164]	@ (8005374 <MX_GPIO_Init+0xfc>)
 80052d0:	f7fe f830 	bl	8003334 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 80052d4:	f242 2317 	movw	r3, #8727	@ 0x2217
 80052d8:	603b      	str	r3, [r7, #0]
			|LL_GPIO_PIN_4|LL_GPIO_PIN_9;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80052da:	2301      	movs	r3, #1
 80052dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80052de:	2300      	movs	r3, #0
 80052e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80052e6:	2300      	movs	r3, #0
 80052e8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ea:	463b      	mov	r3, r7
 80052ec:	4619      	mov	r1, r3
 80052ee:	481f      	ldr	r0, [pc, #124]	@ (800536c <MX_GPIO_Init+0xf4>)
 80052f0:	f005 facf 	bl	800a892 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80052f4:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80052f8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80052fa:	2300      	movs	r3, #0
 80052fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80052fe:	2300      	movs	r3, #0
 8005300:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005302:	463b      	mov	r3, r7
 8005304:	4619      	mov	r1, r3
 8005306:	4819      	ldr	r0, [pc, #100]	@ (800536c <MX_GPIO_Init+0xf4>)
 8005308:	f005 fac3 	bl	800a892 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 800530c:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8005310:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005312:	2301      	movs	r3, #1
 8005314:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005322:	463b      	mov	r3, r7
 8005324:	4619      	mov	r1, r3
 8005326:	4812      	ldr	r0, [pc, #72]	@ (8005370 <MX_GPIO_Init+0xf8>)
 8005328:	f005 fab3 	bl	800a892 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800532c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005330:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005332:	2301      	movs	r3, #1
 8005334:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005336:	2300      	movs	r3, #0
 8005338:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005342:	463b      	mov	r3, r7
 8005344:	4619      	mov	r1, r3
 8005346:	480b      	ldr	r0, [pc, #44]	@ (8005374 <MX_GPIO_Init+0xfc>)
 8005348:	f005 faa3 	bl	800a892 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800534c:	2380      	movs	r3, #128	@ 0x80
 800534e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005350:	2300      	movs	r3, #0
 8005352:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005358:	463b      	mov	r3, r7
 800535a:	4619      	mov	r1, r3
 800535c:	4804      	ldr	r0, [pc, #16]	@ (8005370 <MX_GPIO_Init+0xf8>)
 800535e:	f005 fa98 	bl	800a892 <LL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8005362:	bf00      	nop
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40020800 	.word	0x40020800
 8005370:	40020400 	.word	0x40020400
 8005374:	40020000 	.word	0x40020000

08005378 <iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int iBus_Throttle_Min(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag)
 800537c:	4b10      	ldr	r3, [pc, #64]	@ (80053c0 <iBus_Throttle_Min+0x48>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d019      	beq.n	80053b8 <iBus_Throttle_Min+0x40>
	{
		ibus_rx_cplt_flag = 0;
 8005384:	4b0e      	ldr	r3, [pc, #56]	@ (80053c0 <iBus_Throttle_Min+0x48>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32))
 800538a:	2120      	movs	r1, #32
 800538c:	480d      	ldr	r0, [pc, #52]	@ (80053c4 <iBus_Throttle_Min+0x4c>)
 800538e:	f7fc fe33 	bl	8001ff8 <iBus_Check_CHKSUM>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00f      	beq.n	80053b8 <iBus_Throttle_Min+0x40>
		{
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2); // toggle LED if iBus frame checksum successful --> intact iBus frame
 8005398:	2104      	movs	r1, #4
 800539a:	480b      	ldr	r0, [pc, #44]	@ (80053c8 <iBus_Throttle_Min+0x50>)
 800539c:	f7fd ffd9 	bl	8003352 <LL_GPIO_TogglePin>

			iBus_Parse(&ibus_rx_buf[0], &iBus); // parse and store switch/gimbal data in iBus structure
 80053a0:	490a      	ldr	r1, [pc, #40]	@ (80053cc <iBus_Throttle_Min+0x54>)
 80053a2:	4808      	ldr	r0, [pc, #32]	@ (80053c4 <iBus_Throttle_Min+0x4c>)
 80053a4:	f7fc fe5d 	bl	8002062 <iBus_Parse>

			if (iBus.LV < 1010) return 1;
 80053a8:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <iBus_Throttle_Min+0x54>)
 80053aa:	889b      	ldrh	r3, [r3, #4]
 80053ac:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d801      	bhi.n	80053b8 <iBus_Throttle_Min+0x40>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <iBus_Throttle_Min+0x42>
		}
	}

	return 0;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	2000056c 	.word	0x2000056c
 80053c4:	20000548 	.word	0x20000548
 80053c8:	40020800 	.word	0x40020800
 80053cc:	20000314 	.word	0x20000314

080053d0 <ESC_Calibration>:

void ESC_Calibration(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
	// set max pulse width
	TIM5->CCR1 = 21000;
 80053d4:	4b14      	ldr	r3, [pc, #80]	@ (8005428 <ESC_Calibration+0x58>)
 80053d6:	f245 2208 	movw	r2, #21000	@ 0x5208
 80053da:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM5->CCR2 = 21000;
 80053dc:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <ESC_Calibration+0x58>)
 80053de:	f245 2208 	movw	r2, #21000	@ 0x5208
 80053e2:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM5->CCR3 = 21000;
 80053e4:	4b10      	ldr	r3, [pc, #64]	@ (8005428 <ESC_Calibration+0x58>)
 80053e6:	f245 2208 	movw	r2, #21000	@ 0x5208
 80053ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM5->CCR4 = 21000;
 80053ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005428 <ESC_Calibration+0x58>)
 80053ee:	f245 2208 	movw	r2, #21000	@ 0x5208
 80053f2:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(7000);
 80053f4:	f641 3058 	movw	r0, #7000	@ 0x1b58
 80053f8:	f001 f8b8 	bl	800656c <HAL_Delay>

	// set min pulse width
	TIM5->CCR1 = 10500;
 80053fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <ESC_Calibration+0x58>)
 80053fe:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005402:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM5->CCR2 = 10500;
 8005404:	4b08      	ldr	r3, [pc, #32]	@ (8005428 <ESC_Calibration+0x58>)
 8005406:	f642 1204 	movw	r2, #10500	@ 0x2904
 800540a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM5->CCR3 = 10500;
 800540c:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <ESC_Calibration+0x58>)
 800540e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005412:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM5->CCR4 = 10500;
 8005414:	4b04      	ldr	r3, [pc, #16]	@ (8005428 <ESC_Calibration+0x58>)
 8005416:	f642 1204 	movw	r2, #10500	@ 0x2904
 800541a:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(8000);
 800541c:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8005420:	f001 f8a4 	bl	800656c <HAL_Delay>
}
 8005424:	bf00      	nop
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40000c00 	.word	0x40000c00

0800542c <BNO080_Calibration>:

void BNO080_Calibration(void)
{
 800542c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005430:	b090      	sub	sp, #64	@ 0x40
 8005432:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 8005434:	f7fc f896 	bl	8001564 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 8005438:	f7fc fbf0 	bl	8001c1c <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 800543c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8005440:	f7fc fbce 	bl	8001be0 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 8005444:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8005448:	f7fc fbd9 	bl	8001bfe <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 800544c:	48a9      	ldr	r0, [pc, #676]	@ (80056f4 <BNO080_Calibration+0x2c8>)
 800544e:	f006 ffab 	bl	800c3a8 <puts>
	printf("Output in form x, y, z, in uTesla\n\n");
 8005452:	48a9      	ldr	r0, [pc, #676]	@ (80056f8 <BNO080_Calibration+0x2cc>)
 8005454:	f006 ffa8 	bl	800c3a8 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 8005458:	e0cf      	b.n	80055fa <BNO080_Calibration+0x1ce>
	{
		if(BNO080_dataAvailable())
 800545a:	f7fc f903 	bl	8001664 <BNO080_dataAvailable>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80c5 	beq.w	80055f0 <BNO080_Calibration+0x1c4>
		{
			// get magnetometer data
			float x = BNO080_getMagX();
 8005466:	f7fc fb37 	bl	8001ad8 <BNO080_getMagX>
 800546a:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 800546e:	f7fc fb49 	bl	8001b04 <BNO080_getMagY>
 8005472:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 8005476:	f7fc fb5b 	bl	8001b30 <BNO080_getMagZ>
 800547a:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 800547e:	f7fc fb6d 	bl	8001b5c <BNO080_getMagAccuracy>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]

			// get quaternion data
			float quatI = BNO080_getQuatI();
 8005486:	f7fc faad 	bl	80019e4 <BNO080_getQuatI>
 800548a:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 800548e:	f7fc fabf 	bl	8001a10 <BNO080_getQuatJ>
 8005492:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 8005496:	f7fc fad1 	bl	8001a3c <BNO080_getQuatK>
 800549a:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 800549e:	f7fc fae3 	bl	8001a68 <BNO080_getQuatReal>
 80054a2:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 80054a6:	f7fc fb0b 	bl	8001ac0 <BNO080_getQuatAccuracy>
 80054aa:	4603      	mov	r3, r0
 80054ac:	70fb      	strb	r3, [r7, #3]

			printf("=== BNO080 Calibration Status ===\n");
 80054ae:	4893      	ldr	r0, [pc, #588]	@ (80056fc <BNO080_Calibration+0x2d0>)
 80054b0:	f006 ff7a 	bl	800c3a8 <puts>

			printf("Magnetometer:\n");
 80054b4:	4892      	ldr	r0, [pc, #584]	@ (8005700 <BNO080_Calibration+0x2d4>)
 80054b6:	f006 ff77 	bl	800c3a8 <puts>
			printf(" X: %f  Y: %f  Z: %f\n", x, y, z);
 80054ba:	6a38      	ldr	r0, [r7, #32]
 80054bc:	f7fb f844 	bl	8000548 <__aeabi_f2d>
 80054c0:	4680      	mov	r8, r0
 80054c2:	4689      	mov	r9, r1
 80054c4:	69f8      	ldr	r0, [r7, #28]
 80054c6:	f7fb f83f 	bl	8000548 <__aeabi_f2d>
 80054ca:	4604      	mov	r4, r0
 80054cc:	460d      	mov	r5, r1
 80054ce:	69b8      	ldr	r0, [r7, #24]
 80054d0:	f7fb f83a 	bl	8000548 <__aeabi_f2d>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054dc:	e9cd 4500 	strd	r4, r5, [sp]
 80054e0:	4642      	mov	r2, r8
 80054e2:	464b      	mov	r3, r9
 80054e4:	4887      	ldr	r0, [pc, #540]	@ (8005704 <BNO080_Calibration+0x2d8>)
 80054e6:	f006 fef7 	bl	800c2d8 <iprintf>
			printf(" Accuracy: ");
 80054ea:	4887      	ldr	r0, [pc, #540]	@ (8005708 <BNO080_Calibration+0x2dc>)
 80054ec:	f006 fef4 	bl	800c2d8 <iprintf>
			switch(accuracy) {
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d81a      	bhi.n	800552c <BNO080_Calibration+0x100>
 80054f6:	a201      	add	r2, pc, #4	@ (adr r2, 80054fc <BNO080_Calibration+0xd0>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	0800550d 	.word	0x0800550d
 8005500:	08005515 	.word	0x08005515
 8005504:	0800551d 	.word	0x0800551d
 8005508:	08005525 	.word	0x08005525
			case 0: printf("Unreliable\n"); break;
 800550c:	487f      	ldr	r0, [pc, #508]	@ (800570c <BNO080_Calibration+0x2e0>)
 800550e:	f006 ff4b 	bl	800c3a8 <puts>
 8005512:	e00e      	b.n	8005532 <BNO080_Calibration+0x106>
			case 1: printf("Low\n"); break;
 8005514:	487e      	ldr	r0, [pc, #504]	@ (8005710 <BNO080_Calibration+0x2e4>)
 8005516:	f006 ff47 	bl	800c3a8 <puts>
 800551a:	e00a      	b.n	8005532 <BNO080_Calibration+0x106>
			case 2: printf("Medium\n"); break;
 800551c:	487d      	ldr	r0, [pc, #500]	@ (8005714 <BNO080_Calibration+0x2e8>)
 800551e:	f006 ff43 	bl	800c3a8 <puts>
 8005522:	e006      	b.n	8005532 <BNO080_Calibration+0x106>
			case 3: printf("High\n"); break;
 8005524:	487c      	ldr	r0, [pc, #496]	@ (8005718 <BNO080_Calibration+0x2ec>)
 8005526:	f006 ff3f 	bl	800c3a8 <puts>
 800552a:	e002      	b.n	8005532 <BNO080_Calibration+0x106>
			default: printf("Unknown\n");
 800552c:	487b      	ldr	r0, [pc, #492]	@ (800571c <BNO080_Calibration+0x2f0>)
 800552e:	f006 ff3b 	bl	800c3a8 <puts>
			}

			printf("\nQuaternion:\n");
 8005532:	487b      	ldr	r0, [pc, #492]	@ (8005720 <BNO080_Calibration+0x2f4>)
 8005534:	f006 ff38 	bl	800c3a8 <puts>
			printf("  I: %f  J: %f  K: %f  Real: %f\n", quatI, quatJ, quatK, sensorAccuracy);
 8005538:	6938      	ldr	r0, [r7, #16]
 800553a:	f7fb f805 	bl	8000548 <__aeabi_f2d>
 800553e:	4680      	mov	r8, r0
 8005540:	4689      	mov	r9, r1
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7fb f800 	bl	8000548 <__aeabi_f2d>
 8005548:	4604      	mov	r4, r0
 800554a:	460d      	mov	r5, r1
 800554c:	68b8      	ldr	r0, [r7, #8]
 800554e:	f7fa fffb 	bl	8000548 <__aeabi_f2d>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	78f9      	ldrb	r1, [r7, #3]
 8005558:	9104      	str	r1, [sp, #16]
 800555a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800555e:	e9cd 4500 	strd	r4, r5, [sp]
 8005562:	4642      	mov	r2, r8
 8005564:	464b      	mov	r3, r9
 8005566:	486f      	ldr	r0, [pc, #444]	@ (8005724 <BNO080_Calibration+0x2f8>)
 8005568:	f006 feb6 	bl	800c2d8 <iprintf>
			printf("  Accuracy: ");
 800556c:	486e      	ldr	r0, [pc, #440]	@ (8005728 <BNO080_Calibration+0x2fc>)
 800556e:	f006 feb3 	bl	800c2d8 <iprintf>
			switch(sensorAccuracy) {
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	2b03      	cmp	r3, #3
 8005576:	d81b      	bhi.n	80055b0 <BNO080_Calibration+0x184>
 8005578:	a201      	add	r2, pc, #4	@ (adr r2, 8005580 <BNO080_Calibration+0x154>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	08005591 	.word	0x08005591
 8005584:	08005599 	.word	0x08005599
 8005588:	080055a1 	.word	0x080055a1
 800558c:	080055a9 	.word	0x080055a9
			case 0: printf("Unreliable\n"); break;
 8005590:	485e      	ldr	r0, [pc, #376]	@ (800570c <BNO080_Calibration+0x2e0>)
 8005592:	f006 ff09 	bl	800c3a8 <puts>
 8005596:	e00e      	b.n	80055b6 <BNO080_Calibration+0x18a>
			case 1: printf("Low\n"); break;
 8005598:	485d      	ldr	r0, [pc, #372]	@ (8005710 <BNO080_Calibration+0x2e4>)
 800559a:	f006 ff05 	bl	800c3a8 <puts>
 800559e:	e00a      	b.n	80055b6 <BNO080_Calibration+0x18a>
			case 2: printf("Medium\n"); break;
 80055a0:	485c      	ldr	r0, [pc, #368]	@ (8005714 <BNO080_Calibration+0x2e8>)
 80055a2:	f006 ff01 	bl	800c3a8 <puts>
 80055a6:	e006      	b.n	80055b6 <BNO080_Calibration+0x18a>
			case 3: printf("High\n"); break;
 80055a8:	485b      	ldr	r0, [pc, #364]	@ (8005718 <BNO080_Calibration+0x2ec>)
 80055aa:	f006 fefd 	bl	800c3a8 <puts>
 80055ae:	e002      	b.n	80055b6 <BNO080_Calibration+0x18a>
			default: printf("Unknown\n");
 80055b0:	485a      	ldr	r0, [pc, #360]	@ (800571c <BNO080_Calibration+0x2f0>)
 80055b2:	f006 fef9 	bl	800c3a8 <puts>
			}

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 80055b6:	7dfb      	ldrb	r3, [r7, #23]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d110      	bne.n	80055de <BNO080_Calibration+0x1b2>
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d10d      	bne.n	80055de <BNO080_Calibration+0x1b2>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 80055c2:	2107      	movs	r1, #7
 80055c4:	4859      	ldr	r0, [pc, #356]	@ (800572c <BNO080_Calibration+0x300>)
 80055c6:	f7fd fea7 	bl	8003318 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 80055ca:	4b59      	ldr	r3, [pc, #356]	@ (8005730 <BNO080_Calibration+0x304>)
 80055cc:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80055d0:	629a      	str	r2, [r3, #40]	@ 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80055d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80055d6:	4856      	ldr	r0, [pc, #344]	@ (8005730 <BNO080_Calibration+0x304>)
 80055d8:	f7fd fd52 	bl	8003080 <LL_TIM_CC_EnableChannel>
 80055dc:	e008      	b.n	80055f0 <BNO080_Calibration+0x1c4>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 80055de:	2107      	movs	r1, #7
 80055e0:	4852      	ldr	r0, [pc, #328]	@ (800572c <BNO080_Calibration+0x300>)
 80055e2:	f7fd fea7 	bl	8003334 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80055e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80055ea:	4851      	ldr	r0, [pc, #324]	@ (8005730 <BNO080_Calibration+0x304>)
 80055ec:	f7fd fd59 	bl	80030a2 <LL_TIM_CC_DisableChannel>
			}
		}

		iBus_Connection_Status(); //Refreshes iBus Data for iBus.SwC
 80055f0:	f000 f8a6 	bl	8005740 <iBus_Connection_Status>
		HAL_Delay(100);
 80055f4:	2064      	movs	r0, #100	@ 0x64
 80055f6:	f000 ffb9 	bl	800656c <HAL_Delay>
	while(iBus.SwC == 1500)
 80055fa:	4b4e      	ldr	r3, [pc, #312]	@ (8005734 <BNO080_Calibration+0x308>)
 80055fc:	899b      	ldrh	r3, [r3, #12]
 80055fe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005602:	4293      	cmp	r3, r2
 8005604:	f43f af29 	beq.w	800545a <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8005608:	2107      	movs	r1, #7
 800560a:	4848      	ldr	r0, [pc, #288]	@ (800572c <BNO080_Calibration+0x300>)
 800560c:	f7fd fe92 	bl	8003334 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005610:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005614:	4846      	ldr	r0, [pc, #280]	@ (8005730 <BNO080_Calibration+0x304>)
 8005616:	f7fd fd44 	bl	80030a2 <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 800561a:	f7fc fbed 	bl	8001df8 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 800561e:	f7fc fbcf 	bl	8001dc0 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 8005622:	2364      	movs	r3, #100	@ 0x64
 8005624:	627b      	str	r3, [r7, #36]	@ 0x24
	while(1)
	{
		if(--counter == 0) break;
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	3b01      	subs	r3, #1
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	2b00      	cmp	r3, #0
 8005630:	d02f      	beq.n	8005692 <BNO080_Calibration+0x266>
		if(BNO080_dataAvailable())
 8005632:	f7fc f817 	bl	8001664 <BNO080_dataAvailable>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d026      	beq.n	800568a <BNO080_Calibration+0x25e>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 800563c:	f7fc faf6 	bl	8001c2c <BNO080_calibrationComplete>
 8005640:	4603      	mov	r3, r0
 8005642:	2b01      	cmp	r3, #1
 8005644:	d121      	bne.n	800568a <BNO080_Calibration+0x25e>
			{
				printf("\nCalibration data successfully stored\n");
 8005646:	483c      	ldr	r0, [pc, #240]	@ (8005738 <BNO080_Calibration+0x30c>)
 8005648:	f006 feae 	bl	800c3a8 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800564c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005650:	4837      	ldr	r0, [pc, #220]	@ (8005730 <BNO080_Calibration+0x304>)
 8005652:	f7fd fd15 	bl	8003080 <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 8005656:	4b36      	ldr	r3, [pc, #216]	@ (8005730 <BNO080_Calibration+0x304>)
 8005658:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800565c:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 800565e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005662:	f000 ff83 	bl	800656c <HAL_Delay>
				TIM3->PSC = 1500;
 8005666:	4b32      	ldr	r3, [pc, #200]	@ (8005730 <BNO080_Calibration+0x304>)
 8005668:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800566c:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 800566e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005672:	f000 ff7b 	bl	800656c <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005676:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800567a:	482d      	ldr	r0, [pc, #180]	@ (8005730 <BNO080_Calibration+0x304>)
 800567c:	f7fd fd11 	bl	80030a2 <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 8005680:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005684:	f000 ff72 	bl	800656c <HAL_Delay>
				break;
 8005688:	e004      	b.n	8005694 <BNO080_Calibration+0x268>
			}
		}
		HAL_Delay(10);
 800568a:	200a      	movs	r0, #10
 800568c:	f000 ff6e 	bl	800656c <HAL_Delay>
		if(--counter == 0) break;
 8005690:	e7c9      	b.n	8005626 <BNO080_Calibration+0x1fa>
 8005692:	bf00      	nop
	}
	if(counter == 0)
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d120      	bne.n	80056dc <BNO080_Calibration+0x2b0>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 800569a:	4828      	ldr	r0, [pc, #160]	@ (800573c <BNO080_Calibration+0x310>)
 800569c:	f006 fe84 	bl	800c3a8 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80056a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056a4:	4822      	ldr	r0, [pc, #136]	@ (8005730 <BNO080_Calibration+0x304>)
 80056a6:	f7fd fceb 	bl	8003080 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 80056aa:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <BNO080_Calibration+0x304>)
 80056ac:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80056b0:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 80056b2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80056b6:	f000 ff59 	bl	800656c <HAL_Delay>
		TIM3->PSC = 2000;
 80056ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005730 <BNO080_Calibration+0x304>)
 80056bc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80056c0:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 80056c2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80056c6:	f000 ff51 	bl	800656c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80056ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056ce:	4818      	ldr	r0, [pc, #96]	@ (8005730 <BNO080_Calibration+0x304>)
 80056d0:	f7fd fce7 	bl	80030a2 <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 80056d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80056d8:	f000 ff48 	bl	800656c <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 80056dc:	f7fb ff42 	bl	8001564 <BNO080_Initialization>
	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
 80056e0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80056e4:	f7fc fa6d 	bl	8001bc2 <BNO080_enableRotationVector>
}
 80056e8:	bf00      	nop
 80056ea:	3728      	adds	r7, #40	@ 0x28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056f2:	bf00      	nop
 80056f4:	0800f1bc 	.word	0x0800f1bc
 80056f8:	0800f208 	.word	0x0800f208
 80056fc:	0800f22c 	.word	0x0800f22c
 8005700:	0800f250 	.word	0x0800f250
 8005704:	0800f260 	.word	0x0800f260
 8005708:	0800f278 	.word	0x0800f278
 800570c:	0800f284 	.word	0x0800f284
 8005710:	0800f290 	.word	0x0800f290
 8005714:	0800f294 	.word	0x0800f294
 8005718:	0800f29c 	.word	0x0800f29c
 800571c:	0800f2a4 	.word	0x0800f2a4
 8005720:	0800f2ac 	.word	0x0800f2ac
 8005724:	0800f2bc 	.word	0x0800f2bc
 8005728:	0800f2e0 	.word	0x0800f2e0
 800572c:	40020800 	.word	0x40020800
 8005730:	40000400 	.word	0x40000400
 8005734:	20000314 	.word	0x20000314
 8005738:	0800f2f0 	.word	0x0800f2f0
 800573c:	0800f318 	.word	0x0800f318

08005740 <iBus_Connection_Status>:

int iBus_Connection_Status(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
	if (ibus_rx_cplt_flag)
 8005744:	4b0b      	ldr	r3, [pc, #44]	@ (8005774 <iBus_Connection_Status+0x34>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00f      	beq.n	800576c <iBus_Connection_Status+0x2c>
	{
		ibus_rx_cplt_flag = 0;
 800574c:	4b09      	ldr	r3, [pc, #36]	@ (8005774 <iBus_Connection_Status+0x34>)
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32))
 8005752:	2120      	movs	r1, #32
 8005754:	4808      	ldr	r0, [pc, #32]	@ (8005778 <iBus_Connection_Status+0x38>)
 8005756:	f7fc fc4f 	bl	8001ff8 <iBus_Check_CHKSUM>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <iBus_Connection_Status+0x2c>
		{
			iBus_Parse(&ibus_rx_buf[0], &iBus); // parse and store switch/gimbal data in iBus structure
 8005760:	4906      	ldr	r1, [pc, #24]	@ (800577c <iBus_Connection_Status+0x3c>)
 8005762:	4805      	ldr	r0, [pc, #20]	@ (8005778 <iBus_Connection_Status+0x38>)
 8005764:	f7fc fc7d 	bl	8002062 <iBus_Parse>
			return 1;
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <iBus_Connection_Status+0x2e>
		}
	}

	return 0;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	2000056c 	.word	0x2000056c
 8005778:	20000548 	.word	0x20000548
 800577c:	20000314 	.word	0x20000314

08005780 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;

	if(huart->Instance == USART1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2d      	ldr	r2, [pc, #180]	@ (8005844 <HAL_UART_RxCpltCallback+0xc4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d154      	bne.n	800583c <HAL_UART_RxCpltCallback+0xbc>
	{
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8005792:	2201      	movs	r2, #1
 8005794:	492c      	ldr	r1, [pc, #176]	@ (8005848 <HAL_UART_RxCpltCallback+0xc8>)
 8005796:	482d      	ldr	r0, [pc, #180]	@ (800584c <HAL_UART_RxCpltCallback+0xcc>)
 8005798:	f003 ff9f 	bl	80096da <HAL_UART_Receive_IT>

		switch(cnt)
 800579c:	4b2c      	ldr	r3, [pc, #176]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b13      	cmp	r3, #19
 80057a2:	d02e      	beq.n	8005802 <HAL_UART_RxCpltCallback+0x82>
 80057a4:	2b13      	cmp	r3, #19
 80057a6:	dc3a      	bgt.n	800581e <HAL_UART_RxCpltCallback+0x9e>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_UART_RxCpltCallback+0x32>
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d012      	beq.n	80057d6 <HAL_UART_RxCpltCallback+0x56>
 80057b0:	e035      	b.n	800581e <HAL_UART_RxCpltCallback+0x9e>
		{
		case 0:
			if(uart1_rx_data == 0x47)
 80057b2:	4b25      	ldr	r3, [pc, #148]	@ (8005848 <HAL_UART_RxCpltCallback+0xc8>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b47      	cmp	r3, #71	@ 0x47
 80057b8:	d13f      	bne.n	800583a <HAL_UART_RxCpltCallback+0xba>
			{
				radio_rx_buf[cnt] = uart1_rx_data;
 80057ba:	4b25      	ldr	r3, [pc, #148]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	4b21      	ldr	r3, [pc, #132]	@ (8005848 <HAL_UART_RxCpltCallback+0xc8>)
 80057c2:	7819      	ldrb	r1, [r3, #0]
 80057c4:	4b23      	ldr	r3, [pc, #140]	@ (8005854 <HAL_UART_RxCpltCallback+0xd4>)
 80057c6:	5499      	strb	r1, [r3, r2]
				cnt++;
 80057c8:	4b21      	ldr	r3, [pc, #132]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 80057d2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80057d4:	e031      	b.n	800583a <HAL_UART_RxCpltCallback+0xba>
		case 1:
			if(uart1_rx_data == 0x53)
 80057d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005848 <HAL_UART_RxCpltCallback+0xc8>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b53      	cmp	r3, #83	@ 0x53
 80057dc:	d10d      	bne.n	80057fa <HAL_UART_RxCpltCallback+0x7a>
			{
				radio_rx_buf[cnt] = uart1_rx_data;
 80057de:	4b1c      	ldr	r3, [pc, #112]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	4b18      	ldr	r3, [pc, #96]	@ (8005848 <HAL_UART_RxCpltCallback+0xc8>)
 80057e6:	7819      	ldrb	r1, [r3, #0]
 80057e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005854 <HAL_UART_RxCpltCallback+0xd4>)
 80057ea:	5499      	strb	r1, [r3, r2]
				cnt++;
 80057ec:	4b18      	ldr	r3, [pc, #96]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	3301      	adds	r3, #1
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	4b16      	ldr	r3, [pc, #88]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 80057f6:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 80057f8:	e020      	b.n	800583c <HAL_UART_RxCpltCallback+0xbc>
				cnt = 0;
 80057fa:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
			break;
 8005800:	e01c      	b.n	800583c <HAL_UART_RxCpltCallback+0xbc>
		case 19:
			radio_rx_buf[cnt] = uart1_rx_data;
 8005802:	4b13      	ldr	r3, [pc, #76]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <HAL_UART_RxCpltCallback+0xc8>)
 800580a:	7819      	ldrb	r1, [r3, #0]
 800580c:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <HAL_UART_RxCpltCallback+0xd4>)
 800580e:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8005810:	4b0f      	ldr	r3, [pc, #60]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
			radio_rx_cplt_flag = 1;
 8005816:	4b10      	ldr	r3, [pc, #64]	@ (8005858 <HAL_UART_RxCpltCallback+0xd8>)
 8005818:	2201      	movs	r2, #1
 800581a:	701a      	strb	r2, [r3, #0]
			break;
 800581c:	e00e      	b.n	800583c <HAL_UART_RxCpltCallback+0xbc>
		default:
			radio_rx_buf[cnt] = uart1_rx_data;
 800581e:	4b0c      	ldr	r3, [pc, #48]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	4b08      	ldr	r3, [pc, #32]	@ (8005848 <HAL_UART_RxCpltCallback+0xc8>)
 8005826:	7819      	ldrb	r1, [r3, #0]
 8005828:	4b0a      	ldr	r3, [pc, #40]	@ (8005854 <HAL_UART_RxCpltCallback+0xd4>)
 800582a:	5499      	strb	r1, [r3, r2]
			cnt++;
 800582c:	4b08      	ldr	r3, [pc, #32]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	3301      	adds	r3, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	4b06      	ldr	r3, [pc, #24]	@ (8005850 <HAL_UART_RxCpltCallback+0xd0>)
 8005836:	701a      	strb	r2, [r3, #0]
			break;
 8005838:	e000      	b.n	800583c <HAL_UART_RxCpltCallback+0xbc>
			break;
 800583a:	bf00      	nop
		}
	}
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40011000 	.word	0x40011000
 8005848:	2000056d 	.word	0x2000056d
 800584c:	2000046c 	.word	0x2000046c
 8005850:	20000542 	.word	0x20000542
 8005854:	200004dc 	.word	0x200004dc
 8005858:	200004f0 	.word	0x200004f0

0800585c <Encode_MSG_AHRS>:

void Encode_MSG_AHRS(unsigned char *radio_tx_buf)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	radio_tx_buf[0] = 0x46;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2246      	movs	r2, #70	@ 0x46
 8005868:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[1] = 0x43;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3301      	adds	r3, #1
 800586e:	2243      	movs	r2, #67	@ 0x43
 8005870:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[2] = 0x10;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3302      	adds	r3, #2
 8005876:	2210      	movs	r2, #16
 8005878:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[3] = (short)(BNO080_Roll*100);
 800587a:	4ba6      	ldr	r3, [pc, #664]	@ (8005b14 <Encode_MSG_AHRS+0x2b8>)
 800587c:	edd3 7a00 	vldr	s15, [r3]
 8005880:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 8005884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800588c:	ee17 3a90 	vmov	r3, s15
 8005890:	b21a      	sxth	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3303      	adds	r3, #3
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[4] = ((short)(BNO080_Roll*100))>>8;
 800589a:	4b9e      	ldr	r3, [pc, #632]	@ (8005b14 <Encode_MSG_AHRS+0x2b8>)
 800589c:	edd3 7a00 	vldr	s15, [r3]
 80058a0:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 80058a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ac:	ee17 3a90 	vmov	r3, s15
 80058b0:	b21b      	sxth	r3, r3
 80058b2:	121b      	asrs	r3, r3, #8
 80058b4:	b21a      	sxth	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3304      	adds	r3, #4
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[5] = (short)(BNO080_Pitch*100);
 80058be:	4b97      	ldr	r3, [pc, #604]	@ (8005b1c <Encode_MSG_AHRS+0x2c0>)
 80058c0:	edd3 7a00 	vldr	s15, [r3]
 80058c4:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 80058c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058d0:	ee17 3a90 	vmov	r3, s15
 80058d4:	b21a      	sxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3305      	adds	r3, #5
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[6] = ((short)(BNO080_Pitch*100))>>8;
 80058de:	4b8f      	ldr	r3, [pc, #572]	@ (8005b1c <Encode_MSG_AHRS+0x2c0>)
 80058e0:	edd3 7a00 	vldr	s15, [r3]
 80058e4:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 80058e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058f0:	ee17 3a90 	vmov	r3, s15
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	121b      	asrs	r3, r3, #8
 80058f8:	b21a      	sxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3306      	adds	r3, #6
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[7] = (unsigned short)(BNO080_Yaw*100);
 8005902:	4b87      	ldr	r3, [pc, #540]	@ (8005b20 <Encode_MSG_AHRS+0x2c4>)
 8005904:	edd3 7a00 	vldr	s15, [r3]
 8005908:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 800590c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005914:	ee17 3a90 	vmov	r3, s15
 8005918:	b29a      	uxth	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3307      	adds	r3, #7
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[8] = ((unsigned short)(BNO080_Yaw*100))>>8;
 8005922:	4b7f      	ldr	r3, [pc, #508]	@ (8005b20 <Encode_MSG_AHRS+0x2c4>)
 8005924:	edd3 7a00 	vldr	s15, [r3]
 8005928:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 800592c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005934:	ee17 3a90 	vmov	r3, s15
 8005938:	b29b      	uxth	r3, r3
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	b29a      	uxth	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3308      	adds	r3, #8
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[9] = (short)(LPS22HH.baroAltFilt*10);
 8005946:	4b77      	ldr	r3, [pc, #476]	@ (8005b24 <Encode_MSG_AHRS+0x2c8>)
 8005948:	edd3 7a03 	vldr	s15, [r3, #12]
 800594c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005958:	ee17 3a90 	vmov	r3, s15
 800595c:	b21a      	sxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3309      	adds	r3, #9
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[10] = ((short)(LPS22HH.baroAltFilt*10))>>8;
 8005966:	4b6f      	ldr	r3, [pc, #444]	@ (8005b24 <Encode_MSG_AHRS+0x2c8>)
 8005968:	edd3 7a03 	vldr	s15, [r3, #12]
 800596c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005978:	ee17 3a90 	vmov	r3, s15
 800597c:	b21b      	sxth	r3, r3
 800597e:	121b      	asrs	r3, r3, #8
 8005980:	b21a      	sxth	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	330a      	adds	r3, #10
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[11] = (short)((iBus.RH-1500)*0.1f*100);
 800598a:	4b67      	ldr	r3, [pc, #412]	@ (8005b28 <Encode_MSG_AHRS+0x2cc>)
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800599a:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005b2c <Encode_MSG_AHRS+0x2d0>
 800599e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059a2:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 80059a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059ae:	ee17 3a90 	vmov	r3, s15
 80059b2:	b21a      	sxth	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	330b      	adds	r3, #11
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[12] = ((short)((iBus.RH-1500)*0.1f*100))>>8;
 80059bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005b28 <Encode_MSG_AHRS+0x2cc>)
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80059c4:	ee07 3a90 	vmov	s15, r3
 80059c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059cc:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8005b2c <Encode_MSG_AHRS+0x2d0>
 80059d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059d4:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 80059d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059e0:	ee17 3a90 	vmov	r3, s15
 80059e4:	b21b      	sxth	r3, r3
 80059e6:	121b      	asrs	r3, r3, #8
 80059e8:	b21a      	sxth	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	330c      	adds	r3, #12
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[13] = (short)((iBus.RV-1500)*0.1f*100);
 80059f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005b28 <Encode_MSG_AHRS+0x2cc>)
 80059f4:	885b      	ldrh	r3, [r3, #2]
 80059f6:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a02:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8005b2c <Encode_MSG_AHRS+0x2d0>
 8005a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a0a:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 8005a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a16:	ee17 3a90 	vmov	r3, s15
 8005a1a:	b21a      	sxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	330d      	adds	r3, #13
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[14] = ((short)((iBus.RV-1500)*0.1f*100))>>8;
 8005a24:	4b40      	ldr	r3, [pc, #256]	@ (8005b28 <Encode_MSG_AHRS+0x2cc>)
 8005a26:	885b      	ldrh	r3, [r3, #2]
 8005a28:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a34:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8005b2c <Encode_MSG_AHRS+0x2d0>
 8005a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a3c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 8005a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a48:	ee17 3a90 	vmov	r3, s15
 8005a4c:	b21b      	sxth	r3, r3
 8005a4e:	121b      	asrs	r3, r3, #8
 8005a50:	b21a      	sxth	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	330e      	adds	r3, #14
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[15] = (unsigned short)((iBus.LH-1000)*0.36f*100);
 8005a5a:	4b33      	ldr	r3, [pc, #204]	@ (8005b28 <Encode_MSG_AHRS+0x2cc>)
 8005a5c:	88db      	ldrh	r3, [r3, #6]
 8005a5e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005b30 <Encode_MSG_AHRS+0x2d4>
 8005a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a72:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 8005a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7e:	ee17 3a90 	vmov	r3, s15
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	330f      	adds	r3, #15
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[16] = ((unsigned short)((iBus.LH-1000)*0.36f*100))>>8;
 8005a8c:	4b26      	ldr	r3, [pc, #152]	@ (8005b28 <Encode_MSG_AHRS+0x2cc>)
 8005a8e:	88db      	ldrh	r3, [r3, #6]
 8005a90:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005a94:	ee07 3a90 	vmov	s15, r3
 8005a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a9c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005b30 <Encode_MSG_AHRS+0x2d4>
 8005aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aa4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005b18 <Encode_MSG_AHRS+0x2bc>
 8005aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ab0:	ee17 3a90 	vmov	r3, s15
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3310      	adds	r3, #16
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[17] = 0x00;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3311      	adds	r3, #17
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[18] = 0x00;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3312      	adds	r3, #18
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[19] = 0xff;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3313      	adds	r3, #19
 8005ad6:	22ff      	movs	r2, #255	@ 0xff
 8005ad8:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 19; i++) radio_tx_buf[19] = radio_tx_buf[19] - radio_tx_buf[i];
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e00e      	b.n	8005afe <Encode_MSG_AHRS+0x2a2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3313      	adds	r3, #19
 8005ae4:	7819      	ldrb	r1, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3313      	adds	r3, #19
 8005af2:	1a8a      	subs	r2, r1, r2
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b12      	cmp	r3, #18
 8005b02:	dded      	ble.n	8005ae0 <Encode_MSG_AHRS+0x284>
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000364 	.word	0x20000364
 8005b18:	42c80000 	.word	0x42c80000
 8005b1c:	20000368 	.word	0x20000368
 8005b20:	2000036c 	.word	0x2000036c
 8005b24:	20000354 	.word	0x20000354
 8005b28:	20000314 	.word	0x20000314
 8005b2c:	3dcccccd 	.word	0x3dcccccd
 8005b30:	3eb851ec 	.word	0x3eb851ec

08005b34 <Encode_MSG_GPS>:

void Encode_MSG_GPS(unsigned char *radio_tx_buf)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
	radio_tx_buf[0] = 0x46;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2246      	movs	r2, #70	@ 0x46
 8005b40:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[1] = 0x43;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3301      	adds	r3, #1
 8005b46:	2243      	movs	r2, #67	@ 0x43
 8005b48:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[2] = 0x11;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	2211      	movs	r2, #17
 8005b50:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[3] = 0x00;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3303      	adds	r3, #3
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[4] = 0x00;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2200      	movs	r2, #0
 8005b60:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[5] = 0x00;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3305      	adds	r3, #5
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[6] = 0x00;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3306      	adds	r3, #6
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[7] = 0x00;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3307      	adds	r3, #7
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[8] = 0x00;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[9] = 0x00;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3309      	adds	r3, #9
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[10] = 0x00;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	330a      	adds	r3, #10
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[11] = (unsigned short)(batVolt*100);
 8005b92:	4b38      	ldr	r3, [pc, #224]	@ (8005c74 <Encode_MSG_GPS+0x140>)
 8005b94:	edd3 7a00 	vldr	s15, [r3]
 8005b98:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8005c78 <Encode_MSG_GPS+0x144>
 8005b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ba4:	ee17 3a90 	vmov	r3, s15
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	330b      	adds	r3, #11
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[12] = ((unsigned short)(batVolt*100)>>8);
 8005bb2:	4b30      	ldr	r3, [pc, #192]	@ (8005c74 <Encode_MSG_GPS+0x140>)
 8005bb4:	edd3 7a00 	vldr	s15, [r3]
 8005bb8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005c78 <Encode_MSG_GPS+0x144>
 8005bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc4:	ee17 3a90 	vmov	r3, s15
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	0a1b      	lsrs	r3, r3, #8
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[13] = iBus.SwA == 1000 ? 0 : 1;
 8005bd6:	4b29      	ldr	r3, [pc, #164]	@ (8005c7c <Encode_MSG_GPS+0x148>)
 8005bd8:	891b      	ldrh	r3, [r3, #8]
 8005bda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bde:	bf14      	ite	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	2300      	moveq	r3, #0
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	330d      	adds	r3, #13
 8005bea:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[14] = iBus.SwC == 1000 ? 0 : iBus.SwC == 1500 ? 1 : 2;
 8005bec:	4b23      	ldr	r3, [pc, #140]	@ (8005c7c <Encode_MSG_GPS+0x148>)
 8005bee:	899b      	ldrh	r3, [r3, #12]
 8005bf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bf4:	d009      	beq.n	8005c0a <Encode_MSG_GPS+0xd6>
 8005bf6:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <Encode_MSG_GPS+0x148>)
 8005bf8:	899b      	ldrh	r3, [r3, #12]
 8005bfa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d101      	bne.n	8005c06 <Encode_MSG_GPS+0xd2>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e002      	b.n	8005c0c <Encode_MSG_GPS+0xd8>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e000      	b.n	8005c0c <Encode_MSG_GPS+0xd8>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	320e      	adds	r2, #14
 8005c10:	7013      	strb	r3, [r2, #0]

	radio_tx_buf[15] = failsafe_flag;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	330f      	adds	r3, #15
 8005c16:	4a1a      	ldr	r2, [pc, #104]	@ (8005c80 <Encode_MSG_GPS+0x14c>)
 8005c18:	7812      	ldrb	r2, [r2, #0]
 8005c1a:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[16] = 0x00;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3310      	adds	r3, #16
 8005c20:	2200      	movs	r2, #0
 8005c22:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[17] = 0x00;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3311      	adds	r3, #17
 8005c28:	2200      	movs	r2, #0
 8005c2a:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[18] = 0x00;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3312      	adds	r3, #18
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[19] = 0xff;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3313      	adds	r3, #19
 8005c38:	22ff      	movs	r2, #255	@ 0xff
 8005c3a:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 19; i++) radio_tx_buf[19] = radio_tx_buf[19] - radio_tx_buf[i];
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e00e      	b.n	8005c60 <Encode_MSG_GPS+0x12c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3313      	adds	r3, #19
 8005c46:	7819      	ldrb	r1, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	781a      	ldrb	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3313      	adds	r3, #19
 8005c54:	1a8a      	subs	r2, r1, r2
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b12      	cmp	r3, #18
 8005c64:	dded      	ble.n	8005c42 <Encode_MSG_GPS+0x10e>
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	200004f4 	.word	0x200004f4
 8005c78:	42c80000 	.word	0x42c80000
 8005c7c:	20000314 	.word	0x20000314
 8005c80:	20000540 	.word	0x20000540

08005c84 <Encode_MSG_PID_Gain>:

void Encode_MSG_PID_Gain(unsigned char *radio_tx_buf, unsigned char id, float p, float i, float d)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b089      	sub	sp, #36	@ 0x24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6178      	str	r0, [r7, #20]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005c92:	edc7 0a02 	vstr	s1, [r7, #8]
 8005c96:	ed87 1a01 	vstr	s2, [r7, #4]
 8005c9a:	74fb      	strb	r3, [r7, #19]
	radio_tx_buf[0] = 0x46;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2246      	movs	r2, #70	@ 0x46
 8005ca0:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[1] = 0x43;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	2243      	movs	r2, #67	@ 0x43
 8005ca8:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[2] = id;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	3302      	adds	r3, #2
 8005cae:	7cfa      	ldrb	r2, [r7, #19]
 8005cb0:	701a      	strb	r2, [r3, #0]
	//
	//	memcpy(&radio_tx_buf[7], &i, 4);
	//
	//	memcpy(&radio_tx_buf[11], &d, 4);

	*(float *)&radio_tx_buf[3] = p;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	3303      	adds	r3, #3
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	601a      	str	r2, [r3, #0]
	*(float *)&radio_tx_buf[7] = i;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	3307      	adds	r3, #7
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	601a      	str	r2, [r3, #0]
	*(float *)&radio_tx_buf[11] = d;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	330b      	adds	r3, #11
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]

	radio_tx_buf[15] = 0x00;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	330f      	adds	r3, #15
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[16] = 0x00;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	3310      	adds	r3, #16
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[17] = 0x00;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	3311      	adds	r3, #17
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
	radio_tx_buf[18] = 0x00;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	3312      	adds	r3, #18
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]

	radio_tx_buf[19] = 0xff;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	3313      	adds	r3, #19
 8005cee:	22ff      	movs	r2, #255	@ 0xff
 8005cf0:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 19; i++) radio_tx_buf[19] = radio_tx_buf[19] - radio_tx_buf[i];
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	e00e      	b.n	8005d16 <Encode_MSG_PID_Gain+0x92>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	3313      	adds	r3, #19
 8005cfc:	7819      	ldrb	r1, [r3, #0]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4413      	add	r3, r2
 8005d04:	781a      	ldrb	r2, [r3, #0]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	3313      	adds	r3, #19
 8005d0a:	1a8a      	subs	r2, r1, r2
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	3301      	adds	r3, #1
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2b12      	cmp	r3, #18
 8005d1a:	dded      	ble.n	8005cf8 <Encode_MSG_PID_Gain+0x74>
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	3724      	adds	r7, #36	@ 0x24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d2e:	b672      	cpsid	i
}
 8005d30:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <Error_Handler+0x8>
	...

08005d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	4b10      	ldr	r3, [pc, #64]	@ (8005d84 <HAL_MspInit+0x4c>)
 8005d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d46:	4a0f      	ldr	r2, [pc, #60]	@ (8005d84 <HAL_MspInit+0x4c>)
 8005d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <HAL_MspInit+0x4c>)
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d56:	607b      	str	r3, [r7, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	603b      	str	r3, [r7, #0]
 8005d5e:	4b09      	ldr	r3, [pc, #36]	@ (8005d84 <HAL_MspInit+0x4c>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	4a08      	ldr	r2, [pc, #32]	@ (8005d84 <HAL_MspInit+0x4c>)
 8005d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d6a:	4b06      	ldr	r3, [pc, #24]	@ (8005d84 <HAL_MspInit+0x4c>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40023800 	.word	0x40023800

08005d88 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	@ 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d90:	f107 0314 	add.w	r3, r7, #20
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	605a      	str	r2, [r3, #4]
 8005d9a:	609a      	str	r2, [r3, #8]
 8005d9c:	60da      	str	r2, [r3, #12]
 8005d9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a2e      	ldr	r2, [pc, #184]	@ (8005e60 <HAL_ADC_MspInit+0xd8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d156      	bne.n	8005e58 <HAL_ADC_MspInit+0xd0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	4b2d      	ldr	r3, [pc, #180]	@ (8005e64 <HAL_ADC_MspInit+0xdc>)
 8005db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e64 <HAL_ADC_MspInit+0xdc>)
 8005db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005dba:	4b2a      	ldr	r3, [pc, #168]	@ (8005e64 <HAL_ADC_MspInit+0xdc>)
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	4b26      	ldr	r3, [pc, #152]	@ (8005e64 <HAL_ADC_MspInit+0xdc>)
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dce:	4a25      	ldr	r2, [pc, #148]	@ (8005e64 <HAL_ADC_MspInit+0xdc>)
 8005dd0:	f043 0302 	orr.w	r3, r3, #2
 8005dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dd6:	4b23      	ldr	r3, [pc, #140]	@ (8005e64 <HAL_ADC_MspInit+0xdc>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005de2:	2301      	movs	r3, #1
 8005de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005de6:	2303      	movs	r3, #3
 8005de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dee:	f107 0314 	add.w	r3, r7, #20
 8005df2:	4619      	mov	r1, r3
 8005df4:	481c      	ldr	r0, [pc, #112]	@ (8005e68 <HAL_ADC_MspInit+0xe0>)
 8005df6:	f001 fd07 	bl	8007808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e70 <HAL_ADC_MspInit+0xe8>)
 8005dfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005e00:	4b1a      	ldr	r3, [pc, #104]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e06:	4b19      	ldr	r3, [pc, #100]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e0c:	4b17      	ldr	r3, [pc, #92]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8005e12:	4b16      	ldr	r3, [pc, #88]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e18:	4b14      	ldr	r3, [pc, #80]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e20:	4b12      	ldr	r3, [pc, #72]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005e26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e28:	4b10      	ldr	r3, [pc, #64]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e30:	4b0e      	ldr	r3, [pc, #56]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e36:	4b0d      	ldr	r3, [pc, #52]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e3c:	480b      	ldr	r0, [pc, #44]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e3e:	f001 f8e1 	bl	8007004 <HAL_DMA_Init>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8005e48:	f7ff ff6f 	bl	8005d2a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a07      	ldr	r2, [pc, #28]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e50:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e52:	4a06      	ldr	r2, [pc, #24]	@ (8005e6c <HAL_ADC_MspInit+0xe4>)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005e58:	bf00      	nop
 8005e5a:	3728      	adds	r7, #40	@ 0x28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40012000 	.word	0x40012000
 8005e64:	40023800 	.word	0x40023800
 8005e68:	40020400 	.word	0x40020400
 8005e6c:	200003b8 	.word	0x200003b8
 8005e70:	40026410 	.word	0x40026410

08005e74 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	@ 0x28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e7c:	f107 0314 	add.w	r3, r7, #20
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	605a      	str	r2, [r3, #4]
 8005e86:	609a      	str	r2, [r3, #8]
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a19      	ldr	r2, [pc, #100]	@ (8005ef8 <HAL_I2C_MspInit+0x84>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d12c      	bne.n	8005ef0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e96:	2300      	movs	r3, #0
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	4b18      	ldr	r3, [pc, #96]	@ (8005efc <HAL_I2C_MspInit+0x88>)
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9e:	4a17      	ldr	r2, [pc, #92]	@ (8005efc <HAL_I2C_MspInit+0x88>)
 8005ea0:	f043 0302 	orr.w	r3, r3, #2
 8005ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ea6:	4b15      	ldr	r3, [pc, #84]	@ (8005efc <HAL_I2C_MspInit+0x88>)
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005eb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005eb8:	2312      	movs	r3, #18
 8005eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ec8:	f107 0314 	add.w	r3, r7, #20
 8005ecc:	4619      	mov	r1, r3
 8005ece:	480c      	ldr	r0, [pc, #48]	@ (8005f00 <HAL_I2C_MspInit+0x8c>)
 8005ed0:	f001 fc9a 	bl	8007808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	4b08      	ldr	r3, [pc, #32]	@ (8005efc <HAL_I2C_MspInit+0x88>)
 8005eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005edc:	4a07      	ldr	r2, [pc, #28]	@ (8005efc <HAL_I2C_MspInit+0x88>)
 8005ede:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ee2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <HAL_I2C_MspInit+0x88>)
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005ef0:	bf00      	nop
 8005ef2:	3728      	adds	r7, #40	@ 0x28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40005400 	.word	0x40005400
 8005efc:	40023800 	.word	0x40023800
 8005f00:	40020400 	.word	0x40020400

08005f04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	@ 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f0c:	f107 0314 	add.w	r3, r7, #20
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	60da      	str	r2, [r3, #12]
 8005f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1d      	ldr	r2, [pc, #116]	@ (8005f98 <HAL_UART_MspInit+0x94>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d134      	bne.n	8005f90 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f26:	2300      	movs	r3, #0
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f9c <HAL_UART_MspInit+0x98>)
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f9c <HAL_UART_MspInit+0x98>)
 8005f30:	f043 0310 	orr.w	r3, r3, #16
 8005f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f36:	4b19      	ldr	r3, [pc, #100]	@ (8005f9c <HAL_UART_MspInit+0x98>)
 8005f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	613b      	str	r3, [r7, #16]
 8005f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	4b15      	ldr	r3, [pc, #84]	@ (8005f9c <HAL_UART_MspInit+0x98>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4a:	4a14      	ldr	r2, [pc, #80]	@ (8005f9c <HAL_UART_MspInit+0x98>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f52:	4b12      	ldr	r3, [pc, #72]	@ (8005f9c <HAL_UART_MspInit+0x98>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005f5e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f64:	2302      	movs	r3, #2
 8005f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f70:	2307      	movs	r3, #7
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f74:	f107 0314 	add.w	r3, r7, #20
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4809      	ldr	r0, [pc, #36]	@ (8005fa0 <HAL_UART_MspInit+0x9c>)
 8005f7c:	f001 fc44 	bl	8007808 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005f80:	2200      	movs	r2, #0
 8005f82:	2100      	movs	r1, #0
 8005f84:	2025      	movs	r0, #37	@ 0x25
 8005f86:	f001 f806 	bl	8006f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005f8a:	2025      	movs	r0, #37	@ 0x25
 8005f8c:	f001 f81f 	bl	8006fce <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005f90:	bf00      	nop
 8005f92:	3728      	adds	r7, #40	@ 0x28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40011000 	.word	0x40011000
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	40020000 	.word	0x40020000

08005fa4 <LL_TIM_ClearFlag_UPDATE>:
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f06f 0201 	mvn.w	r2, #1
 8005fb2:	611a      	str	r2, [r3, #16]
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <LL_USART_IsActiveFlag_RXNE>:
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	bf0c      	ite	eq
 8005ffa:	2301      	moveq	r3, #1
 8005ffc:	2300      	movne	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <LL_USART_ClearFlag_RXNE>:
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f06f 0220 	mvn.w	r2, #32
 800601a:	601a      	str	r2, [r3, #0]
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <LL_USART_ReceiveData8>:
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	b2db      	uxtb	r3, r3
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <LL_GPIO_TogglePin>:
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	4013      	ands	r3, r2
 8006058:	041a      	lsls	r2, r3, #16
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	43d9      	mvns	r1, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	400b      	ands	r3, r1
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	619a      	str	r2, [r3, #24]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <NMI_Handler+0x4>

0800607c <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8006080:	bf00      	nop
 8006082:	e7fd      	b.n	8006080 <HardFault_Handler+0x4>

08006084 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8006088:	bf00      	nop
 800608a:	e7fd      	b.n	8006088 <MemManage_Handler+0x4>

0800608c <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <BusFault_Handler+0x4>

08006094 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8006098:	bf00      	nop
 800609a:	e7fd      	b.n	8006098 <UsageFault_Handler+0x4>

0800609c <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80060a0:	bf00      	nop
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80060aa:	b480      	push	{r7}
 80060ac:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80060ae:	bf00      	nop
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80060bc:	bf00      	nop
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80060ca:	f000 fa2f 	bl	800652c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80060d8:	4802      	ldr	r0, [pc, #8]	@ (80060e4 <USART1_IRQHandler+0x10>)
 80060da:	f003 fb23 	bl	8009724 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	2000046c 	.word	0x2000046c

080060e8 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char count = 0; // count number of interrupts

	if (LL_USART_IsActiveFlag_RXNE(UART5))
 80060ec:	4834      	ldr	r0, [pc, #208]	@ (80061c0 <UART5_IRQHandler+0xd8>)
 80060ee:	f7ff ff7a 	bl	8005fe6 <LL_USART_IsActiveFlag_RXNE>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d060      	beq.n	80061ba <UART5_IRQHandler+0xd2>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 80060f8:	4831      	ldr	r0, [pc, #196]	@ (80061c0 <UART5_IRQHandler+0xd8>)
 80060fa:	f7ff ff87 	bl	800600c <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 80060fe:	4830      	ldr	r0, [pc, #192]	@ (80061c0 <UART5_IRQHandler+0xd8>)
 8006100:	f7ff ff92 	bl	8006028 <LL_USART_ReceiveData8>
 8006104:	4603      	mov	r3, r0
 8006106:	461a      	mov	r2, r3
 8006108:	4b2e      	ldr	r3, [pc, #184]	@ (80061c4 <UART5_IRQHandler+0xdc>)
 800610a:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 800610c:	4b2e      	ldr	r3, [pc, #184]	@ (80061c8 <UART5_IRQHandler+0xe0>)
 800610e:	2201      	movs	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]

		switch(count)
 8006112:	4b2e      	ldr	r3, [pc, #184]	@ (80061cc <UART5_IRQHandler+0xe4>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b1f      	cmp	r3, #31
 8006118:	d02e      	beq.n	8006178 <UART5_IRQHandler+0x90>
 800611a:	2b1f      	cmp	r3, #31
 800611c:	dc3e      	bgt.n	800619c <UART5_IRQHandler+0xb4>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <UART5_IRQHandler+0x40>
 8006122:	2b01      	cmp	r3, #1
 8006124:	d012      	beq.n	800614c <UART5_IRQHandler+0x64>
 8006126:	e039      	b.n	800619c <UART5_IRQHandler+0xb4>
		{
		case 0:
			if (uart5_rx_data == 0x20)
 8006128:	4b26      	ldr	r3, [pc, #152]	@ (80061c4 <UART5_IRQHandler+0xdc>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b20      	cmp	r3, #32
 800612e:	d143      	bne.n	80061b8 <UART5_IRQHandler+0xd0>
			{
				ibus_rx_buf[count] = uart5_rx_data;
 8006130:	4b26      	ldr	r3, [pc, #152]	@ (80061cc <UART5_IRQHandler+0xe4>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	4b23      	ldr	r3, [pc, #140]	@ (80061c4 <UART5_IRQHandler+0xdc>)
 8006138:	7819      	ldrb	r1, [r3, #0]
 800613a:	4b25      	ldr	r3, [pc, #148]	@ (80061d0 <UART5_IRQHandler+0xe8>)
 800613c:	5499      	strb	r1, [r3, r2]
				count++;
 800613e:	4b23      	ldr	r3, [pc, #140]	@ (80061cc <UART5_IRQHandler+0xe4>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b21      	ldr	r3, [pc, #132]	@ (80061cc <UART5_IRQHandler+0xe4>)
 8006148:	701a      	strb	r2, [r3, #0]
			}
			break;
 800614a:	e035      	b.n	80061b8 <UART5_IRQHandler+0xd0>
		case 1:
			if (uart5_rx_data == 0x40)
 800614c:	4b1d      	ldr	r3, [pc, #116]	@ (80061c4 <UART5_IRQHandler+0xdc>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b40      	cmp	r3, #64	@ 0x40
 8006152:	d10d      	bne.n	8006170 <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[count] = uart5_rx_data;
 8006154:	4b1d      	ldr	r3, [pc, #116]	@ (80061cc <UART5_IRQHandler+0xe4>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	4b1a      	ldr	r3, [pc, #104]	@ (80061c4 <UART5_IRQHandler+0xdc>)
 800615c:	7819      	ldrb	r1, [r3, #0]
 800615e:	4b1c      	ldr	r3, [pc, #112]	@ (80061d0 <UART5_IRQHandler+0xe8>)
 8006160:	5499      	strb	r1, [r3, r2]
				count++;
 8006162:	4b1a      	ldr	r3, [pc, #104]	@ (80061cc <UART5_IRQHandler+0xe4>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	3301      	adds	r3, #1
 8006168:	b2da      	uxtb	r2, r3
 800616a:	4b18      	ldr	r3, [pc, #96]	@ (80061cc <UART5_IRQHandler+0xe4>)
 800616c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				count = 0;
			}
			break;
 800616e:	e024      	b.n	80061ba <UART5_IRQHandler+0xd2>
				count = 0;
 8006170:	4b16      	ldr	r3, [pc, #88]	@ (80061cc <UART5_IRQHandler+0xe4>)
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
			break;
 8006176:	e020      	b.n	80061ba <UART5_IRQHandler+0xd2>
		case 31:
			ibus_rx_buf[count] = uart5_rx_data;
 8006178:	4b14      	ldr	r3, [pc, #80]	@ (80061cc <UART5_IRQHandler+0xe4>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	4b11      	ldr	r3, [pc, #68]	@ (80061c4 <UART5_IRQHandler+0xdc>)
 8006180:	7819      	ldrb	r1, [r3, #0]
 8006182:	4b13      	ldr	r3, [pc, #76]	@ (80061d0 <UART5_IRQHandler+0xe8>)
 8006184:	5499      	strb	r1, [r3, r2]
			count = 0;
 8006186:	4b11      	ldr	r3, [pc, #68]	@ (80061cc <UART5_IRQHandler+0xe4>)
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800618c:	4b11      	ldr	r3, [pc, #68]	@ (80061d4 <UART5_IRQHandler+0xec>)
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
			LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8006192:	2104      	movs	r1, #4
 8006194:	4810      	ldr	r0, [pc, #64]	@ (80061d8 <UART5_IRQHandler+0xf0>)
 8006196:	f7ff ff54 	bl	8006042 <LL_GPIO_TogglePin>
			break;
 800619a:	e00e      	b.n	80061ba <UART5_IRQHandler+0xd2>
		default:
			ibus_rx_buf[count] = uart5_rx_data;
 800619c:	4b0b      	ldr	r3, [pc, #44]	@ (80061cc <UART5_IRQHandler+0xe4>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	4b08      	ldr	r3, [pc, #32]	@ (80061c4 <UART5_IRQHandler+0xdc>)
 80061a4:	7819      	ldrb	r1, [r3, #0]
 80061a6:	4b0a      	ldr	r3, [pc, #40]	@ (80061d0 <UART5_IRQHandler+0xe8>)
 80061a8:	5499      	strb	r1, [r3, r2]
			count++;
 80061aa:	4b08      	ldr	r3, [pc, #32]	@ (80061cc <UART5_IRQHandler+0xe4>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <UART5_IRQHandler+0xe4>)
 80061b4:	701a      	strb	r2, [r3, #0]
			break;
 80061b6:	e000      	b.n	80061ba <UART5_IRQHandler+0xd2>
			break;
 80061b8:	bf00      	nop
	}
	/* USER CODE END UART5_IRQn 0 */
	/* USER CODE BEGIN UART5_IRQn 1 */

	/* USER CODE END UART5_IRQn 1 */
}
 80061ba:	bf00      	nop
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40005000 	.word	0x40005000
 80061c4:	20000546 	.word	0x20000546
 80061c8:	20000545 	.word	0x20000545
 80061cc:	20000572 	.word	0x20000572
 80061d0:	20000548 	.word	0x20000548
 80061d4:	2000056c 	.word	0x2000056c
 80061d8:	40020800 	.word	0x40020800

080061dc <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned char tim7_1000ms_count = 0;
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 80061e0:	481b      	ldr	r0, [pc, #108]	@ (8006250 <TIM7_IRQHandler+0x74>)
 80061e2:	f7ff feed 	bl	8005fc0 <LL_TIM_IsActiveFlag_UPDATE>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d02f      	beq.n	800624c <TIM7_IRQHandler+0x70>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 80061ec:	4818      	ldr	r0, [pc, #96]	@ (8006250 <TIM7_IRQHandler+0x74>)
 80061ee:	f7ff fed9 	bl	8005fa4 <LL_TIM_ClearFlag_UPDATE>

		if (!tim7_1ms_flag)
 80061f2:	4b18      	ldr	r3, [pc, #96]	@ (8006254 <TIM7_IRQHandler+0x78>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d102      	bne.n	8006200 <TIM7_IRQHandler+0x24>
		{
			tim7_1ms_flag = 1;
 80061fa:	4b16      	ldr	r3, [pc, #88]	@ (8006254 <TIM7_IRQHandler+0x78>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	701a      	strb	r2, [r3, #0]
		}

		tim7_20ms_count++;
 8006200:	4b15      	ldr	r3, [pc, #84]	@ (8006258 <TIM7_IRQHandler+0x7c>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	3301      	adds	r3, #1
 8006206:	b2da      	uxtb	r2, r3
 8006208:	4b13      	ldr	r3, [pc, #76]	@ (8006258 <TIM7_IRQHandler+0x7c>)
 800620a:	701a      	strb	r2, [r3, #0]
		if (tim7_20ms_count == 20)
 800620c:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <TIM7_IRQHandler+0x7c>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b14      	cmp	r3, #20
 8006212:	d105      	bne.n	8006220 <TIM7_IRQHandler+0x44>
		{
			tim7_20ms_count = 0;
 8006214:	4b10      	ldr	r3, [pc, #64]	@ (8006258 <TIM7_IRQHandler+0x7c>)
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 800621a:	4b10      	ldr	r3, [pc, #64]	@ (800625c <TIM7_IRQHandler+0x80>)
 800621c:	2201      	movs	r2, #1
 800621e:	701a      	strb	r2, [r3, #0]
		}

		tim7_100ms_count++;
 8006220:	4b0f      	ldr	r3, [pc, #60]	@ (8006260 <TIM7_IRQHandler+0x84>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	3301      	adds	r3, #1
 8006226:	b2da      	uxtb	r2, r3
 8006228:	4b0d      	ldr	r3, [pc, #52]	@ (8006260 <TIM7_IRQHandler+0x84>)
 800622a:	701a      	strb	r2, [r3, #0]
		if (tim7_100ms_count == 100)
 800622c:	4b0c      	ldr	r3, [pc, #48]	@ (8006260 <TIM7_IRQHandler+0x84>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b64      	cmp	r3, #100	@ 0x64
 8006232:	d105      	bne.n	8006240 <TIM7_IRQHandler+0x64>
		{
			tim7_100ms_count = 0;
 8006234:	4b0a      	ldr	r3, [pc, #40]	@ (8006260 <TIM7_IRQHandler+0x84>)
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 800623a:	4b0a      	ldr	r3, [pc, #40]	@ (8006264 <TIM7_IRQHandler+0x88>)
 800623c:	2201      	movs	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
		}

		tim7_1000ms_count++;
 8006240:	4b09      	ldr	r3, [pc, #36]	@ (8006268 <TIM7_IRQHandler+0x8c>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	b2da      	uxtb	r2, r3
 8006248:	4b07      	ldr	r3, [pc, #28]	@ (8006268 <TIM7_IRQHandler+0x8c>)
 800624a:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM7_IRQn 0 */
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 800624c:	bf00      	nop
 800624e:	bd80      	pop	{r7, pc}
 8006250:	40001400 	.word	0x40001400
 8006254:	2000056e 	.word	0x2000056e
 8006258:	20000573 	.word	0x20000573
 800625c:	2000056f 	.word	0x2000056f
 8006260:	20000574 	.word	0x20000574
 8006264:	20000570 	.word	0x20000570
 8006268:	20000575 	.word	0x20000575

0800626c <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8006270:	4802      	ldr	r0, [pc, #8]	@ (800627c <DMA2_Stream0_IRQHandler+0x10>)
 8006272:	f001 f85f 	bl	8007334 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006276:	bf00      	nop
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	200003b8 	.word	0x200003b8

08006280 <USART6_IRQHandler>:

/**
 * @brief This function handles USART6 global interrupt.
 */
void USART6_IRQHandler(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART6_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART6))
 8006284:	480a      	ldr	r0, [pc, #40]	@ (80062b0 <USART6_IRQHandler+0x30>)
 8006286:	f7ff feae 	bl	8005fe6 <LL_USART_IsActiveFlag_RXNE>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00c      	beq.n	80062aa <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 8006290:	4807      	ldr	r0, [pc, #28]	@ (80062b0 <USART6_IRQHandler+0x30>)
 8006292:	f7ff febb 	bl	800600c <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 8006296:	4806      	ldr	r0, [pc, #24]	@ (80062b0 <USART6_IRQHandler+0x30>)
 8006298:	f7ff fec6 	bl	8006028 <LL_USART_ReceiveData8>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
 80062a0:	4b04      	ldr	r3, [pc, #16]	@ (80062b4 <USART6_IRQHandler+0x34>)
 80062a2:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 80062a4:	4b04      	ldr	r3, [pc, #16]	@ (80062b8 <USART6_IRQHandler+0x38>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END USART6_IRQn 0 */
	/* USER CODE BEGIN USART6_IRQn 1 */

	/* USER CODE END USART6_IRQn 1 */
}
 80062aa:	bf00      	nop
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	40011400 	.word	0x40011400
 80062b4:	20000544 	.word	0x20000544
 80062b8:	20000543 	.word	0x20000543

080062bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  return 1;
 80062c0:	2301      	movs	r3, #1
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <_kill>:

int _kill(int pid, int sig)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80062d6:	f006 f999 	bl	800c60c <__errno>
 80062da:	4603      	mov	r3, r0
 80062dc:	2216      	movs	r2, #22
 80062de:	601a      	str	r2, [r3, #0]
  return -1;
 80062e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <_exit>:

void _exit (int status)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80062f4:	f04f 31ff 	mov.w	r1, #4294967295
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ffe7 	bl	80062cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <_exit+0x12>

08006302 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b086      	sub	sp, #24
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	e00a      	b.n	800632a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006314:	f3af 8000 	nop.w
 8006318:	4601      	mov	r1, r0
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	60ba      	str	r2, [r7, #8]
 8006320:	b2ca      	uxtb	r2, r1
 8006322:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	3301      	adds	r3, #1
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	429a      	cmp	r2, r3
 8006330:	dbf0      	blt.n	8006314 <_read+0x12>
  }

  return len;
 8006332:	687b      	ldr	r3, [r7, #4]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <_close>:
  }
  return len;
}

int _close(int file)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006364:	605a      	str	r2, [r3, #4]
  return 0;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <_isatty>:

int _isatty(int file)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800637c:	2301      	movs	r3, #1
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063ac:	4a14      	ldr	r2, [pc, #80]	@ (8006400 <_sbrk+0x5c>)
 80063ae:	4b15      	ldr	r3, [pc, #84]	@ (8006404 <_sbrk+0x60>)
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80063b8:	4b13      	ldr	r3, [pc, #76]	@ (8006408 <_sbrk+0x64>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80063c0:	4b11      	ldr	r3, [pc, #68]	@ (8006408 <_sbrk+0x64>)
 80063c2:	4a12      	ldr	r2, [pc, #72]	@ (800640c <_sbrk+0x68>)
 80063c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80063c6:	4b10      	ldr	r3, [pc, #64]	@ (8006408 <_sbrk+0x64>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d207      	bcs.n	80063e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80063d4:	f006 f91a 	bl	800c60c <__errno>
 80063d8:	4603      	mov	r3, r0
 80063da:	220c      	movs	r2, #12
 80063dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	e009      	b.n	80063f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80063e4:	4b08      	ldr	r3, [pc, #32]	@ (8006408 <_sbrk+0x64>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80063ea:	4b07      	ldr	r3, [pc, #28]	@ (8006408 <_sbrk+0x64>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4413      	add	r3, r2
 80063f2:	4a05      	ldr	r2, [pc, #20]	@ (8006408 <_sbrk+0x64>)
 80063f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80063f6:	68fb      	ldr	r3, [r7, #12]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20020000 	.word	0x20020000
 8006404:	00000400 	.word	0x00000400
 8006408:	20000578 	.word	0x20000578
 800640c:	200006d0 	.word	0x200006d0

08006410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006414:	4b06      	ldr	r3, [pc, #24]	@ (8006430 <SystemInit+0x20>)
 8006416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641a:	4a05      	ldr	r2, [pc, #20]	@ (8006430 <SystemInit+0x20>)
 800641c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006424:	bf00      	nop
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	e000ed00 	.word	0xe000ed00

08006434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800646c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006438:	f7ff ffea 	bl	8006410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800643c:	480c      	ldr	r0, [pc, #48]	@ (8006470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800643e:	490d      	ldr	r1, [pc, #52]	@ (8006474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006440:	4a0d      	ldr	r2, [pc, #52]	@ (8006478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006444:	e002      	b.n	800644c <LoopCopyDataInit>

08006446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800644a:	3304      	adds	r3, #4

0800644c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800644c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800644e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006450:	d3f9      	bcc.n	8006446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006452:	4a0a      	ldr	r2, [pc, #40]	@ (800647c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006454:	4c0a      	ldr	r4, [pc, #40]	@ (8006480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006458:	e001      	b.n	800645e <LoopFillZerobss>

0800645a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800645a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800645c:	3204      	adds	r2, #4

0800645e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800645e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006460:	d3fb      	bcc.n	800645a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8006462:	f006 f8d9 	bl	800c618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006466:	f7fc fff7 	bl	8003458 <main>
  bx  lr    
 800646a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800646c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006474:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006478:	0800f754 	.word	0x0800f754
  ldr r2, =_sbss
 800647c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006480:	200006cc 	.word	0x200006cc

08006484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006484:	e7fe      	b.n	8006484 <ADC_IRQHandler>
	...

08006488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800648c:	4b0e      	ldr	r3, [pc, #56]	@ (80064c8 <HAL_Init+0x40>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a0d      	ldr	r2, [pc, #52]	@ (80064c8 <HAL_Init+0x40>)
 8006492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006498:	4b0b      	ldr	r3, [pc, #44]	@ (80064c8 <HAL_Init+0x40>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a0a      	ldr	r2, [pc, #40]	@ (80064c8 <HAL_Init+0x40>)
 800649e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064a4:	4b08      	ldr	r3, [pc, #32]	@ (80064c8 <HAL_Init+0x40>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a07      	ldr	r2, [pc, #28]	@ (80064c8 <HAL_Init+0x40>)
 80064aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064b0:	2003      	movs	r0, #3
 80064b2:	f000 fd65 	bl	8006f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064b6:	200f      	movs	r0, #15
 80064b8:	f000 f808 	bl	80064cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064bc:	f7ff fc3c 	bl	8005d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40023c00 	.word	0x40023c00

080064cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064d4:	4b12      	ldr	r3, [pc, #72]	@ (8006520 <HAL_InitTick+0x54>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	4b12      	ldr	r3, [pc, #72]	@ (8006524 <HAL_InitTick+0x58>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	4619      	mov	r1, r3
 80064de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80064e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fd7d 	bl	8006fea <HAL_SYSTICK_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e00e      	b.n	8006518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b0f      	cmp	r3, #15
 80064fe:	d80a      	bhi.n	8006516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006500:	2200      	movs	r2, #0
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	f000 fd45 	bl	8006f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800650c:	4a06      	ldr	r2, [pc, #24]	@ (8006528 <HAL_InitTick+0x5c>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	e000      	b.n	8006518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
}
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000004 	.word	0x20000004
 8006524:	2000000c 	.word	0x2000000c
 8006528:	20000008 	.word	0x20000008

0800652c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006530:	4b06      	ldr	r3, [pc, #24]	@ (800654c <HAL_IncTick+0x20>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	461a      	mov	r2, r3
 8006536:	4b06      	ldr	r3, [pc, #24]	@ (8006550 <HAL_IncTick+0x24>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4413      	add	r3, r2
 800653c:	4a04      	ldr	r2, [pc, #16]	@ (8006550 <HAL_IncTick+0x24>)
 800653e:	6013      	str	r3, [r2, #0]
}
 8006540:	bf00      	nop
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	2000000c 	.word	0x2000000c
 8006550:	2000057c 	.word	0x2000057c

08006554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  return uwTick;
 8006558:	4b03      	ldr	r3, [pc, #12]	@ (8006568 <HAL_GetTick+0x14>)
 800655a:	681b      	ldr	r3, [r3, #0]
}
 800655c:	4618      	mov	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	2000057c 	.word	0x2000057c

0800656c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006574:	f7ff ffee 	bl	8006554 <HAL_GetTick>
 8006578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d005      	beq.n	8006592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006586:	4b0a      	ldr	r3, [pc, #40]	@ (80065b0 <HAL_Delay+0x44>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006592:	bf00      	nop
 8006594:	f7ff ffde 	bl	8006554 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d8f7      	bhi.n	8006594 <HAL_Delay+0x28>
  {
  }
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	2000000c 	.word	0x2000000c

080065b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e033      	b.n	8006632 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff fbd8 	bl	8005d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d118      	bne.n	8006624 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80065fa:	f023 0302 	bic.w	r3, r3, #2
 80065fe:	f043 0202 	orr.w	r2, r3, #2
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa6c 	bl	8006ae4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	f043 0201 	orr.w	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	641a      	str	r2, [r3, #64]	@ 0x40
 8006622:	e001      	b.n	8006628 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_ADC_Start_DMA+0x22>
 800665a:	2302      	movs	r3, #2
 800665c:	e0eb      	b.n	8006836 <HAL_ADC_Start_DMA+0x1fa>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	d018      	beq.n	80066a6 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006684:	4b6e      	ldr	r3, [pc, #440]	@ (8006840 <HAL_ADC_Start_DMA+0x204>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a6e      	ldr	r2, [pc, #440]	@ (8006844 <HAL_ADC_Start_DMA+0x208>)
 800668a:	fba2 2303 	umull	r2, r3, r2, r3
 800668e:	0c9a      	lsrs	r2, r3, #18
 8006690:	4613      	mov	r3, r2
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	4413      	add	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8006698:	e002      	b.n	80066a0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	3b01      	subs	r3, #1
 800669e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f9      	bne.n	800669a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b4:	d107      	bne.n	80066c6 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066c4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	f040 80a3 	bne.w	800681c <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066da:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80066de:	f023 0301 	bic.w	r3, r3, #1
 80066e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006700:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006714:	d106      	bne.n	8006724 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671a:	f023 0206 	bic.w	r2, r3, #6
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	645a      	str	r2, [r3, #68]	@ 0x44
 8006722:	e002      	b.n	800672a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006732:	4b45      	ldr	r3, [pc, #276]	@ (8006848 <HAL_ADC_Start_DMA+0x20c>)
 8006734:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673a:	4a44      	ldr	r2, [pc, #272]	@ (800684c <HAL_ADC_Start_DMA+0x210>)
 800673c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006742:	4a43      	ldr	r2, [pc, #268]	@ (8006850 <HAL_ADC_Start_DMA+0x214>)
 8006744:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674a:	4a42      	ldr	r2, [pc, #264]	@ (8006854 <HAL_ADC_Start_DMA+0x218>)
 800674c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006756:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006766:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006776:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	334c      	adds	r3, #76	@ 0x4c
 8006782:	4619      	mov	r1, r3
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f000 fcea 	bl	8007160 <HAL_DMA_Start_IT>
 800678c:	4603      	mov	r3, r0
 800678e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	2b00      	cmp	r3, #0
 800679a:	d12a      	bne.n	80067f2 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006858 <HAL_ADC_Start_DMA+0x21c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d015      	beq.n	80067d2 <HAL_ADC_Start_DMA+0x196>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a2c      	ldr	r2, [pc, #176]	@ (800685c <HAL_ADC_Start_DMA+0x220>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d105      	bne.n	80067bc <HAL_ADC_Start_DMA+0x180>
 80067b0:	4b25      	ldr	r3, [pc, #148]	@ (8006848 <HAL_ADC_Start_DMA+0x20c>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f003 031f 	and.w	r3, r3, #31
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a27      	ldr	r2, [pc, #156]	@ (8006860 <HAL_ADC_Start_DMA+0x224>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d136      	bne.n	8006834 <HAL_ADC_Start_DMA+0x1f8>
 80067c6:	4b20      	ldr	r3, [pc, #128]	@ (8006848 <HAL_ADC_Start_DMA+0x20c>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f003 0310 	and.w	r3, r3, #16
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d130      	bne.n	8006834 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d129      	bne.n	8006834 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80067ee:	609a      	str	r2, [r3, #8]
 80067f0:	e020      	b.n	8006834 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a18      	ldr	r2, [pc, #96]	@ (8006858 <HAL_ADC_Start_DMA+0x21c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d11b      	bne.n	8006834 <HAL_ADC_Start_DMA+0x1f8>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d114      	bne.n	8006834 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006818:	609a      	str	r2, [r3, #8]
 800681a:	e00b      	b.n	8006834 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006820:	f043 0210 	orr.w	r2, r3, #16
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682c:	f043 0201 	orr.w	r2, r3, #1
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8006834:	7ffb      	ldrb	r3, [r7, #31]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000004 	.word	0x20000004
 8006844:	431bde83 	.word	0x431bde83
 8006848:	40012300 	.word	0x40012300
 800684c:	08006cdd 	.word	0x08006cdd
 8006850:	08006d97 	.word	0x08006d97
 8006854:	08006db3 	.word	0x08006db3
 8006858:	40012000 	.word	0x40012000
 800685c:	40012100 	.word	0x40012100
 8006860:	40012200 	.word	0x40012200

08006864 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_ADC_ConfigChannel+0x1c>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e105      	b.n	8006ac8 <HAL_ADC_ConfigChannel+0x228>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b09      	cmp	r3, #9
 80068ca:	d925      	bls.n	8006918 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68d9      	ldr	r1, [r3, #12]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	4613      	mov	r3, r2
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	4413      	add	r3, r2
 80068e0:	3b1e      	subs	r3, #30
 80068e2:	2207      	movs	r2, #7
 80068e4:	fa02 f303 	lsl.w	r3, r2, r3
 80068e8:	43da      	mvns	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	400a      	ands	r2, r1
 80068f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68d9      	ldr	r1, [r3, #12]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	4618      	mov	r0, r3
 8006904:	4603      	mov	r3, r0
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	4403      	add	r3, r0
 800690a:	3b1e      	subs	r3, #30
 800690c:	409a      	lsls	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	60da      	str	r2, [r3, #12]
 8006916:	e022      	b.n	800695e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6919      	ldr	r1, [r3, #16]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	4613      	mov	r3, r2
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	4413      	add	r3, r2
 800692c:	2207      	movs	r2, #7
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	43da      	mvns	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	400a      	ands	r2, r1
 800693a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6919      	ldr	r1, [r3, #16]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	4618      	mov	r0, r3
 800694e:	4603      	mov	r3, r0
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4403      	add	r3, r0
 8006954:	409a      	lsls	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b06      	cmp	r3, #6
 8006964:	d824      	bhi.n	80069b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	3b05      	subs	r3, #5
 8006978:	221f      	movs	r2, #31
 800697a:	fa02 f303 	lsl.w	r3, r2, r3
 800697e:	43da      	mvns	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	400a      	ands	r2, r1
 8006986:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	4618      	mov	r0, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	3b05      	subs	r3, #5
 80069a2:	fa00 f203 	lsl.w	r2, r0, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80069ae:	e04c      	b.n	8006a4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b0c      	cmp	r3, #12
 80069b6:	d824      	bhi.n	8006a02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	3b23      	subs	r3, #35	@ 0x23
 80069ca:	221f      	movs	r2, #31
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	43da      	mvns	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	400a      	ands	r2, r1
 80069d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4618      	mov	r0, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	3b23      	subs	r3, #35	@ 0x23
 80069f4:	fa00 f203 	lsl.w	r2, r0, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a00:	e023      	b.n	8006a4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	3b41      	subs	r3, #65	@ 0x41
 8006a14:	221f      	movs	r2, #31
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	43da      	mvns	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	400a      	ands	r2, r1
 8006a22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4618      	mov	r0, r3
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3b41      	subs	r3, #65	@ 0x41
 8006a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a4a:	4b22      	ldr	r3, [pc, #136]	@ (8006ad4 <HAL_ADC_ConfigChannel+0x234>)
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a21      	ldr	r2, [pc, #132]	@ (8006ad8 <HAL_ADC_ConfigChannel+0x238>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d109      	bne.n	8006a6c <HAL_ADC_ConfigChannel+0x1cc>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b12      	cmp	r3, #18
 8006a5e:	d105      	bne.n	8006a6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a19      	ldr	r2, [pc, #100]	@ (8006ad8 <HAL_ADC_ConfigChannel+0x238>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d123      	bne.n	8006abe <HAL_ADC_ConfigChannel+0x21e>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d003      	beq.n	8006a86 <HAL_ADC_ConfigChannel+0x1e6>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b11      	cmp	r3, #17
 8006a84:	d11b      	bne.n	8006abe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b10      	cmp	r3, #16
 8006a98:	d111      	bne.n	8006abe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a9a:	4b10      	ldr	r3, [pc, #64]	@ (8006adc <HAL_ADC_ConfigChannel+0x23c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a10      	ldr	r2, [pc, #64]	@ (8006ae0 <HAL_ADC_ConfigChannel+0x240>)
 8006aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa4:	0c9a      	lsrs	r2, r3, #18
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006ab0:	e002      	b.n	8006ab8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f9      	bne.n	8006ab2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40012300 	.word	0x40012300
 8006ad8:	40012000 	.word	0x40012000
 8006adc:	20000004 	.word	0x20000004
 8006ae0:	431bde83 	.word	0x431bde83

08006ae4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006aec:	4b79      	ldr	r3, [pc, #484]	@ (8006cd4 <ADC_Init+0x1f0>)
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6859      	ldr	r1, [r3, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	021a      	lsls	r2, r3, #8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006b3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6859      	ldr	r1, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689a      	ldr	r2, [r3, #8]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6899      	ldr	r1, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b76:	4a58      	ldr	r2, [pc, #352]	@ (8006cd8 <ADC_Init+0x1f4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d022      	beq.n	8006bc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6899      	ldr	r1, [r3, #8]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6899      	ldr	r1, [r3, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	609a      	str	r2, [r3, #8]
 8006bc0:	e00f      	b.n	8006be2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006bd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006be0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0202 	bic.w	r2, r2, #2
 8006bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6899      	ldr	r1, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	7e1b      	ldrb	r3, [r3, #24]
 8006bfc:	005a      	lsls	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01b      	beq.n	8006c48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c1e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006c2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6859      	ldr	r1, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	035a      	lsls	r2, r3, #13
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]
 8006c46:	e007      	b.n	8006c58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c56:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	051a      	lsls	r2, r3, #20
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6899      	ldr	r1, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c9a:	025a      	lsls	r2, r3, #9
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6899      	ldr	r1, [r3, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	029a      	lsls	r2, r3, #10
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	609a      	str	r2, [r3, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40012300 	.word	0x40012300
 8006cd8:	0f000001 	.word	0x0f000001

08006cdc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d13c      	bne.n	8006d70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d12b      	bne.n	8006d68 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d127      	bne.n	8006d68 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d006      	beq.n	8006d34 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d119      	bne.n	8006d68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0220 	bic.w	r2, r2, #32
 8006d42:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	f043 0201 	orr.w	r2, r3, #1
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff fd7b 	bl	8006864 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d6e:	e00e      	b.n	8006d8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fd85 	bl	800688c <HAL_ADC_ErrorCallback>
}
 8006d82:	e004      	b.n	8006d8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	4798      	blx	r3
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff fd67 	bl	8006878 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2240      	movs	r2, #64	@ 0x40
 8006dc4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dca:	f043 0204 	orr.w	r2, r3, #4
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff fd5a 	bl	800688c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006dd8:	bf00      	nop
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <__NVIC_SetPriorityGrouping>:
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006df0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <__NVIC_SetPriorityGrouping+0x44>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e12:	4a04      	ldr	r2, [pc, #16]	@ (8006e24 <__NVIC_SetPriorityGrouping+0x44>)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	60d3      	str	r3, [r2, #12]
}
 8006e18:	bf00      	nop
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	e000ed00 	.word	0xe000ed00

08006e28 <__NVIC_GetPriorityGrouping>:
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e2c:	4b04      	ldr	r3, [pc, #16]	@ (8006e40 <__NVIC_GetPriorityGrouping+0x18>)
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	0a1b      	lsrs	r3, r3, #8
 8006e32:	f003 0307 	and.w	r3, r3, #7
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	e000ed00 	.word	0xe000ed00

08006e44 <__NVIC_EnableIRQ>:
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	db0b      	blt.n	8006e6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	f003 021f 	and.w	r2, r3, #31
 8006e5c:	4907      	ldr	r1, [pc, #28]	@ (8006e7c <__NVIC_EnableIRQ+0x38>)
 8006e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	2001      	movs	r0, #1
 8006e66:	fa00 f202 	lsl.w	r2, r0, r2
 8006e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	e000e100 	.word	0xe000e100

08006e80 <__NVIC_SetPriority>:
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	6039      	str	r1, [r7, #0]
 8006e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	db0a      	blt.n	8006eaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	490c      	ldr	r1, [pc, #48]	@ (8006ecc <__NVIC_SetPriority+0x4c>)
 8006e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9e:	0112      	lsls	r2, r2, #4
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006ea8:	e00a      	b.n	8006ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	4908      	ldr	r1, [pc, #32]	@ (8006ed0 <__NVIC_SetPriority+0x50>)
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	3b04      	subs	r3, #4
 8006eb8:	0112      	lsls	r2, r2, #4
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	761a      	strb	r2, [r3, #24]
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	e000e100 	.word	0xe000e100
 8006ed0:	e000ed00 	.word	0xe000ed00

08006ed4 <NVIC_EncodePriority>:
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b089      	sub	sp, #36	@ 0x24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	f1c3 0307 	rsb	r3, r3, #7
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	bf28      	it	cs
 8006ef2:	2304      	movcs	r3, #4
 8006ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	2b06      	cmp	r3, #6
 8006efc:	d902      	bls.n	8006f04 <NVIC_EncodePriority+0x30>
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	3b03      	subs	r3, #3
 8006f02:	e000      	b.n	8006f06 <NVIC_EncodePriority+0x32>
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f08:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	43da      	mvns	r2, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	401a      	ands	r2, r3
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	fa01 f303 	lsl.w	r3, r1, r3
 8006f26:	43d9      	mvns	r1, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f2c:	4313      	orrs	r3, r2
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3724      	adds	r7, #36	@ 0x24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f4c:	d301      	bcc.n	8006f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e00f      	b.n	8006f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f52:	4a0a      	ldr	r2, [pc, #40]	@ (8006f7c <SysTick_Config+0x40>)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f5a:	210f      	movs	r1, #15
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	f7ff ff8e 	bl	8006e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f64:	4b05      	ldr	r3, [pc, #20]	@ (8006f7c <SysTick_Config+0x40>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f6a:	4b04      	ldr	r3, [pc, #16]	@ (8006f7c <SysTick_Config+0x40>)
 8006f6c:	2207      	movs	r2, #7
 8006f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	e000e010 	.word	0xe000e010

08006f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff ff29 	bl	8006de0 <__NVIC_SetPriorityGrouping>
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	607a      	str	r2, [r7, #4]
 8006fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fa8:	f7ff ff3e 	bl	8006e28 <__NVIC_GetPriorityGrouping>
 8006fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	6978      	ldr	r0, [r7, #20]
 8006fb4:	f7ff ff8e 	bl	8006ed4 <NVIC_EncodePriority>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff ff5d 	bl	8006e80 <__NVIC_SetPriority>
}
 8006fc6:	bf00      	nop
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff ff31 	bl	8006e44 <__NVIC_EnableIRQ>
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7ff ffa2 	bl	8006f3c <SysTick_Config>
 8006ff8:	4603      	mov	r3, r0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007010:	f7ff faa0 	bl	8006554 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e099      	b.n	8007154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0201 	bic.w	r2, r2, #1
 800703e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007040:	e00f      	b.n	8007062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007042:	f7ff fa87 	bl	8006554 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b05      	cmp	r3, #5
 800704e:	d908      	bls.n	8007062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2203      	movs	r2, #3
 800705a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e078      	b.n	8007154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e8      	bne.n	8007042 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4b38      	ldr	r3, [pc, #224]	@ (800715c <HAL_DMA_Init+0x158>)
 800707c:	4013      	ands	r3, r2
 800707e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800708e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800709a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d107      	bne.n	80070cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c4:	4313      	orrs	r3, r2
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f023 0307 	bic.w	r3, r3, #7
 80070e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d117      	bne.n	8007126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00e      	beq.n	8007126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fb01 	bl	8007710 <DMA_CheckFifoParam>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2240      	movs	r2, #64	@ 0x40
 8007118:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007122:	2301      	movs	r3, #1
 8007124:	e016      	b.n	8007154 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fab8 	bl	80076a4 <DMA_CalcBaseAndBitshift>
 8007134:	4603      	mov	r3, r0
 8007136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800713c:	223f      	movs	r2, #63	@ 0x3f
 800713e:	409a      	lsls	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	f010803f 	.word	0xf010803f

08007160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007176:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_DMA_Start_IT+0x26>
 8007182:	2302      	movs	r3, #2
 8007184:	e040      	b.n	8007208 <HAL_DMA_Start_IT+0xa8>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b01      	cmp	r3, #1
 8007198:	d12f      	bne.n	80071fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2202      	movs	r2, #2
 800719e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	68b9      	ldr	r1, [r7, #8]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 fa4a 	bl	8007648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b8:	223f      	movs	r2, #63	@ 0x3f
 80071ba:	409a      	lsls	r2, r3
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0216 	orr.w	r2, r2, #22
 80071ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d007      	beq.n	80071e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0208 	orr.w	r2, r2, #8
 80071e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	e005      	b.n	8007206 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007202:	2302      	movs	r3, #2
 8007204:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007206:	7dfb      	ldrb	r3, [r7, #23]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800721e:	f7ff f999 	bl	8006554 <HAL_GetTick>
 8007222:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d008      	beq.n	8007242 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2280      	movs	r2, #128	@ 0x80
 8007234:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e052      	b.n	80072e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0216 	bic.w	r2, r2, #22
 8007250:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	695a      	ldr	r2, [r3, #20]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007260:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d103      	bne.n	8007272 <HAL_DMA_Abort+0x62>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800726e:	2b00      	cmp	r3, #0
 8007270:	d007      	beq.n	8007282 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0208 	bic.w	r2, r2, #8
 8007280:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007292:	e013      	b.n	80072bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007294:	f7ff f95e 	bl	8006554 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b05      	cmp	r3, #5
 80072a0:	d90c      	bls.n	80072bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2203      	movs	r2, #3
 80072ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e015      	b.n	80072e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e4      	bne.n	8007294 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ce:	223f      	movs	r2, #63	@ 0x3f
 80072d0:	409a      	lsls	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d004      	beq.n	800730e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2280      	movs	r2, #128	@ 0x80
 8007308:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e00c      	b.n	8007328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2205      	movs	r2, #5
 8007312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0201 	bic.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007340:	4b8e      	ldr	r3, [pc, #568]	@ (800757c <HAL_DMA_IRQHandler+0x248>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a8e      	ldr	r2, [pc, #568]	@ (8007580 <HAL_DMA_IRQHandler+0x24c>)
 8007346:	fba2 2303 	umull	r2, r3, r2, r3
 800734a:	0a9b      	lsrs	r3, r3, #10
 800734c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735e:	2208      	movs	r2, #8
 8007360:	409a      	lsls	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4013      	ands	r3, r2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01a      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d013      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0204 	bic.w	r2, r2, #4
 8007386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738c:	2208      	movs	r2, #8
 800738e:	409a      	lsls	r2, r3
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007398:	f043 0201 	orr.w	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a4:	2201      	movs	r2, #1
 80073a6:	409a      	lsls	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d012      	beq.n	80073d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00b      	beq.n	80073d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c2:	2201      	movs	r2, #1
 80073c4:	409a      	lsls	r2, r3
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ce:	f043 0202 	orr.w	r2, r3, #2
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073da:	2204      	movs	r2, #4
 80073dc:	409a      	lsls	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d012      	beq.n	800740c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073f8:	2204      	movs	r2, #4
 80073fa:	409a      	lsls	r2, r3
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007404:	f043 0204 	orr.w	r2, r3, #4
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007410:	2210      	movs	r2, #16
 8007412:	409a      	lsls	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4013      	ands	r3, r2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d043      	beq.n	80074a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0308 	and.w	r3, r3, #8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d03c      	beq.n	80074a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742e:	2210      	movs	r2, #16
 8007430:	409a      	lsls	r2, r3
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d018      	beq.n	8007476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d108      	bne.n	8007464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	d024      	beq.n	80074a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
 8007462:	e01f      	b.n	80074a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01b      	beq.n	80074a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4798      	blx	r3
 8007474:	e016      	b.n	80074a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007480:	2b00      	cmp	r3, #0
 8007482:	d107      	bne.n	8007494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0208 	bic.w	r2, r2, #8
 8007492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074a8:	2220      	movs	r2, #32
 80074aa:	409a      	lsls	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 808f 	beq.w	80075d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0310 	and.w	r3, r3, #16
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 8087 	beq.w	80075d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ca:	2220      	movs	r2, #32
 80074cc:	409a      	lsls	r2, r3
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b05      	cmp	r3, #5
 80074dc:	d136      	bne.n	800754c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0216 	bic.w	r2, r2, #22
 80074ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695a      	ldr	r2, [r3, #20]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <HAL_DMA_IRQHandler+0x1da>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800750a:	2b00      	cmp	r3, #0
 800750c:	d007      	beq.n	800751e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0208 	bic.w	r2, r2, #8
 800751c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007522:	223f      	movs	r2, #63	@ 0x3f
 8007524:	409a      	lsls	r2, r3
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800753e:	2b00      	cmp	r3, #0
 8007540:	d07e      	beq.n	8007640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	4798      	blx	r3
        }
        return;
 800754a:	e079      	b.n	8007640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01d      	beq.n	8007596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10d      	bne.n	8007584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800756c:	2b00      	cmp	r3, #0
 800756e:	d031      	beq.n	80075d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
 8007578:	e02c      	b.n	80075d4 <HAL_DMA_IRQHandler+0x2a0>
 800757a:	bf00      	nop
 800757c:	20000004 	.word	0x20000004
 8007580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007588:	2b00      	cmp	r3, #0
 800758a:	d023      	beq.n	80075d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
 8007594:	e01e      	b.n	80075d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10f      	bne.n	80075c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0210 	bic.w	r2, r2, #16
 80075b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d032      	beq.n	8007642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d022      	beq.n	800762e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2205      	movs	r2, #5
 80075ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0201 	bic.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	3301      	adds	r3, #1
 8007604:	60bb      	str	r3, [r7, #8]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	429a      	cmp	r2, r3
 800760a:	d307      	bcc.n	800761c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f2      	bne.n	8007600 <HAL_DMA_IRQHandler+0x2cc>
 800761a:	e000      	b.n	800761e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800761c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	4798      	blx	r3
 800763e:	e000      	b.n	8007642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007640:	bf00      	nop
    }
  }
}
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	2b40      	cmp	r3, #64	@ 0x40
 8007674:	d108      	bne.n	8007688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007686:	e007      	b.n	8007698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	60da      	str	r2, [r3, #12]
}
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	3b10      	subs	r3, #16
 80076b4:	4a14      	ldr	r2, [pc, #80]	@ (8007708 <DMA_CalcBaseAndBitshift+0x64>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	091b      	lsrs	r3, r3, #4
 80076bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80076be:	4a13      	ldr	r2, [pc, #76]	@ (800770c <DMA_CalcBaseAndBitshift+0x68>)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d909      	bls.n	80076e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	1d1a      	adds	r2, r3, #4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80076e4:	e007      	b.n	80076f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80076ee:	f023 0303 	bic.w	r3, r3, #3
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	aaaaaaab 	.word	0xaaaaaaab
 800770c:	0800f378 	.word	0x0800f378

08007710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d11f      	bne.n	800776a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b03      	cmp	r3, #3
 800772e:	d856      	bhi.n	80077de <DMA_CheckFifoParam+0xce>
 8007730:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <DMA_CheckFifoParam+0x28>)
 8007732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007736:	bf00      	nop
 8007738:	08007749 	.word	0x08007749
 800773c:	0800775b 	.word	0x0800775b
 8007740:	08007749 	.word	0x08007749
 8007744:	080077df 	.word	0x080077df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d046      	beq.n	80077e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007758:	e043      	b.n	80077e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007762:	d140      	bne.n	80077e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007768:	e03d      	b.n	80077e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007772:	d121      	bne.n	80077b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d837      	bhi.n	80077ea <DMA_CheckFifoParam+0xda>
 800777a:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <DMA_CheckFifoParam+0x70>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	08007791 	.word	0x08007791
 8007784:	08007797 	.word	0x08007797
 8007788:	08007791 	.word	0x08007791
 800778c:	080077a9 	.word	0x080077a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
      break;
 8007794:	e030      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d025      	beq.n	80077ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077a6:	e022      	b.n	80077ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80077b0:	d11f      	bne.n	80077f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80077b6:	e01c      	b.n	80077f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d903      	bls.n	80077c6 <DMA_CheckFifoParam+0xb6>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d003      	beq.n	80077cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80077c4:	e018      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
      break;
 80077ca:	e015      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00e      	beq.n	80077f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e00b      	b.n	80077f6 <DMA_CheckFifoParam+0xe6>
      break;
 80077de:	bf00      	nop
 80077e0:	e00a      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;
 80077e2:	bf00      	nop
 80077e4:	e008      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;
 80077e6:	bf00      	nop
 80077e8:	e006      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;
 80077ea:	bf00      	nop
 80077ec:	e004      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;
 80077ee:	bf00      	nop
 80077f0:	e002      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80077f2:	bf00      	nop
 80077f4:	e000      	b.n	80077f8 <DMA_CheckFifoParam+0xe8>
      break;
 80077f6:	bf00      	nop
    }
  } 
  
  return status; 
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop

08007808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007808:	b480      	push	{r7}
 800780a:	b089      	sub	sp, #36	@ 0x24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007816:	2300      	movs	r3, #0
 8007818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800781a:	2300      	movs	r3, #0
 800781c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800781e:	2300      	movs	r3, #0
 8007820:	61fb      	str	r3, [r7, #28]
 8007822:	e16b      	b.n	8007afc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007824:	2201      	movs	r2, #1
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	fa02 f303 	lsl.w	r3, r2, r3
 800782c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4013      	ands	r3, r2
 8007836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	429a      	cmp	r2, r3
 800783e:	f040 815a 	bne.w	8007af6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	2b01      	cmp	r3, #1
 800784c:	d005      	beq.n	800785a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007856:	2b02      	cmp	r3, #2
 8007858:	d130      	bne.n	80078bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	2203      	movs	r2, #3
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	43db      	mvns	r3, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4013      	ands	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	fa02 f303 	lsl.w	r3, r2, r3
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	4313      	orrs	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007890:	2201      	movs	r2, #1
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	43db      	mvns	r3, r3
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	4013      	ands	r3, r2
 800789e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	091b      	lsrs	r3, r3, #4
 80078a6:	f003 0201 	and.w	r2, r3, #1
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	fa02 f303 	lsl.w	r3, r2, r3
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f003 0303 	and.w	r3, r3, #3
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d017      	beq.n	80078f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	2203      	movs	r2, #3
 80078d4:	fa02 f303 	lsl.w	r3, r2, r3
 80078d8:	43db      	mvns	r3, r3
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	4013      	ands	r3, r2
 80078de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d123      	bne.n	800794c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	08da      	lsrs	r2, r3, #3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3208      	adds	r2, #8
 800790c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	220f      	movs	r2, #15
 800791c:	fa02 f303 	lsl.w	r3, r2, r3
 8007920:	43db      	mvns	r3, r3
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	4013      	ands	r3, r2
 8007926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	691a      	ldr	r2, [r3, #16]
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	4313      	orrs	r3, r2
 800793c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	08da      	lsrs	r2, r3, #3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3208      	adds	r2, #8
 8007946:	69b9      	ldr	r1, [r7, #24]
 8007948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	2203      	movs	r2, #3
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	43db      	mvns	r3, r3
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	4013      	ands	r3, r2
 8007962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f003 0203 	and.w	r2, r3, #3
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	fa02 f303 	lsl.w	r3, r2, r3
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	4313      	orrs	r3, r2
 8007978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 80b4 	beq.w	8007af6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	4b60      	ldr	r3, [pc, #384]	@ (8007b14 <HAL_GPIO_Init+0x30c>)
 8007994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007996:	4a5f      	ldr	r2, [pc, #380]	@ (8007b14 <HAL_GPIO_Init+0x30c>)
 8007998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800799c:	6453      	str	r3, [r2, #68]	@ 0x44
 800799e:	4b5d      	ldr	r3, [pc, #372]	@ (8007b14 <HAL_GPIO_Init+0x30c>)
 80079a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079aa:	4a5b      	ldr	r2, [pc, #364]	@ (8007b18 <HAL_GPIO_Init+0x310>)
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	089b      	lsrs	r3, r3, #2
 80079b0:	3302      	adds	r3, #2
 80079b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	220f      	movs	r2, #15
 80079c2:	fa02 f303 	lsl.w	r3, r2, r3
 80079c6:	43db      	mvns	r3, r3
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	4013      	ands	r3, r2
 80079cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a52      	ldr	r2, [pc, #328]	@ (8007b1c <HAL_GPIO_Init+0x314>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d02b      	beq.n	8007a2e <HAL_GPIO_Init+0x226>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a51      	ldr	r2, [pc, #324]	@ (8007b20 <HAL_GPIO_Init+0x318>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d025      	beq.n	8007a2a <HAL_GPIO_Init+0x222>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a50      	ldr	r2, [pc, #320]	@ (8007b24 <HAL_GPIO_Init+0x31c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01f      	beq.n	8007a26 <HAL_GPIO_Init+0x21e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a4f      	ldr	r2, [pc, #316]	@ (8007b28 <HAL_GPIO_Init+0x320>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d019      	beq.n	8007a22 <HAL_GPIO_Init+0x21a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a4e      	ldr	r2, [pc, #312]	@ (8007b2c <HAL_GPIO_Init+0x324>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <HAL_GPIO_Init+0x216>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a4d      	ldr	r2, [pc, #308]	@ (8007b30 <HAL_GPIO_Init+0x328>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00d      	beq.n	8007a1a <HAL_GPIO_Init+0x212>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a4c      	ldr	r2, [pc, #304]	@ (8007b34 <HAL_GPIO_Init+0x32c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d007      	beq.n	8007a16 <HAL_GPIO_Init+0x20e>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a4b      	ldr	r2, [pc, #300]	@ (8007b38 <HAL_GPIO_Init+0x330>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d101      	bne.n	8007a12 <HAL_GPIO_Init+0x20a>
 8007a0e:	2307      	movs	r3, #7
 8007a10:	e00e      	b.n	8007a30 <HAL_GPIO_Init+0x228>
 8007a12:	2308      	movs	r3, #8
 8007a14:	e00c      	b.n	8007a30 <HAL_GPIO_Init+0x228>
 8007a16:	2306      	movs	r3, #6
 8007a18:	e00a      	b.n	8007a30 <HAL_GPIO_Init+0x228>
 8007a1a:	2305      	movs	r3, #5
 8007a1c:	e008      	b.n	8007a30 <HAL_GPIO_Init+0x228>
 8007a1e:	2304      	movs	r3, #4
 8007a20:	e006      	b.n	8007a30 <HAL_GPIO_Init+0x228>
 8007a22:	2303      	movs	r3, #3
 8007a24:	e004      	b.n	8007a30 <HAL_GPIO_Init+0x228>
 8007a26:	2302      	movs	r3, #2
 8007a28:	e002      	b.n	8007a30 <HAL_GPIO_Init+0x228>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <HAL_GPIO_Init+0x228>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	f002 0203 	and.w	r2, r2, #3
 8007a36:	0092      	lsls	r2, r2, #2
 8007a38:	4093      	lsls	r3, r2
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a40:	4935      	ldr	r1, [pc, #212]	@ (8007b18 <HAL_GPIO_Init+0x310>)
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	089b      	lsrs	r3, r3, #2
 8007a46:	3302      	adds	r3, #2
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8007b3c <HAL_GPIO_Init+0x334>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	43db      	mvns	r3, r3
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a72:	4a32      	ldr	r2, [pc, #200]	@ (8007b3c <HAL_GPIO_Init+0x334>)
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a78:	4b30      	ldr	r3, [pc, #192]	@ (8007b3c <HAL_GPIO_Init+0x334>)
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	43db      	mvns	r3, r3
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4013      	ands	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a9c:	4a27      	ldr	r2, [pc, #156]	@ (8007b3c <HAL_GPIO_Init+0x334>)
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007aa2:	4b26      	ldr	r3, [pc, #152]	@ (8007b3c <HAL_GPIO_Init+0x334>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8007b3c <HAL_GPIO_Init+0x334>)
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007acc:	4b1b      	ldr	r3, [pc, #108]	@ (8007b3c <HAL_GPIO_Init+0x334>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007af0:	4a12      	ldr	r2, [pc, #72]	@ (8007b3c <HAL_GPIO_Init+0x334>)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	3301      	adds	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	f67f ae90 	bls.w	8007824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	3724      	adds	r7, #36	@ 0x24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	40023800 	.word	0x40023800
 8007b18:	40013800 	.word	0x40013800
 8007b1c:	40020000 	.word	0x40020000
 8007b20:	40020400 	.word	0x40020400
 8007b24:	40020800 	.word	0x40020800
 8007b28:	40020c00 	.word	0x40020c00
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	40021400 	.word	0x40021400
 8007b34:	40021800 	.word	0x40021800
 8007b38:	40021c00 	.word	0x40021c00
 8007b3c:	40013c00 	.word	0x40013c00

08007b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e12b      	b.n	8007daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fe f984 	bl	8005e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2224      	movs	r2, #36	@ 0x24
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0201 	bic.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ba4:	f001 fc60 	bl	8009468 <HAL_RCC_GetPCLK1Freq>
 8007ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	4a81      	ldr	r2, [pc, #516]	@ (8007db4 <HAL_I2C_Init+0x274>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d807      	bhi.n	8007bc4 <HAL_I2C_Init+0x84>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4a80      	ldr	r2, [pc, #512]	@ (8007db8 <HAL_I2C_Init+0x278>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	bf94      	ite	ls
 8007bbc:	2301      	movls	r3, #1
 8007bbe:	2300      	movhi	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e006      	b.n	8007bd2 <HAL_I2C_Init+0x92>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4a7d      	ldr	r2, [pc, #500]	@ (8007dbc <HAL_I2C_Init+0x27c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	bf94      	ite	ls
 8007bcc:	2301      	movls	r3, #1
 8007bce:	2300      	movhi	r3, #0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e0e7      	b.n	8007daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4a78      	ldr	r2, [pc, #480]	@ (8007dc0 <HAL_I2C_Init+0x280>)
 8007bde:	fba2 2303 	umull	r2, r3, r2, r3
 8007be2:	0c9b      	lsrs	r3, r3, #18
 8007be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4a6a      	ldr	r2, [pc, #424]	@ (8007db4 <HAL_I2C_Init+0x274>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d802      	bhi.n	8007c14 <HAL_I2C_Init+0xd4>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	3301      	adds	r3, #1
 8007c12:	e009      	b.n	8007c28 <HAL_I2C_Init+0xe8>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007c1a:	fb02 f303 	mul.w	r3, r2, r3
 8007c1e:	4a69      	ldr	r2, [pc, #420]	@ (8007dc4 <HAL_I2C_Init+0x284>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	099b      	lsrs	r3, r3, #6
 8007c26:	3301      	adds	r3, #1
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6812      	ldr	r2, [r2, #0]
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007c3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	495c      	ldr	r1, [pc, #368]	@ (8007db4 <HAL_I2C_Init+0x274>)
 8007c44:	428b      	cmp	r3, r1
 8007c46:	d819      	bhi.n	8007c7c <HAL_I2C_Init+0x13c>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	1e59      	subs	r1, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c56:	1c59      	adds	r1, r3, #1
 8007c58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <HAL_I2C_Init+0x138>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1e59      	subs	r1, r3, #1
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c70:	3301      	adds	r3, #1
 8007c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c76:	e051      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	e04f      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d111      	bne.n	8007ca8 <HAL_I2C_Init+0x168>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	1e58      	subs	r0, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6859      	ldr	r1, [r3, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	440b      	add	r3, r1
 8007c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c96:	3301      	adds	r3, #1
 8007c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bf0c      	ite	eq
 8007ca0:	2301      	moveq	r3, #1
 8007ca2:	2300      	movne	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	e012      	b.n	8007cce <HAL_I2C_Init+0x18e>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	1e58      	subs	r0, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6859      	ldr	r1, [r3, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	0099      	lsls	r1, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bf0c      	ite	eq
 8007cc8:	2301      	moveq	r3, #1
 8007cca:	2300      	movne	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_I2C_Init+0x196>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e022      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10e      	bne.n	8007cfc <HAL_I2C_Init+0x1bc>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1e58      	subs	r0, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6859      	ldr	r1, [r3, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	440b      	add	r3, r1
 8007cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cfa:	e00f      	b.n	8007d1c <HAL_I2C_Init+0x1dc>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	1e58      	subs	r0, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6859      	ldr	r1, [r3, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	0099      	lsls	r1, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d12:	3301      	adds	r3, #1
 8007d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	6809      	ldr	r1, [r1, #0]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69da      	ldr	r2, [r3, #28]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007d4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6911      	ldr	r1, [r2, #16]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	68d2      	ldr	r2, [r2, #12]
 8007d56:	4311      	orrs	r1, r2
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695a      	ldr	r2, [r3, #20]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2220      	movs	r2, #32
 8007d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	000186a0 	.word	0x000186a0
 8007db8:	001e847f 	.word	0x001e847f
 8007dbc:	003d08ff 	.word	0x003d08ff
 8007dc0:	431bde83 	.word	0x431bde83
 8007dc4:	10624dd3 	.word	0x10624dd3

08007dc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b088      	sub	sp, #32
 8007dcc:	af02      	add	r7, sp, #8
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	817b      	strh	r3, [r7, #10]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	813b      	strh	r3, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007de2:	f7fe fbb7 	bl	8006554 <HAL_GetTick>
 8007de6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	f040 80d9 	bne.w	8007fa8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	2319      	movs	r3, #25
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	496d      	ldr	r1, [pc, #436]	@ (8007fb4 <HAL_I2C_Mem_Write+0x1ec>)
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 fc8b 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e0cc      	b.n	8007faa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_I2C_Mem_Write+0x56>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e0c5      	b.n	8007faa <HAL_I2C_Mem_Write+0x1e2>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d007      	beq.n	8007e44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2221      	movs	r2, #33	@ 0x21
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2240      	movs	r2, #64	@ 0x40
 8007e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a3a      	ldr	r2, [r7, #32]
 8007e6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4a4d      	ldr	r2, [pc, #308]	@ (8007fb8 <HAL_I2C_Mem_Write+0x1f0>)
 8007e84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e86:	88f8      	ldrh	r0, [r7, #6]
 8007e88:	893a      	ldrh	r2, [r7, #8]
 8007e8a:	8979      	ldrh	r1, [r7, #10]
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	4603      	mov	r3, r0
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fac2 	bl	8008420 <I2C_RequestMemoryWrite>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d052      	beq.n	8007f48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e081      	b.n	8007faa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 fd50 	bl	8008950 <I2C_WaitOnTXEFlagUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00d      	beq.n	8007ed2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d107      	bne.n	8007ece <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ecc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e06b      	b.n	8007faa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed6:	781a      	ldrb	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d11b      	bne.n	8007f48 <HAL_I2C_Mem_Write+0x180>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d017      	beq.n	8007f48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3b01      	subs	r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1aa      	bne.n	8007ea6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fd43 	bl	80089e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00d      	beq.n	8007f7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d107      	bne.n	8007f78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e016      	b.n	8007faa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	e000      	b.n	8007faa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007fa8:	2302      	movs	r3, #2
  }
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	00100002 	.word	0x00100002
 8007fb8:	ffff0000 	.word	0xffff0000

08007fbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08c      	sub	sp, #48	@ 0x30
 8007fc0:	af02      	add	r7, sp, #8
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	461a      	mov	r2, r3
 8007fca:	4603      	mov	r3, r0
 8007fcc:	817b      	strh	r3, [r7, #10]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	813b      	strh	r3, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fd6:	f7fe fabd 	bl	8006554 <HAL_GetTick>
 8007fda:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	f040 8214 	bne.w	8008412 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	2319      	movs	r3, #25
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	497b      	ldr	r1, [pc, #492]	@ (80081e0 <HAL_I2C_Mem_Read+0x224>)
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fb91 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008000:	2302      	movs	r3, #2
 8008002:	e207      	b.n	8008414 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <HAL_I2C_Mem_Read+0x56>
 800800e:	2302      	movs	r3, #2
 8008010:	e200      	b.n	8008414 <HAL_I2C_Mem_Read+0x458>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b01      	cmp	r3, #1
 8008026:	d007      	beq.n	8008038 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008046:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2222      	movs	r2, #34	@ 0x22
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2240      	movs	r2, #64	@ 0x40
 8008054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008062:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800806e:	b29a      	uxth	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4a5b      	ldr	r2, [pc, #364]	@ (80081e4 <HAL_I2C_Mem_Read+0x228>)
 8008078:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800807a:	88f8      	ldrh	r0, [r7, #6]
 800807c:	893a      	ldrh	r2, [r7, #8]
 800807e:	8979      	ldrh	r1, [r7, #10]
 8008080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	4603      	mov	r3, r0
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 fa5e 	bl	800854c <I2C_RequestMemoryRead>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e1bc      	b.n	8008414 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d113      	bne.n	80080ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080a2:	2300      	movs	r3, #0
 80080a4:	623b      	str	r3, [r7, #32]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	623b      	str	r3, [r7, #32]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	623b      	str	r3, [r7, #32]
 80080b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	e190      	b.n	80083ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d11b      	bne.n	800810a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080e2:	2300      	movs	r3, #0
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	61fb      	str	r3, [r7, #28]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	61fb      	str	r3, [r7, #28]
 80080f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	e170      	b.n	80083ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800810e:	2b02      	cmp	r3, #2
 8008110:	d11b      	bne.n	800814a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008120:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008132:	2300      	movs	r3, #0
 8008134:	61bb      	str	r3, [r7, #24]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	61bb      	str	r3, [r7, #24]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	61bb      	str	r3, [r7, #24]
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	e150      	b.n	80083ec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008160:	e144      	b.n	80083ec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008166:	2b03      	cmp	r3, #3
 8008168:	f200 80f1 	bhi.w	800834e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008170:	2b01      	cmp	r3, #1
 8008172:	d123      	bne.n	80081bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008176:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 fc79 	bl	8008a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e145      	b.n	8008414 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	691a      	ldr	r2, [r3, #16]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80081ba:	e117      	b.n	80083ec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d14e      	bne.n	8008262 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ca:	2200      	movs	r2, #0
 80081cc:	4906      	ldr	r1, [pc, #24]	@ (80081e8 <HAL_I2C_Mem_Read+0x22c>)
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 faa4 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d008      	beq.n	80081ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e11a      	b.n	8008414 <HAL_I2C_Mem_Read+0x458>
 80081de:	bf00      	nop
 80081e0:	00100002 	.word	0x00100002
 80081e4:	ffff0000 	.word	0xffff0000
 80081e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008224:	b29b      	uxth	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008238:	b2d2      	uxtb	r2, r2
 800823a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800824a:	3b01      	subs	r3, #1
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008260:	e0c4      	b.n	80083ec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008268:	2200      	movs	r2, #0
 800826a:	496c      	ldr	r1, [pc, #432]	@ (800841c <HAL_I2C_Mem_Read+0x460>)
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 fa55 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e0cb      	b.n	8008414 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800828a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	691a      	ldr	r2, [r3, #16]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082a8:	3b01      	subs	r3, #1
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c4:	2200      	movs	r2, #0
 80082c6:	4955      	ldr	r1, [pc, #340]	@ (800841c <HAL_I2C_Mem_Read+0x460>)
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 fa27 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e09d      	b.n	8008414 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	691a      	ldr	r2, [r3, #16]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f2:	b2d2      	uxtb	r2, r2
 80082f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008304:	3b01      	subs	r3, #1
 8008306:	b29a      	uxth	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008310:	b29b      	uxth	r3, r3
 8008312:	3b01      	subs	r3, #1
 8008314:	b29a      	uxth	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008324:	b2d2      	uxtb	r2, r2
 8008326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008336:	3b01      	subs	r3, #1
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008342:	b29b      	uxth	r3, r3
 8008344:	3b01      	subs	r3, #1
 8008346:	b29a      	uxth	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800834c:	e04e      	b.n	80083ec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800834e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008350:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fb8c 	bl	8008a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e058      	b.n	8008414 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691a      	ldr	r2, [r3, #16]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836c:	b2d2      	uxtb	r2, r2
 800836e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800837e:	3b01      	subs	r3, #1
 8008380:	b29a      	uxth	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800838a:	b29b      	uxth	r3, r3
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d124      	bne.n	80083ec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d107      	bne.n	80083ba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c4:	b2d2      	uxtb	r2, r2
 80083c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f47f aeb6 	bne.w	8008162 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	e000      	b.n	8008414 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008412:	2302      	movs	r3, #2
  }
}
 8008414:	4618      	mov	r0, r3
 8008416:	3728      	adds	r7, #40	@ 0x28
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	00010004 	.word	0x00010004

08008420 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af02      	add	r7, sp, #8
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	4608      	mov	r0, r1
 800842a:	4611      	mov	r1, r2
 800842c:	461a      	mov	r2, r3
 800842e:	4603      	mov	r3, r0
 8008430:	817b      	strh	r3, [r7, #10]
 8008432:	460b      	mov	r3, r1
 8008434:	813b      	strh	r3, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	2200      	movs	r2, #0
 8008452:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 f960 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00d      	beq.n	800847e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008470:	d103      	bne.n	800847a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008478:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e05f      	b.n	800853e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800847e:	897b      	ldrh	r3, [r7, #10]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	461a      	mov	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800848c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	6a3a      	ldr	r2, [r7, #32]
 8008492:	492d      	ldr	r1, [pc, #180]	@ (8008548 <I2C_RequestMemoryWrite+0x128>)
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f9bb 	bl	8008810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e04c      	b.n	800853e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084bc:	6a39      	ldr	r1, [r7, #32]
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 fa46 	bl	8008950 <I2C_WaitOnTXEFlagUntilTimeout>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00d      	beq.n	80084e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d107      	bne.n	80084e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e02b      	b.n	800853e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d105      	bne.n	80084f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084ec:	893b      	ldrh	r3, [r7, #8]
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	611a      	str	r2, [r3, #16]
 80084f6:	e021      	b.n	800853c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084f8:	893b      	ldrh	r3, [r7, #8]
 80084fa:	0a1b      	lsrs	r3, r3, #8
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008508:	6a39      	ldr	r1, [r7, #32]
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 fa20 	bl	8008950 <I2C_WaitOnTXEFlagUntilTimeout>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00d      	beq.n	8008532 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851a:	2b04      	cmp	r3, #4
 800851c:	d107      	bne.n	800852e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800852c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e005      	b.n	800853e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008532:	893b      	ldrh	r3, [r7, #8]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	00010002 	.word	0x00010002

0800854c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af02      	add	r7, sp, #8
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	4608      	mov	r0, r1
 8008556:	4611      	mov	r1, r2
 8008558:	461a      	mov	r2, r3
 800855a:	4603      	mov	r3, r0
 800855c:	817b      	strh	r3, [r7, #10]
 800855e:	460b      	mov	r3, r1
 8008560:	813b      	strh	r3, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008574:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	2200      	movs	r2, #0
 800858e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f8c2 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00d      	beq.n	80085ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ac:	d103      	bne.n	80085b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e0aa      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085ba:	897b      	ldrh	r3, [r7, #10]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	461a      	mov	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80085c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	6a3a      	ldr	r2, [r7, #32]
 80085ce:	4952      	ldr	r1, [pc, #328]	@ (8008718 <I2C_RequestMemoryRead+0x1cc>)
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 f91d 	bl	8008810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e097      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085f8:	6a39      	ldr	r1, [r7, #32]
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 f9a8 	bl	8008950 <I2C_WaitOnTXEFlagUntilTimeout>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00d      	beq.n	8008622 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860a:	2b04      	cmp	r3, #4
 800860c:	d107      	bne.n	800861e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800861c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e076      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008622:	88fb      	ldrh	r3, [r7, #6]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d105      	bne.n	8008634 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008628:	893b      	ldrh	r3, [r7, #8]
 800862a:	b2da      	uxtb	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	611a      	str	r2, [r3, #16]
 8008632:	e021      	b.n	8008678 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008634:	893b      	ldrh	r3, [r7, #8]
 8008636:	0a1b      	lsrs	r3, r3, #8
 8008638:	b29b      	uxth	r3, r3
 800863a:	b2da      	uxtb	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008644:	6a39      	ldr	r1, [r7, #32]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f982 	bl	8008950 <I2C_WaitOnTXEFlagUntilTimeout>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00d      	beq.n	800866e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008656:	2b04      	cmp	r3, #4
 8008658:	d107      	bne.n	800866a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e050      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800866e:	893b      	ldrh	r3, [r7, #8]
 8008670:	b2da      	uxtb	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800867a:	6a39      	ldr	r1, [r7, #32]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f967 	bl	8008950 <I2C_WaitOnTXEFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00d      	beq.n	80086a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868c:	2b04      	cmp	r3, #4
 800868e:	d107      	bne.n	80086a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800869e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e035      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f82b 	bl	800871c <I2C_WaitOnFlagUntilTimeout>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00d      	beq.n	80086e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086da:	d103      	bne.n	80086e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e013      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80086e8:	897b      	ldrh	r3, [r7, #10]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fa:	6a3a      	ldr	r2, [r7, #32]
 80086fc:	4906      	ldr	r1, [pc, #24]	@ (8008718 <I2C_RequestMemoryRead+0x1cc>)
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f886 	bl	8008810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e000      	b.n	8008710 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	00010002 	.word	0x00010002

0800871c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	4613      	mov	r3, r2
 800872a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800872c:	e048      	b.n	80087c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008734:	d044      	beq.n	80087c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008736:	f7fd ff0d 	bl	8006554 <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d302      	bcc.n	800874c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d139      	bne.n	80087c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	0c1b      	lsrs	r3, r3, #16
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b01      	cmp	r3, #1
 8008754:	d10d      	bne.n	8008772 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	43da      	mvns	r2, r3
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	4013      	ands	r3, r2
 8008762:	b29b      	uxth	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	bf0c      	ite	eq
 8008768:	2301      	moveq	r3, #1
 800876a:	2300      	movne	r3, #0
 800876c:	b2db      	uxtb	r3, r3
 800876e:	461a      	mov	r2, r3
 8008770:	e00c      	b.n	800878c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	43da      	mvns	r2, r3
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	4013      	ands	r3, r2
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	bf0c      	ite	eq
 8008784:	2301      	moveq	r3, #1
 8008786:	2300      	movne	r3, #0
 8008788:	b2db      	uxtb	r3, r3
 800878a:	461a      	mov	r2, r3
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	429a      	cmp	r2, r3
 8008790:	d116      	bne.n	80087c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2220      	movs	r2, #32
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ac:	f043 0220 	orr.w	r2, r3, #32
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e023      	b.n	8008808 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	0c1b      	lsrs	r3, r3, #16
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d10d      	bne.n	80087e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	43da      	mvns	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4013      	ands	r3, r2
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bf0c      	ite	eq
 80087dc:	2301      	moveq	r3, #1
 80087de:	2300      	movne	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	461a      	mov	r2, r3
 80087e4:	e00c      	b.n	8008800 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	43da      	mvns	r2, r3
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	4013      	ands	r3, r2
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bf0c      	ite	eq
 80087f8:	2301      	moveq	r3, #1
 80087fa:	2300      	movne	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	429a      	cmp	r2, r3
 8008804:	d093      	beq.n	800872e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800881e:	e071      	b.n	8008904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800882a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800882e:	d123      	bne.n	8008878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800883e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008848:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2220      	movs	r2, #32
 8008854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008864:	f043 0204 	orr.w	r2, r3, #4
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e067      	b.n	8008948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d041      	beq.n	8008904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008880:	f7fd fe68 	bl	8006554 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	429a      	cmp	r2, r3
 800888e:	d302      	bcc.n	8008896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d136      	bne.n	8008904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	0c1b      	lsrs	r3, r3, #16
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b01      	cmp	r3, #1
 800889e:	d10c      	bne.n	80088ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	43da      	mvns	r2, r3
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4013      	ands	r3, r2
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bf14      	ite	ne
 80088b2:	2301      	movne	r3, #1
 80088b4:	2300      	moveq	r3, #0
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	e00b      	b.n	80088d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	43da      	mvns	r2, r3
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	4013      	ands	r3, r2
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bf14      	ite	ne
 80088cc:	2301      	movne	r3, #1
 80088ce:	2300      	moveq	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d016      	beq.n	8008904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2220      	movs	r2, #32
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f0:	f043 0220 	orr.w	r2, r3, #32
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e021      	b.n	8008948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	0c1b      	lsrs	r3, r3, #16
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b01      	cmp	r3, #1
 800890c:	d10c      	bne.n	8008928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	43da      	mvns	r2, r3
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	4013      	ands	r3, r2
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	bf14      	ite	ne
 8008920:	2301      	movne	r3, #1
 8008922:	2300      	moveq	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	e00b      	b.n	8008940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	43da      	mvns	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4013      	ands	r3, r2
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	bf14      	ite	ne
 800893a:	2301      	movne	r3, #1
 800893c:	2300      	moveq	r3, #0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	f47f af6d 	bne.w	8008820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800895c:	e034      	b.n	80089c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f8e3 	bl	8008b2a <I2C_IsAcknowledgeFailed>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e034      	b.n	80089d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008974:	d028      	beq.n	80089c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008976:	f7fd fded 	bl	8006554 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	429a      	cmp	r2, r3
 8008984:	d302      	bcc.n	800898c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d11d      	bne.n	80089c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008996:	2b80      	cmp	r3, #128	@ 0x80
 8008998:	d016      	beq.n	80089c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b4:	f043 0220 	orr.w	r2, r3, #32
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e007      	b.n	80089d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d2:	2b80      	cmp	r3, #128	@ 0x80
 80089d4:	d1c3      	bne.n	800895e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089ec:	e034      	b.n	8008a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 f89b 	bl	8008b2a <I2C_IsAcknowledgeFailed>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e034      	b.n	8008a68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d028      	beq.n	8008a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a06:	f7fd fda5 	bl	8006554 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d302      	bcc.n	8008a1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d11d      	bne.n	8008a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	f003 0304 	and.w	r3, r3, #4
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	d016      	beq.n	8008a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a44:	f043 0220 	orr.w	r2, r3, #32
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e007      	b.n	8008a68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d1c3      	bne.n	80089ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a7c:	e049      	b.n	8008b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	2b10      	cmp	r3, #16
 8008a8a:	d119      	bne.n	8008ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f06f 0210 	mvn.w	r2, #16
 8008a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e030      	b.n	8008b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ac0:	f7fd fd48 	bl	8006554 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d302      	bcc.n	8008ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d11d      	bne.n	8008b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae0:	2b40      	cmp	r3, #64	@ 0x40
 8008ae2:	d016      	beq.n	8008b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afe:	f043 0220 	orr.w	r2, r3, #32
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e007      	b.n	8008b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b1c:	2b40      	cmp	r3, #64	@ 0x40
 8008b1e:	d1ae      	bne.n	8008a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b40:	d11b      	bne.n	8008b7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b66:	f043 0204 	orr.w	r2, r3, #4
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e267      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d075      	beq.n	8008c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008ba6:	4b88      	ldr	r3, [pc, #544]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 030c 	and.w	r3, r3, #12
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d00c      	beq.n	8008bcc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bb2:	4b85      	ldr	r3, [pc, #532]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008bba:	2b08      	cmp	r3, #8
 8008bbc:	d112      	bne.n	8008be4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bbe:	4b82      	ldr	r3, [pc, #520]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008bca:	d10b      	bne.n	8008be4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bcc:	4b7e      	ldr	r3, [pc, #504]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d05b      	beq.n	8008c90 <HAL_RCC_OscConfig+0x108>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d157      	bne.n	8008c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e242      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bec:	d106      	bne.n	8008bfc <HAL_RCC_OscConfig+0x74>
 8008bee:	4b76      	ldr	r3, [pc, #472]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a75      	ldr	r2, [pc, #468]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	e01d      	b.n	8008c38 <HAL_RCC_OscConfig+0xb0>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c04:	d10c      	bne.n	8008c20 <HAL_RCC_OscConfig+0x98>
 8008c06:	4b70      	ldr	r3, [pc, #448]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a6f      	ldr	r2, [pc, #444]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	4b6d      	ldr	r3, [pc, #436]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a6c      	ldr	r2, [pc, #432]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	e00b      	b.n	8008c38 <HAL_RCC_OscConfig+0xb0>
 8008c20:	4b69      	ldr	r3, [pc, #420]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a68      	ldr	r2, [pc, #416]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	4b66      	ldr	r3, [pc, #408]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a65      	ldr	r2, [pc, #404]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d013      	beq.n	8008c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c40:	f7fd fc88 	bl	8006554 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c48:	f7fd fc84 	bl	8006554 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b64      	cmp	r3, #100	@ 0x64
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e207      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0f0      	beq.n	8008c48 <HAL_RCC_OscConfig+0xc0>
 8008c66:	e014      	b.n	8008c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c68:	f7fd fc74 	bl	8006554 <HAL_GetTick>
 8008c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c70:	f7fd fc70 	bl	8006554 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b64      	cmp	r3, #100	@ 0x64
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e1f3      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c82:	4b51      	ldr	r3, [pc, #324]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f0      	bne.n	8008c70 <HAL_RCC_OscConfig+0xe8>
 8008c8e:	e000      	b.n	8008c92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d063      	beq.n	8008d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f003 030c 	and.w	r3, r3, #12
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008caa:	4b47      	ldr	r3, [pc, #284]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008cb2:	2b08      	cmp	r3, #8
 8008cb4:	d11c      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cb6:	4b44      	ldr	r3, [pc, #272]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d116      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cc2:	4b41      	ldr	r3, [pc, #260]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <HAL_RCC_OscConfig+0x152>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d001      	beq.n	8008cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e1c7      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cda:	4b3b      	ldr	r3, [pc, #236]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	4937      	ldr	r1, [pc, #220]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cee:	e03a      	b.n	8008d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d020      	beq.n	8008d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cf8:	4b34      	ldr	r3, [pc, #208]	@ (8008dcc <HAL_RCC_OscConfig+0x244>)
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cfe:	f7fd fc29 	bl	8006554 <HAL_GetTick>
 8008d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d04:	e008      	b.n	8008d18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d06:	f7fd fc25 	bl	8006554 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d901      	bls.n	8008d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e1a8      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d18:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0f0      	beq.n	8008d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d24:	4b28      	ldr	r3, [pc, #160]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	4925      	ldr	r1, [pc, #148]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	600b      	str	r3, [r1, #0]
 8008d38:	e015      	b.n	8008d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d3a:	4b24      	ldr	r3, [pc, #144]	@ (8008dcc <HAL_RCC_OscConfig+0x244>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d40:	f7fd fc08 	bl	8006554 <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d48:	f7fd fc04 	bl	8006554 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e187      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1f0      	bne.n	8008d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0308 	and.w	r3, r3, #8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d036      	beq.n	8008de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d016      	beq.n	8008da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d7a:	4b15      	ldr	r3, [pc, #84]	@ (8008dd0 <HAL_RCC_OscConfig+0x248>)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d80:	f7fd fbe8 	bl	8006554 <HAL_GetTick>
 8008d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d86:	e008      	b.n	8008d9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d88:	f7fd fbe4 	bl	8006554 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e167      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0f0      	beq.n	8008d88 <HAL_RCC_OscConfig+0x200>
 8008da6:	e01b      	b.n	8008de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008da8:	4b09      	ldr	r3, [pc, #36]	@ (8008dd0 <HAL_RCC_OscConfig+0x248>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dae:	f7fd fbd1 	bl	8006554 <HAL_GetTick>
 8008db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008db4:	e00e      	b.n	8008dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008db6:	f7fd fbcd 	bl	8006554 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d907      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e150      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	42470000 	.word	0x42470000
 8008dd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dd4:	4b88      	ldr	r3, [pc, #544]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1ea      	bne.n	8008db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 8097 	beq.w	8008f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008df2:	4b81      	ldr	r3, [pc, #516]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10f      	bne.n	8008e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60bb      	str	r3, [r7, #8]
 8008e02:	4b7d      	ldr	r3, [pc, #500]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e06:	4a7c      	ldr	r2, [pc, #496]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e16:	60bb      	str	r3, [r7, #8]
 8008e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e1e:	4b77      	ldr	r3, [pc, #476]	@ (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d118      	bne.n	8008e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e2a:	4b74      	ldr	r3, [pc, #464]	@ (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a73      	ldr	r2, [pc, #460]	@ (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e36:	f7fd fb8d 	bl	8006554 <HAL_GetTick>
 8008e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e3c:	e008      	b.n	8008e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e3e:	f7fd fb89 	bl	8006554 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d901      	bls.n	8008e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e10c      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e50:	4b6a      	ldr	r3, [pc, #424]	@ (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0f0      	beq.n	8008e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d106      	bne.n	8008e72 <HAL_RCC_OscConfig+0x2ea>
 8008e64:	4b64      	ldr	r3, [pc, #400]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e68:	4a63      	ldr	r2, [pc, #396]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e6a:	f043 0301 	orr.w	r3, r3, #1
 8008e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e70:	e01c      	b.n	8008eac <HAL_RCC_OscConfig+0x324>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	2b05      	cmp	r3, #5
 8008e78:	d10c      	bne.n	8008e94 <HAL_RCC_OscConfig+0x30c>
 8008e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e7e:	4a5e      	ldr	r2, [pc, #376]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e80:	f043 0304 	orr.w	r3, r3, #4
 8008e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e86:	4b5c      	ldr	r3, [pc, #368]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e8c:	f043 0301 	orr.w	r3, r3, #1
 8008e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e92:	e00b      	b.n	8008eac <HAL_RCC_OscConfig+0x324>
 8008e94:	4b58      	ldr	r3, [pc, #352]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e98:	4a57      	ldr	r2, [pc, #348]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e9a:	f023 0301 	bic.w	r3, r3, #1
 8008e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ea0:	4b55      	ldr	r3, [pc, #340]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ea4:	4a54      	ldr	r2, [pc, #336]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008ea6:	f023 0304 	bic.w	r3, r3, #4
 8008eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d015      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb4:	f7fd fb4e 	bl	8006554 <HAL_GetTick>
 8008eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eba:	e00a      	b.n	8008ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ebc:	f7fd fb4a 	bl	8006554 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d901      	bls.n	8008ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e0cb      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed2:	4b49      	ldr	r3, [pc, #292]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0ee      	beq.n	8008ebc <HAL_RCC_OscConfig+0x334>
 8008ede:	e014      	b.n	8008f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ee0:	f7fd fb38 	bl	8006554 <HAL_GetTick>
 8008ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ee6:	e00a      	b.n	8008efe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ee8:	f7fd fb34 	bl	8006554 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e0b5      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008efe:	4b3e      	ldr	r3, [pc, #248]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1ee      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d105      	bne.n	8008f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f10:	4b39      	ldr	r3, [pc, #228]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f14:	4a38      	ldr	r2, [pc, #224]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 80a1 	beq.w	8009068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f26:	4b34      	ldr	r3, [pc, #208]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 030c 	and.w	r3, r3, #12
 8008f2e:	2b08      	cmp	r3, #8
 8008f30:	d05c      	beq.n	8008fec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d141      	bne.n	8008fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f3a:	4b31      	ldr	r3, [pc, #196]	@ (8009000 <HAL_RCC_OscConfig+0x478>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f40:	f7fd fb08 	bl	8006554 <HAL_GetTick>
 8008f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f46:	e008      	b.n	8008f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f48:	f7fd fb04 	bl	8006554 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e087      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f5a:	4b27      	ldr	r3, [pc, #156]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1f0      	bne.n	8008f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69da      	ldr	r2, [r3, #28]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f74:	019b      	lsls	r3, r3, #6
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7c:	085b      	lsrs	r3, r3, #1
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	041b      	lsls	r3, r3, #16
 8008f82:	431a      	orrs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f88:	061b      	lsls	r3, r3, #24
 8008f8a:	491b      	ldr	r1, [pc, #108]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f90:	4b1b      	ldr	r3, [pc, #108]	@ (8009000 <HAL_RCC_OscConfig+0x478>)
 8008f92:	2201      	movs	r2, #1
 8008f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f96:	f7fd fadd 	bl	8006554 <HAL_GetTick>
 8008f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f9c:	e008      	b.n	8008fb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f9e:	f7fd fad9 	bl	8006554 <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d901      	bls.n	8008fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e05c      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fb0:	4b11      	ldr	r3, [pc, #68]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0f0      	beq.n	8008f9e <HAL_RCC_OscConfig+0x416>
 8008fbc:	e054      	b.n	8009068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fbe:	4b10      	ldr	r3, [pc, #64]	@ (8009000 <HAL_RCC_OscConfig+0x478>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fc4:	f7fd fac6 	bl	8006554 <HAL_GetTick>
 8008fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fcc:	f7fd fac2 	bl	8006554 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e045      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fde:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f0      	bne.n	8008fcc <HAL_RCC_OscConfig+0x444>
 8008fea:	e03d      	b.n	8009068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d107      	bne.n	8009004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e038      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
 8008ff8:	40023800 	.word	0x40023800
 8008ffc:	40007000 	.word	0x40007000
 8009000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009004:	4b1b      	ldr	r3, [pc, #108]	@ (8009074 <HAL_RCC_OscConfig+0x4ec>)
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d028      	beq.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800901c:	429a      	cmp	r2, r3
 800901e:	d121      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800902a:	429a      	cmp	r2, r3
 800902c:	d11a      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009034:	4013      	ands	r3, r2
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800903a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800903c:	4293      	cmp	r3, r2
 800903e:	d111      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904a:	085b      	lsrs	r3, r3, #1
 800904c:	3b01      	subs	r3, #1
 800904e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009050:	429a      	cmp	r2, r3
 8009052:	d107      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009060:	429a      	cmp	r2, r3
 8009062:	d001      	beq.n	8009068 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e000      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40023800 	.word	0x40023800

08009078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e0cc      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800908c:	4b68      	ldr	r3, [pc, #416]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d90c      	bls.n	80090b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800909a:	4b65      	ldr	r3, [pc, #404]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	b2d2      	uxtb	r2, r2
 80090a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090a2:	4b63      	ldr	r3, [pc, #396]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d001      	beq.n	80090b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e0b8      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d020      	beq.n	8009102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090cc:	4b59      	ldr	r3, [pc, #356]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	4a58      	ldr	r2, [pc, #352]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80090d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0308 	and.w	r3, r3, #8
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090e4:	4b53      	ldr	r3, [pc, #332]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	4a52      	ldr	r2, [pc, #328]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80090ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090f0:	4b50      	ldr	r3, [pc, #320]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	494d      	ldr	r1, [pc, #308]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d044      	beq.n	8009198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d107      	bne.n	8009126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009116:	4b47      	ldr	r3, [pc, #284]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d119      	bne.n	8009156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e07f      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d003      	beq.n	8009136 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009132:	2b03      	cmp	r3, #3
 8009134:	d107      	bne.n	8009146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009136:	4b3f      	ldr	r3, [pc, #252]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d109      	bne.n	8009156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e06f      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009146:	4b3b      	ldr	r3, [pc, #236]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e067      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009156:	4b37      	ldr	r3, [pc, #220]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f023 0203 	bic.w	r2, r3, #3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	4934      	ldr	r1, [pc, #208]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009164:	4313      	orrs	r3, r2
 8009166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009168:	f7fd f9f4 	bl	8006554 <HAL_GetTick>
 800916c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800916e:	e00a      	b.n	8009186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009170:	f7fd f9f0 	bl	8006554 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800917e:	4293      	cmp	r3, r2
 8009180:	d901      	bls.n	8009186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e04f      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009186:	4b2b      	ldr	r3, [pc, #172]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 020c 	and.w	r2, r3, #12
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	429a      	cmp	r2, r3
 8009196:	d1eb      	bne.n	8009170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009198:	4b25      	ldr	r3, [pc, #148]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d20c      	bcs.n	80091c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091a6:	4b22      	ldr	r3, [pc, #136]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ae:	4b20      	ldr	r3, [pc, #128]	@ (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d001      	beq.n	80091c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e032      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d008      	beq.n	80091de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091cc:	4b19      	ldr	r3, [pc, #100]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	4916      	ldr	r1, [pc, #88]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0308 	and.w	r3, r3, #8
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d009      	beq.n	80091fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091ea:	4b12      	ldr	r3, [pc, #72]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	00db      	lsls	r3, r3, #3
 80091f8:	490e      	ldr	r1, [pc, #56]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80091fe:	f000 f821 	bl	8009244 <HAL_RCC_GetSysClockFreq>
 8009202:	4602      	mov	r2, r0
 8009204:	4b0b      	ldr	r3, [pc, #44]	@ (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	091b      	lsrs	r3, r3, #4
 800920a:	f003 030f 	and.w	r3, r3, #15
 800920e:	490a      	ldr	r1, [pc, #40]	@ (8009238 <HAL_RCC_ClockConfig+0x1c0>)
 8009210:	5ccb      	ldrb	r3, [r1, r3]
 8009212:	fa22 f303 	lsr.w	r3, r2, r3
 8009216:	4a09      	ldr	r2, [pc, #36]	@ (800923c <HAL_RCC_ClockConfig+0x1c4>)
 8009218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800921a:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <HAL_RCC_ClockConfig+0x1c8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4618      	mov	r0, r3
 8009220:	f7fd f954 	bl	80064cc <HAL_InitTick>

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40023c00 	.word	0x40023c00
 8009234:	40023800 	.word	0x40023800
 8009238:	0800f360 	.word	0x0800f360
 800923c:	20000004 	.word	0x20000004
 8009240:	20000008 	.word	0x20000008

08009244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009248:	b094      	sub	sp, #80	@ 0x50
 800924a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8009254:	2300      	movs	r3, #0
 8009256:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800925c:	4b79      	ldr	r3, [pc, #484]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f003 030c 	and.w	r3, r3, #12
 8009264:	2b08      	cmp	r3, #8
 8009266:	d00d      	beq.n	8009284 <HAL_RCC_GetSysClockFreq+0x40>
 8009268:	2b08      	cmp	r3, #8
 800926a:	f200 80e1 	bhi.w	8009430 <HAL_RCC_GetSysClockFreq+0x1ec>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <HAL_RCC_GetSysClockFreq+0x34>
 8009272:	2b04      	cmp	r3, #4
 8009274:	d003      	beq.n	800927e <HAL_RCC_GetSysClockFreq+0x3a>
 8009276:	e0db      	b.n	8009430 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009278:	4b73      	ldr	r3, [pc, #460]	@ (8009448 <HAL_RCC_GetSysClockFreq+0x204>)
 800927a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800927c:	e0db      	b.n	8009436 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800927e:	4b73      	ldr	r3, [pc, #460]	@ (800944c <HAL_RCC_GetSysClockFreq+0x208>)
 8009280:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009282:	e0d8      	b.n	8009436 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009284:	4b6f      	ldr	r3, [pc, #444]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800928c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800928e:	4b6d      	ldr	r3, [pc, #436]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d063      	beq.n	8009362 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800929a:	4b6a      	ldr	r3, [pc, #424]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	099b      	lsrs	r3, r3, #6
 80092a0:	2200      	movs	r2, #0
 80092a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80092a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80092ae:	2300      	movs	r3, #0
 80092b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80092b6:	4622      	mov	r2, r4
 80092b8:	462b      	mov	r3, r5
 80092ba:	f04f 0000 	mov.w	r0, #0
 80092be:	f04f 0100 	mov.w	r1, #0
 80092c2:	0159      	lsls	r1, r3, #5
 80092c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092c8:	0150      	lsls	r0, r2, #5
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4621      	mov	r1, r4
 80092d0:	1a51      	subs	r1, r2, r1
 80092d2:	6139      	str	r1, [r7, #16]
 80092d4:	4629      	mov	r1, r5
 80092d6:	eb63 0301 	sbc.w	r3, r3, r1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092e8:	4659      	mov	r1, fp
 80092ea:	018b      	lsls	r3, r1, #6
 80092ec:	4651      	mov	r1, sl
 80092ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092f2:	4651      	mov	r1, sl
 80092f4:	018a      	lsls	r2, r1, #6
 80092f6:	4651      	mov	r1, sl
 80092f8:	ebb2 0801 	subs.w	r8, r2, r1
 80092fc:	4659      	mov	r1, fp
 80092fe:	eb63 0901 	sbc.w	r9, r3, r1
 8009302:	f04f 0200 	mov.w	r2, #0
 8009306:	f04f 0300 	mov.w	r3, #0
 800930a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800930e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009312:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009316:	4690      	mov	r8, r2
 8009318:	4699      	mov	r9, r3
 800931a:	4623      	mov	r3, r4
 800931c:	eb18 0303 	adds.w	r3, r8, r3
 8009320:	60bb      	str	r3, [r7, #8]
 8009322:	462b      	mov	r3, r5
 8009324:	eb49 0303 	adc.w	r3, r9, r3
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	f04f 0200 	mov.w	r2, #0
 800932e:	f04f 0300 	mov.w	r3, #0
 8009332:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009336:	4629      	mov	r1, r5
 8009338:	024b      	lsls	r3, r1, #9
 800933a:	4621      	mov	r1, r4
 800933c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009340:	4621      	mov	r1, r4
 8009342:	024a      	lsls	r2, r1, #9
 8009344:	4610      	mov	r0, r2
 8009346:	4619      	mov	r1, r3
 8009348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800934a:	2200      	movs	r2, #0
 800934c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800934e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009350:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009354:	f7f7 fc28 	bl	8000ba8 <__aeabi_uldivmod>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4613      	mov	r3, r2
 800935e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009360:	e058      	b.n	8009414 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009362:	4b38      	ldr	r3, [pc, #224]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	099b      	lsrs	r3, r3, #6
 8009368:	2200      	movs	r2, #0
 800936a:	4618      	mov	r0, r3
 800936c:	4611      	mov	r1, r2
 800936e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009372:	623b      	str	r3, [r7, #32]
 8009374:	2300      	movs	r3, #0
 8009376:	627b      	str	r3, [r7, #36]	@ 0x24
 8009378:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800937c:	4642      	mov	r2, r8
 800937e:	464b      	mov	r3, r9
 8009380:	f04f 0000 	mov.w	r0, #0
 8009384:	f04f 0100 	mov.w	r1, #0
 8009388:	0159      	lsls	r1, r3, #5
 800938a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800938e:	0150      	lsls	r0, r2, #5
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4641      	mov	r1, r8
 8009396:	ebb2 0a01 	subs.w	sl, r2, r1
 800939a:	4649      	mov	r1, r9
 800939c:	eb63 0b01 	sbc.w	fp, r3, r1
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80093ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80093b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80093b4:	ebb2 040a 	subs.w	r4, r2, sl
 80093b8:	eb63 050b 	sbc.w	r5, r3, fp
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	00eb      	lsls	r3, r5, #3
 80093c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093ca:	00e2      	lsls	r2, r4, #3
 80093cc:	4614      	mov	r4, r2
 80093ce:	461d      	mov	r5, r3
 80093d0:	4643      	mov	r3, r8
 80093d2:	18e3      	adds	r3, r4, r3
 80093d4:	603b      	str	r3, [r7, #0]
 80093d6:	464b      	mov	r3, r9
 80093d8:	eb45 0303 	adc.w	r3, r5, r3
 80093dc:	607b      	str	r3, [r7, #4]
 80093de:	f04f 0200 	mov.w	r2, #0
 80093e2:	f04f 0300 	mov.w	r3, #0
 80093e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093ea:	4629      	mov	r1, r5
 80093ec:	028b      	lsls	r3, r1, #10
 80093ee:	4621      	mov	r1, r4
 80093f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093f4:	4621      	mov	r1, r4
 80093f6:	028a      	lsls	r2, r1, #10
 80093f8:	4610      	mov	r0, r2
 80093fa:	4619      	mov	r1, r3
 80093fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093fe:	2200      	movs	r2, #0
 8009400:	61bb      	str	r3, [r7, #24]
 8009402:	61fa      	str	r2, [r7, #28]
 8009404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009408:	f7f7 fbce 	bl	8000ba8 <__aeabi_uldivmod>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4613      	mov	r3, r2
 8009412:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009414:	4b0b      	ldr	r3, [pc, #44]	@ (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	0c1b      	lsrs	r3, r3, #16
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	3301      	adds	r3, #1
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009424:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009428:	fbb2 f3f3 	udiv	r3, r2, r3
 800942c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800942e:	e002      	b.n	8009436 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009430:	4b05      	ldr	r3, [pc, #20]	@ (8009448 <HAL_RCC_GetSysClockFreq+0x204>)
 8009432:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009438:	4618      	mov	r0, r3
 800943a:	3750      	adds	r7, #80	@ 0x50
 800943c:	46bd      	mov	sp, r7
 800943e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009442:	bf00      	nop
 8009444:	40023800 	.word	0x40023800
 8009448:	00f42400 	.word	0x00f42400
 800944c:	007a1200 	.word	0x007a1200

08009450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009454:	4b03      	ldr	r3, [pc, #12]	@ (8009464 <HAL_RCC_GetHCLKFreq+0x14>)
 8009456:	681b      	ldr	r3, [r3, #0]
}
 8009458:	4618      	mov	r0, r3
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	20000004 	.word	0x20000004

08009468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800946c:	f7ff fff0 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 8009470:	4602      	mov	r2, r0
 8009472:	4b05      	ldr	r3, [pc, #20]	@ (8009488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	0a9b      	lsrs	r3, r3, #10
 8009478:	f003 0307 	and.w	r3, r3, #7
 800947c:	4903      	ldr	r1, [pc, #12]	@ (800948c <HAL_RCC_GetPCLK1Freq+0x24>)
 800947e:	5ccb      	ldrb	r3, [r1, r3]
 8009480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009484:	4618      	mov	r0, r3
 8009486:	bd80      	pop	{r7, pc}
 8009488:	40023800 	.word	0x40023800
 800948c:	0800f370 	.word	0x0800f370

08009490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009494:	f7ff ffdc 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 8009498:	4602      	mov	r2, r0
 800949a:	4b05      	ldr	r3, [pc, #20]	@ (80094b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	0b5b      	lsrs	r3, r3, #13
 80094a0:	f003 0307 	and.w	r3, r3, #7
 80094a4:	4903      	ldr	r1, [pc, #12]	@ (80094b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094a6:	5ccb      	ldrb	r3, [r1, r3]
 80094a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40023800 	.word	0x40023800
 80094b4:	0800f370 	.word	0x0800f370

080094b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e042      	b.n	8009550 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d106      	bne.n	80094e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7fc fd10 	bl	8005f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2224      	movs	r2, #36	@ 0x24
 80094e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fe09 	bl	800a114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	695a      	ldr	r2, [r3, #20]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	@ 0x28
 800955c:	af02      	add	r7, sp, #8
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	603b      	str	r3, [r7, #0]
 8009564:	4613      	mov	r3, r2
 8009566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009568:	2300      	movs	r3, #0
 800956a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b20      	cmp	r3, #32
 8009576:	d175      	bne.n	8009664 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <HAL_UART_Transmit+0x2c>
 800957e:	88fb      	ldrh	r3, [r7, #6]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e06e      	b.n	8009666 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2221      	movs	r2, #33	@ 0x21
 8009592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009596:	f7fc ffdd 	bl	8006554 <HAL_GetTick>
 800959a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	88fa      	ldrh	r2, [r7, #6]
 80095a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	88fa      	ldrh	r2, [r7, #6]
 80095a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095b0:	d108      	bne.n	80095c4 <HAL_UART_Transmit+0x6c>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d104      	bne.n	80095c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	61bb      	str	r3, [r7, #24]
 80095c2:	e003      	b.n	80095cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095c8:	2300      	movs	r3, #0
 80095ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80095cc:	e02e      	b.n	800962c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2200      	movs	r2, #0
 80095d6:	2180      	movs	r1, #128	@ 0x80
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 fb6d 	bl	8009cb8 <UART_WaitOnFlagUntilTimeout>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d005      	beq.n	80095f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2220      	movs	r2, #32
 80095e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e03a      	b.n	8009666 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10b      	bne.n	800960e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	3302      	adds	r3, #2
 800960a:	61bb      	str	r3, [r7, #24]
 800960c:	e007      	b.n	800961e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	781a      	ldrb	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	3301      	adds	r3, #1
 800961c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009622:	b29b      	uxth	r3, r3
 8009624:	3b01      	subs	r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009630:	b29b      	uxth	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1cb      	bne.n	80095ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2200      	movs	r2, #0
 800963e:	2140      	movs	r1, #64	@ 0x40
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 fb39 	bl	8009cb8 <UART_WaitOnFlagUntilTimeout>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d005      	beq.n	8009658 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2220      	movs	r2, #32
 8009650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e006      	b.n	8009666 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2220      	movs	r2, #32
 800965c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	e000      	b.n	8009666 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009664:	2302      	movs	r3, #2
  }
}
 8009666:	4618      	mov	r0, r3
 8009668:	3720      	adds	r7, #32
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800966e:	b480      	push	{r7}
 8009670:	b085      	sub	sp, #20
 8009672:	af00      	add	r7, sp, #0
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	60b9      	str	r1, [r7, #8]
 8009678:	4613      	mov	r3, r2
 800967a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b20      	cmp	r3, #32
 8009686:	d121      	bne.n	80096cc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <HAL_UART_Transmit_IT+0x26>
 800968e:	88fb      	ldrh	r3, [r7, #6]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e01a      	b.n	80096ce <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	88fa      	ldrh	r2, [r7, #6]
 80096a2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	88fa      	ldrh	r2, [r7, #6]
 80096a8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2221      	movs	r2, #33	@ 0x21
 80096b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68da      	ldr	r2, [r3, #12]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80096c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	e000      	b.n	80096ce <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80096cc:	2302      	movs	r3, #2
  }
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	4613      	mov	r3, r2
 80096e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d112      	bne.n	800971a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <HAL_UART_Receive_IT+0x26>
 80096fa:	88fb      	ldrh	r3, [r7, #6]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e00b      	b.n	800971c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800970a:	88fb      	ldrh	r3, [r7, #6]
 800970c:	461a      	mov	r2, r3
 800970e:	68b9      	ldr	r1, [r7, #8]
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 fb2a 	bl	8009d6a <UART_Start_Receive_IT>
 8009716:	4603      	mov	r3, r0
 8009718:	e000      	b.n	800971c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800971a:	2302      	movs	r3, #2
  }
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b0ba      	sub	sp, #232	@ 0xe8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800974a:	2300      	movs	r3, #0
 800974c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009750:	2300      	movs	r3, #0
 8009752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10f      	bne.n	800978a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800976a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800976e:	f003 0320 	and.w	r3, r3, #32
 8009772:	2b00      	cmp	r3, #0
 8009774:	d009      	beq.n	800978a <HAL_UART_IRQHandler+0x66>
 8009776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fc07 	bl	8009f96 <UART_Receive_IT>
      return;
 8009788:	e273      	b.n	8009c72 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800978a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 80de 	beq.w	8009950 <HAL_UART_IRQHandler+0x22c>
 8009794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	d106      	bne.n	80097ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 80d1 	beq.w	8009950 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <HAL_UART_IRQHandler+0xae>
 80097ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d005      	beq.n	80097d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ca:	f043 0201 	orr.w	r2, r3, #1
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d6:	f003 0304 	and.w	r3, r3, #4
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <HAL_UART_IRQHandler+0xd2>
 80097de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d005      	beq.n	80097f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ee:	f043 0202 	orr.w	r2, r3, #2
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00b      	beq.n	800981a <HAL_UART_IRQHandler+0xf6>
 8009802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d005      	beq.n	800981a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009812:	f043 0204 	orr.w	r2, r3, #4
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800981a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981e:	f003 0308 	and.w	r3, r3, #8
 8009822:	2b00      	cmp	r3, #0
 8009824:	d011      	beq.n	800984a <HAL_UART_IRQHandler+0x126>
 8009826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b00      	cmp	r3, #0
 8009830:	d105      	bne.n	800983e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d005      	beq.n	800984a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009842:	f043 0208 	orr.w	r2, r3, #8
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 820a 	beq.w	8009c68 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009858:	f003 0320 	and.w	r3, r3, #32
 800985c:	2b00      	cmp	r3, #0
 800985e:	d008      	beq.n	8009872 <HAL_UART_IRQHandler+0x14e>
 8009860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fb92 	bl	8009f96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800987c:	2b40      	cmp	r3, #64	@ 0x40
 800987e:	bf0c      	ite	eq
 8009880:	2301      	moveq	r3, #1
 8009882:	2300      	movne	r3, #0
 8009884:	b2db      	uxtb	r3, r3
 8009886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800988e:	f003 0308 	and.w	r3, r3, #8
 8009892:	2b00      	cmp	r3, #0
 8009894:	d103      	bne.n	800989e <HAL_UART_IRQHandler+0x17a>
 8009896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800989a:	2b00      	cmp	r3, #0
 800989c:	d04f      	beq.n	800993e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fa9d 	bl	8009dde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ae:	2b40      	cmp	r3, #64	@ 0x40
 80098b0:	d141      	bne.n	8009936 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3314      	adds	r3, #20
 80098b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3314      	adds	r3, #20
 80098da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80098de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1d9      	bne.n	80098b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009902:	2b00      	cmp	r3, #0
 8009904:	d013      	beq.n	800992e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800990a:	4a8a      	ldr	r2, [pc, #552]	@ (8009b34 <HAL_UART_IRQHandler+0x410>)
 800990c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009912:	4618      	mov	r0, r3
 8009914:	f7fd fcec 	bl	80072f0 <HAL_DMA_Abort_IT>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d016      	beq.n	800994c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009928:	4610      	mov	r0, r2
 800992a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800992c:	e00e      	b.n	800994c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f9ac 	bl	8009c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009934:	e00a      	b.n	800994c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f9a8 	bl	8009c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800993c:	e006      	b.n	800994c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f9a4 	bl	8009c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800994a:	e18d      	b.n	8009c68 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800994c:	bf00      	nop
    return;
 800994e:	e18b      	b.n	8009c68 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009954:	2b01      	cmp	r3, #1
 8009956:	f040 8167 	bne.w	8009c28 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800995a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800995e:	f003 0310 	and.w	r3, r3, #16
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 8160 	beq.w	8009c28 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800996c:	f003 0310 	and.w	r3, r3, #16
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 8159 	beq.w	8009c28 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009976:	2300      	movs	r3, #0
 8009978:	60bb      	str	r3, [r7, #8]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	60bb      	str	r3, [r7, #8]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	60bb      	str	r3, [r7, #8]
 800998a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009996:	2b40      	cmp	r3, #64	@ 0x40
 8009998:	f040 80ce 	bne.w	8009b38 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 80a9 	beq.w	8009b04 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80099b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099ba:	429a      	cmp	r2, r3
 80099bc:	f080 80a2 	bcs.w	8009b04 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099d2:	f000 8088 	beq.w	8009ae6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	330c      	adds	r3, #12
 80099dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	330c      	adds	r3, #12
 80099fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009a02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1d9      	bne.n	80099d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3314      	adds	r3, #20
 8009a28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a34:	f023 0301 	bic.w	r3, r3, #1
 8009a38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3314      	adds	r3, #20
 8009a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e1      	bne.n	8009a22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3314      	adds	r3, #20
 8009a64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3314      	adds	r3, #20
 8009a7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a8a:	e841 2300 	strex	r3, r2, [r1]
 8009a8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1e3      	bne.n	8009a5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	330c      	adds	r3, #12
 8009aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ab6:	f023 0310 	bic.w	r3, r3, #16
 8009aba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	330c      	adds	r3, #12
 8009ac4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009ac8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009aca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009acc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ace:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ad0:	e841 2300 	strex	r3, r2, [r1]
 8009ad4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e3      	bne.n	8009aa4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fd fb95 	bl	8007210 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f8cf 	bl	8009ca0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009b02:	e0b3      	b.n	8009c6c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	f040 80ad 	bne.w	8009c6c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b16:	69db      	ldr	r3, [r3, #28]
 8009b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b1c:	f040 80a6 	bne.w	8009c6c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f8b7 	bl	8009ca0 <HAL_UARTEx_RxEventCallback>
      return;
 8009b32:	e09b      	b.n	8009c6c <HAL_UART_IRQHandler+0x548>
 8009b34:	08009ea5 	.word	0x08009ea5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 808e 	beq.w	8009c70 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 8089 	beq.w	8009c70 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	330c      	adds	r3, #12
 8009b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b68:	e853 3f00 	ldrex	r3, [r3]
 8009b6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	330c      	adds	r3, #12
 8009b7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009b82:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e3      	bne.n	8009b5e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3314      	adds	r3, #20
 8009b9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba0:	e853 3f00 	ldrex	r3, [r3]
 8009ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	f023 0301 	bic.w	r3, r3, #1
 8009bac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3314      	adds	r3, #20
 8009bb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009bba:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e3      	bne.n	8009b96 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2220      	movs	r2, #32
 8009bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	330c      	adds	r3, #12
 8009be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	e853 3f00 	ldrex	r3, [r3]
 8009bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f023 0310 	bic.w	r3, r3, #16
 8009bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	330c      	adds	r3, #12
 8009bfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009c00:	61fa      	str	r2, [r7, #28]
 8009c02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c04:	69b9      	ldr	r1, [r7, #24]
 8009c06:	69fa      	ldr	r2, [r7, #28]
 8009c08:	e841 2300 	strex	r3, r2, [r1]
 8009c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e3      	bne.n	8009bdc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2202      	movs	r2, #2
 8009c18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f83d 	bl	8009ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c26:	e023      	b.n	8009c70 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d009      	beq.n	8009c48 <HAL_UART_IRQHandler+0x524>
 8009c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f940 	bl	8009ec6 <UART_Transmit_IT>
    return;
 8009c46:	e014      	b.n	8009c72 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00e      	beq.n	8009c72 <HAL_UART_IRQHandler+0x54e>
 8009c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d008      	beq.n	8009c72 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f980 	bl	8009f66 <UART_EndTransmit_IT>
    return;
 8009c66:	e004      	b.n	8009c72 <HAL_UART_IRQHandler+0x54e>
    return;
 8009c68:	bf00      	nop
 8009c6a:	e002      	b.n	8009c72 <HAL_UART_IRQHandler+0x54e>
      return;
 8009c6c:	bf00      	nop
 8009c6e:	e000      	b.n	8009c72 <HAL_UART_IRQHandler+0x54e>
      return;
 8009c70:	bf00      	nop
  }
}
 8009c72:	37e8      	adds	r7, #232	@ 0xe8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cc8:	e03b      	b.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd0:	d037      	beq.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cd2:	f7fc fc3f 	bl	8006554 <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	6a3a      	ldr	r2, [r7, #32]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d302      	bcc.n	8009ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e03a      	b.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d023      	beq.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2b80      	cmp	r3, #128	@ 0x80
 8009cfe:	d020      	beq.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2b40      	cmp	r3, #64	@ 0x40
 8009d04:	d01d      	beq.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0308 	and.w	r3, r3, #8
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d116      	bne.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	617b      	str	r3, [r7, #20]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	617b      	str	r3, [r7, #20]
 8009d28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 f857 	bl	8009dde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2208      	movs	r2, #8
 8009d34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e00f      	b.n	8009d62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	bf0c      	ite	eq
 8009d52:	2301      	moveq	r3, #1
 8009d54:	2300      	movne	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	461a      	mov	r2, r3
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d0b4      	beq.n	8009cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b085      	sub	sp, #20
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	4613      	mov	r3, r2
 8009d76:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	88fa      	ldrh	r2, [r7, #6]
 8009d82:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	88fa      	ldrh	r2, [r7, #6]
 8009d88:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2222      	movs	r2, #34	@ 0x22
 8009d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d007      	beq.n	8009db0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009dae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	695a      	ldr	r2, [r3, #20]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f042 0201 	orr.w	r2, r2, #1
 8009dbe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f042 0220 	orr.w	r2, r2, #32
 8009dce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b095      	sub	sp, #84	@ 0x54
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	330c      	adds	r3, #12
 8009dec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	330c      	adds	r3, #12
 8009e04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e06:	643a      	str	r2, [r7, #64]	@ 0x40
 8009e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e0e:	e841 2300 	strex	r3, r2, [r1]
 8009e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e5      	bne.n	8009de6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3314      	adds	r3, #20
 8009e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	e853 3f00 	ldrex	r3, [r3]
 8009e28:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	f023 0301 	bic.w	r3, r3, #1
 8009e30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3314      	adds	r3, #20
 8009e38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e42:	e841 2300 	strex	r3, r2, [r1]
 8009e46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1e5      	bne.n	8009e1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d119      	bne.n	8009e8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	330c      	adds	r3, #12
 8009e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	e853 3f00 	ldrex	r3, [r3]
 8009e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f023 0310 	bic.w	r3, r3, #16
 8009e6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	330c      	adds	r3, #12
 8009e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e76:	61ba      	str	r2, [r7, #24]
 8009e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	6979      	ldr	r1, [r7, #20]
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	613b      	str	r3, [r7, #16]
   return(result);
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e5      	bne.n	8009e56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009e98:	bf00      	nop
 8009e9a:	3754      	adds	r7, #84	@ 0x54
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f7ff fee7 	bl	8009c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ebe:	bf00      	nop
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b21      	cmp	r3, #33	@ 0x21
 8009ed8:	d13e      	bne.n	8009f58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ee2:	d114      	bne.n	8009f0e <UART_Transmit_IT+0x48>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d110      	bne.n	8009f0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a1b      	ldr	r3, [r3, #32]
 8009ef0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	1c9a      	adds	r2, r3, #2
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	621a      	str	r2, [r3, #32]
 8009f0c:	e008      	b.n	8009f20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	1c59      	adds	r1, r3, #1
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	6211      	str	r1, [r2, #32]
 8009f18:	781a      	ldrb	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	3b01      	subs	r3, #1
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10f      	bne.n	8009f54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68da      	ldr	r2, [r3, #12]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	e000      	b.n	8009f5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f58:	2302      	movs	r3, #2
  }
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b082      	sub	sp, #8
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2220      	movs	r2, #32
 8009f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7ff fe76 	bl	8009c78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b08c      	sub	sp, #48	@ 0x30
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b22      	cmp	r3, #34	@ 0x22
 8009fb0:	f040 80aa 	bne.w	800a108 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fbc:	d115      	bne.n	8009fea <UART_Receive_IT+0x54>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d111      	bne.n	8009fea <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe2:	1c9a      	adds	r2, r3, #2
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	629a      	str	r2, [r3, #40]	@ 0x28
 8009fe8:	e024      	b.n	800a034 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ff8:	d007      	beq.n	800a00a <UART_Receive_IT+0x74>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <UART_Receive_IT+0x82>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	b2da      	uxtb	r2, r3
 800a012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a014:	701a      	strb	r2, [r3, #0]
 800a016:	e008      	b.n	800a02a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a024:	b2da      	uxtb	r2, r3
 800a026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a028:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a038:	b29b      	uxth	r3, r3
 800a03a:	3b01      	subs	r3, #1
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	4619      	mov	r1, r3
 800a042:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a044:	2b00      	cmp	r3, #0
 800a046:	d15d      	bne.n	800a104 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68da      	ldr	r2, [r3, #12]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 0220 	bic.w	r2, r2, #32
 800a056:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	695a      	ldr	r2, [r3, #20]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f022 0201 	bic.w	r2, r2, #1
 800a076:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2220      	movs	r2, #32
 800a07c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d135      	bne.n	800a0fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	330c      	adds	r3, #12
 800a09a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	e853 3f00 	ldrex	r3, [r3]
 800a0a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	f023 0310 	bic.w	r3, r3, #16
 800a0aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	330c      	adds	r3, #12
 800a0b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0b4:	623a      	str	r2, [r7, #32]
 800a0b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b8:	69f9      	ldr	r1, [r7, #28]
 800a0ba:	6a3a      	ldr	r2, [r7, #32]
 800a0bc:	e841 2300 	strex	r3, r2, [r1]
 800a0c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e5      	bne.n	800a094 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0310 	and.w	r3, r3, #16
 800a0d2:	2b10      	cmp	r3, #16
 800a0d4:	d10a      	bne.n	800a0ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	60fb      	str	r3, [r7, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	60fb      	str	r3, [r7, #12]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff fdd4 	bl	8009ca0 <HAL_UARTEx_RxEventCallback>
 800a0f8:	e002      	b.n	800a100 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7fb fb40 	bl	8005780 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	e002      	b.n	800a10a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	e000      	b.n	800a10a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a108:	2302      	movs	r3, #2
  }
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3730      	adds	r7, #48	@ 0x30
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a118:	b0c0      	sub	sp, #256	@ 0x100
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a12c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a130:	68d9      	ldr	r1, [r3, #12]
 800a132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	ea40 0301 	orr.w	r3, r0, r1
 800a13c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a13e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	431a      	orrs	r2, r3
 800a14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	431a      	orrs	r2, r3
 800a154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a16c:	f021 010c 	bic.w	r1, r1, #12
 800a170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a17a:	430b      	orrs	r3, r1
 800a17c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a17e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a18e:	6999      	ldr	r1, [r3, #24]
 800a190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	ea40 0301 	orr.w	r3, r0, r1
 800a19a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a19c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	4b8f      	ldr	r3, [pc, #572]	@ (800a3e0 <UART_SetConfig+0x2cc>)
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d005      	beq.n	800a1b4 <UART_SetConfig+0xa0>
 800a1a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4b8d      	ldr	r3, [pc, #564]	@ (800a3e4 <UART_SetConfig+0x2d0>)
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d104      	bne.n	800a1be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a1b4:	f7ff f96c 	bl	8009490 <HAL_RCC_GetPCLK2Freq>
 800a1b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a1bc:	e003      	b.n	800a1c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a1be:	f7ff f953 	bl	8009468 <HAL_RCC_GetPCLK1Freq>
 800a1c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ca:	69db      	ldr	r3, [r3, #28]
 800a1cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1d0:	f040 810c 	bne.w	800a3ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a1d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a1de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a1e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	1891      	adds	r1, r2, r2
 800a1ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a1ee:	415b      	adcs	r3, r3
 800a1f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	eb12 0801 	adds.w	r8, r2, r1
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	eb43 0901 	adc.w	r9, r3, r1
 800a202:	f04f 0200 	mov.w	r2, #0
 800a206:	f04f 0300 	mov.w	r3, #0
 800a20a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a20e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a216:	4690      	mov	r8, r2
 800a218:	4699      	mov	r9, r3
 800a21a:	4623      	mov	r3, r4
 800a21c:	eb18 0303 	adds.w	r3, r8, r3
 800a220:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a224:	462b      	mov	r3, r5
 800a226:	eb49 0303 	adc.w	r3, r9, r3
 800a22a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a22e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a23a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a23e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a242:	460b      	mov	r3, r1
 800a244:	18db      	adds	r3, r3, r3
 800a246:	653b      	str	r3, [r7, #80]	@ 0x50
 800a248:	4613      	mov	r3, r2
 800a24a:	eb42 0303 	adc.w	r3, r2, r3
 800a24e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a250:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a254:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a258:	f7f6 fca6 	bl	8000ba8 <__aeabi_uldivmod>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4b61      	ldr	r3, [pc, #388]	@ (800a3e8 <UART_SetConfig+0x2d4>)
 800a262:	fba3 2302 	umull	r2, r3, r3, r2
 800a266:	095b      	lsrs	r3, r3, #5
 800a268:	011c      	lsls	r4, r3, #4
 800a26a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a274:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a278:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a27c:	4642      	mov	r2, r8
 800a27e:	464b      	mov	r3, r9
 800a280:	1891      	adds	r1, r2, r2
 800a282:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a284:	415b      	adcs	r3, r3
 800a286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a288:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a28c:	4641      	mov	r1, r8
 800a28e:	eb12 0a01 	adds.w	sl, r2, r1
 800a292:	4649      	mov	r1, r9
 800a294:	eb43 0b01 	adc.w	fp, r3, r1
 800a298:	f04f 0200 	mov.w	r2, #0
 800a29c:	f04f 0300 	mov.w	r3, #0
 800a2a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a2a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a2a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2ac:	4692      	mov	sl, r2
 800a2ae:	469b      	mov	fp, r3
 800a2b0:	4643      	mov	r3, r8
 800a2b2:	eb1a 0303 	adds.w	r3, sl, r3
 800a2b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a2ba:	464b      	mov	r3, r9
 800a2bc:	eb4b 0303 	adc.w	r3, fp, r3
 800a2c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a2d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a2d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	18db      	adds	r3, r3, r3
 800a2dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2de:	4613      	mov	r3, r2
 800a2e0:	eb42 0303 	adc.w	r3, r2, r3
 800a2e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a2ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a2ee:	f7f6 fc5b 	bl	8000ba8 <__aeabi_uldivmod>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	4b3b      	ldr	r3, [pc, #236]	@ (800a3e8 <UART_SetConfig+0x2d4>)
 800a2fa:	fba3 2301 	umull	r2, r3, r3, r1
 800a2fe:	095b      	lsrs	r3, r3, #5
 800a300:	2264      	movs	r2, #100	@ 0x64
 800a302:	fb02 f303 	mul.w	r3, r2, r3
 800a306:	1acb      	subs	r3, r1, r3
 800a308:	00db      	lsls	r3, r3, #3
 800a30a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a30e:	4b36      	ldr	r3, [pc, #216]	@ (800a3e8 <UART_SetConfig+0x2d4>)
 800a310:	fba3 2302 	umull	r2, r3, r3, r2
 800a314:	095b      	lsrs	r3, r3, #5
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a31c:	441c      	add	r4, r3
 800a31e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a322:	2200      	movs	r2, #0
 800a324:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a328:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a32c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a330:	4642      	mov	r2, r8
 800a332:	464b      	mov	r3, r9
 800a334:	1891      	adds	r1, r2, r2
 800a336:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a338:	415b      	adcs	r3, r3
 800a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a33c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a340:	4641      	mov	r1, r8
 800a342:	1851      	adds	r1, r2, r1
 800a344:	6339      	str	r1, [r7, #48]	@ 0x30
 800a346:	4649      	mov	r1, r9
 800a348:	414b      	adcs	r3, r1
 800a34a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a34c:	f04f 0200 	mov.w	r2, #0
 800a350:	f04f 0300 	mov.w	r3, #0
 800a354:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a358:	4659      	mov	r1, fp
 800a35a:	00cb      	lsls	r3, r1, #3
 800a35c:	4651      	mov	r1, sl
 800a35e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a362:	4651      	mov	r1, sl
 800a364:	00ca      	lsls	r2, r1, #3
 800a366:	4610      	mov	r0, r2
 800a368:	4619      	mov	r1, r3
 800a36a:	4603      	mov	r3, r0
 800a36c:	4642      	mov	r2, r8
 800a36e:	189b      	adds	r3, r3, r2
 800a370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a374:	464b      	mov	r3, r9
 800a376:	460a      	mov	r2, r1
 800a378:	eb42 0303 	adc.w	r3, r2, r3
 800a37c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a38c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a394:	460b      	mov	r3, r1
 800a396:	18db      	adds	r3, r3, r3
 800a398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a39a:	4613      	mov	r3, r2
 800a39c:	eb42 0303 	adc.w	r3, r2, r3
 800a3a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a3a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a3aa:	f7f6 fbfd 	bl	8000ba8 <__aeabi_uldivmod>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e8 <UART_SetConfig+0x2d4>)
 800a3b4:	fba3 1302 	umull	r1, r3, r3, r2
 800a3b8:	095b      	lsrs	r3, r3, #5
 800a3ba:	2164      	movs	r1, #100	@ 0x64
 800a3bc:	fb01 f303 	mul.w	r3, r1, r3
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	3332      	adds	r3, #50	@ 0x32
 800a3c6:	4a08      	ldr	r2, [pc, #32]	@ (800a3e8 <UART_SetConfig+0x2d4>)
 800a3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a3cc:	095b      	lsrs	r3, r3, #5
 800a3ce:	f003 0207 	and.w	r2, r3, #7
 800a3d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4422      	add	r2, r4
 800a3da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a3dc:	e106      	b.n	800a5ec <UART_SetConfig+0x4d8>
 800a3de:	bf00      	nop
 800a3e0:	40011000 	.word	0x40011000
 800a3e4:	40011400 	.word	0x40011400
 800a3e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a3ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a3f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a3fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a3fe:	4642      	mov	r2, r8
 800a400:	464b      	mov	r3, r9
 800a402:	1891      	adds	r1, r2, r2
 800a404:	6239      	str	r1, [r7, #32]
 800a406:	415b      	adcs	r3, r3
 800a408:	627b      	str	r3, [r7, #36]	@ 0x24
 800a40a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a40e:	4641      	mov	r1, r8
 800a410:	1854      	adds	r4, r2, r1
 800a412:	4649      	mov	r1, r9
 800a414:	eb43 0501 	adc.w	r5, r3, r1
 800a418:	f04f 0200 	mov.w	r2, #0
 800a41c:	f04f 0300 	mov.w	r3, #0
 800a420:	00eb      	lsls	r3, r5, #3
 800a422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a426:	00e2      	lsls	r2, r4, #3
 800a428:	4614      	mov	r4, r2
 800a42a:	461d      	mov	r5, r3
 800a42c:	4643      	mov	r3, r8
 800a42e:	18e3      	adds	r3, r4, r3
 800a430:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a434:	464b      	mov	r3, r9
 800a436:	eb45 0303 	adc.w	r3, r5, r3
 800a43a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a43e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a44a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a44e:	f04f 0200 	mov.w	r2, #0
 800a452:	f04f 0300 	mov.w	r3, #0
 800a456:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a45a:	4629      	mov	r1, r5
 800a45c:	008b      	lsls	r3, r1, #2
 800a45e:	4621      	mov	r1, r4
 800a460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a464:	4621      	mov	r1, r4
 800a466:	008a      	lsls	r2, r1, #2
 800a468:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a46c:	f7f6 fb9c 	bl	8000ba8 <__aeabi_uldivmod>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4b60      	ldr	r3, [pc, #384]	@ (800a5f8 <UART_SetConfig+0x4e4>)
 800a476:	fba3 2302 	umull	r2, r3, r3, r2
 800a47a:	095b      	lsrs	r3, r3, #5
 800a47c:	011c      	lsls	r4, r3, #4
 800a47e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a482:	2200      	movs	r2, #0
 800a484:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a488:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a48c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a490:	4642      	mov	r2, r8
 800a492:	464b      	mov	r3, r9
 800a494:	1891      	adds	r1, r2, r2
 800a496:	61b9      	str	r1, [r7, #24]
 800a498:	415b      	adcs	r3, r3
 800a49a:	61fb      	str	r3, [r7, #28]
 800a49c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a4a0:	4641      	mov	r1, r8
 800a4a2:	1851      	adds	r1, r2, r1
 800a4a4:	6139      	str	r1, [r7, #16]
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	414b      	adcs	r3, r1
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	f04f 0200 	mov.w	r2, #0
 800a4b0:	f04f 0300 	mov.w	r3, #0
 800a4b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a4b8:	4659      	mov	r1, fp
 800a4ba:	00cb      	lsls	r3, r1, #3
 800a4bc:	4651      	mov	r1, sl
 800a4be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4c2:	4651      	mov	r1, sl
 800a4c4:	00ca      	lsls	r2, r1, #3
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	4642      	mov	r2, r8
 800a4ce:	189b      	adds	r3, r3, r2
 800a4d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a4d4:	464b      	mov	r3, r9
 800a4d6:	460a      	mov	r2, r1
 800a4d8:	eb42 0303 	adc.w	r3, r2, r3
 800a4dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a4ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a4ec:	f04f 0200 	mov.w	r2, #0
 800a4f0:	f04f 0300 	mov.w	r3, #0
 800a4f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	008b      	lsls	r3, r1, #2
 800a4fc:	4641      	mov	r1, r8
 800a4fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a502:	4641      	mov	r1, r8
 800a504:	008a      	lsls	r2, r1, #2
 800a506:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a50a:	f7f6 fb4d 	bl	8000ba8 <__aeabi_uldivmod>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4611      	mov	r1, r2
 800a514:	4b38      	ldr	r3, [pc, #224]	@ (800a5f8 <UART_SetConfig+0x4e4>)
 800a516:	fba3 2301 	umull	r2, r3, r3, r1
 800a51a:	095b      	lsrs	r3, r3, #5
 800a51c:	2264      	movs	r2, #100	@ 0x64
 800a51e:	fb02 f303 	mul.w	r3, r2, r3
 800a522:	1acb      	subs	r3, r1, r3
 800a524:	011b      	lsls	r3, r3, #4
 800a526:	3332      	adds	r3, #50	@ 0x32
 800a528:	4a33      	ldr	r2, [pc, #204]	@ (800a5f8 <UART_SetConfig+0x4e4>)
 800a52a:	fba2 2303 	umull	r2, r3, r2, r3
 800a52e:	095b      	lsrs	r3, r3, #5
 800a530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a534:	441c      	add	r4, r3
 800a536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a53a:	2200      	movs	r2, #0
 800a53c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a53e:	677a      	str	r2, [r7, #116]	@ 0x74
 800a540:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a544:	4642      	mov	r2, r8
 800a546:	464b      	mov	r3, r9
 800a548:	1891      	adds	r1, r2, r2
 800a54a:	60b9      	str	r1, [r7, #8]
 800a54c:	415b      	adcs	r3, r3
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a554:	4641      	mov	r1, r8
 800a556:	1851      	adds	r1, r2, r1
 800a558:	6039      	str	r1, [r7, #0]
 800a55a:	4649      	mov	r1, r9
 800a55c:	414b      	adcs	r3, r1
 800a55e:	607b      	str	r3, [r7, #4]
 800a560:	f04f 0200 	mov.w	r2, #0
 800a564:	f04f 0300 	mov.w	r3, #0
 800a568:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a56c:	4659      	mov	r1, fp
 800a56e:	00cb      	lsls	r3, r1, #3
 800a570:	4651      	mov	r1, sl
 800a572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a576:	4651      	mov	r1, sl
 800a578:	00ca      	lsls	r2, r1, #3
 800a57a:	4610      	mov	r0, r2
 800a57c:	4619      	mov	r1, r3
 800a57e:	4603      	mov	r3, r0
 800a580:	4642      	mov	r2, r8
 800a582:	189b      	adds	r3, r3, r2
 800a584:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a586:	464b      	mov	r3, r9
 800a588:	460a      	mov	r2, r1
 800a58a:	eb42 0303 	adc.w	r3, r2, r3
 800a58e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	663b      	str	r3, [r7, #96]	@ 0x60
 800a59a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	f04f 0300 	mov.w	r3, #0
 800a5a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a5a8:	4649      	mov	r1, r9
 800a5aa:	008b      	lsls	r3, r1, #2
 800a5ac:	4641      	mov	r1, r8
 800a5ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5b2:	4641      	mov	r1, r8
 800a5b4:	008a      	lsls	r2, r1, #2
 800a5b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a5ba:	f7f6 faf5 	bl	8000ba8 <__aeabi_uldivmod>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f8 <UART_SetConfig+0x4e4>)
 800a5c4:	fba3 1302 	umull	r1, r3, r3, r2
 800a5c8:	095b      	lsrs	r3, r3, #5
 800a5ca:	2164      	movs	r1, #100	@ 0x64
 800a5cc:	fb01 f303 	mul.w	r3, r1, r3
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	011b      	lsls	r3, r3, #4
 800a5d4:	3332      	adds	r3, #50	@ 0x32
 800a5d6:	4a08      	ldr	r2, [pc, #32]	@ (800a5f8 <UART_SetConfig+0x4e4>)
 800a5d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a5dc:	095b      	lsrs	r3, r3, #5
 800a5de:	f003 020f 	and.w	r2, r3, #15
 800a5e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4422      	add	r2, r4
 800a5ea:	609a      	str	r2, [r3, #8]
}
 800a5ec:	bf00      	nop
 800a5ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5f8:	51eb851f 	.word	0x51eb851f

0800a5fc <LL_GPIO_SetPinMode>:
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b08b      	sub	sp, #44	@ 0x2c
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	fa93 f3a3 	rbit	r3, r3
 800a616:	613b      	str	r3, [r7, #16]
  return result;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a622:	2320      	movs	r3, #32
 800a624:	e003      	b.n	800a62e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	fab3 f383 	clz	r3, r3
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	2103      	movs	r1, #3
 800a632:	fa01 f303 	lsl.w	r3, r1, r3
 800a636:	43db      	mvns	r3, r3
 800a638:	401a      	ands	r2, r3
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a63e:	6a3b      	ldr	r3, [r7, #32]
 800a640:	fa93 f3a3 	rbit	r3, r3
 800a644:	61fb      	str	r3, [r7, #28]
  return result;
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a650:	2320      	movs	r3, #32
 800a652:	e003      	b.n	800a65c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	fab3 f383 	clz	r3, r3
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	6879      	ldr	r1, [r7, #4]
 800a660:	fa01 f303 	lsl.w	r3, r1, r3
 800a664:	431a      	orrs	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	601a      	str	r2, [r3, #0]
}
 800a66a:	bf00      	nop
 800a66c:	372c      	adds	r7, #44	@ 0x2c
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <LL_GPIO_SetPinOutputType>:
{
 800a676:	b480      	push	{r7}
 800a678:	b085      	sub	sp, #20
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	43db      	mvns	r3, r3
 800a68a:	401a      	ands	r2, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	6879      	ldr	r1, [r7, #4]
 800a690:	fb01 f303 	mul.w	r3, r1, r3
 800a694:	431a      	orrs	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	605a      	str	r2, [r3, #4]
}
 800a69a:	bf00      	nop
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <LL_GPIO_SetPinSpeed>:
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b08b      	sub	sp, #44	@ 0x2c
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	689a      	ldr	r2, [r3, #8]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	fa93 f3a3 	rbit	r3, r3
 800a6c0:	613b      	str	r3, [r7, #16]
  return result;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d101      	bne.n	800a6d0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a6cc:	2320      	movs	r3, #32
 800a6ce:	e003      	b.n	800a6d8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	fab3 f383 	clz	r3, r3
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	005b      	lsls	r3, r3, #1
 800a6da:	2103      	movs	r1, #3
 800a6dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e0:	43db      	mvns	r3, r3
 800a6e2:	401a      	ands	r2, r3
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	fa93 f3a3 	rbit	r3, r3
 800a6ee:	61fb      	str	r3, [r7, #28]
  return result;
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a6fa:	2320      	movs	r3, #32
 800a6fc:	e003      	b.n	800a706 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a700:	fab3 f383 	clz	r3, r3
 800a704:	b2db      	uxtb	r3, r3
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	fa01 f303 	lsl.w	r3, r1, r3
 800a70e:	431a      	orrs	r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	609a      	str	r2, [r3, #8]
}
 800a714:	bf00      	nop
 800a716:	372c      	adds	r7, #44	@ 0x2c
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <LL_GPIO_SetPinPull>:
{
 800a720:	b480      	push	{r7}
 800a722:	b08b      	sub	sp, #44	@ 0x2c
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	68da      	ldr	r2, [r3, #12]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	fa93 f3a3 	rbit	r3, r3
 800a73a:	613b      	str	r3, [r7, #16]
  return result;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a746:	2320      	movs	r3, #32
 800a748:	e003      	b.n	800a752 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	fab3 f383 	clz	r3, r3
 800a750:	b2db      	uxtb	r3, r3
 800a752:	005b      	lsls	r3, r3, #1
 800a754:	2103      	movs	r1, #3
 800a756:	fa01 f303 	lsl.w	r3, r1, r3
 800a75a:	43db      	mvns	r3, r3
 800a75c:	401a      	ands	r2, r3
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a762:	6a3b      	ldr	r3, [r7, #32]
 800a764:	fa93 f3a3 	rbit	r3, r3
 800a768:	61fb      	str	r3, [r7, #28]
  return result;
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a774:	2320      	movs	r3, #32
 800a776:	e003      	b.n	800a780 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77a:	fab3 f383 	clz	r3, r3
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	005b      	lsls	r3, r3, #1
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	fa01 f303 	lsl.w	r3, r1, r3
 800a788:	431a      	orrs	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	60da      	str	r2, [r3, #12]
}
 800a78e:	bf00      	nop
 800a790:	372c      	adds	r7, #44	@ 0x2c
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <LL_GPIO_SetAFPin_0_7>:
{
 800a79a:	b480      	push	{r7}
 800a79c:	b08b      	sub	sp, #44	@ 0x2c
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6a1a      	ldr	r2, [r3, #32]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	fa93 f3a3 	rbit	r3, r3
 800a7b4:	613b      	str	r3, [r7, #16]
  return result;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	e003      	b.n	800a7cc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	fab3 f383 	clz	r3, r3
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	210f      	movs	r1, #15
 800a7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d4:	43db      	mvns	r3, r3
 800a7d6:	401a      	ands	r2, r3
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	fa93 f3a3 	rbit	r3, r3
 800a7e2:	61fb      	str	r3, [r7, #28]
  return result;
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a7ee:	2320      	movs	r3, #32
 800a7f0:	e003      	b.n	800a7fa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f4:	fab3 f383 	clz	r3, r3
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a802:	431a      	orrs	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	621a      	str	r2, [r3, #32]
}
 800a808:	bf00      	nop
 800a80a:	372c      	adds	r7, #44	@ 0x2c
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <LL_GPIO_SetAFPin_8_15>:
{
 800a814:	b480      	push	{r7}
 800a816:	b08b      	sub	sp, #44	@ 0x2c
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	0a1b      	lsrs	r3, r3, #8
 800a828:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	fa93 f3a3 	rbit	r3, r3
 800a830:	613b      	str	r3, [r7, #16]
  return result;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a83c:	2320      	movs	r3, #32
 800a83e:	e003      	b.n	800a848 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	fab3 f383 	clz	r3, r3
 800a846:	b2db      	uxtb	r3, r3
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	210f      	movs	r1, #15
 800a84c:	fa01 f303 	lsl.w	r3, r1, r3
 800a850:	43db      	mvns	r3, r3
 800a852:	401a      	ands	r2, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	0a1b      	lsrs	r3, r3, #8
 800a858:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a85a:	6a3b      	ldr	r3, [r7, #32]
 800a85c:	fa93 f3a3 	rbit	r3, r3
 800a860:	61fb      	str	r3, [r7, #28]
  return result;
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800a866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a86c:	2320      	movs	r3, #32
 800a86e:	e003      	b.n	800a878 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a872:	fab3 f383 	clz	r3, r3
 800a876:	b2db      	uxtb	r3, r3
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	6879      	ldr	r1, [r7, #4]
 800a87c:	fa01 f303 	lsl.w	r3, r1, r3
 800a880:	431a      	orrs	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a886:	bf00      	nop
 800a888:	372c      	adds	r7, #44	@ 0x2c
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b08a      	sub	sp, #40	@ 0x28
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	fa93 f3a3 	rbit	r3, r3
 800a8b0:	617b      	str	r3, [r7, #20]
  return result;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <LL_GPIO_Init+0x2e>
    return 32U;
 800a8bc:	2320      	movs	r3, #32
 800a8be:	e003      	b.n	800a8c8 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	fab3 f383 	clz	r3, r3
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a8ca:	e057      	b.n	800a97c <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8d8:	4013      	ands	r3, r2
 800a8da:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d049      	beq.n	800a976 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d003      	beq.n	800a8f2 <LL_GPIO_Init+0x60>
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d10d      	bne.n	800a90e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	6a39      	ldr	r1, [r7, #32]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f7ff fed3 	bl	800a6a6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	461a      	mov	r2, r3
 800a906:	6a39      	ldr	r1, [r7, #32]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7ff feb4 	bl	800a676 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	461a      	mov	r2, r3
 800a914:	6a39      	ldr	r1, [r7, #32]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7ff ff02 	bl	800a720 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2b02      	cmp	r3, #2
 800a922:	d121      	bne.n	800a968 <LL_GPIO_Init+0xd6>
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	fa93 f3a3 	rbit	r3, r3
 800a92e:	60bb      	str	r3, [r7, #8]
  return result;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <LL_GPIO_Init+0xac>
    return 32U;
 800a93a:	2320      	movs	r3, #32
 800a93c:	e003      	b.n	800a946 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	fab3 f383 	clz	r3, r3
 800a944:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800a946:	2b07      	cmp	r3, #7
 800a948:	d807      	bhi.n	800a95a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	461a      	mov	r2, r3
 800a950:	6a39      	ldr	r1, [r7, #32]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff ff21 	bl	800a79a <LL_GPIO_SetAFPin_0_7>
 800a958:	e006      	b.n	800a968 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	461a      	mov	r2, r3
 800a960:	6a39      	ldr	r1, [r7, #32]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff ff56 	bl	800a814 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	461a      	mov	r2, r3
 800a96e:	6a39      	ldr	r1, [r7, #32]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7ff fe43 	bl	800a5fc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a978:	3301      	adds	r3, #1
 800a97a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a982:	fa22 f303 	lsr.w	r3, r2, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1a0      	bne.n	800a8cc <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3728      	adds	r7, #40	@ 0x28
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800a994:	b480      	push	{r7}
 800a996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a998:	4b04      	ldr	r3, [pc, #16]	@ (800a9ac <LL_RCC_GetSysClkSource+0x18>)
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f003 030c 	and.w	r3, r3, #12
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	40023800 	.word	0x40023800

0800a9b0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a9b4:	4b04      	ldr	r3, [pc, #16]	@ (800a9c8 <LL_RCC_GetAHBPrescaler+0x18>)
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	40023800 	.word	0x40023800

0800a9cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a9d0:	4b04      	ldr	r3, [pc, #16]	@ (800a9e4 <LL_RCC_GetAPB1Prescaler+0x18>)
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	40023800 	.word	0x40023800

0800a9e8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a9ec:	4b04      	ldr	r3, [pc, #16]	@ (800aa00 <LL_RCC_GetAPB2Prescaler+0x18>)
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	40023800 	.word	0x40023800

0800aa04 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800aa08:	4b04      	ldr	r3, [pc, #16]	@ (800aa1c <LL_RCC_PLL_GetMainSource+0x18>)
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	40023800 	.word	0x40023800

0800aa20 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800aa24:	4b04      	ldr	r3, [pc, #16]	@ (800aa38 <LL_RCC_PLL_GetN+0x18>)
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	099b      	lsrs	r3, r3, #6
 800aa2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	40023800 	.word	0x40023800

0800aa3c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800aa40:	4b04      	ldr	r3, [pc, #16]	@ (800aa54 <LL_RCC_PLL_GetP+0x18>)
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	40023800 	.word	0x40023800

0800aa58 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800aa5c:	4b04      	ldr	r3, [pc, #16]	@ (800aa70 <LL_RCC_PLL_GetDivider+0x18>)
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	40023800 	.word	0x40023800

0800aa74 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800aa7c:	f000 f820 	bl	800aac0 <RCC_GetSystemClockFreq>
 800aa80:	4602      	mov	r2, r0
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 f840 	bl	800ab10 <RCC_GetHCLKClockFreq>
 800aa90:	4602      	mov	r2, r0
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 f84e 	bl	800ab3c <RCC_GetPCLK1ClockFreq>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 f85a 	bl	800ab64 <RCC_GetPCLK2ClockFreq>
 800aab0:	4602      	mov	r2, r0
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	60da      	str	r2, [r3, #12]
}
 800aab6:	bf00      	nop
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800aaca:	f7ff ff63 	bl	800a994 <LL_RCC_GetSysClkSource>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b08      	cmp	r3, #8
 800aad2:	d00c      	beq.n	800aaee <RCC_GetSystemClockFreq+0x2e>
 800aad4:	2b08      	cmp	r3, #8
 800aad6:	d80f      	bhi.n	800aaf8 <RCC_GetSystemClockFreq+0x38>
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <RCC_GetSystemClockFreq+0x22>
 800aadc:	2b04      	cmp	r3, #4
 800aade:	d003      	beq.n	800aae8 <RCC_GetSystemClockFreq+0x28>
 800aae0:	e00a      	b.n	800aaf8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800aae2:	4b09      	ldr	r3, [pc, #36]	@ (800ab08 <RCC_GetSystemClockFreq+0x48>)
 800aae4:	607b      	str	r3, [r7, #4]
      break;
 800aae6:	e00a      	b.n	800aafe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800aae8:	4b08      	ldr	r3, [pc, #32]	@ (800ab0c <RCC_GetSystemClockFreq+0x4c>)
 800aaea:	607b      	str	r3, [r7, #4]
      break;
 800aaec:	e007      	b.n	800aafe <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800aaee:	2008      	movs	r0, #8
 800aaf0:	f000 f84c 	bl	800ab8c <RCC_PLL_GetFreqDomain_SYS>
 800aaf4:	6078      	str	r0, [r7, #4]
      break;
 800aaf6:	e002      	b.n	800aafe <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800aaf8:	4b03      	ldr	r3, [pc, #12]	@ (800ab08 <RCC_GetSystemClockFreq+0x48>)
 800aafa:	607b      	str	r3, [r7, #4]
      break;
 800aafc:	bf00      	nop
  }

  return frequency;
 800aafe:	687b      	ldr	r3, [r7, #4]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	00f42400 	.word	0x00f42400
 800ab0c:	007a1200 	.word	0x007a1200

0800ab10 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800ab18:	f7ff ff4a 	bl	800a9b0 <LL_RCC_GetAHBPrescaler>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	091b      	lsrs	r3, r3, #4
 800ab20:	f003 030f 	and.w	r3, r3, #15
 800ab24:	4a04      	ldr	r2, [pc, #16]	@ (800ab38 <RCC_GetHCLKClockFreq+0x28>)
 800ab26:	5cd3      	ldrb	r3, [r2, r3]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	40d3      	lsrs	r3, r2
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	0800f360 	.word	0x0800f360

0800ab3c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800ab44:	f7ff ff42 	bl	800a9cc <LL_RCC_GetAPB1Prescaler>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	0a9b      	lsrs	r3, r3, #10
 800ab4c:	4a04      	ldr	r2, [pc, #16]	@ (800ab60 <RCC_GetPCLK1ClockFreq+0x24>)
 800ab4e:	5cd3      	ldrb	r3, [r2, r3]
 800ab50:	461a      	mov	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	40d3      	lsrs	r3, r2
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	0800f370 	.word	0x0800f370

0800ab64 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800ab6c:	f7ff ff3c 	bl	800a9e8 <LL_RCC_GetAPB2Prescaler>
 800ab70:	4603      	mov	r3, r0
 800ab72:	0b5b      	lsrs	r3, r3, #13
 800ab74:	4a04      	ldr	r2, [pc, #16]	@ (800ab88 <RCC_GetPCLK2ClockFreq+0x24>)
 800ab76:	5cd3      	ldrb	r3, [r2, r3]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	40d3      	lsrs	r3, r2
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	0800f370 	.word	0x0800f370

0800ab8c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800ab8c:	b590      	push	{r4, r7, lr}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800aba0:	f7ff ff30 	bl	800aa04 <LL_RCC_PLL_GetMainSource>
 800aba4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d004      	beq.n	800abb6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800abb2:	d003      	beq.n	800abbc <RCC_PLL_GetFreqDomain_SYS+0x30>
 800abb4:	e005      	b.n	800abc2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800abb6:	4b12      	ldr	r3, [pc, #72]	@ (800ac00 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800abb8:	617b      	str	r3, [r7, #20]
      break;
 800abba:	e005      	b.n	800abc8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800abbc:	4b11      	ldr	r3, [pc, #68]	@ (800ac04 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800abbe:	617b      	str	r3, [r7, #20]
      break;
 800abc0:	e002      	b.n	800abc8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800abc2:	4b0f      	ldr	r3, [pc, #60]	@ (800ac00 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800abc4:	617b      	str	r3, [r7, #20]
      break;
 800abc6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b08      	cmp	r3, #8
 800abcc:	d113      	bne.n	800abf6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800abce:	f7ff ff43 	bl	800aa58 <LL_RCC_PLL_GetDivider>
 800abd2:	4602      	mov	r2, r0
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	fbb3 f4f2 	udiv	r4, r3, r2
 800abda:	f7ff ff21 	bl	800aa20 <LL_RCC_PLL_GetN>
 800abde:	4603      	mov	r3, r0
 800abe0:	fb03 f404 	mul.w	r4, r3, r4
 800abe4:	f7ff ff2a 	bl	800aa3c <LL_RCC_PLL_GetP>
 800abe8:	4603      	mov	r3, r0
 800abea:	0c1b      	lsrs	r3, r3, #16
 800abec:	3301      	adds	r3, #1
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	fbb4 f3f3 	udiv	r3, r4, r3
 800abf4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800abf6:	693b      	ldr	r3, [r7, #16]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	371c      	adds	r7, #28
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd90      	pop	{r4, r7, pc}
 800ac00:	00f42400 	.word	0x00f42400
 800ac04:	007a1200 	.word	0x007a1200

0800ac08 <LL_SPI_IsEnabled>:
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac18:	2b40      	cmp	r3, #64	@ 0x40
 800ac1a:	d101      	bne.n	800ac20 <LL_SPI_IsEnabled+0x18>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e000      	b.n	800ac22 <LL_SPI_IsEnabled+0x1a>
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	370c      	adds	r7, #12
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <LL_SPI_SetCRCPolynomial>:
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b083      	sub	sp, #12
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	611a      	str	r2, [r3, #16]
}
 800ac42:	bf00      	nop
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff ffd3 	bl	800ac08 <LL_SPI_IsEnabled>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d139      	bne.n	800acdc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac70:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800ac74:	683a      	ldr	r2, [r7, #0]
 800ac76:	6811      	ldr	r1, [r2, #0]
 800ac78:	683a      	ldr	r2, [r7, #0]
 800ac7a:	6852      	ldr	r2, [r2, #4]
 800ac7c:	4311      	orrs	r1, r2
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	6892      	ldr	r2, [r2, #8]
 800ac82:	4311      	orrs	r1, r2
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	68d2      	ldr	r2, [r2, #12]
 800ac88:	4311      	orrs	r1, r2
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	6912      	ldr	r2, [r2, #16]
 800ac8e:	4311      	orrs	r1, r2
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	6952      	ldr	r2, [r2, #20]
 800ac94:	4311      	orrs	r1, r2
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	6992      	ldr	r2, [r2, #24]
 800ac9a:	4311      	orrs	r1, r2
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	69d2      	ldr	r2, [r2, #28]
 800aca0:	4311      	orrs	r1, r2
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	6a12      	ldr	r2, [r2, #32]
 800aca6:	430a      	orrs	r2, r1
 800aca8:	431a      	orrs	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f023 0204 	bic.w	r2, r3, #4
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	0c1b      	lsrs	r3, r3, #16
 800acbc:	431a      	orrs	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acca:	d105      	bne.n	800acd8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd0:	4619      	mov	r1, r3
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7ff ffab 	bl	800ac2e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800acd8:	2300      	movs	r3, #0
 800acda:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	61da      	str	r2, [r3, #28]
  return status;
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <LL_TIM_SetPrescaler>:
{
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ad02:	bf00      	nop
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <LL_TIM_SetAutoReload>:
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b083      	sub	sp, #12
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800ad1e:	bf00      	nop
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <LL_TIM_SetRepetitionCounter>:
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b083      	sub	sp, #12
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ad3a:	bf00      	nop
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <LL_TIM_OC_SetCompareCH1>:
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800ad56:	bf00      	nop
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <LL_TIM_OC_SetCompareCH2>:
{
 800ad62:	b480      	push	{r7}
 800ad64:	b083      	sub	sp, #12
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800ad72:	bf00      	nop
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <LL_TIM_OC_SetCompareCH3>:
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800ad8e:	bf00      	nop
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr

0800ad9a <LL_TIM_OC_SetCompareCH4>:
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	f043 0201 	orr.w	r2, r3, #1
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	615a      	str	r2, [r3, #20]
}
 800adca:	bf00      	nop
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
	...

0800add8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a3d      	ldr	r2, [pc, #244]	@ (800aee0 <LL_TIM_Init+0x108>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d013      	beq.n	800ae18 <LL_TIM_Init+0x40>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adf6:	d00f      	beq.n	800ae18 <LL_TIM_Init+0x40>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a3a      	ldr	r2, [pc, #232]	@ (800aee4 <LL_TIM_Init+0x10c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00b      	beq.n	800ae18 <LL_TIM_Init+0x40>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a39      	ldr	r2, [pc, #228]	@ (800aee8 <LL_TIM_Init+0x110>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d007      	beq.n	800ae18 <LL_TIM_Init+0x40>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a38      	ldr	r2, [pc, #224]	@ (800aeec <LL_TIM_Init+0x114>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d003      	beq.n	800ae18 <LL_TIM_Init+0x40>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a37      	ldr	r2, [pc, #220]	@ (800aef0 <LL_TIM_Init+0x118>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d106      	bne.n	800ae26 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a2d      	ldr	r2, [pc, #180]	@ (800aee0 <LL_TIM_Init+0x108>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d02b      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae34:	d027      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a2a      	ldr	r2, [pc, #168]	@ (800aee4 <LL_TIM_Init+0x10c>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d023      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a29      	ldr	r2, [pc, #164]	@ (800aee8 <LL_TIM_Init+0x110>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d01f      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a28      	ldr	r2, [pc, #160]	@ (800aeec <LL_TIM_Init+0x114>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d01b      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a27      	ldr	r2, [pc, #156]	@ (800aef0 <LL_TIM_Init+0x118>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d017      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a26      	ldr	r2, [pc, #152]	@ (800aef4 <LL_TIM_Init+0x11c>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d013      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a25      	ldr	r2, [pc, #148]	@ (800aef8 <LL_TIM_Init+0x120>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d00f      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a24      	ldr	r2, [pc, #144]	@ (800aefc <LL_TIM_Init+0x124>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d00b      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a23      	ldr	r2, [pc, #140]	@ (800af00 <LL_TIM_Init+0x128>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d007      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a22      	ldr	r2, [pc, #136]	@ (800af04 <LL_TIM_Init+0x12c>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d003      	beq.n	800ae86 <LL_TIM_Init+0xae>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a21      	ldr	r2, [pc, #132]	@ (800af08 <LL_TIM_Init+0x130>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d106      	bne.n	800ae94 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff ff34 	bl	800ad0e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff ff20 	bl	800acf2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a0a      	ldr	r2, [pc, #40]	@ (800aee0 <LL_TIM_Init+0x108>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d003      	beq.n	800aec2 <LL_TIM_Init+0xea>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a0c      	ldr	r2, [pc, #48]	@ (800aef0 <LL_TIM_Init+0x118>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d105      	bne.n	800aece <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff ff2e 	bl	800ad2a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7ff ff71 	bl	800adb6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	40010000 	.word	0x40010000
 800aee4:	40000400 	.word	0x40000400
 800aee8:	40000800 	.word	0x40000800
 800aeec:	40000c00 	.word	0x40000c00
 800aef0:	40010400 	.word	0x40010400
 800aef4:	40014000 	.word	0x40014000
 800aef8:	40014400 	.word	0x40014400
 800aefc:	40014800 	.word	0x40014800
 800af00:	40001800 	.word	0x40001800
 800af04:	40001c00 	.word	0x40001c00
 800af08:	40002000 	.word	0x40002000

0800af0c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af22:	d027      	beq.n	800af74 <LL_TIM_OC_Init+0x68>
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af2a:	d82a      	bhi.n	800af82 <LL_TIM_OC_Init+0x76>
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af32:	d018      	beq.n	800af66 <LL_TIM_OC_Init+0x5a>
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af3a:	d822      	bhi.n	800af82 <LL_TIM_OC_Init+0x76>
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d003      	beq.n	800af4a <LL_TIM_OC_Init+0x3e>
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2b10      	cmp	r3, #16
 800af46:	d007      	beq.n	800af58 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800af48:	e01b      	b.n	800af82 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f000 f81f 	bl	800af90 <OC1Config>
 800af52:	4603      	mov	r3, r0
 800af54:	75fb      	strb	r3, [r7, #23]
      break;
 800af56:	e015      	b.n	800af84 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800af58:	6879      	ldr	r1, [r7, #4]
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f000 f884 	bl	800b068 <OC2Config>
 800af60:	4603      	mov	r3, r0
 800af62:	75fb      	strb	r3, [r7, #23]
      break;
 800af64:	e00e      	b.n	800af84 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 f8ed 	bl	800b148 <OC3Config>
 800af6e:	4603      	mov	r3, r0
 800af70:	75fb      	strb	r3, [r7, #23]
      break;
 800af72:	e007      	b.n	800af84 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800af74:	6879      	ldr	r1, [r7, #4]
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f000 f956 	bl	800b228 <OC4Config>
 800af7c:	4603      	mov	r3, r0
 800af7e:	75fb      	strb	r3, [r7, #23]
      break;
 800af80:	e000      	b.n	800af84 <LL_TIM_OC_Init+0x78>
      break;
 800af82:	bf00      	nop
  }

  return result;
 800af84:	7dfb      	ldrb	r3, [r7, #23]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
	...

0800af90 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	f023 0201 	bic.w	r2, r3, #1
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f023 0303 	bic.w	r3, r3, #3
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4313      	orrs	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f023 0202 	bic.w	r2, r3, #2
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	4313      	orrs	r3, r2
 800afda:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f023 0201 	bic.w	r2, r3, #1
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a1c      	ldr	r2, [pc, #112]	@ (800b060 <OC1Config+0xd0>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d003      	beq.n	800affa <OC1Config+0x6a>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a1b      	ldr	r2, [pc, #108]	@ (800b064 <OC1Config+0xd4>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d11e      	bne.n	800b038 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f023 0208 	bic.w	r2, r3, #8
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4313      	orrs	r3, r2
 800b008:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f023 0204 	bic.w	r2, r3, #4
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4313      	orrs	r3, r2
 800b018:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	4313      	orrs	r3, r2
 800b026:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	4313      	orrs	r3, r2
 800b036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff fe7b 	bl	800ad46 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	40010000 	.word	0x40010000
 800b064:	40010400 	.word	0x40010400

0800b068 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	f023 0210 	bic.w	r2, r3, #16
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	021b      	lsls	r3, r3, #8
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	f023 0220 	bic.w	r2, r3, #32
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	011b      	lsls	r3, r3, #4
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f023 0210 	bic.w	r2, r3, #16
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	011b      	lsls	r3, r3, #4
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a1d      	ldr	r2, [pc, #116]	@ (800b140 <OC2Config+0xd8>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d003      	beq.n	800b0d8 <OC2Config+0x70>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a1c      	ldr	r2, [pc, #112]	@ (800b144 <OC2Config+0xdc>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d11f      	bne.n	800b118 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	019b      	lsls	r3, r3, #6
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	019b      	lsls	r3, r3, #6
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4313      	orrs	r3, r2
 800b106:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	4313      	orrs	r3, r2
 800b116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f7ff fe19 	bl	800ad62 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	40010000 	.word	0x40010000
 800b144:	40010400 	.word	0x40010400

0800b148 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f023 0303 	bic.w	r3, r3, #3
 800b176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	4313      	orrs	r3, r2
 800b194:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	021b      	lsls	r3, r3, #8
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b220 <OC3Config+0xd8>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d003      	beq.n	800b1b6 <OC3Config+0x6e>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a1c      	ldr	r2, [pc, #112]	@ (800b224 <OC3Config+0xdc>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d11f      	bne.n	800b1f6 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	695b      	ldr	r3, [r3, #20]
 800b1c0:	029b      	lsls	r3, r3, #10
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	029b      	lsls	r3, r3, #10
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	011b      	lsls	r3, r3, #4
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	015b      	lsls	r3, r3, #5
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7ff fdb8 	bl	800ad7e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	40010000 	.word	0x40010000
 800b224:	40010400 	.word	0x40010400

0800b228 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a1b      	ldr	r3, [r3, #32]
 800b242:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	69db      	ldr	r3, [r3, #28]
 800b24e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	021b      	lsls	r3, r3, #8
 800b264:	4313      	orrs	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	031b      	lsls	r3, r3, #12
 800b274:	4313      	orrs	r3, r2
 800b276:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	031b      	lsls	r3, r3, #12
 800b284:	4313      	orrs	r3, r2
 800b286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a11      	ldr	r2, [pc, #68]	@ (800b2d0 <OC4Config+0xa8>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d003      	beq.n	800b298 <OC4Config+0x70>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a10      	ldr	r2, [pc, #64]	@ (800b2d4 <OC4Config+0xac>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d107      	bne.n	800b2a8 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	019b      	lsls	r3, r3, #6
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7ff fd6d 	bl	800ad9a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	40010000 	.word	0x40010000
 800b2d4:	40010400 	.word	0x40010400

0800b2d8 <LL_USART_IsEnabled>:
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2ec:	bf0c      	ite	eq
 800b2ee:	2301      	moveq	r3, #1
 800b2f0:	2300      	movne	r3, #0
 800b2f2:	b2db      	uxtb	r3, r3
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <LL_USART_SetStopBitsLength>:
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	431a      	orrs	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	611a      	str	r2, [r3, #16]
}
 800b31a:	bf00      	nop
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <LL_USART_SetHWFlowCtrl>:
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	431a      	orrs	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	615a      	str	r2, [r3, #20]
}
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <LL_USART_SetBaudRate>:
{
 800b34c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b350:	b0c0      	sub	sp, #256	@ 0x100
 800b352:	af00      	add	r7, sp, #0
 800b354:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b358:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800b35c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800b360:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800b364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b36c:	f040 810c 	bne.w	800b588 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800b370:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b374:	2200      	movs	r2, #0
 800b376:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b37a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b37e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b382:	4622      	mov	r2, r4
 800b384:	462b      	mov	r3, r5
 800b386:	1891      	adds	r1, r2, r2
 800b388:	6639      	str	r1, [r7, #96]	@ 0x60
 800b38a:	415b      	adcs	r3, r3
 800b38c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b38e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800b392:	4621      	mov	r1, r4
 800b394:	eb12 0801 	adds.w	r8, r2, r1
 800b398:	4629      	mov	r1, r5
 800b39a:	eb43 0901 	adc.w	r9, r3, r1
 800b39e:	f04f 0200 	mov.w	r2, #0
 800b3a2:	f04f 0300 	mov.w	r3, #0
 800b3a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b3aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b3ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3b2:	4690      	mov	r8, r2
 800b3b4:	4699      	mov	r9, r3
 800b3b6:	4623      	mov	r3, r4
 800b3b8:	eb18 0303 	adds.w	r3, r8, r3
 800b3bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	eb49 0303 	adc.w	r3, r9, r3
 800b3c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b3ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	469a      	mov	sl, r3
 800b3d2:	4693      	mov	fp, r2
 800b3d4:	eb1a 030a 	adds.w	r3, sl, sl
 800b3d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3da:	eb4b 030b 	adc.w	r3, fp, fp
 800b3de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b3e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b3e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b3e8:	f7f5 fbde 	bl	8000ba8 <__aeabi_uldivmod>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4b64      	ldr	r3, [pc, #400]	@ (800b584 <LL_USART_SetBaudRate+0x238>)
 800b3f2:	fba3 2302 	umull	r2, r3, r3, r2
 800b3f6:	095b      	lsrs	r3, r3, #5
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	011b      	lsls	r3, r3, #4
 800b3fc:	b29c      	uxth	r4, r3
 800b3fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b402:	2200      	movs	r2, #0
 800b404:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b408:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b40c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800b410:	4642      	mov	r2, r8
 800b412:	464b      	mov	r3, r9
 800b414:	1891      	adds	r1, r2, r2
 800b416:	6539      	str	r1, [r7, #80]	@ 0x50
 800b418:	415b      	adcs	r3, r3
 800b41a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b41c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b420:	4641      	mov	r1, r8
 800b422:	1851      	adds	r1, r2, r1
 800b424:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b426:	4649      	mov	r1, r9
 800b428:	414b      	adcs	r3, r1
 800b42a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b42c:	f04f 0200 	mov.w	r2, #0
 800b430:	f04f 0300 	mov.w	r3, #0
 800b434:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800b438:	4659      	mov	r1, fp
 800b43a:	00cb      	lsls	r3, r1, #3
 800b43c:	4651      	mov	r1, sl
 800b43e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b442:	4651      	mov	r1, sl
 800b444:	00ca      	lsls	r2, r1, #3
 800b446:	4610      	mov	r0, r2
 800b448:	4619      	mov	r1, r3
 800b44a:	4603      	mov	r3, r0
 800b44c:	4642      	mov	r2, r8
 800b44e:	189b      	adds	r3, r3, r2
 800b450:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b454:	464b      	mov	r3, r9
 800b456:	460a      	mov	r2, r1
 800b458:	eb42 0303 	adc.w	r3, r2, r3
 800b45c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b460:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b464:	2200      	movs	r2, #0
 800b466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b46a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800b46e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b472:	460b      	mov	r3, r1
 800b474:	18db      	adds	r3, r3, r3
 800b476:	643b      	str	r3, [r7, #64]	@ 0x40
 800b478:	4613      	mov	r3, r2
 800b47a:	eb42 0303 	adc.w	r3, r2, r3
 800b47e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b480:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b484:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800b488:	f7f5 fb8e 	bl	8000ba8 <__aeabi_uldivmod>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4611      	mov	r1, r2
 800b492:	4b3c      	ldr	r3, [pc, #240]	@ (800b584 <LL_USART_SetBaudRate+0x238>)
 800b494:	fba3 2301 	umull	r2, r3, r3, r1
 800b498:	095b      	lsrs	r3, r3, #5
 800b49a:	2264      	movs	r2, #100	@ 0x64
 800b49c:	fb02 f303 	mul.w	r3, r2, r3
 800b4a0:	1acb      	subs	r3, r1, r3
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b4a8:	4b36      	ldr	r3, [pc, #216]	@ (800b584 <LL_USART_SetBaudRate+0x238>)
 800b4aa:	fba3 2302 	umull	r2, r3, r3, r2
 800b4ae:	095b      	lsrs	r3, r3, #5
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	4423      	add	r3, r4
 800b4be:	b29c      	uxth	r4, r3
 800b4c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b4ca:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b4ce:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800b4d2:	4642      	mov	r2, r8
 800b4d4:	464b      	mov	r3, r9
 800b4d6:	1891      	adds	r1, r2, r2
 800b4d8:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b4da:	415b      	adcs	r3, r3
 800b4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b4e2:	4641      	mov	r1, r8
 800b4e4:	1851      	adds	r1, r2, r1
 800b4e6:	6339      	str	r1, [r7, #48]	@ 0x30
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	414b      	adcs	r3, r1
 800b4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ee:	f04f 0200 	mov.w	r2, #0
 800b4f2:	f04f 0300 	mov.w	r3, #0
 800b4f6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b4fa:	4659      	mov	r1, fp
 800b4fc:	00cb      	lsls	r3, r1, #3
 800b4fe:	4651      	mov	r1, sl
 800b500:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b504:	4651      	mov	r1, sl
 800b506:	00ca      	lsls	r2, r1, #3
 800b508:	4610      	mov	r0, r2
 800b50a:	4619      	mov	r1, r3
 800b50c:	4603      	mov	r3, r0
 800b50e:	4642      	mov	r2, r8
 800b510:	189b      	adds	r3, r3, r2
 800b512:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b516:	464b      	mov	r3, r9
 800b518:	460a      	mov	r2, r1
 800b51a:	eb42 0303 	adc.w	r3, r2, r3
 800b51e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b522:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b526:	2200      	movs	r2, #0
 800b528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b52c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800b530:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b534:	460b      	mov	r3, r1
 800b536:	18db      	adds	r3, r3, r3
 800b538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b53a:	4613      	mov	r3, r2
 800b53c:	eb42 0303 	adc.w	r3, r2, r3
 800b540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b546:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800b54a:	f7f5 fb2d 	bl	8000ba8 <__aeabi_uldivmod>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4b0c      	ldr	r3, [pc, #48]	@ (800b584 <LL_USART_SetBaudRate+0x238>)
 800b554:	fba3 1302 	umull	r1, r3, r3, r2
 800b558:	095b      	lsrs	r3, r3, #5
 800b55a:	2164      	movs	r1, #100	@ 0x64
 800b55c:	fb01 f303 	mul.w	r3, r1, r3
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	00db      	lsls	r3, r3, #3
 800b564:	3332      	adds	r3, #50	@ 0x32
 800b566:	4a07      	ldr	r2, [pc, #28]	@ (800b584 <LL_USART_SetBaudRate+0x238>)
 800b568:	fba2 2303 	umull	r2, r3, r2, r3
 800b56c:	095b      	lsrs	r3, r3, #5
 800b56e:	b29b      	uxth	r3, r3
 800b570:	f003 0307 	and.w	r3, r3, #7
 800b574:	b29b      	uxth	r3, r3
 800b576:	4423      	add	r3, r4
 800b578:	b29b      	uxth	r3, r3
 800b57a:	461a      	mov	r2, r3
 800b57c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b580:	609a      	str	r2, [r3, #8]
}
 800b582:	e108      	b.n	800b796 <LL_USART_SetBaudRate+0x44a>
 800b584:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800b588:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b58c:	2200      	movs	r2, #0
 800b58e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b592:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b596:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800b59a:	4642      	mov	r2, r8
 800b59c:	464b      	mov	r3, r9
 800b59e:	1891      	adds	r1, r2, r2
 800b5a0:	6239      	str	r1, [r7, #32]
 800b5a2:	415b      	adcs	r3, r3
 800b5a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b5aa:	4641      	mov	r1, r8
 800b5ac:	1854      	adds	r4, r2, r1
 800b5ae:	4649      	mov	r1, r9
 800b5b0:	eb43 0501 	adc.w	r5, r3, r1
 800b5b4:	f04f 0200 	mov.w	r2, #0
 800b5b8:	f04f 0300 	mov.w	r3, #0
 800b5bc:	00eb      	lsls	r3, r5, #3
 800b5be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b5c2:	00e2      	lsls	r2, r4, #3
 800b5c4:	4614      	mov	r4, r2
 800b5c6:	461d      	mov	r5, r3
 800b5c8:	4643      	mov	r3, r8
 800b5ca:	18e3      	adds	r3, r4, r3
 800b5cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b5d0:	464b      	mov	r3, r9
 800b5d2:	eb45 0303 	adc.w	r3, r5, r3
 800b5d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b5da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b5e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800b5e8:	f04f 0200 	mov.w	r2, #0
 800b5ec:	f04f 0300 	mov.w	r3, #0
 800b5f0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	008b      	lsls	r3, r1, #2
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5fe:	4621      	mov	r1, r4
 800b600:	008a      	lsls	r2, r1, #2
 800b602:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800b606:	f7f5 facf 	bl	8000ba8 <__aeabi_uldivmod>
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	4b65      	ldr	r3, [pc, #404]	@ (800b7a4 <LL_USART_SetBaudRate+0x458>)
 800b610:	fba3 2302 	umull	r2, r3, r3, r2
 800b614:	095b      	lsrs	r3, r3, #5
 800b616:	b29b      	uxth	r3, r3
 800b618:	011b      	lsls	r3, r3, #4
 800b61a:	b29c      	uxth	r4, r3
 800b61c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b620:	2200      	movs	r2, #0
 800b622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b626:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b62a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800b62e:	4642      	mov	r2, r8
 800b630:	464b      	mov	r3, r9
 800b632:	1891      	adds	r1, r2, r2
 800b634:	61b9      	str	r1, [r7, #24]
 800b636:	415b      	adcs	r3, r3
 800b638:	61fb      	str	r3, [r7, #28]
 800b63a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b63e:	4641      	mov	r1, r8
 800b640:	1851      	adds	r1, r2, r1
 800b642:	6139      	str	r1, [r7, #16]
 800b644:	4649      	mov	r1, r9
 800b646:	414b      	adcs	r3, r1
 800b648:	617b      	str	r3, [r7, #20]
 800b64a:	f04f 0200 	mov.w	r2, #0
 800b64e:	f04f 0300 	mov.w	r3, #0
 800b652:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b656:	4659      	mov	r1, fp
 800b658:	00cb      	lsls	r3, r1, #3
 800b65a:	4651      	mov	r1, sl
 800b65c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b660:	4651      	mov	r1, sl
 800b662:	00ca      	lsls	r2, r1, #3
 800b664:	4610      	mov	r0, r2
 800b666:	4619      	mov	r1, r3
 800b668:	4603      	mov	r3, r0
 800b66a:	4642      	mov	r2, r8
 800b66c:	189b      	adds	r3, r3, r2
 800b66e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b672:	464b      	mov	r3, r9
 800b674:	460a      	mov	r2, r1
 800b676:	eb42 0303 	adc.w	r3, r2, r3
 800b67a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b67e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b682:	2200      	movs	r2, #0
 800b684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b688:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800b68c:	f04f 0200 	mov.w	r2, #0
 800b690:	f04f 0300 	mov.w	r3, #0
 800b694:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800b698:	4649      	mov	r1, r9
 800b69a:	008b      	lsls	r3, r1, #2
 800b69c:	4641      	mov	r1, r8
 800b69e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6a2:	4641      	mov	r1, r8
 800b6a4:	008a      	lsls	r2, r1, #2
 800b6a6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800b6aa:	f7f5 fa7d 	bl	8000ba8 <__aeabi_uldivmod>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4b3b      	ldr	r3, [pc, #236]	@ (800b7a4 <LL_USART_SetBaudRate+0x458>)
 800b6b6:	fba3 2301 	umull	r2, r3, r3, r1
 800b6ba:	095b      	lsrs	r3, r3, #5
 800b6bc:	2264      	movs	r2, #100	@ 0x64
 800b6be:	fb02 f303 	mul.w	r3, r2, r3
 800b6c2:	1acb      	subs	r3, r1, r3
 800b6c4:	011b      	lsls	r3, r3, #4
 800b6c6:	3332      	adds	r3, #50	@ 0x32
 800b6c8:	4a36      	ldr	r2, [pc, #216]	@ (800b7a4 <LL_USART_SetBaudRate+0x458>)
 800b6ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ce:	095b      	lsrs	r3, r3, #5
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	4423      	add	r3, r4
 800b6da:	b29c      	uxth	r4, r3
 800b6dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b6e4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b6e6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b6ea:	4642      	mov	r2, r8
 800b6ec:	464b      	mov	r3, r9
 800b6ee:	1891      	adds	r1, r2, r2
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	415b      	adcs	r3, r3
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6fa:	4641      	mov	r1, r8
 800b6fc:	1851      	adds	r1, r2, r1
 800b6fe:	6039      	str	r1, [r7, #0]
 800b700:	4649      	mov	r1, r9
 800b702:	414b      	adcs	r3, r1
 800b704:	607b      	str	r3, [r7, #4]
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	f04f 0300 	mov.w	r3, #0
 800b70e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b712:	4659      	mov	r1, fp
 800b714:	00cb      	lsls	r3, r1, #3
 800b716:	4651      	mov	r1, sl
 800b718:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b71c:	4651      	mov	r1, sl
 800b71e:	00ca      	lsls	r2, r1, #3
 800b720:	4610      	mov	r0, r2
 800b722:	4619      	mov	r1, r3
 800b724:	4603      	mov	r3, r0
 800b726:	4642      	mov	r2, r8
 800b728:	189b      	adds	r3, r3, r2
 800b72a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b72c:	464b      	mov	r3, r9
 800b72e:	460a      	mov	r2, r1
 800b730:	eb42 0303 	adc.w	r3, r2, r3
 800b734:	677b      	str	r3, [r7, #116]	@ 0x74
 800b736:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b73a:	2200      	movs	r2, #0
 800b73c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b73e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b740:	f04f 0200 	mov.w	r2, #0
 800b744:	f04f 0300 	mov.w	r3, #0
 800b748:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800b74c:	4649      	mov	r1, r9
 800b74e:	008b      	lsls	r3, r1, #2
 800b750:	4641      	mov	r1, r8
 800b752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b756:	4641      	mov	r1, r8
 800b758:	008a      	lsls	r2, r1, #2
 800b75a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800b75e:	f7f5 fa23 	bl	8000ba8 <__aeabi_uldivmod>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a4 <LL_USART_SetBaudRate+0x458>)
 800b768:	fba3 1302 	umull	r1, r3, r3, r2
 800b76c:	095b      	lsrs	r3, r3, #5
 800b76e:	2164      	movs	r1, #100	@ 0x64
 800b770:	fb01 f303 	mul.w	r3, r1, r3
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	011b      	lsls	r3, r3, #4
 800b778:	3332      	adds	r3, #50	@ 0x32
 800b77a:	4a0a      	ldr	r2, [pc, #40]	@ (800b7a4 <LL_USART_SetBaudRate+0x458>)
 800b77c:	fba2 2303 	umull	r2, r3, r2, r3
 800b780:	095b      	lsrs	r3, r3, #5
 800b782:	b29b      	uxth	r3, r3
 800b784:	f003 030f 	and.w	r3, r3, #15
 800b788:	b29b      	uxth	r3, r3
 800b78a:	4423      	add	r3, r4
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	461a      	mov	r2, r3
 800b790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b794:	609a      	str	r2, [r3, #8]
}
 800b796:	bf00      	nop
 800b798:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b79c:	46bd      	mov	sp, r7
 800b79e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7a2:	bf00      	nop
 800b7a4:	51eb851f 	.word	0x51eb851f

0800b7a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff fd8c 	bl	800b2d8 <LL_USART_IsEnabled>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d15e      	bne.n	800b884 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800b7ce:	f023 030c 	bic.w	r3, r3, #12
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	6851      	ldr	r1, [r2, #4]
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	68d2      	ldr	r2, [r2, #12]
 800b7da:	4311      	orrs	r1, r2
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	6912      	ldr	r2, [r2, #16]
 800b7e0:	4311      	orrs	r1, r2
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	6992      	ldr	r2, [r2, #24]
 800b7e6:	430a      	orrs	r2, r1
 800b7e8:	431a      	orrs	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff fd83 	bl	800b300 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff fd90 	bl	800b326 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800b806:	f107 0308 	add.w	r3, r7, #8
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff f932 	bl	800aa74 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a1f      	ldr	r2, [pc, #124]	@ (800b890 <LL_USART_Init+0xe8>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d102      	bne.n	800b81e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	61bb      	str	r3, [r7, #24]
 800b81c:	e021      	b.n	800b862 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a1c      	ldr	r2, [pc, #112]	@ (800b894 <LL_USART_Init+0xec>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d102      	bne.n	800b82c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	61bb      	str	r3, [r7, #24]
 800b82a:	e01a      	b.n	800b862 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a1a      	ldr	r2, [pc, #104]	@ (800b898 <LL_USART_Init+0xf0>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d102      	bne.n	800b83a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	61bb      	str	r3, [r7, #24]
 800b838:	e013      	b.n	800b862 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a17      	ldr	r2, [pc, #92]	@ (800b89c <LL_USART_Init+0xf4>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d102      	bne.n	800b848 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	61bb      	str	r3, [r7, #24]
 800b846:	e00c      	b.n	800b862 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a15      	ldr	r2, [pc, #84]	@ (800b8a0 <LL_USART_Init+0xf8>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d102      	bne.n	800b856 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	61bb      	str	r3, [r7, #24]
 800b854:	e005      	b.n	800b862 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a12      	ldr	r2, [pc, #72]	@ (800b8a4 <LL_USART_Init+0xfc>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d101      	bne.n	800b862 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00d      	beq.n	800b884 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d009      	beq.n	800b884 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800b870:	2300      	movs	r3, #0
 800b872:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800b87c:	69b9      	ldr	r1, [r7, #24]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f7ff fd64 	bl	800b34c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800b884:	7ffb      	ldrb	r3, [r7, #31]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3720      	adds	r7, #32
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	40011000 	.word	0x40011000
 800b894:	40004400 	.word	0x40004400
 800b898:	40004800 	.word	0x40004800
 800b89c:	40011400 	.word	0x40011400
 800b8a0:	40004c00 	.word	0x40004c00
 800b8a4:	40005000 	.word	0x40005000

0800b8a8 <__cvt>:
 800b8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ac:	ec57 6b10 	vmov	r6, r7, d0
 800b8b0:	2f00      	cmp	r7, #0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	463b      	mov	r3, r7
 800b8b8:	bfbb      	ittet	lt
 800b8ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b8be:	461f      	movlt	r7, r3
 800b8c0:	2300      	movge	r3, #0
 800b8c2:	232d      	movlt	r3, #45	@ 0x2d
 800b8c4:	700b      	strb	r3, [r1, #0]
 800b8c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b8cc:	4691      	mov	r9, r2
 800b8ce:	f023 0820 	bic.w	r8, r3, #32
 800b8d2:	bfbc      	itt	lt
 800b8d4:	4632      	movlt	r2, r6
 800b8d6:	4616      	movlt	r6, r2
 800b8d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8dc:	d005      	beq.n	800b8ea <__cvt+0x42>
 800b8de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b8e2:	d100      	bne.n	800b8e6 <__cvt+0x3e>
 800b8e4:	3401      	adds	r4, #1
 800b8e6:	2102      	movs	r1, #2
 800b8e8:	e000      	b.n	800b8ec <__cvt+0x44>
 800b8ea:	2103      	movs	r1, #3
 800b8ec:	ab03      	add	r3, sp, #12
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	ab02      	add	r3, sp, #8
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	ec47 6b10 	vmov	d0, r6, r7
 800b8f8:	4653      	mov	r3, sl
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	f000 ff4c 	bl	800c798 <_dtoa_r>
 800b900:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b904:	4605      	mov	r5, r0
 800b906:	d119      	bne.n	800b93c <__cvt+0x94>
 800b908:	f019 0f01 	tst.w	r9, #1
 800b90c:	d00e      	beq.n	800b92c <__cvt+0x84>
 800b90e:	eb00 0904 	add.w	r9, r0, r4
 800b912:	2200      	movs	r2, #0
 800b914:	2300      	movs	r3, #0
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	f7f5 f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b91e:	b108      	cbz	r0, 800b924 <__cvt+0x7c>
 800b920:	f8cd 900c 	str.w	r9, [sp, #12]
 800b924:	2230      	movs	r2, #48	@ 0x30
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	454b      	cmp	r3, r9
 800b92a:	d31e      	bcc.n	800b96a <__cvt+0xc2>
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b930:	1b5b      	subs	r3, r3, r5
 800b932:	4628      	mov	r0, r5
 800b934:	6013      	str	r3, [r2, #0]
 800b936:	b004      	add	sp, #16
 800b938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b93c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b940:	eb00 0904 	add.w	r9, r0, r4
 800b944:	d1e5      	bne.n	800b912 <__cvt+0x6a>
 800b946:	7803      	ldrb	r3, [r0, #0]
 800b948:	2b30      	cmp	r3, #48	@ 0x30
 800b94a:	d10a      	bne.n	800b962 <__cvt+0xba>
 800b94c:	2200      	movs	r2, #0
 800b94e:	2300      	movs	r3, #0
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f5 f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b958:	b918      	cbnz	r0, 800b962 <__cvt+0xba>
 800b95a:	f1c4 0401 	rsb	r4, r4, #1
 800b95e:	f8ca 4000 	str.w	r4, [sl]
 800b962:	f8da 3000 	ldr.w	r3, [sl]
 800b966:	4499      	add	r9, r3
 800b968:	e7d3      	b.n	800b912 <__cvt+0x6a>
 800b96a:	1c59      	adds	r1, r3, #1
 800b96c:	9103      	str	r1, [sp, #12]
 800b96e:	701a      	strb	r2, [r3, #0]
 800b970:	e7d9      	b.n	800b926 <__cvt+0x7e>

0800b972 <__exponent>:
 800b972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b974:	2900      	cmp	r1, #0
 800b976:	bfba      	itte	lt
 800b978:	4249      	neglt	r1, r1
 800b97a:	232d      	movlt	r3, #45	@ 0x2d
 800b97c:	232b      	movge	r3, #43	@ 0x2b
 800b97e:	2909      	cmp	r1, #9
 800b980:	7002      	strb	r2, [r0, #0]
 800b982:	7043      	strb	r3, [r0, #1]
 800b984:	dd29      	ble.n	800b9da <__exponent+0x68>
 800b986:	f10d 0307 	add.w	r3, sp, #7
 800b98a:	461d      	mov	r5, r3
 800b98c:	270a      	movs	r7, #10
 800b98e:	461a      	mov	r2, r3
 800b990:	fbb1 f6f7 	udiv	r6, r1, r7
 800b994:	fb07 1416 	mls	r4, r7, r6, r1
 800b998:	3430      	adds	r4, #48	@ 0x30
 800b99a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b99e:	460c      	mov	r4, r1
 800b9a0:	2c63      	cmp	r4, #99	@ 0x63
 800b9a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	dcf1      	bgt.n	800b98e <__exponent+0x1c>
 800b9aa:	3130      	adds	r1, #48	@ 0x30
 800b9ac:	1e94      	subs	r4, r2, #2
 800b9ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9b2:	1c41      	adds	r1, r0, #1
 800b9b4:	4623      	mov	r3, r4
 800b9b6:	42ab      	cmp	r3, r5
 800b9b8:	d30a      	bcc.n	800b9d0 <__exponent+0x5e>
 800b9ba:	f10d 0309 	add.w	r3, sp, #9
 800b9be:	1a9b      	subs	r3, r3, r2
 800b9c0:	42ac      	cmp	r4, r5
 800b9c2:	bf88      	it	hi
 800b9c4:	2300      	movhi	r3, #0
 800b9c6:	3302      	adds	r3, #2
 800b9c8:	4403      	add	r3, r0
 800b9ca:	1a18      	subs	r0, r3, r0
 800b9cc:	b003      	add	sp, #12
 800b9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b9d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b9d8:	e7ed      	b.n	800b9b6 <__exponent+0x44>
 800b9da:	2330      	movs	r3, #48	@ 0x30
 800b9dc:	3130      	adds	r1, #48	@ 0x30
 800b9de:	7083      	strb	r3, [r0, #2]
 800b9e0:	70c1      	strb	r1, [r0, #3]
 800b9e2:	1d03      	adds	r3, r0, #4
 800b9e4:	e7f1      	b.n	800b9ca <__exponent+0x58>
	...

0800b9e8 <_printf_float>:
 800b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ec:	b08d      	sub	sp, #52	@ 0x34
 800b9ee:	460c      	mov	r4, r1
 800b9f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b9f4:	4616      	mov	r6, r2
 800b9f6:	461f      	mov	r7, r3
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	f000 fdbd 	bl	800c578 <_localeconv_r>
 800b9fe:	6803      	ldr	r3, [r0, #0]
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f4 fc34 	bl	8000270 <strlen>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba10:	9005      	str	r0, [sp, #20]
 800ba12:	3307      	adds	r3, #7
 800ba14:	f023 0307 	bic.w	r3, r3, #7
 800ba18:	f103 0208 	add.w	r2, r3, #8
 800ba1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba20:	f8d4 b000 	ldr.w	fp, [r4]
 800ba24:	f8c8 2000 	str.w	r2, [r8]
 800ba28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba30:	9307      	str	r3, [sp, #28]
 800ba32:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba3e:	4b9c      	ldr	r3, [pc, #624]	@ (800bcb0 <_printf_float+0x2c8>)
 800ba40:	f04f 32ff 	mov.w	r2, #4294967295
 800ba44:	f7f5 f872 	bl	8000b2c <__aeabi_dcmpun>
 800ba48:	bb70      	cbnz	r0, 800baa8 <_printf_float+0xc0>
 800ba4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba4e:	4b98      	ldr	r3, [pc, #608]	@ (800bcb0 <_printf_float+0x2c8>)
 800ba50:	f04f 32ff 	mov.w	r2, #4294967295
 800ba54:	f7f5 f84c 	bl	8000af0 <__aeabi_dcmple>
 800ba58:	bb30      	cbnz	r0, 800baa8 <_printf_float+0xc0>
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4640      	mov	r0, r8
 800ba60:	4649      	mov	r1, r9
 800ba62:	f7f5 f83b 	bl	8000adc <__aeabi_dcmplt>
 800ba66:	b110      	cbz	r0, 800ba6e <_printf_float+0x86>
 800ba68:	232d      	movs	r3, #45	@ 0x2d
 800ba6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba6e:	4a91      	ldr	r2, [pc, #580]	@ (800bcb4 <_printf_float+0x2cc>)
 800ba70:	4b91      	ldr	r3, [pc, #580]	@ (800bcb8 <_printf_float+0x2d0>)
 800ba72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba76:	bf8c      	ite	hi
 800ba78:	4690      	movhi	r8, r2
 800ba7a:	4698      	movls	r8, r3
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	6123      	str	r3, [r4, #16]
 800ba80:	f02b 0304 	bic.w	r3, fp, #4
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	f04f 0900 	mov.w	r9, #0
 800ba8a:	9700      	str	r7, [sp, #0]
 800ba8c:	4633      	mov	r3, r6
 800ba8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ba90:	4621      	mov	r1, r4
 800ba92:	4628      	mov	r0, r5
 800ba94:	f000 f9d2 	bl	800be3c <_printf_common>
 800ba98:	3001      	adds	r0, #1
 800ba9a:	f040 808d 	bne.w	800bbb8 <_printf_float+0x1d0>
 800ba9e:	f04f 30ff 	mov.w	r0, #4294967295
 800baa2:	b00d      	add	sp, #52	@ 0x34
 800baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa8:	4642      	mov	r2, r8
 800baaa:	464b      	mov	r3, r9
 800baac:	4640      	mov	r0, r8
 800baae:	4649      	mov	r1, r9
 800bab0:	f7f5 f83c 	bl	8000b2c <__aeabi_dcmpun>
 800bab4:	b140      	cbz	r0, 800bac8 <_printf_float+0xe0>
 800bab6:	464b      	mov	r3, r9
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bfbc      	itt	lt
 800babc:	232d      	movlt	r3, #45	@ 0x2d
 800babe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bac2:	4a7e      	ldr	r2, [pc, #504]	@ (800bcbc <_printf_float+0x2d4>)
 800bac4:	4b7e      	ldr	r3, [pc, #504]	@ (800bcc0 <_printf_float+0x2d8>)
 800bac6:	e7d4      	b.n	800ba72 <_printf_float+0x8a>
 800bac8:	6863      	ldr	r3, [r4, #4]
 800baca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bace:	9206      	str	r2, [sp, #24]
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	d13b      	bne.n	800bb4c <_printf_float+0x164>
 800bad4:	2306      	movs	r3, #6
 800bad6:	6063      	str	r3, [r4, #4]
 800bad8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800badc:	2300      	movs	r3, #0
 800bade:	6022      	str	r2, [r4, #0]
 800bae0:	9303      	str	r3, [sp, #12]
 800bae2:	ab0a      	add	r3, sp, #40	@ 0x28
 800bae4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bae8:	ab09      	add	r3, sp, #36	@ 0x24
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	6861      	ldr	r1, [r4, #4]
 800baee:	ec49 8b10 	vmov	d0, r8, r9
 800baf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800baf6:	4628      	mov	r0, r5
 800baf8:	f7ff fed6 	bl	800b8a8 <__cvt>
 800bafc:	9b06      	ldr	r3, [sp, #24]
 800bafe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb00:	2b47      	cmp	r3, #71	@ 0x47
 800bb02:	4680      	mov	r8, r0
 800bb04:	d129      	bne.n	800bb5a <_printf_float+0x172>
 800bb06:	1cc8      	adds	r0, r1, #3
 800bb08:	db02      	blt.n	800bb10 <_printf_float+0x128>
 800bb0a:	6863      	ldr	r3, [r4, #4]
 800bb0c:	4299      	cmp	r1, r3
 800bb0e:	dd41      	ble.n	800bb94 <_printf_float+0x1ac>
 800bb10:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb14:	fa5f fa8a 	uxtb.w	sl, sl
 800bb18:	3901      	subs	r1, #1
 800bb1a:	4652      	mov	r2, sl
 800bb1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb20:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb22:	f7ff ff26 	bl	800b972 <__exponent>
 800bb26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb28:	1813      	adds	r3, r2, r0
 800bb2a:	2a01      	cmp	r2, #1
 800bb2c:	4681      	mov	r9, r0
 800bb2e:	6123      	str	r3, [r4, #16]
 800bb30:	dc02      	bgt.n	800bb38 <_printf_float+0x150>
 800bb32:	6822      	ldr	r2, [r4, #0]
 800bb34:	07d2      	lsls	r2, r2, #31
 800bb36:	d501      	bpl.n	800bb3c <_printf_float+0x154>
 800bb38:	3301      	adds	r3, #1
 800bb3a:	6123      	str	r3, [r4, #16]
 800bb3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d0a2      	beq.n	800ba8a <_printf_float+0xa2>
 800bb44:	232d      	movs	r3, #45	@ 0x2d
 800bb46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb4a:	e79e      	b.n	800ba8a <_printf_float+0xa2>
 800bb4c:	9a06      	ldr	r2, [sp, #24]
 800bb4e:	2a47      	cmp	r2, #71	@ 0x47
 800bb50:	d1c2      	bne.n	800bad8 <_printf_float+0xf0>
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1c0      	bne.n	800bad8 <_printf_float+0xf0>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e7bd      	b.n	800bad6 <_printf_float+0xee>
 800bb5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb5e:	d9db      	bls.n	800bb18 <_printf_float+0x130>
 800bb60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb64:	d118      	bne.n	800bb98 <_printf_float+0x1b0>
 800bb66:	2900      	cmp	r1, #0
 800bb68:	6863      	ldr	r3, [r4, #4]
 800bb6a:	dd0b      	ble.n	800bb84 <_printf_float+0x19c>
 800bb6c:	6121      	str	r1, [r4, #16]
 800bb6e:	b913      	cbnz	r3, 800bb76 <_printf_float+0x18e>
 800bb70:	6822      	ldr	r2, [r4, #0]
 800bb72:	07d0      	lsls	r0, r2, #31
 800bb74:	d502      	bpl.n	800bb7c <_printf_float+0x194>
 800bb76:	3301      	adds	r3, #1
 800bb78:	440b      	add	r3, r1
 800bb7a:	6123      	str	r3, [r4, #16]
 800bb7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb7e:	f04f 0900 	mov.w	r9, #0
 800bb82:	e7db      	b.n	800bb3c <_printf_float+0x154>
 800bb84:	b913      	cbnz	r3, 800bb8c <_printf_float+0x1a4>
 800bb86:	6822      	ldr	r2, [r4, #0]
 800bb88:	07d2      	lsls	r2, r2, #31
 800bb8a:	d501      	bpl.n	800bb90 <_printf_float+0x1a8>
 800bb8c:	3302      	adds	r3, #2
 800bb8e:	e7f4      	b.n	800bb7a <_printf_float+0x192>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e7f2      	b.n	800bb7a <_printf_float+0x192>
 800bb94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bb98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb9a:	4299      	cmp	r1, r3
 800bb9c:	db05      	blt.n	800bbaa <_printf_float+0x1c2>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	6121      	str	r1, [r4, #16]
 800bba2:	07d8      	lsls	r0, r3, #31
 800bba4:	d5ea      	bpl.n	800bb7c <_printf_float+0x194>
 800bba6:	1c4b      	adds	r3, r1, #1
 800bba8:	e7e7      	b.n	800bb7a <_printf_float+0x192>
 800bbaa:	2900      	cmp	r1, #0
 800bbac:	bfd4      	ite	le
 800bbae:	f1c1 0202 	rsble	r2, r1, #2
 800bbb2:	2201      	movgt	r2, #1
 800bbb4:	4413      	add	r3, r2
 800bbb6:	e7e0      	b.n	800bb7a <_printf_float+0x192>
 800bbb8:	6823      	ldr	r3, [r4, #0]
 800bbba:	055a      	lsls	r2, r3, #21
 800bbbc:	d407      	bmi.n	800bbce <_printf_float+0x1e6>
 800bbbe:	6923      	ldr	r3, [r4, #16]
 800bbc0:	4642      	mov	r2, r8
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	47b8      	blx	r7
 800bbc8:	3001      	adds	r0, #1
 800bbca:	d12b      	bne.n	800bc24 <_printf_float+0x23c>
 800bbcc:	e767      	b.n	800ba9e <_printf_float+0xb6>
 800bbce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbd2:	f240 80dd 	bls.w	800bd90 <_printf_float+0x3a8>
 800bbd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f7f4 ff73 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d033      	beq.n	800bc4e <_printf_float+0x266>
 800bbe6:	4a37      	ldr	r2, [pc, #220]	@ (800bcc4 <_printf_float+0x2dc>)
 800bbe8:	2301      	movs	r3, #1
 800bbea:	4631      	mov	r1, r6
 800bbec:	4628      	mov	r0, r5
 800bbee:	47b8      	blx	r7
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	f43f af54 	beq.w	800ba9e <_printf_float+0xb6>
 800bbf6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bbfa:	4543      	cmp	r3, r8
 800bbfc:	db02      	blt.n	800bc04 <_printf_float+0x21c>
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	07d8      	lsls	r0, r3, #31
 800bc02:	d50f      	bpl.n	800bc24 <_printf_float+0x23c>
 800bc04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc08:	4631      	mov	r1, r6
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	47b8      	blx	r7
 800bc0e:	3001      	adds	r0, #1
 800bc10:	f43f af45 	beq.w	800ba9e <_printf_float+0xb6>
 800bc14:	f04f 0900 	mov.w	r9, #0
 800bc18:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc1c:	f104 0a1a 	add.w	sl, r4, #26
 800bc20:	45c8      	cmp	r8, r9
 800bc22:	dc09      	bgt.n	800bc38 <_printf_float+0x250>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	079b      	lsls	r3, r3, #30
 800bc28:	f100 8103 	bmi.w	800be32 <_printf_float+0x44a>
 800bc2c:	68e0      	ldr	r0, [r4, #12]
 800bc2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc30:	4298      	cmp	r0, r3
 800bc32:	bfb8      	it	lt
 800bc34:	4618      	movlt	r0, r3
 800bc36:	e734      	b.n	800baa2 <_printf_float+0xba>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	4652      	mov	r2, sl
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4628      	mov	r0, r5
 800bc40:	47b8      	blx	r7
 800bc42:	3001      	adds	r0, #1
 800bc44:	f43f af2b 	beq.w	800ba9e <_printf_float+0xb6>
 800bc48:	f109 0901 	add.w	r9, r9, #1
 800bc4c:	e7e8      	b.n	800bc20 <_printf_float+0x238>
 800bc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	dc39      	bgt.n	800bcc8 <_printf_float+0x2e0>
 800bc54:	4a1b      	ldr	r2, [pc, #108]	@ (800bcc4 <_printf_float+0x2dc>)
 800bc56:	2301      	movs	r3, #1
 800bc58:	4631      	mov	r1, r6
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	47b8      	blx	r7
 800bc5e:	3001      	adds	r0, #1
 800bc60:	f43f af1d 	beq.w	800ba9e <_printf_float+0xb6>
 800bc64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc68:	ea59 0303 	orrs.w	r3, r9, r3
 800bc6c:	d102      	bne.n	800bc74 <_printf_float+0x28c>
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	07d9      	lsls	r1, r3, #31
 800bc72:	d5d7      	bpl.n	800bc24 <_printf_float+0x23c>
 800bc74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc78:	4631      	mov	r1, r6
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	47b8      	blx	r7
 800bc7e:	3001      	adds	r0, #1
 800bc80:	f43f af0d 	beq.w	800ba9e <_printf_float+0xb6>
 800bc84:	f04f 0a00 	mov.w	sl, #0
 800bc88:	f104 0b1a 	add.w	fp, r4, #26
 800bc8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc8e:	425b      	negs	r3, r3
 800bc90:	4553      	cmp	r3, sl
 800bc92:	dc01      	bgt.n	800bc98 <_printf_float+0x2b0>
 800bc94:	464b      	mov	r3, r9
 800bc96:	e793      	b.n	800bbc0 <_printf_float+0x1d8>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	465a      	mov	r2, fp
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	4628      	mov	r0, r5
 800bca0:	47b8      	blx	r7
 800bca2:	3001      	adds	r0, #1
 800bca4:	f43f aefb 	beq.w	800ba9e <_printf_float+0xb6>
 800bca8:	f10a 0a01 	add.w	sl, sl, #1
 800bcac:	e7ee      	b.n	800bc8c <_printf_float+0x2a4>
 800bcae:	bf00      	nop
 800bcb0:	7fefffff 	.word	0x7fefffff
 800bcb4:	0800f384 	.word	0x0800f384
 800bcb8:	0800f380 	.word	0x0800f380
 800bcbc:	0800f38c 	.word	0x0800f38c
 800bcc0:	0800f388 	.word	0x0800f388
 800bcc4:	0800f390 	.word	0x0800f390
 800bcc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bcce:	4553      	cmp	r3, sl
 800bcd0:	bfa8      	it	ge
 800bcd2:	4653      	movge	r3, sl
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	4699      	mov	r9, r3
 800bcd8:	dc36      	bgt.n	800bd48 <_printf_float+0x360>
 800bcda:	f04f 0b00 	mov.w	fp, #0
 800bcde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bce2:	f104 021a 	add.w	r2, r4, #26
 800bce6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bce8:	9306      	str	r3, [sp, #24]
 800bcea:	eba3 0309 	sub.w	r3, r3, r9
 800bcee:	455b      	cmp	r3, fp
 800bcf0:	dc31      	bgt.n	800bd56 <_printf_float+0x36e>
 800bcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf4:	459a      	cmp	sl, r3
 800bcf6:	dc3a      	bgt.n	800bd6e <_printf_float+0x386>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	07da      	lsls	r2, r3, #31
 800bcfc:	d437      	bmi.n	800bd6e <_printf_float+0x386>
 800bcfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd00:	ebaa 0903 	sub.w	r9, sl, r3
 800bd04:	9b06      	ldr	r3, [sp, #24]
 800bd06:	ebaa 0303 	sub.w	r3, sl, r3
 800bd0a:	4599      	cmp	r9, r3
 800bd0c:	bfa8      	it	ge
 800bd0e:	4699      	movge	r9, r3
 800bd10:	f1b9 0f00 	cmp.w	r9, #0
 800bd14:	dc33      	bgt.n	800bd7e <_printf_float+0x396>
 800bd16:	f04f 0800 	mov.w	r8, #0
 800bd1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd1e:	f104 0b1a 	add.w	fp, r4, #26
 800bd22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd24:	ebaa 0303 	sub.w	r3, sl, r3
 800bd28:	eba3 0309 	sub.w	r3, r3, r9
 800bd2c:	4543      	cmp	r3, r8
 800bd2e:	f77f af79 	ble.w	800bc24 <_printf_float+0x23c>
 800bd32:	2301      	movs	r3, #1
 800bd34:	465a      	mov	r2, fp
 800bd36:	4631      	mov	r1, r6
 800bd38:	4628      	mov	r0, r5
 800bd3a:	47b8      	blx	r7
 800bd3c:	3001      	adds	r0, #1
 800bd3e:	f43f aeae 	beq.w	800ba9e <_printf_float+0xb6>
 800bd42:	f108 0801 	add.w	r8, r8, #1
 800bd46:	e7ec      	b.n	800bd22 <_printf_float+0x33a>
 800bd48:	4642      	mov	r2, r8
 800bd4a:	4631      	mov	r1, r6
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	47b8      	blx	r7
 800bd50:	3001      	adds	r0, #1
 800bd52:	d1c2      	bne.n	800bcda <_printf_float+0x2f2>
 800bd54:	e6a3      	b.n	800ba9e <_printf_float+0xb6>
 800bd56:	2301      	movs	r3, #1
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	9206      	str	r2, [sp, #24]
 800bd5e:	47b8      	blx	r7
 800bd60:	3001      	adds	r0, #1
 800bd62:	f43f ae9c 	beq.w	800ba9e <_printf_float+0xb6>
 800bd66:	9a06      	ldr	r2, [sp, #24]
 800bd68:	f10b 0b01 	add.w	fp, fp, #1
 800bd6c:	e7bb      	b.n	800bce6 <_printf_float+0x2fe>
 800bd6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd72:	4631      	mov	r1, r6
 800bd74:	4628      	mov	r0, r5
 800bd76:	47b8      	blx	r7
 800bd78:	3001      	adds	r0, #1
 800bd7a:	d1c0      	bne.n	800bcfe <_printf_float+0x316>
 800bd7c:	e68f      	b.n	800ba9e <_printf_float+0xb6>
 800bd7e:	9a06      	ldr	r2, [sp, #24]
 800bd80:	464b      	mov	r3, r9
 800bd82:	4442      	add	r2, r8
 800bd84:	4631      	mov	r1, r6
 800bd86:	4628      	mov	r0, r5
 800bd88:	47b8      	blx	r7
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	d1c3      	bne.n	800bd16 <_printf_float+0x32e>
 800bd8e:	e686      	b.n	800ba9e <_printf_float+0xb6>
 800bd90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd94:	f1ba 0f01 	cmp.w	sl, #1
 800bd98:	dc01      	bgt.n	800bd9e <_printf_float+0x3b6>
 800bd9a:	07db      	lsls	r3, r3, #31
 800bd9c:	d536      	bpl.n	800be0c <_printf_float+0x424>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	4642      	mov	r2, r8
 800bda2:	4631      	mov	r1, r6
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b8      	blx	r7
 800bda8:	3001      	adds	r0, #1
 800bdaa:	f43f ae78 	beq.w	800ba9e <_printf_float+0xb6>
 800bdae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	47b8      	blx	r7
 800bdb8:	3001      	adds	r0, #1
 800bdba:	f43f ae70 	beq.w	800ba9e <_printf_float+0xb6>
 800bdbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdca:	f7f4 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdce:	b9c0      	cbnz	r0, 800be02 <_printf_float+0x41a>
 800bdd0:	4653      	mov	r3, sl
 800bdd2:	f108 0201 	add.w	r2, r8, #1
 800bdd6:	4631      	mov	r1, r6
 800bdd8:	4628      	mov	r0, r5
 800bdda:	47b8      	blx	r7
 800bddc:	3001      	adds	r0, #1
 800bdde:	d10c      	bne.n	800bdfa <_printf_float+0x412>
 800bde0:	e65d      	b.n	800ba9e <_printf_float+0xb6>
 800bde2:	2301      	movs	r3, #1
 800bde4:	465a      	mov	r2, fp
 800bde6:	4631      	mov	r1, r6
 800bde8:	4628      	mov	r0, r5
 800bdea:	47b8      	blx	r7
 800bdec:	3001      	adds	r0, #1
 800bdee:	f43f ae56 	beq.w	800ba9e <_printf_float+0xb6>
 800bdf2:	f108 0801 	add.w	r8, r8, #1
 800bdf6:	45d0      	cmp	r8, sl
 800bdf8:	dbf3      	blt.n	800bde2 <_printf_float+0x3fa>
 800bdfa:	464b      	mov	r3, r9
 800bdfc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be00:	e6df      	b.n	800bbc2 <_printf_float+0x1da>
 800be02:	f04f 0800 	mov.w	r8, #0
 800be06:	f104 0b1a 	add.w	fp, r4, #26
 800be0a:	e7f4      	b.n	800bdf6 <_printf_float+0x40e>
 800be0c:	2301      	movs	r3, #1
 800be0e:	4642      	mov	r2, r8
 800be10:	e7e1      	b.n	800bdd6 <_printf_float+0x3ee>
 800be12:	2301      	movs	r3, #1
 800be14:	464a      	mov	r2, r9
 800be16:	4631      	mov	r1, r6
 800be18:	4628      	mov	r0, r5
 800be1a:	47b8      	blx	r7
 800be1c:	3001      	adds	r0, #1
 800be1e:	f43f ae3e 	beq.w	800ba9e <_printf_float+0xb6>
 800be22:	f108 0801 	add.w	r8, r8, #1
 800be26:	68e3      	ldr	r3, [r4, #12]
 800be28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be2a:	1a5b      	subs	r3, r3, r1
 800be2c:	4543      	cmp	r3, r8
 800be2e:	dcf0      	bgt.n	800be12 <_printf_float+0x42a>
 800be30:	e6fc      	b.n	800bc2c <_printf_float+0x244>
 800be32:	f04f 0800 	mov.w	r8, #0
 800be36:	f104 0919 	add.w	r9, r4, #25
 800be3a:	e7f4      	b.n	800be26 <_printf_float+0x43e>

0800be3c <_printf_common>:
 800be3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be40:	4616      	mov	r6, r2
 800be42:	4698      	mov	r8, r3
 800be44:	688a      	ldr	r2, [r1, #8]
 800be46:	690b      	ldr	r3, [r1, #16]
 800be48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be4c:	4293      	cmp	r3, r2
 800be4e:	bfb8      	it	lt
 800be50:	4613      	movlt	r3, r2
 800be52:	6033      	str	r3, [r6, #0]
 800be54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be58:	4607      	mov	r7, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	b10a      	cbz	r2, 800be62 <_printf_common+0x26>
 800be5e:	3301      	adds	r3, #1
 800be60:	6033      	str	r3, [r6, #0]
 800be62:	6823      	ldr	r3, [r4, #0]
 800be64:	0699      	lsls	r1, r3, #26
 800be66:	bf42      	ittt	mi
 800be68:	6833      	ldrmi	r3, [r6, #0]
 800be6a:	3302      	addmi	r3, #2
 800be6c:	6033      	strmi	r3, [r6, #0]
 800be6e:	6825      	ldr	r5, [r4, #0]
 800be70:	f015 0506 	ands.w	r5, r5, #6
 800be74:	d106      	bne.n	800be84 <_printf_common+0x48>
 800be76:	f104 0a19 	add.w	sl, r4, #25
 800be7a:	68e3      	ldr	r3, [r4, #12]
 800be7c:	6832      	ldr	r2, [r6, #0]
 800be7e:	1a9b      	subs	r3, r3, r2
 800be80:	42ab      	cmp	r3, r5
 800be82:	dc26      	bgt.n	800bed2 <_printf_common+0x96>
 800be84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be88:	6822      	ldr	r2, [r4, #0]
 800be8a:	3b00      	subs	r3, #0
 800be8c:	bf18      	it	ne
 800be8e:	2301      	movne	r3, #1
 800be90:	0692      	lsls	r2, r2, #26
 800be92:	d42b      	bmi.n	800beec <_printf_common+0xb0>
 800be94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be98:	4641      	mov	r1, r8
 800be9a:	4638      	mov	r0, r7
 800be9c:	47c8      	blx	r9
 800be9e:	3001      	adds	r0, #1
 800bea0:	d01e      	beq.n	800bee0 <_printf_common+0xa4>
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	6922      	ldr	r2, [r4, #16]
 800bea6:	f003 0306 	and.w	r3, r3, #6
 800beaa:	2b04      	cmp	r3, #4
 800beac:	bf02      	ittt	eq
 800beae:	68e5      	ldreq	r5, [r4, #12]
 800beb0:	6833      	ldreq	r3, [r6, #0]
 800beb2:	1aed      	subeq	r5, r5, r3
 800beb4:	68a3      	ldr	r3, [r4, #8]
 800beb6:	bf0c      	ite	eq
 800beb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bebc:	2500      	movne	r5, #0
 800bebe:	4293      	cmp	r3, r2
 800bec0:	bfc4      	itt	gt
 800bec2:	1a9b      	subgt	r3, r3, r2
 800bec4:	18ed      	addgt	r5, r5, r3
 800bec6:	2600      	movs	r6, #0
 800bec8:	341a      	adds	r4, #26
 800beca:	42b5      	cmp	r5, r6
 800becc:	d11a      	bne.n	800bf04 <_printf_common+0xc8>
 800bece:	2000      	movs	r0, #0
 800bed0:	e008      	b.n	800bee4 <_printf_common+0xa8>
 800bed2:	2301      	movs	r3, #1
 800bed4:	4652      	mov	r2, sl
 800bed6:	4641      	mov	r1, r8
 800bed8:	4638      	mov	r0, r7
 800beda:	47c8      	blx	r9
 800bedc:	3001      	adds	r0, #1
 800bede:	d103      	bne.n	800bee8 <_printf_common+0xac>
 800bee0:	f04f 30ff 	mov.w	r0, #4294967295
 800bee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee8:	3501      	adds	r5, #1
 800beea:	e7c6      	b.n	800be7a <_printf_common+0x3e>
 800beec:	18e1      	adds	r1, r4, r3
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	2030      	movs	r0, #48	@ 0x30
 800bef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bef6:	4422      	add	r2, r4
 800bef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800befc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf00:	3302      	adds	r3, #2
 800bf02:	e7c7      	b.n	800be94 <_printf_common+0x58>
 800bf04:	2301      	movs	r3, #1
 800bf06:	4622      	mov	r2, r4
 800bf08:	4641      	mov	r1, r8
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	47c8      	blx	r9
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d0e6      	beq.n	800bee0 <_printf_common+0xa4>
 800bf12:	3601      	adds	r6, #1
 800bf14:	e7d9      	b.n	800beca <_printf_common+0x8e>
	...

0800bf18 <_printf_i>:
 800bf18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf1c:	7e0f      	ldrb	r7, [r1, #24]
 800bf1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf20:	2f78      	cmp	r7, #120	@ 0x78
 800bf22:	4691      	mov	r9, r2
 800bf24:	4680      	mov	r8, r0
 800bf26:	460c      	mov	r4, r1
 800bf28:	469a      	mov	sl, r3
 800bf2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf2e:	d807      	bhi.n	800bf40 <_printf_i+0x28>
 800bf30:	2f62      	cmp	r7, #98	@ 0x62
 800bf32:	d80a      	bhi.n	800bf4a <_printf_i+0x32>
 800bf34:	2f00      	cmp	r7, #0
 800bf36:	f000 80d1 	beq.w	800c0dc <_printf_i+0x1c4>
 800bf3a:	2f58      	cmp	r7, #88	@ 0x58
 800bf3c:	f000 80b8 	beq.w	800c0b0 <_printf_i+0x198>
 800bf40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf48:	e03a      	b.n	800bfc0 <_printf_i+0xa8>
 800bf4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf4e:	2b15      	cmp	r3, #21
 800bf50:	d8f6      	bhi.n	800bf40 <_printf_i+0x28>
 800bf52:	a101      	add	r1, pc, #4	@ (adr r1, 800bf58 <_printf_i+0x40>)
 800bf54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf58:	0800bfb1 	.word	0x0800bfb1
 800bf5c:	0800bfc5 	.word	0x0800bfc5
 800bf60:	0800bf41 	.word	0x0800bf41
 800bf64:	0800bf41 	.word	0x0800bf41
 800bf68:	0800bf41 	.word	0x0800bf41
 800bf6c:	0800bf41 	.word	0x0800bf41
 800bf70:	0800bfc5 	.word	0x0800bfc5
 800bf74:	0800bf41 	.word	0x0800bf41
 800bf78:	0800bf41 	.word	0x0800bf41
 800bf7c:	0800bf41 	.word	0x0800bf41
 800bf80:	0800bf41 	.word	0x0800bf41
 800bf84:	0800c0c3 	.word	0x0800c0c3
 800bf88:	0800bfef 	.word	0x0800bfef
 800bf8c:	0800c07d 	.word	0x0800c07d
 800bf90:	0800bf41 	.word	0x0800bf41
 800bf94:	0800bf41 	.word	0x0800bf41
 800bf98:	0800c0e5 	.word	0x0800c0e5
 800bf9c:	0800bf41 	.word	0x0800bf41
 800bfa0:	0800bfef 	.word	0x0800bfef
 800bfa4:	0800bf41 	.word	0x0800bf41
 800bfa8:	0800bf41 	.word	0x0800bf41
 800bfac:	0800c085 	.word	0x0800c085
 800bfb0:	6833      	ldr	r3, [r6, #0]
 800bfb2:	1d1a      	adds	r2, r3, #4
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6032      	str	r2, [r6, #0]
 800bfb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e09c      	b.n	800c0fe <_printf_i+0x1e6>
 800bfc4:	6833      	ldr	r3, [r6, #0]
 800bfc6:	6820      	ldr	r0, [r4, #0]
 800bfc8:	1d19      	adds	r1, r3, #4
 800bfca:	6031      	str	r1, [r6, #0]
 800bfcc:	0606      	lsls	r6, r0, #24
 800bfce:	d501      	bpl.n	800bfd4 <_printf_i+0xbc>
 800bfd0:	681d      	ldr	r5, [r3, #0]
 800bfd2:	e003      	b.n	800bfdc <_printf_i+0xc4>
 800bfd4:	0645      	lsls	r5, r0, #25
 800bfd6:	d5fb      	bpl.n	800bfd0 <_printf_i+0xb8>
 800bfd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfdc:	2d00      	cmp	r5, #0
 800bfde:	da03      	bge.n	800bfe8 <_printf_i+0xd0>
 800bfe0:	232d      	movs	r3, #45	@ 0x2d
 800bfe2:	426d      	negs	r5, r5
 800bfe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfe8:	4858      	ldr	r0, [pc, #352]	@ (800c14c <_printf_i+0x234>)
 800bfea:	230a      	movs	r3, #10
 800bfec:	e011      	b.n	800c012 <_printf_i+0xfa>
 800bfee:	6821      	ldr	r1, [r4, #0]
 800bff0:	6833      	ldr	r3, [r6, #0]
 800bff2:	0608      	lsls	r0, r1, #24
 800bff4:	f853 5b04 	ldr.w	r5, [r3], #4
 800bff8:	d402      	bmi.n	800c000 <_printf_i+0xe8>
 800bffa:	0649      	lsls	r1, r1, #25
 800bffc:	bf48      	it	mi
 800bffe:	b2ad      	uxthmi	r5, r5
 800c000:	2f6f      	cmp	r7, #111	@ 0x6f
 800c002:	4852      	ldr	r0, [pc, #328]	@ (800c14c <_printf_i+0x234>)
 800c004:	6033      	str	r3, [r6, #0]
 800c006:	bf14      	ite	ne
 800c008:	230a      	movne	r3, #10
 800c00a:	2308      	moveq	r3, #8
 800c00c:	2100      	movs	r1, #0
 800c00e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c012:	6866      	ldr	r6, [r4, #4]
 800c014:	60a6      	str	r6, [r4, #8]
 800c016:	2e00      	cmp	r6, #0
 800c018:	db05      	blt.n	800c026 <_printf_i+0x10e>
 800c01a:	6821      	ldr	r1, [r4, #0]
 800c01c:	432e      	orrs	r6, r5
 800c01e:	f021 0104 	bic.w	r1, r1, #4
 800c022:	6021      	str	r1, [r4, #0]
 800c024:	d04b      	beq.n	800c0be <_printf_i+0x1a6>
 800c026:	4616      	mov	r6, r2
 800c028:	fbb5 f1f3 	udiv	r1, r5, r3
 800c02c:	fb03 5711 	mls	r7, r3, r1, r5
 800c030:	5dc7      	ldrb	r7, [r0, r7]
 800c032:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c036:	462f      	mov	r7, r5
 800c038:	42bb      	cmp	r3, r7
 800c03a:	460d      	mov	r5, r1
 800c03c:	d9f4      	bls.n	800c028 <_printf_i+0x110>
 800c03e:	2b08      	cmp	r3, #8
 800c040:	d10b      	bne.n	800c05a <_printf_i+0x142>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	07df      	lsls	r7, r3, #31
 800c046:	d508      	bpl.n	800c05a <_printf_i+0x142>
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	6861      	ldr	r1, [r4, #4]
 800c04c:	4299      	cmp	r1, r3
 800c04e:	bfde      	ittt	le
 800c050:	2330      	movle	r3, #48	@ 0x30
 800c052:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c056:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c05a:	1b92      	subs	r2, r2, r6
 800c05c:	6122      	str	r2, [r4, #16]
 800c05e:	f8cd a000 	str.w	sl, [sp]
 800c062:	464b      	mov	r3, r9
 800c064:	aa03      	add	r2, sp, #12
 800c066:	4621      	mov	r1, r4
 800c068:	4640      	mov	r0, r8
 800c06a:	f7ff fee7 	bl	800be3c <_printf_common>
 800c06e:	3001      	adds	r0, #1
 800c070:	d14a      	bne.n	800c108 <_printf_i+0x1f0>
 800c072:	f04f 30ff 	mov.w	r0, #4294967295
 800c076:	b004      	add	sp, #16
 800c078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07c:	6823      	ldr	r3, [r4, #0]
 800c07e:	f043 0320 	orr.w	r3, r3, #32
 800c082:	6023      	str	r3, [r4, #0]
 800c084:	4832      	ldr	r0, [pc, #200]	@ (800c150 <_printf_i+0x238>)
 800c086:	2778      	movs	r7, #120	@ 0x78
 800c088:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	6831      	ldr	r1, [r6, #0]
 800c090:	061f      	lsls	r7, r3, #24
 800c092:	f851 5b04 	ldr.w	r5, [r1], #4
 800c096:	d402      	bmi.n	800c09e <_printf_i+0x186>
 800c098:	065f      	lsls	r7, r3, #25
 800c09a:	bf48      	it	mi
 800c09c:	b2ad      	uxthmi	r5, r5
 800c09e:	6031      	str	r1, [r6, #0]
 800c0a0:	07d9      	lsls	r1, r3, #31
 800c0a2:	bf44      	itt	mi
 800c0a4:	f043 0320 	orrmi.w	r3, r3, #32
 800c0a8:	6023      	strmi	r3, [r4, #0]
 800c0aa:	b11d      	cbz	r5, 800c0b4 <_printf_i+0x19c>
 800c0ac:	2310      	movs	r3, #16
 800c0ae:	e7ad      	b.n	800c00c <_printf_i+0xf4>
 800c0b0:	4826      	ldr	r0, [pc, #152]	@ (800c14c <_printf_i+0x234>)
 800c0b2:	e7e9      	b.n	800c088 <_printf_i+0x170>
 800c0b4:	6823      	ldr	r3, [r4, #0]
 800c0b6:	f023 0320 	bic.w	r3, r3, #32
 800c0ba:	6023      	str	r3, [r4, #0]
 800c0bc:	e7f6      	b.n	800c0ac <_printf_i+0x194>
 800c0be:	4616      	mov	r6, r2
 800c0c0:	e7bd      	b.n	800c03e <_printf_i+0x126>
 800c0c2:	6833      	ldr	r3, [r6, #0]
 800c0c4:	6825      	ldr	r5, [r4, #0]
 800c0c6:	6961      	ldr	r1, [r4, #20]
 800c0c8:	1d18      	adds	r0, r3, #4
 800c0ca:	6030      	str	r0, [r6, #0]
 800c0cc:	062e      	lsls	r6, r5, #24
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	d501      	bpl.n	800c0d6 <_printf_i+0x1be>
 800c0d2:	6019      	str	r1, [r3, #0]
 800c0d4:	e002      	b.n	800c0dc <_printf_i+0x1c4>
 800c0d6:	0668      	lsls	r0, r5, #25
 800c0d8:	d5fb      	bpl.n	800c0d2 <_printf_i+0x1ba>
 800c0da:	8019      	strh	r1, [r3, #0]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	6123      	str	r3, [r4, #16]
 800c0e0:	4616      	mov	r6, r2
 800c0e2:	e7bc      	b.n	800c05e <_printf_i+0x146>
 800c0e4:	6833      	ldr	r3, [r6, #0]
 800c0e6:	1d1a      	adds	r2, r3, #4
 800c0e8:	6032      	str	r2, [r6, #0]
 800c0ea:	681e      	ldr	r6, [r3, #0]
 800c0ec:	6862      	ldr	r2, [r4, #4]
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f7f4 f86d 	bl	80001d0 <memchr>
 800c0f6:	b108      	cbz	r0, 800c0fc <_printf_i+0x1e4>
 800c0f8:	1b80      	subs	r0, r0, r6
 800c0fa:	6060      	str	r0, [r4, #4]
 800c0fc:	6863      	ldr	r3, [r4, #4]
 800c0fe:	6123      	str	r3, [r4, #16]
 800c100:	2300      	movs	r3, #0
 800c102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c106:	e7aa      	b.n	800c05e <_printf_i+0x146>
 800c108:	6923      	ldr	r3, [r4, #16]
 800c10a:	4632      	mov	r2, r6
 800c10c:	4649      	mov	r1, r9
 800c10e:	4640      	mov	r0, r8
 800c110:	47d0      	blx	sl
 800c112:	3001      	adds	r0, #1
 800c114:	d0ad      	beq.n	800c072 <_printf_i+0x15a>
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	079b      	lsls	r3, r3, #30
 800c11a:	d413      	bmi.n	800c144 <_printf_i+0x22c>
 800c11c:	68e0      	ldr	r0, [r4, #12]
 800c11e:	9b03      	ldr	r3, [sp, #12]
 800c120:	4298      	cmp	r0, r3
 800c122:	bfb8      	it	lt
 800c124:	4618      	movlt	r0, r3
 800c126:	e7a6      	b.n	800c076 <_printf_i+0x15e>
 800c128:	2301      	movs	r3, #1
 800c12a:	4632      	mov	r2, r6
 800c12c:	4649      	mov	r1, r9
 800c12e:	4640      	mov	r0, r8
 800c130:	47d0      	blx	sl
 800c132:	3001      	adds	r0, #1
 800c134:	d09d      	beq.n	800c072 <_printf_i+0x15a>
 800c136:	3501      	adds	r5, #1
 800c138:	68e3      	ldr	r3, [r4, #12]
 800c13a:	9903      	ldr	r1, [sp, #12]
 800c13c:	1a5b      	subs	r3, r3, r1
 800c13e:	42ab      	cmp	r3, r5
 800c140:	dcf2      	bgt.n	800c128 <_printf_i+0x210>
 800c142:	e7eb      	b.n	800c11c <_printf_i+0x204>
 800c144:	2500      	movs	r5, #0
 800c146:	f104 0619 	add.w	r6, r4, #25
 800c14a:	e7f5      	b.n	800c138 <_printf_i+0x220>
 800c14c:	0800f392 	.word	0x0800f392
 800c150:	0800f3a3 	.word	0x0800f3a3

0800c154 <std>:
 800c154:	2300      	movs	r3, #0
 800c156:	b510      	push	{r4, lr}
 800c158:	4604      	mov	r4, r0
 800c15a:	e9c0 3300 	strd	r3, r3, [r0]
 800c15e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c162:	6083      	str	r3, [r0, #8]
 800c164:	8181      	strh	r1, [r0, #12]
 800c166:	6643      	str	r3, [r0, #100]	@ 0x64
 800c168:	81c2      	strh	r2, [r0, #14]
 800c16a:	6183      	str	r3, [r0, #24]
 800c16c:	4619      	mov	r1, r3
 800c16e:	2208      	movs	r2, #8
 800c170:	305c      	adds	r0, #92	@ 0x5c
 800c172:	f000 f9f9 	bl	800c568 <memset>
 800c176:	4b0d      	ldr	r3, [pc, #52]	@ (800c1ac <std+0x58>)
 800c178:	6263      	str	r3, [r4, #36]	@ 0x24
 800c17a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b0 <std+0x5c>)
 800c17c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c17e:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b4 <std+0x60>)
 800c180:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c182:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b8 <std+0x64>)
 800c184:	6323      	str	r3, [r4, #48]	@ 0x30
 800c186:	4b0d      	ldr	r3, [pc, #52]	@ (800c1bc <std+0x68>)
 800c188:	6224      	str	r4, [r4, #32]
 800c18a:	429c      	cmp	r4, r3
 800c18c:	d006      	beq.n	800c19c <std+0x48>
 800c18e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c192:	4294      	cmp	r4, r2
 800c194:	d002      	beq.n	800c19c <std+0x48>
 800c196:	33d0      	adds	r3, #208	@ 0xd0
 800c198:	429c      	cmp	r4, r3
 800c19a:	d105      	bne.n	800c1a8 <std+0x54>
 800c19c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1a4:	f000 ba5c 	b.w	800c660 <__retarget_lock_init_recursive>
 800c1a8:	bd10      	pop	{r4, pc}
 800c1aa:	bf00      	nop
 800c1ac:	0800c3b9 	.word	0x0800c3b9
 800c1b0:	0800c3db 	.word	0x0800c3db
 800c1b4:	0800c413 	.word	0x0800c413
 800c1b8:	0800c437 	.word	0x0800c437
 800c1bc:	20000580 	.word	0x20000580

0800c1c0 <stdio_exit_handler>:
 800c1c0:	4a02      	ldr	r2, [pc, #8]	@ (800c1cc <stdio_exit_handler+0xc>)
 800c1c2:	4903      	ldr	r1, [pc, #12]	@ (800c1d0 <stdio_exit_handler+0x10>)
 800c1c4:	4803      	ldr	r0, [pc, #12]	@ (800c1d4 <stdio_exit_handler+0x14>)
 800c1c6:	f000 b869 	b.w	800c29c <_fwalk_sglue>
 800c1ca:	bf00      	nop
 800c1cc:	20000010 	.word	0x20000010
 800c1d0:	0800dfb9 	.word	0x0800dfb9
 800c1d4:	20000020 	.word	0x20000020

0800c1d8 <cleanup_stdio>:
 800c1d8:	6841      	ldr	r1, [r0, #4]
 800c1da:	4b0c      	ldr	r3, [pc, #48]	@ (800c20c <cleanup_stdio+0x34>)
 800c1dc:	4299      	cmp	r1, r3
 800c1de:	b510      	push	{r4, lr}
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	d001      	beq.n	800c1e8 <cleanup_stdio+0x10>
 800c1e4:	f001 fee8 	bl	800dfb8 <_fflush_r>
 800c1e8:	68a1      	ldr	r1, [r4, #8]
 800c1ea:	4b09      	ldr	r3, [pc, #36]	@ (800c210 <cleanup_stdio+0x38>)
 800c1ec:	4299      	cmp	r1, r3
 800c1ee:	d002      	beq.n	800c1f6 <cleanup_stdio+0x1e>
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f001 fee1 	bl	800dfb8 <_fflush_r>
 800c1f6:	68e1      	ldr	r1, [r4, #12]
 800c1f8:	4b06      	ldr	r3, [pc, #24]	@ (800c214 <cleanup_stdio+0x3c>)
 800c1fa:	4299      	cmp	r1, r3
 800c1fc:	d004      	beq.n	800c208 <cleanup_stdio+0x30>
 800c1fe:	4620      	mov	r0, r4
 800c200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c204:	f001 bed8 	b.w	800dfb8 <_fflush_r>
 800c208:	bd10      	pop	{r4, pc}
 800c20a:	bf00      	nop
 800c20c:	20000580 	.word	0x20000580
 800c210:	200005e8 	.word	0x200005e8
 800c214:	20000650 	.word	0x20000650

0800c218 <global_stdio_init.part.0>:
 800c218:	b510      	push	{r4, lr}
 800c21a:	4b0b      	ldr	r3, [pc, #44]	@ (800c248 <global_stdio_init.part.0+0x30>)
 800c21c:	4c0b      	ldr	r4, [pc, #44]	@ (800c24c <global_stdio_init.part.0+0x34>)
 800c21e:	4a0c      	ldr	r2, [pc, #48]	@ (800c250 <global_stdio_init.part.0+0x38>)
 800c220:	601a      	str	r2, [r3, #0]
 800c222:	4620      	mov	r0, r4
 800c224:	2200      	movs	r2, #0
 800c226:	2104      	movs	r1, #4
 800c228:	f7ff ff94 	bl	800c154 <std>
 800c22c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c230:	2201      	movs	r2, #1
 800c232:	2109      	movs	r1, #9
 800c234:	f7ff ff8e 	bl	800c154 <std>
 800c238:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c23c:	2202      	movs	r2, #2
 800c23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c242:	2112      	movs	r1, #18
 800c244:	f7ff bf86 	b.w	800c154 <std>
 800c248:	200006b8 	.word	0x200006b8
 800c24c:	20000580 	.word	0x20000580
 800c250:	0800c1c1 	.word	0x0800c1c1

0800c254 <__sfp_lock_acquire>:
 800c254:	4801      	ldr	r0, [pc, #4]	@ (800c25c <__sfp_lock_acquire+0x8>)
 800c256:	f000 ba04 	b.w	800c662 <__retarget_lock_acquire_recursive>
 800c25a:	bf00      	nop
 800c25c:	200006c1 	.word	0x200006c1

0800c260 <__sfp_lock_release>:
 800c260:	4801      	ldr	r0, [pc, #4]	@ (800c268 <__sfp_lock_release+0x8>)
 800c262:	f000 b9ff 	b.w	800c664 <__retarget_lock_release_recursive>
 800c266:	bf00      	nop
 800c268:	200006c1 	.word	0x200006c1

0800c26c <__sinit>:
 800c26c:	b510      	push	{r4, lr}
 800c26e:	4604      	mov	r4, r0
 800c270:	f7ff fff0 	bl	800c254 <__sfp_lock_acquire>
 800c274:	6a23      	ldr	r3, [r4, #32]
 800c276:	b11b      	cbz	r3, 800c280 <__sinit+0x14>
 800c278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c27c:	f7ff bff0 	b.w	800c260 <__sfp_lock_release>
 800c280:	4b04      	ldr	r3, [pc, #16]	@ (800c294 <__sinit+0x28>)
 800c282:	6223      	str	r3, [r4, #32]
 800c284:	4b04      	ldr	r3, [pc, #16]	@ (800c298 <__sinit+0x2c>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1f5      	bne.n	800c278 <__sinit+0xc>
 800c28c:	f7ff ffc4 	bl	800c218 <global_stdio_init.part.0>
 800c290:	e7f2      	b.n	800c278 <__sinit+0xc>
 800c292:	bf00      	nop
 800c294:	0800c1d9 	.word	0x0800c1d9
 800c298:	200006b8 	.word	0x200006b8

0800c29c <_fwalk_sglue>:
 800c29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a0:	4607      	mov	r7, r0
 800c2a2:	4688      	mov	r8, r1
 800c2a4:	4614      	mov	r4, r2
 800c2a6:	2600      	movs	r6, #0
 800c2a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2ac:	f1b9 0901 	subs.w	r9, r9, #1
 800c2b0:	d505      	bpl.n	800c2be <_fwalk_sglue+0x22>
 800c2b2:	6824      	ldr	r4, [r4, #0]
 800c2b4:	2c00      	cmp	r4, #0
 800c2b6:	d1f7      	bne.n	800c2a8 <_fwalk_sglue+0xc>
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2be:	89ab      	ldrh	r3, [r5, #12]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d907      	bls.n	800c2d4 <_fwalk_sglue+0x38>
 800c2c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	d003      	beq.n	800c2d4 <_fwalk_sglue+0x38>
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	47c0      	blx	r8
 800c2d2:	4306      	orrs	r6, r0
 800c2d4:	3568      	adds	r5, #104	@ 0x68
 800c2d6:	e7e9      	b.n	800c2ac <_fwalk_sglue+0x10>

0800c2d8 <iprintf>:
 800c2d8:	b40f      	push	{r0, r1, r2, r3}
 800c2da:	b507      	push	{r0, r1, r2, lr}
 800c2dc:	4906      	ldr	r1, [pc, #24]	@ (800c2f8 <iprintf+0x20>)
 800c2de:	ab04      	add	r3, sp, #16
 800c2e0:	6808      	ldr	r0, [r1, #0]
 800c2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2e6:	6881      	ldr	r1, [r0, #8]
 800c2e8:	9301      	str	r3, [sp, #4]
 800c2ea:	f001 fcc9 	bl	800dc80 <_vfiprintf_r>
 800c2ee:	b003      	add	sp, #12
 800c2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2f4:	b004      	add	sp, #16
 800c2f6:	4770      	bx	lr
 800c2f8:	2000001c 	.word	0x2000001c

0800c2fc <_puts_r>:
 800c2fc:	6a03      	ldr	r3, [r0, #32]
 800c2fe:	b570      	push	{r4, r5, r6, lr}
 800c300:	6884      	ldr	r4, [r0, #8]
 800c302:	4605      	mov	r5, r0
 800c304:	460e      	mov	r6, r1
 800c306:	b90b      	cbnz	r3, 800c30c <_puts_r+0x10>
 800c308:	f7ff ffb0 	bl	800c26c <__sinit>
 800c30c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c30e:	07db      	lsls	r3, r3, #31
 800c310:	d405      	bmi.n	800c31e <_puts_r+0x22>
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	0598      	lsls	r0, r3, #22
 800c316:	d402      	bmi.n	800c31e <_puts_r+0x22>
 800c318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c31a:	f000 f9a2 	bl	800c662 <__retarget_lock_acquire_recursive>
 800c31e:	89a3      	ldrh	r3, [r4, #12]
 800c320:	0719      	lsls	r1, r3, #28
 800c322:	d502      	bpl.n	800c32a <_puts_r+0x2e>
 800c324:	6923      	ldr	r3, [r4, #16]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d135      	bne.n	800c396 <_puts_r+0x9a>
 800c32a:	4621      	mov	r1, r4
 800c32c:	4628      	mov	r0, r5
 800c32e:	f000 f8c5 	bl	800c4bc <__swsetup_r>
 800c332:	b380      	cbz	r0, 800c396 <_puts_r+0x9a>
 800c334:	f04f 35ff 	mov.w	r5, #4294967295
 800c338:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c33a:	07da      	lsls	r2, r3, #31
 800c33c:	d405      	bmi.n	800c34a <_puts_r+0x4e>
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	059b      	lsls	r3, r3, #22
 800c342:	d402      	bmi.n	800c34a <_puts_r+0x4e>
 800c344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c346:	f000 f98d 	bl	800c664 <__retarget_lock_release_recursive>
 800c34a:	4628      	mov	r0, r5
 800c34c:	bd70      	pop	{r4, r5, r6, pc}
 800c34e:	2b00      	cmp	r3, #0
 800c350:	da04      	bge.n	800c35c <_puts_r+0x60>
 800c352:	69a2      	ldr	r2, [r4, #24]
 800c354:	429a      	cmp	r2, r3
 800c356:	dc17      	bgt.n	800c388 <_puts_r+0x8c>
 800c358:	290a      	cmp	r1, #10
 800c35a:	d015      	beq.n	800c388 <_puts_r+0x8c>
 800c35c:	6823      	ldr	r3, [r4, #0]
 800c35e:	1c5a      	adds	r2, r3, #1
 800c360:	6022      	str	r2, [r4, #0]
 800c362:	7019      	strb	r1, [r3, #0]
 800c364:	68a3      	ldr	r3, [r4, #8]
 800c366:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c36a:	3b01      	subs	r3, #1
 800c36c:	60a3      	str	r3, [r4, #8]
 800c36e:	2900      	cmp	r1, #0
 800c370:	d1ed      	bne.n	800c34e <_puts_r+0x52>
 800c372:	2b00      	cmp	r3, #0
 800c374:	da11      	bge.n	800c39a <_puts_r+0x9e>
 800c376:	4622      	mov	r2, r4
 800c378:	210a      	movs	r1, #10
 800c37a:	4628      	mov	r0, r5
 800c37c:	f000 f85f 	bl	800c43e <__swbuf_r>
 800c380:	3001      	adds	r0, #1
 800c382:	d0d7      	beq.n	800c334 <_puts_r+0x38>
 800c384:	250a      	movs	r5, #10
 800c386:	e7d7      	b.n	800c338 <_puts_r+0x3c>
 800c388:	4622      	mov	r2, r4
 800c38a:	4628      	mov	r0, r5
 800c38c:	f000 f857 	bl	800c43e <__swbuf_r>
 800c390:	3001      	adds	r0, #1
 800c392:	d1e7      	bne.n	800c364 <_puts_r+0x68>
 800c394:	e7ce      	b.n	800c334 <_puts_r+0x38>
 800c396:	3e01      	subs	r6, #1
 800c398:	e7e4      	b.n	800c364 <_puts_r+0x68>
 800c39a:	6823      	ldr	r3, [r4, #0]
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	6022      	str	r2, [r4, #0]
 800c3a0:	220a      	movs	r2, #10
 800c3a2:	701a      	strb	r2, [r3, #0]
 800c3a4:	e7ee      	b.n	800c384 <_puts_r+0x88>
	...

0800c3a8 <puts>:
 800c3a8:	4b02      	ldr	r3, [pc, #8]	@ (800c3b4 <puts+0xc>)
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	6818      	ldr	r0, [r3, #0]
 800c3ae:	f7ff bfa5 	b.w	800c2fc <_puts_r>
 800c3b2:	bf00      	nop
 800c3b4:	2000001c 	.word	0x2000001c

0800c3b8 <__sread>:
 800c3b8:	b510      	push	{r4, lr}
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c0:	f000 f900 	bl	800c5c4 <_read_r>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	bfab      	itete	ge
 800c3c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c3ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c3cc:	181b      	addge	r3, r3, r0
 800c3ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c3d2:	bfac      	ite	ge
 800c3d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c3d6:	81a3      	strhlt	r3, [r4, #12]
 800c3d8:	bd10      	pop	{r4, pc}

0800c3da <__swrite>:
 800c3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3de:	461f      	mov	r7, r3
 800c3e0:	898b      	ldrh	r3, [r1, #12]
 800c3e2:	05db      	lsls	r3, r3, #23
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	4616      	mov	r6, r2
 800c3ea:	d505      	bpl.n	800c3f8 <__swrite+0x1e>
 800c3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f0:	2302      	movs	r3, #2
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f000 f8d4 	bl	800c5a0 <_lseek_r>
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	4632      	mov	r2, r6
 800c406:	463b      	mov	r3, r7
 800c408:	4628      	mov	r0, r5
 800c40a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c40e:	f000 b8eb 	b.w	800c5e8 <_write_r>

0800c412 <__sseek>:
 800c412:	b510      	push	{r4, lr}
 800c414:	460c      	mov	r4, r1
 800c416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41a:	f000 f8c1 	bl	800c5a0 <_lseek_r>
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	89a3      	ldrh	r3, [r4, #12]
 800c422:	bf15      	itete	ne
 800c424:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c426:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c42a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c42e:	81a3      	strheq	r3, [r4, #12]
 800c430:	bf18      	it	ne
 800c432:	81a3      	strhne	r3, [r4, #12]
 800c434:	bd10      	pop	{r4, pc}

0800c436 <__sclose>:
 800c436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c43a:	f000 b8a1 	b.w	800c580 <_close_r>

0800c43e <__swbuf_r>:
 800c43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c440:	460e      	mov	r6, r1
 800c442:	4614      	mov	r4, r2
 800c444:	4605      	mov	r5, r0
 800c446:	b118      	cbz	r0, 800c450 <__swbuf_r+0x12>
 800c448:	6a03      	ldr	r3, [r0, #32]
 800c44a:	b90b      	cbnz	r3, 800c450 <__swbuf_r+0x12>
 800c44c:	f7ff ff0e 	bl	800c26c <__sinit>
 800c450:	69a3      	ldr	r3, [r4, #24]
 800c452:	60a3      	str	r3, [r4, #8]
 800c454:	89a3      	ldrh	r3, [r4, #12]
 800c456:	071a      	lsls	r2, r3, #28
 800c458:	d501      	bpl.n	800c45e <__swbuf_r+0x20>
 800c45a:	6923      	ldr	r3, [r4, #16]
 800c45c:	b943      	cbnz	r3, 800c470 <__swbuf_r+0x32>
 800c45e:	4621      	mov	r1, r4
 800c460:	4628      	mov	r0, r5
 800c462:	f000 f82b 	bl	800c4bc <__swsetup_r>
 800c466:	b118      	cbz	r0, 800c470 <__swbuf_r+0x32>
 800c468:	f04f 37ff 	mov.w	r7, #4294967295
 800c46c:	4638      	mov	r0, r7
 800c46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c470:	6823      	ldr	r3, [r4, #0]
 800c472:	6922      	ldr	r2, [r4, #16]
 800c474:	1a98      	subs	r0, r3, r2
 800c476:	6963      	ldr	r3, [r4, #20]
 800c478:	b2f6      	uxtb	r6, r6
 800c47a:	4283      	cmp	r3, r0
 800c47c:	4637      	mov	r7, r6
 800c47e:	dc05      	bgt.n	800c48c <__swbuf_r+0x4e>
 800c480:	4621      	mov	r1, r4
 800c482:	4628      	mov	r0, r5
 800c484:	f001 fd98 	bl	800dfb8 <_fflush_r>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d1ed      	bne.n	800c468 <__swbuf_r+0x2a>
 800c48c:	68a3      	ldr	r3, [r4, #8]
 800c48e:	3b01      	subs	r3, #1
 800c490:	60a3      	str	r3, [r4, #8]
 800c492:	6823      	ldr	r3, [r4, #0]
 800c494:	1c5a      	adds	r2, r3, #1
 800c496:	6022      	str	r2, [r4, #0]
 800c498:	701e      	strb	r6, [r3, #0]
 800c49a:	6962      	ldr	r2, [r4, #20]
 800c49c:	1c43      	adds	r3, r0, #1
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d004      	beq.n	800c4ac <__swbuf_r+0x6e>
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	07db      	lsls	r3, r3, #31
 800c4a6:	d5e1      	bpl.n	800c46c <__swbuf_r+0x2e>
 800c4a8:	2e0a      	cmp	r6, #10
 800c4aa:	d1df      	bne.n	800c46c <__swbuf_r+0x2e>
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f001 fd82 	bl	800dfb8 <_fflush_r>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d0d9      	beq.n	800c46c <__swbuf_r+0x2e>
 800c4b8:	e7d6      	b.n	800c468 <__swbuf_r+0x2a>
	...

0800c4bc <__swsetup_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4b29      	ldr	r3, [pc, #164]	@ (800c564 <__swsetup_r+0xa8>)
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	6818      	ldr	r0, [r3, #0]
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	b118      	cbz	r0, 800c4d0 <__swsetup_r+0x14>
 800c4c8:	6a03      	ldr	r3, [r0, #32]
 800c4ca:	b90b      	cbnz	r3, 800c4d0 <__swsetup_r+0x14>
 800c4cc:	f7ff fece 	bl	800c26c <__sinit>
 800c4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d4:	0719      	lsls	r1, r3, #28
 800c4d6:	d422      	bmi.n	800c51e <__swsetup_r+0x62>
 800c4d8:	06da      	lsls	r2, r3, #27
 800c4da:	d407      	bmi.n	800c4ec <__swsetup_r+0x30>
 800c4dc:	2209      	movs	r2, #9
 800c4de:	602a      	str	r2, [r5, #0]
 800c4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4e4:	81a3      	strh	r3, [r4, #12]
 800c4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ea:	e033      	b.n	800c554 <__swsetup_r+0x98>
 800c4ec:	0758      	lsls	r0, r3, #29
 800c4ee:	d512      	bpl.n	800c516 <__swsetup_r+0x5a>
 800c4f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4f2:	b141      	cbz	r1, 800c506 <__swsetup_r+0x4a>
 800c4f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4f8:	4299      	cmp	r1, r3
 800c4fa:	d002      	beq.n	800c502 <__swsetup_r+0x46>
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f000 ff1b 	bl	800d338 <_free_r>
 800c502:	2300      	movs	r3, #0
 800c504:	6363      	str	r3, [r4, #52]	@ 0x34
 800c506:	89a3      	ldrh	r3, [r4, #12]
 800c508:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c50c:	81a3      	strh	r3, [r4, #12]
 800c50e:	2300      	movs	r3, #0
 800c510:	6063      	str	r3, [r4, #4]
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	89a3      	ldrh	r3, [r4, #12]
 800c518:	f043 0308 	orr.w	r3, r3, #8
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	6923      	ldr	r3, [r4, #16]
 800c520:	b94b      	cbnz	r3, 800c536 <__swsetup_r+0x7a>
 800c522:	89a3      	ldrh	r3, [r4, #12]
 800c524:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c52c:	d003      	beq.n	800c536 <__swsetup_r+0x7a>
 800c52e:	4621      	mov	r1, r4
 800c530:	4628      	mov	r0, r5
 800c532:	f001 fd8f 	bl	800e054 <__smakebuf_r>
 800c536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c53a:	f013 0201 	ands.w	r2, r3, #1
 800c53e:	d00a      	beq.n	800c556 <__swsetup_r+0x9a>
 800c540:	2200      	movs	r2, #0
 800c542:	60a2      	str	r2, [r4, #8]
 800c544:	6962      	ldr	r2, [r4, #20]
 800c546:	4252      	negs	r2, r2
 800c548:	61a2      	str	r2, [r4, #24]
 800c54a:	6922      	ldr	r2, [r4, #16]
 800c54c:	b942      	cbnz	r2, 800c560 <__swsetup_r+0xa4>
 800c54e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c552:	d1c5      	bne.n	800c4e0 <__swsetup_r+0x24>
 800c554:	bd38      	pop	{r3, r4, r5, pc}
 800c556:	0799      	lsls	r1, r3, #30
 800c558:	bf58      	it	pl
 800c55a:	6962      	ldrpl	r2, [r4, #20]
 800c55c:	60a2      	str	r2, [r4, #8]
 800c55e:	e7f4      	b.n	800c54a <__swsetup_r+0x8e>
 800c560:	2000      	movs	r0, #0
 800c562:	e7f7      	b.n	800c554 <__swsetup_r+0x98>
 800c564:	2000001c 	.word	0x2000001c

0800c568 <memset>:
 800c568:	4402      	add	r2, r0
 800c56a:	4603      	mov	r3, r0
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d100      	bne.n	800c572 <memset+0xa>
 800c570:	4770      	bx	lr
 800c572:	f803 1b01 	strb.w	r1, [r3], #1
 800c576:	e7f9      	b.n	800c56c <memset+0x4>

0800c578 <_localeconv_r>:
 800c578:	4800      	ldr	r0, [pc, #0]	@ (800c57c <_localeconv_r+0x4>)
 800c57a:	4770      	bx	lr
 800c57c:	2000015c 	.word	0x2000015c

0800c580 <_close_r>:
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	4d06      	ldr	r5, [pc, #24]	@ (800c59c <_close_r+0x1c>)
 800c584:	2300      	movs	r3, #0
 800c586:	4604      	mov	r4, r0
 800c588:	4608      	mov	r0, r1
 800c58a:	602b      	str	r3, [r5, #0]
 800c58c:	f7f9 fed6 	bl	800633c <_close>
 800c590:	1c43      	adds	r3, r0, #1
 800c592:	d102      	bne.n	800c59a <_close_r+0x1a>
 800c594:	682b      	ldr	r3, [r5, #0]
 800c596:	b103      	cbz	r3, 800c59a <_close_r+0x1a>
 800c598:	6023      	str	r3, [r4, #0]
 800c59a:	bd38      	pop	{r3, r4, r5, pc}
 800c59c:	200006bc 	.word	0x200006bc

0800c5a0 <_lseek_r>:
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4d07      	ldr	r5, [pc, #28]	@ (800c5c0 <_lseek_r+0x20>)
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	4608      	mov	r0, r1
 800c5a8:	4611      	mov	r1, r2
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	602a      	str	r2, [r5, #0]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	f7f9 feeb 	bl	800638a <_lseek>
 800c5b4:	1c43      	adds	r3, r0, #1
 800c5b6:	d102      	bne.n	800c5be <_lseek_r+0x1e>
 800c5b8:	682b      	ldr	r3, [r5, #0]
 800c5ba:	b103      	cbz	r3, 800c5be <_lseek_r+0x1e>
 800c5bc:	6023      	str	r3, [r4, #0]
 800c5be:	bd38      	pop	{r3, r4, r5, pc}
 800c5c0:	200006bc 	.word	0x200006bc

0800c5c4 <_read_r>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4d07      	ldr	r5, [pc, #28]	@ (800c5e4 <_read_r+0x20>)
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	4608      	mov	r0, r1
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	602a      	str	r2, [r5, #0]
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	f7f9 fe95 	bl	8006302 <_read>
 800c5d8:	1c43      	adds	r3, r0, #1
 800c5da:	d102      	bne.n	800c5e2 <_read_r+0x1e>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	b103      	cbz	r3, 800c5e2 <_read_r+0x1e>
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	200006bc 	.word	0x200006bc

0800c5e8 <_write_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4d07      	ldr	r5, [pc, #28]	@ (800c608 <_write_r+0x20>)
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	4608      	mov	r0, r1
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	602a      	str	r2, [r5, #0]
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f7f6 ff0c 	bl	8003414 <_write>
 800c5fc:	1c43      	adds	r3, r0, #1
 800c5fe:	d102      	bne.n	800c606 <_write_r+0x1e>
 800c600:	682b      	ldr	r3, [r5, #0]
 800c602:	b103      	cbz	r3, 800c606 <_write_r+0x1e>
 800c604:	6023      	str	r3, [r4, #0]
 800c606:	bd38      	pop	{r3, r4, r5, pc}
 800c608:	200006bc 	.word	0x200006bc

0800c60c <__errno>:
 800c60c:	4b01      	ldr	r3, [pc, #4]	@ (800c614 <__errno+0x8>)
 800c60e:	6818      	ldr	r0, [r3, #0]
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	2000001c 	.word	0x2000001c

0800c618 <__libc_init_array>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	4d0d      	ldr	r5, [pc, #52]	@ (800c650 <__libc_init_array+0x38>)
 800c61c:	4c0d      	ldr	r4, [pc, #52]	@ (800c654 <__libc_init_array+0x3c>)
 800c61e:	1b64      	subs	r4, r4, r5
 800c620:	10a4      	asrs	r4, r4, #2
 800c622:	2600      	movs	r6, #0
 800c624:	42a6      	cmp	r6, r4
 800c626:	d109      	bne.n	800c63c <__libc_init_array+0x24>
 800c628:	4d0b      	ldr	r5, [pc, #44]	@ (800c658 <__libc_init_array+0x40>)
 800c62a:	4c0c      	ldr	r4, [pc, #48]	@ (800c65c <__libc_init_array+0x44>)
 800c62c:	f002 fc82 	bl	800ef34 <_init>
 800c630:	1b64      	subs	r4, r4, r5
 800c632:	10a4      	asrs	r4, r4, #2
 800c634:	2600      	movs	r6, #0
 800c636:	42a6      	cmp	r6, r4
 800c638:	d105      	bne.n	800c646 <__libc_init_array+0x2e>
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
 800c63c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c640:	4798      	blx	r3
 800c642:	3601      	adds	r6, #1
 800c644:	e7ee      	b.n	800c624 <__libc_init_array+0xc>
 800c646:	f855 3b04 	ldr.w	r3, [r5], #4
 800c64a:	4798      	blx	r3
 800c64c:	3601      	adds	r6, #1
 800c64e:	e7f2      	b.n	800c636 <__libc_init_array+0x1e>
 800c650:	0800f74c 	.word	0x0800f74c
 800c654:	0800f74c 	.word	0x0800f74c
 800c658:	0800f74c 	.word	0x0800f74c
 800c65c:	0800f750 	.word	0x0800f750

0800c660 <__retarget_lock_init_recursive>:
 800c660:	4770      	bx	lr

0800c662 <__retarget_lock_acquire_recursive>:
 800c662:	4770      	bx	lr

0800c664 <__retarget_lock_release_recursive>:
 800c664:	4770      	bx	lr

0800c666 <memcpy>:
 800c666:	440a      	add	r2, r1
 800c668:	4291      	cmp	r1, r2
 800c66a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c66e:	d100      	bne.n	800c672 <memcpy+0xc>
 800c670:	4770      	bx	lr
 800c672:	b510      	push	{r4, lr}
 800c674:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c67c:	4291      	cmp	r1, r2
 800c67e:	d1f9      	bne.n	800c674 <memcpy+0xe>
 800c680:	bd10      	pop	{r4, pc}

0800c682 <quorem>:
 800c682:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c686:	6903      	ldr	r3, [r0, #16]
 800c688:	690c      	ldr	r4, [r1, #16]
 800c68a:	42a3      	cmp	r3, r4
 800c68c:	4607      	mov	r7, r0
 800c68e:	db7e      	blt.n	800c78e <quorem+0x10c>
 800c690:	3c01      	subs	r4, #1
 800c692:	f101 0814 	add.w	r8, r1, #20
 800c696:	00a3      	lsls	r3, r4, #2
 800c698:	f100 0514 	add.w	r5, r0, #20
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6a2:	9301      	str	r3, [sp, #4]
 800c6a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c6b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c6b8:	d32e      	bcc.n	800c718 <quorem+0x96>
 800c6ba:	f04f 0a00 	mov.w	sl, #0
 800c6be:	46c4      	mov	ip, r8
 800c6c0:	46ae      	mov	lr, r5
 800c6c2:	46d3      	mov	fp, sl
 800c6c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c6c8:	b298      	uxth	r0, r3
 800c6ca:	fb06 a000 	mla	r0, r6, r0, sl
 800c6ce:	0c02      	lsrs	r2, r0, #16
 800c6d0:	0c1b      	lsrs	r3, r3, #16
 800c6d2:	fb06 2303 	mla	r3, r6, r3, r2
 800c6d6:	f8de 2000 	ldr.w	r2, [lr]
 800c6da:	b280      	uxth	r0, r0
 800c6dc:	b292      	uxth	r2, r2
 800c6de:	1a12      	subs	r2, r2, r0
 800c6e0:	445a      	add	r2, fp
 800c6e2:	f8de 0000 	ldr.w	r0, [lr]
 800c6e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c6f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c6f4:	b292      	uxth	r2, r2
 800c6f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c6fa:	45e1      	cmp	r9, ip
 800c6fc:	f84e 2b04 	str.w	r2, [lr], #4
 800c700:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c704:	d2de      	bcs.n	800c6c4 <quorem+0x42>
 800c706:	9b00      	ldr	r3, [sp, #0]
 800c708:	58eb      	ldr	r3, [r5, r3]
 800c70a:	b92b      	cbnz	r3, 800c718 <quorem+0x96>
 800c70c:	9b01      	ldr	r3, [sp, #4]
 800c70e:	3b04      	subs	r3, #4
 800c710:	429d      	cmp	r5, r3
 800c712:	461a      	mov	r2, r3
 800c714:	d32f      	bcc.n	800c776 <quorem+0xf4>
 800c716:	613c      	str	r4, [r7, #16]
 800c718:	4638      	mov	r0, r7
 800c71a:	f001 f97f 	bl	800da1c <__mcmp>
 800c71e:	2800      	cmp	r0, #0
 800c720:	db25      	blt.n	800c76e <quorem+0xec>
 800c722:	4629      	mov	r1, r5
 800c724:	2000      	movs	r0, #0
 800c726:	f858 2b04 	ldr.w	r2, [r8], #4
 800c72a:	f8d1 c000 	ldr.w	ip, [r1]
 800c72e:	fa1f fe82 	uxth.w	lr, r2
 800c732:	fa1f f38c 	uxth.w	r3, ip
 800c736:	eba3 030e 	sub.w	r3, r3, lr
 800c73a:	4403      	add	r3, r0
 800c73c:	0c12      	lsrs	r2, r2, #16
 800c73e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c742:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c746:	b29b      	uxth	r3, r3
 800c748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c74c:	45c1      	cmp	r9, r8
 800c74e:	f841 3b04 	str.w	r3, [r1], #4
 800c752:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c756:	d2e6      	bcs.n	800c726 <quorem+0xa4>
 800c758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c75c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c760:	b922      	cbnz	r2, 800c76c <quorem+0xea>
 800c762:	3b04      	subs	r3, #4
 800c764:	429d      	cmp	r5, r3
 800c766:	461a      	mov	r2, r3
 800c768:	d30b      	bcc.n	800c782 <quorem+0x100>
 800c76a:	613c      	str	r4, [r7, #16]
 800c76c:	3601      	adds	r6, #1
 800c76e:	4630      	mov	r0, r6
 800c770:	b003      	add	sp, #12
 800c772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c776:	6812      	ldr	r2, [r2, #0]
 800c778:	3b04      	subs	r3, #4
 800c77a:	2a00      	cmp	r2, #0
 800c77c:	d1cb      	bne.n	800c716 <quorem+0x94>
 800c77e:	3c01      	subs	r4, #1
 800c780:	e7c6      	b.n	800c710 <quorem+0x8e>
 800c782:	6812      	ldr	r2, [r2, #0]
 800c784:	3b04      	subs	r3, #4
 800c786:	2a00      	cmp	r2, #0
 800c788:	d1ef      	bne.n	800c76a <quorem+0xe8>
 800c78a:	3c01      	subs	r4, #1
 800c78c:	e7ea      	b.n	800c764 <quorem+0xe2>
 800c78e:	2000      	movs	r0, #0
 800c790:	e7ee      	b.n	800c770 <quorem+0xee>
 800c792:	0000      	movs	r0, r0
 800c794:	0000      	movs	r0, r0
	...

0800c798 <_dtoa_r>:
 800c798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	69c7      	ldr	r7, [r0, #28]
 800c79e:	b097      	sub	sp, #92	@ 0x5c
 800c7a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c7a4:	ec55 4b10 	vmov	r4, r5, d0
 800c7a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c7aa:	9107      	str	r1, [sp, #28]
 800c7ac:	4681      	mov	r9, r0
 800c7ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800c7b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c7b2:	b97f      	cbnz	r7, 800c7d4 <_dtoa_r+0x3c>
 800c7b4:	2010      	movs	r0, #16
 800c7b6:	f000 fe09 	bl	800d3cc <malloc>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	f8c9 001c 	str.w	r0, [r9, #28]
 800c7c0:	b920      	cbnz	r0, 800c7cc <_dtoa_r+0x34>
 800c7c2:	4ba9      	ldr	r3, [pc, #676]	@ (800ca68 <_dtoa_r+0x2d0>)
 800c7c4:	21ef      	movs	r1, #239	@ 0xef
 800c7c6:	48a9      	ldr	r0, [pc, #676]	@ (800ca6c <_dtoa_r+0x2d4>)
 800c7c8:	f001 fcb2 	bl	800e130 <__assert_func>
 800c7cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c7d0:	6007      	str	r7, [r0, #0]
 800c7d2:	60c7      	str	r7, [r0, #12]
 800c7d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c7d8:	6819      	ldr	r1, [r3, #0]
 800c7da:	b159      	cbz	r1, 800c7f4 <_dtoa_r+0x5c>
 800c7dc:	685a      	ldr	r2, [r3, #4]
 800c7de:	604a      	str	r2, [r1, #4]
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	4093      	lsls	r3, r2
 800c7e4:	608b      	str	r3, [r1, #8]
 800c7e6:	4648      	mov	r0, r9
 800c7e8:	f000 fee6 	bl	800d5b8 <_Bfree>
 800c7ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	601a      	str	r2, [r3, #0]
 800c7f4:	1e2b      	subs	r3, r5, #0
 800c7f6:	bfb9      	ittee	lt
 800c7f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c7fc:	9305      	strlt	r3, [sp, #20]
 800c7fe:	2300      	movge	r3, #0
 800c800:	6033      	strge	r3, [r6, #0]
 800c802:	9f05      	ldr	r7, [sp, #20]
 800c804:	4b9a      	ldr	r3, [pc, #616]	@ (800ca70 <_dtoa_r+0x2d8>)
 800c806:	bfbc      	itt	lt
 800c808:	2201      	movlt	r2, #1
 800c80a:	6032      	strlt	r2, [r6, #0]
 800c80c:	43bb      	bics	r3, r7
 800c80e:	d112      	bne.n	800c836 <_dtoa_r+0x9e>
 800c810:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c812:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c81c:	4323      	orrs	r3, r4
 800c81e:	f000 855a 	beq.w	800d2d6 <_dtoa_r+0xb3e>
 800c822:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c824:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ca84 <_dtoa_r+0x2ec>
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f000 855c 	beq.w	800d2e6 <_dtoa_r+0xb4e>
 800c82e:	f10a 0303 	add.w	r3, sl, #3
 800c832:	f000 bd56 	b.w	800d2e2 <_dtoa_r+0xb4a>
 800c836:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c83a:	2200      	movs	r2, #0
 800c83c:	ec51 0b17 	vmov	r0, r1, d7
 800c840:	2300      	movs	r3, #0
 800c842:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c846:	f7f4 f93f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c84a:	4680      	mov	r8, r0
 800c84c:	b158      	cbz	r0, 800c866 <_dtoa_r+0xce>
 800c84e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c850:	2301      	movs	r3, #1
 800c852:	6013      	str	r3, [r2, #0]
 800c854:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c856:	b113      	cbz	r3, 800c85e <_dtoa_r+0xc6>
 800c858:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c85a:	4b86      	ldr	r3, [pc, #536]	@ (800ca74 <_dtoa_r+0x2dc>)
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ca88 <_dtoa_r+0x2f0>
 800c862:	f000 bd40 	b.w	800d2e6 <_dtoa_r+0xb4e>
 800c866:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c86a:	aa14      	add	r2, sp, #80	@ 0x50
 800c86c:	a915      	add	r1, sp, #84	@ 0x54
 800c86e:	4648      	mov	r0, r9
 800c870:	f001 f984 	bl	800db7c <__d2b>
 800c874:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c878:	9002      	str	r0, [sp, #8]
 800c87a:	2e00      	cmp	r6, #0
 800c87c:	d078      	beq.n	800c970 <_dtoa_r+0x1d8>
 800c87e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c880:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c888:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c88c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c890:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c894:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c898:	4619      	mov	r1, r3
 800c89a:	2200      	movs	r2, #0
 800c89c:	4b76      	ldr	r3, [pc, #472]	@ (800ca78 <_dtoa_r+0x2e0>)
 800c89e:	f7f3 fcf3 	bl	8000288 <__aeabi_dsub>
 800c8a2:	a36b      	add	r3, pc, #428	@ (adr r3, 800ca50 <_dtoa_r+0x2b8>)
 800c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a8:	f7f3 fea6 	bl	80005f8 <__aeabi_dmul>
 800c8ac:	a36a      	add	r3, pc, #424	@ (adr r3, 800ca58 <_dtoa_r+0x2c0>)
 800c8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b2:	f7f3 fceb 	bl	800028c <__adddf3>
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	460d      	mov	r5, r1
 800c8bc:	f7f3 fe32 	bl	8000524 <__aeabi_i2d>
 800c8c0:	a367      	add	r3, pc, #412	@ (adr r3, 800ca60 <_dtoa_r+0x2c8>)
 800c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c6:	f7f3 fe97 	bl	80005f8 <__aeabi_dmul>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	f7f3 fcdb 	bl	800028c <__adddf3>
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	460d      	mov	r5, r1
 800c8da:	f7f4 f93d 	bl	8000b58 <__aeabi_d2iz>
 800c8de:	2200      	movs	r2, #0
 800c8e0:	4607      	mov	r7, r0
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f4 f8f8 	bl	8000adc <__aeabi_dcmplt>
 800c8ec:	b140      	cbz	r0, 800c900 <_dtoa_r+0x168>
 800c8ee:	4638      	mov	r0, r7
 800c8f0:	f7f3 fe18 	bl	8000524 <__aeabi_i2d>
 800c8f4:	4622      	mov	r2, r4
 800c8f6:	462b      	mov	r3, r5
 800c8f8:	f7f4 f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8fc:	b900      	cbnz	r0, 800c900 <_dtoa_r+0x168>
 800c8fe:	3f01      	subs	r7, #1
 800c900:	2f16      	cmp	r7, #22
 800c902:	d852      	bhi.n	800c9aa <_dtoa_r+0x212>
 800c904:	4b5d      	ldr	r3, [pc, #372]	@ (800ca7c <_dtoa_r+0x2e4>)
 800c906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c912:	f7f4 f8e3 	bl	8000adc <__aeabi_dcmplt>
 800c916:	2800      	cmp	r0, #0
 800c918:	d049      	beq.n	800c9ae <_dtoa_r+0x216>
 800c91a:	3f01      	subs	r7, #1
 800c91c:	2300      	movs	r3, #0
 800c91e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c920:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c922:	1b9b      	subs	r3, r3, r6
 800c924:	1e5a      	subs	r2, r3, #1
 800c926:	bf45      	ittet	mi
 800c928:	f1c3 0301 	rsbmi	r3, r3, #1
 800c92c:	9300      	strmi	r3, [sp, #0]
 800c92e:	2300      	movpl	r3, #0
 800c930:	2300      	movmi	r3, #0
 800c932:	9206      	str	r2, [sp, #24]
 800c934:	bf54      	ite	pl
 800c936:	9300      	strpl	r3, [sp, #0]
 800c938:	9306      	strmi	r3, [sp, #24]
 800c93a:	2f00      	cmp	r7, #0
 800c93c:	db39      	blt.n	800c9b2 <_dtoa_r+0x21a>
 800c93e:	9b06      	ldr	r3, [sp, #24]
 800c940:	970d      	str	r7, [sp, #52]	@ 0x34
 800c942:	443b      	add	r3, r7
 800c944:	9306      	str	r3, [sp, #24]
 800c946:	2300      	movs	r3, #0
 800c948:	9308      	str	r3, [sp, #32]
 800c94a:	9b07      	ldr	r3, [sp, #28]
 800c94c:	2b09      	cmp	r3, #9
 800c94e:	d863      	bhi.n	800ca18 <_dtoa_r+0x280>
 800c950:	2b05      	cmp	r3, #5
 800c952:	bfc4      	itt	gt
 800c954:	3b04      	subgt	r3, #4
 800c956:	9307      	strgt	r3, [sp, #28]
 800c958:	9b07      	ldr	r3, [sp, #28]
 800c95a:	f1a3 0302 	sub.w	r3, r3, #2
 800c95e:	bfcc      	ite	gt
 800c960:	2400      	movgt	r4, #0
 800c962:	2401      	movle	r4, #1
 800c964:	2b03      	cmp	r3, #3
 800c966:	d863      	bhi.n	800ca30 <_dtoa_r+0x298>
 800c968:	e8df f003 	tbb	[pc, r3]
 800c96c:	2b375452 	.word	0x2b375452
 800c970:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c974:	441e      	add	r6, r3
 800c976:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c97a:	2b20      	cmp	r3, #32
 800c97c:	bfc1      	itttt	gt
 800c97e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c982:	409f      	lslgt	r7, r3
 800c984:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c988:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c98c:	bfd6      	itet	le
 800c98e:	f1c3 0320 	rsble	r3, r3, #32
 800c992:	ea47 0003 	orrgt.w	r0, r7, r3
 800c996:	fa04 f003 	lslle.w	r0, r4, r3
 800c99a:	f7f3 fdb3 	bl	8000504 <__aeabi_ui2d>
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c9a4:	3e01      	subs	r6, #1
 800c9a6:	9212      	str	r2, [sp, #72]	@ 0x48
 800c9a8:	e776      	b.n	800c898 <_dtoa_r+0x100>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e7b7      	b.n	800c91e <_dtoa_r+0x186>
 800c9ae:	9010      	str	r0, [sp, #64]	@ 0x40
 800c9b0:	e7b6      	b.n	800c920 <_dtoa_r+0x188>
 800c9b2:	9b00      	ldr	r3, [sp, #0]
 800c9b4:	1bdb      	subs	r3, r3, r7
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	427b      	negs	r3, r7
 800c9ba:	9308      	str	r3, [sp, #32]
 800c9bc:	2300      	movs	r3, #0
 800c9be:	930d      	str	r3, [sp, #52]	@ 0x34
 800c9c0:	e7c3      	b.n	800c94a <_dtoa_r+0x1b2>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c9c8:	eb07 0b03 	add.w	fp, r7, r3
 800c9cc:	f10b 0301 	add.w	r3, fp, #1
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	9303      	str	r3, [sp, #12]
 800c9d4:	bfb8      	it	lt
 800c9d6:	2301      	movlt	r3, #1
 800c9d8:	e006      	b.n	800c9e8 <_dtoa_r+0x250>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	dd28      	ble.n	800ca36 <_dtoa_r+0x29e>
 800c9e4:	469b      	mov	fp, r3
 800c9e6:	9303      	str	r3, [sp, #12]
 800c9e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	2204      	movs	r2, #4
 800c9f0:	f102 0514 	add.w	r5, r2, #20
 800c9f4:	429d      	cmp	r5, r3
 800c9f6:	d926      	bls.n	800ca46 <_dtoa_r+0x2ae>
 800c9f8:	6041      	str	r1, [r0, #4]
 800c9fa:	4648      	mov	r0, r9
 800c9fc:	f000 fd9c 	bl	800d538 <_Balloc>
 800ca00:	4682      	mov	sl, r0
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d142      	bne.n	800ca8c <_dtoa_r+0x2f4>
 800ca06:	4b1e      	ldr	r3, [pc, #120]	@ (800ca80 <_dtoa_r+0x2e8>)
 800ca08:	4602      	mov	r2, r0
 800ca0a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ca0e:	e6da      	b.n	800c7c6 <_dtoa_r+0x2e>
 800ca10:	2300      	movs	r3, #0
 800ca12:	e7e3      	b.n	800c9dc <_dtoa_r+0x244>
 800ca14:	2300      	movs	r3, #0
 800ca16:	e7d5      	b.n	800c9c4 <_dtoa_r+0x22c>
 800ca18:	2401      	movs	r4, #1
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9307      	str	r3, [sp, #28]
 800ca1e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ca20:	f04f 3bff 	mov.w	fp, #4294967295
 800ca24:	2200      	movs	r2, #0
 800ca26:	f8cd b00c 	str.w	fp, [sp, #12]
 800ca2a:	2312      	movs	r3, #18
 800ca2c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ca2e:	e7db      	b.n	800c9e8 <_dtoa_r+0x250>
 800ca30:	2301      	movs	r3, #1
 800ca32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca34:	e7f4      	b.n	800ca20 <_dtoa_r+0x288>
 800ca36:	f04f 0b01 	mov.w	fp, #1
 800ca3a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ca3e:	465b      	mov	r3, fp
 800ca40:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ca44:	e7d0      	b.n	800c9e8 <_dtoa_r+0x250>
 800ca46:	3101      	adds	r1, #1
 800ca48:	0052      	lsls	r2, r2, #1
 800ca4a:	e7d1      	b.n	800c9f0 <_dtoa_r+0x258>
 800ca4c:	f3af 8000 	nop.w
 800ca50:	636f4361 	.word	0x636f4361
 800ca54:	3fd287a7 	.word	0x3fd287a7
 800ca58:	8b60c8b3 	.word	0x8b60c8b3
 800ca5c:	3fc68a28 	.word	0x3fc68a28
 800ca60:	509f79fb 	.word	0x509f79fb
 800ca64:	3fd34413 	.word	0x3fd34413
 800ca68:	0800f3c1 	.word	0x0800f3c1
 800ca6c:	0800f3d8 	.word	0x0800f3d8
 800ca70:	7ff00000 	.word	0x7ff00000
 800ca74:	0800f391 	.word	0x0800f391
 800ca78:	3ff80000 	.word	0x3ff80000
 800ca7c:	0800f528 	.word	0x0800f528
 800ca80:	0800f430 	.word	0x0800f430
 800ca84:	0800f3bd 	.word	0x0800f3bd
 800ca88:	0800f390 	.word	0x0800f390
 800ca8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ca90:	6018      	str	r0, [r3, #0]
 800ca92:	9b03      	ldr	r3, [sp, #12]
 800ca94:	2b0e      	cmp	r3, #14
 800ca96:	f200 80a1 	bhi.w	800cbdc <_dtoa_r+0x444>
 800ca9a:	2c00      	cmp	r4, #0
 800ca9c:	f000 809e 	beq.w	800cbdc <_dtoa_r+0x444>
 800caa0:	2f00      	cmp	r7, #0
 800caa2:	dd33      	ble.n	800cb0c <_dtoa_r+0x374>
 800caa4:	4b9c      	ldr	r3, [pc, #624]	@ (800cd18 <_dtoa_r+0x580>)
 800caa6:	f007 020f 	and.w	r2, r7, #15
 800caaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800caae:	ed93 7b00 	vldr	d7, [r3]
 800cab2:	05f8      	lsls	r0, r7, #23
 800cab4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cab8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cabc:	d516      	bpl.n	800caec <_dtoa_r+0x354>
 800cabe:	4b97      	ldr	r3, [pc, #604]	@ (800cd1c <_dtoa_r+0x584>)
 800cac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cac8:	f7f3 fec0 	bl	800084c <__aeabi_ddiv>
 800cacc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cad0:	f004 040f 	and.w	r4, r4, #15
 800cad4:	2603      	movs	r6, #3
 800cad6:	4d91      	ldr	r5, [pc, #580]	@ (800cd1c <_dtoa_r+0x584>)
 800cad8:	b954      	cbnz	r4, 800caf0 <_dtoa_r+0x358>
 800cada:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cae2:	f7f3 feb3 	bl	800084c <__aeabi_ddiv>
 800cae6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800caea:	e028      	b.n	800cb3e <_dtoa_r+0x3a6>
 800caec:	2602      	movs	r6, #2
 800caee:	e7f2      	b.n	800cad6 <_dtoa_r+0x33e>
 800caf0:	07e1      	lsls	r1, r4, #31
 800caf2:	d508      	bpl.n	800cb06 <_dtoa_r+0x36e>
 800caf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800caf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cafc:	f7f3 fd7c 	bl	80005f8 <__aeabi_dmul>
 800cb00:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cb04:	3601      	adds	r6, #1
 800cb06:	1064      	asrs	r4, r4, #1
 800cb08:	3508      	adds	r5, #8
 800cb0a:	e7e5      	b.n	800cad8 <_dtoa_r+0x340>
 800cb0c:	f000 80af 	beq.w	800cc6e <_dtoa_r+0x4d6>
 800cb10:	427c      	negs	r4, r7
 800cb12:	4b81      	ldr	r3, [pc, #516]	@ (800cd18 <_dtoa_r+0x580>)
 800cb14:	4d81      	ldr	r5, [pc, #516]	@ (800cd1c <_dtoa_r+0x584>)
 800cb16:	f004 020f 	and.w	r2, r4, #15
 800cb1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cb26:	f7f3 fd67 	bl	80005f8 <__aeabi_dmul>
 800cb2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb2e:	1124      	asrs	r4, r4, #4
 800cb30:	2300      	movs	r3, #0
 800cb32:	2602      	movs	r6, #2
 800cb34:	2c00      	cmp	r4, #0
 800cb36:	f040 808f 	bne.w	800cc58 <_dtoa_r+0x4c0>
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1d3      	bne.n	800cae6 <_dtoa_r+0x34e>
 800cb3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb40:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f000 8094 	beq.w	800cc72 <_dtoa_r+0x4da>
 800cb4a:	4b75      	ldr	r3, [pc, #468]	@ (800cd20 <_dtoa_r+0x588>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	4620      	mov	r0, r4
 800cb50:	4629      	mov	r1, r5
 800cb52:	f7f3 ffc3 	bl	8000adc <__aeabi_dcmplt>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f000 808b 	beq.w	800cc72 <_dtoa_r+0x4da>
 800cb5c:	9b03      	ldr	r3, [sp, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 8087 	beq.w	800cc72 <_dtoa_r+0x4da>
 800cb64:	f1bb 0f00 	cmp.w	fp, #0
 800cb68:	dd34      	ble.n	800cbd4 <_dtoa_r+0x43c>
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	4b6d      	ldr	r3, [pc, #436]	@ (800cd24 <_dtoa_r+0x58c>)
 800cb6e:	2200      	movs	r2, #0
 800cb70:	4629      	mov	r1, r5
 800cb72:	f7f3 fd41 	bl	80005f8 <__aeabi_dmul>
 800cb76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb7a:	f107 38ff 	add.w	r8, r7, #4294967295
 800cb7e:	3601      	adds	r6, #1
 800cb80:	465c      	mov	r4, fp
 800cb82:	4630      	mov	r0, r6
 800cb84:	f7f3 fcce 	bl	8000524 <__aeabi_i2d>
 800cb88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb8c:	f7f3 fd34 	bl	80005f8 <__aeabi_dmul>
 800cb90:	4b65      	ldr	r3, [pc, #404]	@ (800cd28 <_dtoa_r+0x590>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	f7f3 fb7a 	bl	800028c <__adddf3>
 800cb98:	4605      	mov	r5, r0
 800cb9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cb9e:	2c00      	cmp	r4, #0
 800cba0:	d16a      	bne.n	800cc78 <_dtoa_r+0x4e0>
 800cba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cba6:	4b61      	ldr	r3, [pc, #388]	@ (800cd2c <_dtoa_r+0x594>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f7f3 fb6d 	bl	8000288 <__aeabi_dsub>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbb6:	462a      	mov	r2, r5
 800cbb8:	4633      	mov	r3, r6
 800cbba:	f7f3 ffad 	bl	8000b18 <__aeabi_dcmpgt>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	f040 8298 	bne.w	800d0f4 <_dtoa_r+0x95c>
 800cbc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbc8:	462a      	mov	r2, r5
 800cbca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cbce:	f7f3 ff85 	bl	8000adc <__aeabi_dcmplt>
 800cbd2:	bb38      	cbnz	r0, 800cc24 <_dtoa_r+0x48c>
 800cbd4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800cbd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cbdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f2c0 8157 	blt.w	800ce92 <_dtoa_r+0x6fa>
 800cbe4:	2f0e      	cmp	r7, #14
 800cbe6:	f300 8154 	bgt.w	800ce92 <_dtoa_r+0x6fa>
 800cbea:	4b4b      	ldr	r3, [pc, #300]	@ (800cd18 <_dtoa_r+0x580>)
 800cbec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cbf0:	ed93 7b00 	vldr	d7, [r3]
 800cbf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	ed8d 7b00 	vstr	d7, [sp]
 800cbfc:	f280 80e5 	bge.w	800cdca <_dtoa_r+0x632>
 800cc00:	9b03      	ldr	r3, [sp, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	f300 80e1 	bgt.w	800cdca <_dtoa_r+0x632>
 800cc08:	d10c      	bne.n	800cc24 <_dtoa_r+0x48c>
 800cc0a:	4b48      	ldr	r3, [pc, #288]	@ (800cd2c <_dtoa_r+0x594>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	ec51 0b17 	vmov	r0, r1, d7
 800cc12:	f7f3 fcf1 	bl	80005f8 <__aeabi_dmul>
 800cc16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc1a:	f7f3 ff73 	bl	8000b04 <__aeabi_dcmpge>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	f000 8266 	beq.w	800d0f0 <_dtoa_r+0x958>
 800cc24:	2400      	movs	r4, #0
 800cc26:	4625      	mov	r5, r4
 800cc28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc2a:	4656      	mov	r6, sl
 800cc2c:	ea6f 0803 	mvn.w	r8, r3
 800cc30:	2700      	movs	r7, #0
 800cc32:	4621      	mov	r1, r4
 800cc34:	4648      	mov	r0, r9
 800cc36:	f000 fcbf 	bl	800d5b8 <_Bfree>
 800cc3a:	2d00      	cmp	r5, #0
 800cc3c:	f000 80bd 	beq.w	800cdba <_dtoa_r+0x622>
 800cc40:	b12f      	cbz	r7, 800cc4e <_dtoa_r+0x4b6>
 800cc42:	42af      	cmp	r7, r5
 800cc44:	d003      	beq.n	800cc4e <_dtoa_r+0x4b6>
 800cc46:	4639      	mov	r1, r7
 800cc48:	4648      	mov	r0, r9
 800cc4a:	f000 fcb5 	bl	800d5b8 <_Bfree>
 800cc4e:	4629      	mov	r1, r5
 800cc50:	4648      	mov	r0, r9
 800cc52:	f000 fcb1 	bl	800d5b8 <_Bfree>
 800cc56:	e0b0      	b.n	800cdba <_dtoa_r+0x622>
 800cc58:	07e2      	lsls	r2, r4, #31
 800cc5a:	d505      	bpl.n	800cc68 <_dtoa_r+0x4d0>
 800cc5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc60:	f7f3 fcca 	bl	80005f8 <__aeabi_dmul>
 800cc64:	3601      	adds	r6, #1
 800cc66:	2301      	movs	r3, #1
 800cc68:	1064      	asrs	r4, r4, #1
 800cc6a:	3508      	adds	r5, #8
 800cc6c:	e762      	b.n	800cb34 <_dtoa_r+0x39c>
 800cc6e:	2602      	movs	r6, #2
 800cc70:	e765      	b.n	800cb3e <_dtoa_r+0x3a6>
 800cc72:	9c03      	ldr	r4, [sp, #12]
 800cc74:	46b8      	mov	r8, r7
 800cc76:	e784      	b.n	800cb82 <_dtoa_r+0x3ea>
 800cc78:	4b27      	ldr	r3, [pc, #156]	@ (800cd18 <_dtoa_r+0x580>)
 800cc7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc84:	4454      	add	r4, sl
 800cc86:	2900      	cmp	r1, #0
 800cc88:	d054      	beq.n	800cd34 <_dtoa_r+0x59c>
 800cc8a:	4929      	ldr	r1, [pc, #164]	@ (800cd30 <_dtoa_r+0x598>)
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	f7f3 fddd 	bl	800084c <__aeabi_ddiv>
 800cc92:	4633      	mov	r3, r6
 800cc94:	462a      	mov	r2, r5
 800cc96:	f7f3 faf7 	bl	8000288 <__aeabi_dsub>
 800cc9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc9e:	4656      	mov	r6, sl
 800cca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cca4:	f7f3 ff58 	bl	8000b58 <__aeabi_d2iz>
 800cca8:	4605      	mov	r5, r0
 800ccaa:	f7f3 fc3b 	bl	8000524 <__aeabi_i2d>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccb6:	f7f3 fae7 	bl	8000288 <__aeabi_dsub>
 800ccba:	3530      	adds	r5, #48	@ 0x30
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ccc4:	f806 5b01 	strb.w	r5, [r6], #1
 800ccc8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cccc:	f7f3 ff06 	bl	8000adc <__aeabi_dcmplt>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d172      	bne.n	800cdba <_dtoa_r+0x622>
 800ccd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccd8:	4911      	ldr	r1, [pc, #68]	@ (800cd20 <_dtoa_r+0x588>)
 800ccda:	2000      	movs	r0, #0
 800ccdc:	f7f3 fad4 	bl	8000288 <__aeabi_dsub>
 800cce0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cce4:	f7f3 fefa 	bl	8000adc <__aeabi_dcmplt>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	f040 80b4 	bne.w	800ce56 <_dtoa_r+0x6be>
 800ccee:	42a6      	cmp	r6, r4
 800ccf0:	f43f af70 	beq.w	800cbd4 <_dtoa_r+0x43c>
 800ccf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ccf8:	4b0a      	ldr	r3, [pc, #40]	@ (800cd24 <_dtoa_r+0x58c>)
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f7f3 fc7c 	bl	80005f8 <__aeabi_dmul>
 800cd00:	4b08      	ldr	r3, [pc, #32]	@ (800cd24 <_dtoa_r+0x58c>)
 800cd02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cd06:	2200      	movs	r2, #0
 800cd08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd0c:	f7f3 fc74 	bl	80005f8 <__aeabi_dmul>
 800cd10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd14:	e7c4      	b.n	800cca0 <_dtoa_r+0x508>
 800cd16:	bf00      	nop
 800cd18:	0800f528 	.word	0x0800f528
 800cd1c:	0800f500 	.word	0x0800f500
 800cd20:	3ff00000 	.word	0x3ff00000
 800cd24:	40240000 	.word	0x40240000
 800cd28:	401c0000 	.word	0x401c0000
 800cd2c:	40140000 	.word	0x40140000
 800cd30:	3fe00000 	.word	0x3fe00000
 800cd34:	4631      	mov	r1, r6
 800cd36:	4628      	mov	r0, r5
 800cd38:	f7f3 fc5e 	bl	80005f8 <__aeabi_dmul>
 800cd3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cd40:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cd42:	4656      	mov	r6, sl
 800cd44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd48:	f7f3 ff06 	bl	8000b58 <__aeabi_d2iz>
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	f7f3 fbe9 	bl	8000524 <__aeabi_i2d>
 800cd52:	4602      	mov	r2, r0
 800cd54:	460b      	mov	r3, r1
 800cd56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd5a:	f7f3 fa95 	bl	8000288 <__aeabi_dsub>
 800cd5e:	3530      	adds	r5, #48	@ 0x30
 800cd60:	f806 5b01 	strb.w	r5, [r6], #1
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	42a6      	cmp	r6, r4
 800cd6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cd6e:	f04f 0200 	mov.w	r2, #0
 800cd72:	d124      	bne.n	800cdbe <_dtoa_r+0x626>
 800cd74:	4baf      	ldr	r3, [pc, #700]	@ (800d034 <_dtoa_r+0x89c>)
 800cd76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cd7a:	f7f3 fa87 	bl	800028c <__adddf3>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	460b      	mov	r3, r1
 800cd82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd86:	f7f3 fec7 	bl	8000b18 <__aeabi_dcmpgt>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	d163      	bne.n	800ce56 <_dtoa_r+0x6be>
 800cd8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cd92:	49a8      	ldr	r1, [pc, #672]	@ (800d034 <_dtoa_r+0x89c>)
 800cd94:	2000      	movs	r0, #0
 800cd96:	f7f3 fa77 	bl	8000288 <__aeabi_dsub>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cda2:	f7f3 fe9b 	bl	8000adc <__aeabi_dcmplt>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f43f af14 	beq.w	800cbd4 <_dtoa_r+0x43c>
 800cdac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cdae:	1e73      	subs	r3, r6, #1
 800cdb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cdb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cdb6:	2b30      	cmp	r3, #48	@ 0x30
 800cdb8:	d0f8      	beq.n	800cdac <_dtoa_r+0x614>
 800cdba:	4647      	mov	r7, r8
 800cdbc:	e03b      	b.n	800ce36 <_dtoa_r+0x69e>
 800cdbe:	4b9e      	ldr	r3, [pc, #632]	@ (800d038 <_dtoa_r+0x8a0>)
 800cdc0:	f7f3 fc1a 	bl	80005f8 <__aeabi_dmul>
 800cdc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdc8:	e7bc      	b.n	800cd44 <_dtoa_r+0x5ac>
 800cdca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cdce:	4656      	mov	r6, sl
 800cdd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	f7f3 fd38 	bl	800084c <__aeabi_ddiv>
 800cddc:	f7f3 febc 	bl	8000b58 <__aeabi_d2iz>
 800cde0:	4680      	mov	r8, r0
 800cde2:	f7f3 fb9f 	bl	8000524 <__aeabi_i2d>
 800cde6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdea:	f7f3 fc05 	bl	80005f8 <__aeabi_dmul>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	4629      	mov	r1, r5
 800cdf6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cdfa:	f7f3 fa45 	bl	8000288 <__aeabi_dsub>
 800cdfe:	f806 4b01 	strb.w	r4, [r6], #1
 800ce02:	9d03      	ldr	r5, [sp, #12]
 800ce04:	eba6 040a 	sub.w	r4, r6, sl
 800ce08:	42a5      	cmp	r5, r4
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	d133      	bne.n	800ce78 <_dtoa_r+0x6e0>
 800ce10:	f7f3 fa3c 	bl	800028c <__adddf3>
 800ce14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce18:	4604      	mov	r4, r0
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	f7f3 fe7c 	bl	8000b18 <__aeabi_dcmpgt>
 800ce20:	b9c0      	cbnz	r0, 800ce54 <_dtoa_r+0x6bc>
 800ce22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce26:	4620      	mov	r0, r4
 800ce28:	4629      	mov	r1, r5
 800ce2a:	f7f3 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce2e:	b110      	cbz	r0, 800ce36 <_dtoa_r+0x69e>
 800ce30:	f018 0f01 	tst.w	r8, #1
 800ce34:	d10e      	bne.n	800ce54 <_dtoa_r+0x6bc>
 800ce36:	9902      	ldr	r1, [sp, #8]
 800ce38:	4648      	mov	r0, r9
 800ce3a:	f000 fbbd 	bl	800d5b8 <_Bfree>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	7033      	strb	r3, [r6, #0]
 800ce42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce44:	3701      	adds	r7, #1
 800ce46:	601f      	str	r7, [r3, #0]
 800ce48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f000 824b 	beq.w	800d2e6 <_dtoa_r+0xb4e>
 800ce50:	601e      	str	r6, [r3, #0]
 800ce52:	e248      	b.n	800d2e6 <_dtoa_r+0xb4e>
 800ce54:	46b8      	mov	r8, r7
 800ce56:	4633      	mov	r3, r6
 800ce58:	461e      	mov	r6, r3
 800ce5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce5e:	2a39      	cmp	r2, #57	@ 0x39
 800ce60:	d106      	bne.n	800ce70 <_dtoa_r+0x6d8>
 800ce62:	459a      	cmp	sl, r3
 800ce64:	d1f8      	bne.n	800ce58 <_dtoa_r+0x6c0>
 800ce66:	2230      	movs	r2, #48	@ 0x30
 800ce68:	f108 0801 	add.w	r8, r8, #1
 800ce6c:	f88a 2000 	strb.w	r2, [sl]
 800ce70:	781a      	ldrb	r2, [r3, #0]
 800ce72:	3201      	adds	r2, #1
 800ce74:	701a      	strb	r2, [r3, #0]
 800ce76:	e7a0      	b.n	800cdba <_dtoa_r+0x622>
 800ce78:	4b6f      	ldr	r3, [pc, #444]	@ (800d038 <_dtoa_r+0x8a0>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f7f3 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ce80:	2200      	movs	r2, #0
 800ce82:	2300      	movs	r3, #0
 800ce84:	4604      	mov	r4, r0
 800ce86:	460d      	mov	r5, r1
 800ce88:	f7f3 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d09f      	beq.n	800cdd0 <_dtoa_r+0x638>
 800ce90:	e7d1      	b.n	800ce36 <_dtoa_r+0x69e>
 800ce92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce94:	2a00      	cmp	r2, #0
 800ce96:	f000 80ea 	beq.w	800d06e <_dtoa_r+0x8d6>
 800ce9a:	9a07      	ldr	r2, [sp, #28]
 800ce9c:	2a01      	cmp	r2, #1
 800ce9e:	f300 80cd 	bgt.w	800d03c <_dtoa_r+0x8a4>
 800cea2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cea4:	2a00      	cmp	r2, #0
 800cea6:	f000 80c1 	beq.w	800d02c <_dtoa_r+0x894>
 800ceaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ceae:	9c08      	ldr	r4, [sp, #32]
 800ceb0:	9e00      	ldr	r6, [sp, #0]
 800ceb2:	9a00      	ldr	r2, [sp, #0]
 800ceb4:	441a      	add	r2, r3
 800ceb6:	9200      	str	r2, [sp, #0]
 800ceb8:	9a06      	ldr	r2, [sp, #24]
 800ceba:	2101      	movs	r1, #1
 800cebc:	441a      	add	r2, r3
 800cebe:	4648      	mov	r0, r9
 800cec0:	9206      	str	r2, [sp, #24]
 800cec2:	f000 fc2d 	bl	800d720 <__i2b>
 800cec6:	4605      	mov	r5, r0
 800cec8:	b166      	cbz	r6, 800cee4 <_dtoa_r+0x74c>
 800ceca:	9b06      	ldr	r3, [sp, #24]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	dd09      	ble.n	800cee4 <_dtoa_r+0x74c>
 800ced0:	42b3      	cmp	r3, r6
 800ced2:	9a00      	ldr	r2, [sp, #0]
 800ced4:	bfa8      	it	ge
 800ced6:	4633      	movge	r3, r6
 800ced8:	1ad2      	subs	r2, r2, r3
 800ceda:	9200      	str	r2, [sp, #0]
 800cedc:	9a06      	ldr	r2, [sp, #24]
 800cede:	1af6      	subs	r6, r6, r3
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	9306      	str	r3, [sp, #24]
 800cee4:	9b08      	ldr	r3, [sp, #32]
 800cee6:	b30b      	cbz	r3, 800cf2c <_dtoa_r+0x794>
 800cee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 80c6 	beq.w	800d07c <_dtoa_r+0x8e4>
 800cef0:	2c00      	cmp	r4, #0
 800cef2:	f000 80c0 	beq.w	800d076 <_dtoa_r+0x8de>
 800cef6:	4629      	mov	r1, r5
 800cef8:	4622      	mov	r2, r4
 800cefa:	4648      	mov	r0, r9
 800cefc:	f000 fcc8 	bl	800d890 <__pow5mult>
 800cf00:	9a02      	ldr	r2, [sp, #8]
 800cf02:	4601      	mov	r1, r0
 800cf04:	4605      	mov	r5, r0
 800cf06:	4648      	mov	r0, r9
 800cf08:	f000 fc20 	bl	800d74c <__multiply>
 800cf0c:	9902      	ldr	r1, [sp, #8]
 800cf0e:	4680      	mov	r8, r0
 800cf10:	4648      	mov	r0, r9
 800cf12:	f000 fb51 	bl	800d5b8 <_Bfree>
 800cf16:	9b08      	ldr	r3, [sp, #32]
 800cf18:	1b1b      	subs	r3, r3, r4
 800cf1a:	9308      	str	r3, [sp, #32]
 800cf1c:	f000 80b1 	beq.w	800d082 <_dtoa_r+0x8ea>
 800cf20:	9a08      	ldr	r2, [sp, #32]
 800cf22:	4641      	mov	r1, r8
 800cf24:	4648      	mov	r0, r9
 800cf26:	f000 fcb3 	bl	800d890 <__pow5mult>
 800cf2a:	9002      	str	r0, [sp, #8]
 800cf2c:	2101      	movs	r1, #1
 800cf2e:	4648      	mov	r0, r9
 800cf30:	f000 fbf6 	bl	800d720 <__i2b>
 800cf34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf36:	4604      	mov	r4, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 81d8 	beq.w	800d2ee <_dtoa_r+0xb56>
 800cf3e:	461a      	mov	r2, r3
 800cf40:	4601      	mov	r1, r0
 800cf42:	4648      	mov	r0, r9
 800cf44:	f000 fca4 	bl	800d890 <__pow5mult>
 800cf48:	9b07      	ldr	r3, [sp, #28]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	f300 809f 	bgt.w	800d090 <_dtoa_r+0x8f8>
 800cf52:	9b04      	ldr	r3, [sp, #16]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f040 8097 	bne.w	800d088 <_dtoa_r+0x8f0>
 800cf5a:	9b05      	ldr	r3, [sp, #20]
 800cf5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f040 8093 	bne.w	800d08c <_dtoa_r+0x8f4>
 800cf66:	9b05      	ldr	r3, [sp, #20]
 800cf68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cf6c:	0d1b      	lsrs	r3, r3, #20
 800cf6e:	051b      	lsls	r3, r3, #20
 800cf70:	b133      	cbz	r3, 800cf80 <_dtoa_r+0x7e8>
 800cf72:	9b00      	ldr	r3, [sp, #0]
 800cf74:	3301      	adds	r3, #1
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	9b06      	ldr	r3, [sp, #24]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	9306      	str	r3, [sp, #24]
 800cf7e:	2301      	movs	r3, #1
 800cf80:	9308      	str	r3, [sp, #32]
 800cf82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f000 81b8 	beq.w	800d2fa <_dtoa_r+0xb62>
 800cf8a:	6923      	ldr	r3, [r4, #16]
 800cf8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf90:	6918      	ldr	r0, [r3, #16]
 800cf92:	f000 fb79 	bl	800d688 <__hi0bits>
 800cf96:	f1c0 0020 	rsb	r0, r0, #32
 800cf9a:	9b06      	ldr	r3, [sp, #24]
 800cf9c:	4418      	add	r0, r3
 800cf9e:	f010 001f 	ands.w	r0, r0, #31
 800cfa2:	f000 8082 	beq.w	800d0aa <_dtoa_r+0x912>
 800cfa6:	f1c0 0320 	rsb	r3, r0, #32
 800cfaa:	2b04      	cmp	r3, #4
 800cfac:	dd73      	ble.n	800d096 <_dtoa_r+0x8fe>
 800cfae:	9b00      	ldr	r3, [sp, #0]
 800cfb0:	f1c0 001c 	rsb	r0, r0, #28
 800cfb4:	4403      	add	r3, r0
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	9b06      	ldr	r3, [sp, #24]
 800cfba:	4403      	add	r3, r0
 800cfbc:	4406      	add	r6, r0
 800cfbe:	9306      	str	r3, [sp, #24]
 800cfc0:	9b00      	ldr	r3, [sp, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	dd05      	ble.n	800cfd2 <_dtoa_r+0x83a>
 800cfc6:	9902      	ldr	r1, [sp, #8]
 800cfc8:	461a      	mov	r2, r3
 800cfca:	4648      	mov	r0, r9
 800cfcc:	f000 fcba 	bl	800d944 <__lshift>
 800cfd0:	9002      	str	r0, [sp, #8]
 800cfd2:	9b06      	ldr	r3, [sp, #24]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	dd05      	ble.n	800cfe4 <_dtoa_r+0x84c>
 800cfd8:	4621      	mov	r1, r4
 800cfda:	461a      	mov	r2, r3
 800cfdc:	4648      	mov	r0, r9
 800cfde:	f000 fcb1 	bl	800d944 <__lshift>
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d061      	beq.n	800d0ae <_dtoa_r+0x916>
 800cfea:	9802      	ldr	r0, [sp, #8]
 800cfec:	4621      	mov	r1, r4
 800cfee:	f000 fd15 	bl	800da1c <__mcmp>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	da5b      	bge.n	800d0ae <_dtoa_r+0x916>
 800cff6:	2300      	movs	r3, #0
 800cff8:	9902      	ldr	r1, [sp, #8]
 800cffa:	220a      	movs	r2, #10
 800cffc:	4648      	mov	r0, r9
 800cffe:	f000 fafd 	bl	800d5fc <__multadd>
 800d002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d004:	9002      	str	r0, [sp, #8]
 800d006:	f107 38ff 	add.w	r8, r7, #4294967295
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	f000 8177 	beq.w	800d2fe <_dtoa_r+0xb66>
 800d010:	4629      	mov	r1, r5
 800d012:	2300      	movs	r3, #0
 800d014:	220a      	movs	r2, #10
 800d016:	4648      	mov	r0, r9
 800d018:	f000 faf0 	bl	800d5fc <__multadd>
 800d01c:	f1bb 0f00 	cmp.w	fp, #0
 800d020:	4605      	mov	r5, r0
 800d022:	dc6f      	bgt.n	800d104 <_dtoa_r+0x96c>
 800d024:	9b07      	ldr	r3, [sp, #28]
 800d026:	2b02      	cmp	r3, #2
 800d028:	dc49      	bgt.n	800d0be <_dtoa_r+0x926>
 800d02a:	e06b      	b.n	800d104 <_dtoa_r+0x96c>
 800d02c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d02e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d032:	e73c      	b.n	800ceae <_dtoa_r+0x716>
 800d034:	3fe00000 	.word	0x3fe00000
 800d038:	40240000 	.word	0x40240000
 800d03c:	9b03      	ldr	r3, [sp, #12]
 800d03e:	1e5c      	subs	r4, r3, #1
 800d040:	9b08      	ldr	r3, [sp, #32]
 800d042:	42a3      	cmp	r3, r4
 800d044:	db09      	blt.n	800d05a <_dtoa_r+0x8c2>
 800d046:	1b1c      	subs	r4, r3, r4
 800d048:	9b03      	ldr	r3, [sp, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f6bf af30 	bge.w	800ceb0 <_dtoa_r+0x718>
 800d050:	9b00      	ldr	r3, [sp, #0]
 800d052:	9a03      	ldr	r2, [sp, #12]
 800d054:	1a9e      	subs	r6, r3, r2
 800d056:	2300      	movs	r3, #0
 800d058:	e72b      	b.n	800ceb2 <_dtoa_r+0x71a>
 800d05a:	9b08      	ldr	r3, [sp, #32]
 800d05c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d05e:	9408      	str	r4, [sp, #32]
 800d060:	1ae3      	subs	r3, r4, r3
 800d062:	441a      	add	r2, r3
 800d064:	9e00      	ldr	r6, [sp, #0]
 800d066:	9b03      	ldr	r3, [sp, #12]
 800d068:	920d      	str	r2, [sp, #52]	@ 0x34
 800d06a:	2400      	movs	r4, #0
 800d06c:	e721      	b.n	800ceb2 <_dtoa_r+0x71a>
 800d06e:	9c08      	ldr	r4, [sp, #32]
 800d070:	9e00      	ldr	r6, [sp, #0]
 800d072:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d074:	e728      	b.n	800cec8 <_dtoa_r+0x730>
 800d076:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d07a:	e751      	b.n	800cf20 <_dtoa_r+0x788>
 800d07c:	9a08      	ldr	r2, [sp, #32]
 800d07e:	9902      	ldr	r1, [sp, #8]
 800d080:	e750      	b.n	800cf24 <_dtoa_r+0x78c>
 800d082:	f8cd 8008 	str.w	r8, [sp, #8]
 800d086:	e751      	b.n	800cf2c <_dtoa_r+0x794>
 800d088:	2300      	movs	r3, #0
 800d08a:	e779      	b.n	800cf80 <_dtoa_r+0x7e8>
 800d08c:	9b04      	ldr	r3, [sp, #16]
 800d08e:	e777      	b.n	800cf80 <_dtoa_r+0x7e8>
 800d090:	2300      	movs	r3, #0
 800d092:	9308      	str	r3, [sp, #32]
 800d094:	e779      	b.n	800cf8a <_dtoa_r+0x7f2>
 800d096:	d093      	beq.n	800cfc0 <_dtoa_r+0x828>
 800d098:	9a00      	ldr	r2, [sp, #0]
 800d09a:	331c      	adds	r3, #28
 800d09c:	441a      	add	r2, r3
 800d09e:	9200      	str	r2, [sp, #0]
 800d0a0:	9a06      	ldr	r2, [sp, #24]
 800d0a2:	441a      	add	r2, r3
 800d0a4:	441e      	add	r6, r3
 800d0a6:	9206      	str	r2, [sp, #24]
 800d0a8:	e78a      	b.n	800cfc0 <_dtoa_r+0x828>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	e7f4      	b.n	800d098 <_dtoa_r+0x900>
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	46b8      	mov	r8, r7
 800d0b4:	dc20      	bgt.n	800d0f8 <_dtoa_r+0x960>
 800d0b6:	469b      	mov	fp, r3
 800d0b8:	9b07      	ldr	r3, [sp, #28]
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	dd1e      	ble.n	800d0fc <_dtoa_r+0x964>
 800d0be:	f1bb 0f00 	cmp.w	fp, #0
 800d0c2:	f47f adb1 	bne.w	800cc28 <_dtoa_r+0x490>
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	465b      	mov	r3, fp
 800d0ca:	2205      	movs	r2, #5
 800d0cc:	4648      	mov	r0, r9
 800d0ce:	f000 fa95 	bl	800d5fc <__multadd>
 800d0d2:	4601      	mov	r1, r0
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	9802      	ldr	r0, [sp, #8]
 800d0d8:	f000 fca0 	bl	800da1c <__mcmp>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	f77f ada3 	ble.w	800cc28 <_dtoa_r+0x490>
 800d0e2:	4656      	mov	r6, sl
 800d0e4:	2331      	movs	r3, #49	@ 0x31
 800d0e6:	f806 3b01 	strb.w	r3, [r6], #1
 800d0ea:	f108 0801 	add.w	r8, r8, #1
 800d0ee:	e59f      	b.n	800cc30 <_dtoa_r+0x498>
 800d0f0:	9c03      	ldr	r4, [sp, #12]
 800d0f2:	46b8      	mov	r8, r7
 800d0f4:	4625      	mov	r5, r4
 800d0f6:	e7f4      	b.n	800d0e2 <_dtoa_r+0x94a>
 800d0f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d0fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 8101 	beq.w	800d306 <_dtoa_r+0xb6e>
 800d104:	2e00      	cmp	r6, #0
 800d106:	dd05      	ble.n	800d114 <_dtoa_r+0x97c>
 800d108:	4629      	mov	r1, r5
 800d10a:	4632      	mov	r2, r6
 800d10c:	4648      	mov	r0, r9
 800d10e:	f000 fc19 	bl	800d944 <__lshift>
 800d112:	4605      	mov	r5, r0
 800d114:	9b08      	ldr	r3, [sp, #32]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d05c      	beq.n	800d1d4 <_dtoa_r+0xa3c>
 800d11a:	6869      	ldr	r1, [r5, #4]
 800d11c:	4648      	mov	r0, r9
 800d11e:	f000 fa0b 	bl	800d538 <_Balloc>
 800d122:	4606      	mov	r6, r0
 800d124:	b928      	cbnz	r0, 800d132 <_dtoa_r+0x99a>
 800d126:	4b82      	ldr	r3, [pc, #520]	@ (800d330 <_dtoa_r+0xb98>)
 800d128:	4602      	mov	r2, r0
 800d12a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d12e:	f7ff bb4a 	b.w	800c7c6 <_dtoa_r+0x2e>
 800d132:	692a      	ldr	r2, [r5, #16]
 800d134:	3202      	adds	r2, #2
 800d136:	0092      	lsls	r2, r2, #2
 800d138:	f105 010c 	add.w	r1, r5, #12
 800d13c:	300c      	adds	r0, #12
 800d13e:	f7ff fa92 	bl	800c666 <memcpy>
 800d142:	2201      	movs	r2, #1
 800d144:	4631      	mov	r1, r6
 800d146:	4648      	mov	r0, r9
 800d148:	f000 fbfc 	bl	800d944 <__lshift>
 800d14c:	f10a 0301 	add.w	r3, sl, #1
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	eb0a 030b 	add.w	r3, sl, fp
 800d156:	9308      	str	r3, [sp, #32]
 800d158:	9b04      	ldr	r3, [sp, #16]
 800d15a:	f003 0301 	and.w	r3, r3, #1
 800d15e:	462f      	mov	r7, r5
 800d160:	9306      	str	r3, [sp, #24]
 800d162:	4605      	mov	r5, r0
 800d164:	9b00      	ldr	r3, [sp, #0]
 800d166:	9802      	ldr	r0, [sp, #8]
 800d168:	4621      	mov	r1, r4
 800d16a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d16e:	f7ff fa88 	bl	800c682 <quorem>
 800d172:	4603      	mov	r3, r0
 800d174:	3330      	adds	r3, #48	@ 0x30
 800d176:	9003      	str	r0, [sp, #12]
 800d178:	4639      	mov	r1, r7
 800d17a:	9802      	ldr	r0, [sp, #8]
 800d17c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d17e:	f000 fc4d 	bl	800da1c <__mcmp>
 800d182:	462a      	mov	r2, r5
 800d184:	9004      	str	r0, [sp, #16]
 800d186:	4621      	mov	r1, r4
 800d188:	4648      	mov	r0, r9
 800d18a:	f000 fc63 	bl	800da54 <__mdiff>
 800d18e:	68c2      	ldr	r2, [r0, #12]
 800d190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d192:	4606      	mov	r6, r0
 800d194:	bb02      	cbnz	r2, 800d1d8 <_dtoa_r+0xa40>
 800d196:	4601      	mov	r1, r0
 800d198:	9802      	ldr	r0, [sp, #8]
 800d19a:	f000 fc3f 	bl	800da1c <__mcmp>
 800d19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	4648      	mov	r0, r9
 800d1a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800d1a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1aa:	f000 fa05 	bl	800d5b8 <_Bfree>
 800d1ae:	9b07      	ldr	r3, [sp, #28]
 800d1b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d1b2:	9e00      	ldr	r6, [sp, #0]
 800d1b4:	ea42 0103 	orr.w	r1, r2, r3
 800d1b8:	9b06      	ldr	r3, [sp, #24]
 800d1ba:	4319      	orrs	r1, r3
 800d1bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1be:	d10d      	bne.n	800d1dc <_dtoa_r+0xa44>
 800d1c0:	2b39      	cmp	r3, #57	@ 0x39
 800d1c2:	d027      	beq.n	800d214 <_dtoa_r+0xa7c>
 800d1c4:	9a04      	ldr	r2, [sp, #16]
 800d1c6:	2a00      	cmp	r2, #0
 800d1c8:	dd01      	ble.n	800d1ce <_dtoa_r+0xa36>
 800d1ca:	9b03      	ldr	r3, [sp, #12]
 800d1cc:	3331      	adds	r3, #49	@ 0x31
 800d1ce:	f88b 3000 	strb.w	r3, [fp]
 800d1d2:	e52e      	b.n	800cc32 <_dtoa_r+0x49a>
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	e7b9      	b.n	800d14c <_dtoa_r+0x9b4>
 800d1d8:	2201      	movs	r2, #1
 800d1da:	e7e2      	b.n	800d1a2 <_dtoa_r+0xa0a>
 800d1dc:	9904      	ldr	r1, [sp, #16]
 800d1de:	2900      	cmp	r1, #0
 800d1e0:	db04      	blt.n	800d1ec <_dtoa_r+0xa54>
 800d1e2:	9807      	ldr	r0, [sp, #28]
 800d1e4:	4301      	orrs	r1, r0
 800d1e6:	9806      	ldr	r0, [sp, #24]
 800d1e8:	4301      	orrs	r1, r0
 800d1ea:	d120      	bne.n	800d22e <_dtoa_r+0xa96>
 800d1ec:	2a00      	cmp	r2, #0
 800d1ee:	ddee      	ble.n	800d1ce <_dtoa_r+0xa36>
 800d1f0:	9902      	ldr	r1, [sp, #8]
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	4648      	mov	r0, r9
 800d1f8:	f000 fba4 	bl	800d944 <__lshift>
 800d1fc:	4621      	mov	r1, r4
 800d1fe:	9002      	str	r0, [sp, #8]
 800d200:	f000 fc0c 	bl	800da1c <__mcmp>
 800d204:	2800      	cmp	r0, #0
 800d206:	9b00      	ldr	r3, [sp, #0]
 800d208:	dc02      	bgt.n	800d210 <_dtoa_r+0xa78>
 800d20a:	d1e0      	bne.n	800d1ce <_dtoa_r+0xa36>
 800d20c:	07da      	lsls	r2, r3, #31
 800d20e:	d5de      	bpl.n	800d1ce <_dtoa_r+0xa36>
 800d210:	2b39      	cmp	r3, #57	@ 0x39
 800d212:	d1da      	bne.n	800d1ca <_dtoa_r+0xa32>
 800d214:	2339      	movs	r3, #57	@ 0x39
 800d216:	f88b 3000 	strb.w	r3, [fp]
 800d21a:	4633      	mov	r3, r6
 800d21c:	461e      	mov	r6, r3
 800d21e:	3b01      	subs	r3, #1
 800d220:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d224:	2a39      	cmp	r2, #57	@ 0x39
 800d226:	d04e      	beq.n	800d2c6 <_dtoa_r+0xb2e>
 800d228:	3201      	adds	r2, #1
 800d22a:	701a      	strb	r2, [r3, #0]
 800d22c:	e501      	b.n	800cc32 <_dtoa_r+0x49a>
 800d22e:	2a00      	cmp	r2, #0
 800d230:	dd03      	ble.n	800d23a <_dtoa_r+0xaa2>
 800d232:	2b39      	cmp	r3, #57	@ 0x39
 800d234:	d0ee      	beq.n	800d214 <_dtoa_r+0xa7c>
 800d236:	3301      	adds	r3, #1
 800d238:	e7c9      	b.n	800d1ce <_dtoa_r+0xa36>
 800d23a:	9a00      	ldr	r2, [sp, #0]
 800d23c:	9908      	ldr	r1, [sp, #32]
 800d23e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d242:	428a      	cmp	r2, r1
 800d244:	d028      	beq.n	800d298 <_dtoa_r+0xb00>
 800d246:	9902      	ldr	r1, [sp, #8]
 800d248:	2300      	movs	r3, #0
 800d24a:	220a      	movs	r2, #10
 800d24c:	4648      	mov	r0, r9
 800d24e:	f000 f9d5 	bl	800d5fc <__multadd>
 800d252:	42af      	cmp	r7, r5
 800d254:	9002      	str	r0, [sp, #8]
 800d256:	f04f 0300 	mov.w	r3, #0
 800d25a:	f04f 020a 	mov.w	r2, #10
 800d25e:	4639      	mov	r1, r7
 800d260:	4648      	mov	r0, r9
 800d262:	d107      	bne.n	800d274 <_dtoa_r+0xadc>
 800d264:	f000 f9ca 	bl	800d5fc <__multadd>
 800d268:	4607      	mov	r7, r0
 800d26a:	4605      	mov	r5, r0
 800d26c:	9b00      	ldr	r3, [sp, #0]
 800d26e:	3301      	adds	r3, #1
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	e777      	b.n	800d164 <_dtoa_r+0x9cc>
 800d274:	f000 f9c2 	bl	800d5fc <__multadd>
 800d278:	4629      	mov	r1, r5
 800d27a:	4607      	mov	r7, r0
 800d27c:	2300      	movs	r3, #0
 800d27e:	220a      	movs	r2, #10
 800d280:	4648      	mov	r0, r9
 800d282:	f000 f9bb 	bl	800d5fc <__multadd>
 800d286:	4605      	mov	r5, r0
 800d288:	e7f0      	b.n	800d26c <_dtoa_r+0xad4>
 800d28a:	f1bb 0f00 	cmp.w	fp, #0
 800d28e:	bfcc      	ite	gt
 800d290:	465e      	movgt	r6, fp
 800d292:	2601      	movle	r6, #1
 800d294:	4456      	add	r6, sl
 800d296:	2700      	movs	r7, #0
 800d298:	9902      	ldr	r1, [sp, #8]
 800d29a:	9300      	str	r3, [sp, #0]
 800d29c:	2201      	movs	r2, #1
 800d29e:	4648      	mov	r0, r9
 800d2a0:	f000 fb50 	bl	800d944 <__lshift>
 800d2a4:	4621      	mov	r1, r4
 800d2a6:	9002      	str	r0, [sp, #8]
 800d2a8:	f000 fbb8 	bl	800da1c <__mcmp>
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	dcb4      	bgt.n	800d21a <_dtoa_r+0xa82>
 800d2b0:	d102      	bne.n	800d2b8 <_dtoa_r+0xb20>
 800d2b2:	9b00      	ldr	r3, [sp, #0]
 800d2b4:	07db      	lsls	r3, r3, #31
 800d2b6:	d4b0      	bmi.n	800d21a <_dtoa_r+0xa82>
 800d2b8:	4633      	mov	r3, r6
 800d2ba:	461e      	mov	r6, r3
 800d2bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2c0:	2a30      	cmp	r2, #48	@ 0x30
 800d2c2:	d0fa      	beq.n	800d2ba <_dtoa_r+0xb22>
 800d2c4:	e4b5      	b.n	800cc32 <_dtoa_r+0x49a>
 800d2c6:	459a      	cmp	sl, r3
 800d2c8:	d1a8      	bne.n	800d21c <_dtoa_r+0xa84>
 800d2ca:	2331      	movs	r3, #49	@ 0x31
 800d2cc:	f108 0801 	add.w	r8, r8, #1
 800d2d0:	f88a 3000 	strb.w	r3, [sl]
 800d2d4:	e4ad      	b.n	800cc32 <_dtoa_r+0x49a>
 800d2d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d2d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d334 <_dtoa_r+0xb9c>
 800d2dc:	b11b      	cbz	r3, 800d2e6 <_dtoa_r+0xb4e>
 800d2de:	f10a 0308 	add.w	r3, sl, #8
 800d2e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d2e4:	6013      	str	r3, [r2, #0]
 800d2e6:	4650      	mov	r0, sl
 800d2e8:	b017      	add	sp, #92	@ 0x5c
 800d2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ee:	9b07      	ldr	r3, [sp, #28]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	f77f ae2e 	ble.w	800cf52 <_dtoa_r+0x7ba>
 800d2f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d2f8:	9308      	str	r3, [sp, #32]
 800d2fa:	2001      	movs	r0, #1
 800d2fc:	e64d      	b.n	800cf9a <_dtoa_r+0x802>
 800d2fe:	f1bb 0f00 	cmp.w	fp, #0
 800d302:	f77f aed9 	ble.w	800d0b8 <_dtoa_r+0x920>
 800d306:	4656      	mov	r6, sl
 800d308:	9802      	ldr	r0, [sp, #8]
 800d30a:	4621      	mov	r1, r4
 800d30c:	f7ff f9b9 	bl	800c682 <quorem>
 800d310:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d314:	f806 3b01 	strb.w	r3, [r6], #1
 800d318:	eba6 020a 	sub.w	r2, r6, sl
 800d31c:	4593      	cmp	fp, r2
 800d31e:	ddb4      	ble.n	800d28a <_dtoa_r+0xaf2>
 800d320:	9902      	ldr	r1, [sp, #8]
 800d322:	2300      	movs	r3, #0
 800d324:	220a      	movs	r2, #10
 800d326:	4648      	mov	r0, r9
 800d328:	f000 f968 	bl	800d5fc <__multadd>
 800d32c:	9002      	str	r0, [sp, #8]
 800d32e:	e7eb      	b.n	800d308 <_dtoa_r+0xb70>
 800d330:	0800f430 	.word	0x0800f430
 800d334:	0800f3b4 	.word	0x0800f3b4

0800d338 <_free_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4605      	mov	r5, r0
 800d33c:	2900      	cmp	r1, #0
 800d33e:	d041      	beq.n	800d3c4 <_free_r+0x8c>
 800d340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d344:	1f0c      	subs	r4, r1, #4
 800d346:	2b00      	cmp	r3, #0
 800d348:	bfb8      	it	lt
 800d34a:	18e4      	addlt	r4, r4, r3
 800d34c:	f000 f8e8 	bl	800d520 <__malloc_lock>
 800d350:	4a1d      	ldr	r2, [pc, #116]	@ (800d3c8 <_free_r+0x90>)
 800d352:	6813      	ldr	r3, [r2, #0]
 800d354:	b933      	cbnz	r3, 800d364 <_free_r+0x2c>
 800d356:	6063      	str	r3, [r4, #4]
 800d358:	6014      	str	r4, [r2, #0]
 800d35a:	4628      	mov	r0, r5
 800d35c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d360:	f000 b8e4 	b.w	800d52c <__malloc_unlock>
 800d364:	42a3      	cmp	r3, r4
 800d366:	d908      	bls.n	800d37a <_free_r+0x42>
 800d368:	6820      	ldr	r0, [r4, #0]
 800d36a:	1821      	adds	r1, r4, r0
 800d36c:	428b      	cmp	r3, r1
 800d36e:	bf01      	itttt	eq
 800d370:	6819      	ldreq	r1, [r3, #0]
 800d372:	685b      	ldreq	r3, [r3, #4]
 800d374:	1809      	addeq	r1, r1, r0
 800d376:	6021      	streq	r1, [r4, #0]
 800d378:	e7ed      	b.n	800d356 <_free_r+0x1e>
 800d37a:	461a      	mov	r2, r3
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	b10b      	cbz	r3, 800d384 <_free_r+0x4c>
 800d380:	42a3      	cmp	r3, r4
 800d382:	d9fa      	bls.n	800d37a <_free_r+0x42>
 800d384:	6811      	ldr	r1, [r2, #0]
 800d386:	1850      	adds	r0, r2, r1
 800d388:	42a0      	cmp	r0, r4
 800d38a:	d10b      	bne.n	800d3a4 <_free_r+0x6c>
 800d38c:	6820      	ldr	r0, [r4, #0]
 800d38e:	4401      	add	r1, r0
 800d390:	1850      	adds	r0, r2, r1
 800d392:	4283      	cmp	r3, r0
 800d394:	6011      	str	r1, [r2, #0]
 800d396:	d1e0      	bne.n	800d35a <_free_r+0x22>
 800d398:	6818      	ldr	r0, [r3, #0]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	6053      	str	r3, [r2, #4]
 800d39e:	4408      	add	r0, r1
 800d3a0:	6010      	str	r0, [r2, #0]
 800d3a2:	e7da      	b.n	800d35a <_free_r+0x22>
 800d3a4:	d902      	bls.n	800d3ac <_free_r+0x74>
 800d3a6:	230c      	movs	r3, #12
 800d3a8:	602b      	str	r3, [r5, #0]
 800d3aa:	e7d6      	b.n	800d35a <_free_r+0x22>
 800d3ac:	6820      	ldr	r0, [r4, #0]
 800d3ae:	1821      	adds	r1, r4, r0
 800d3b0:	428b      	cmp	r3, r1
 800d3b2:	bf04      	itt	eq
 800d3b4:	6819      	ldreq	r1, [r3, #0]
 800d3b6:	685b      	ldreq	r3, [r3, #4]
 800d3b8:	6063      	str	r3, [r4, #4]
 800d3ba:	bf04      	itt	eq
 800d3bc:	1809      	addeq	r1, r1, r0
 800d3be:	6021      	streq	r1, [r4, #0]
 800d3c0:	6054      	str	r4, [r2, #4]
 800d3c2:	e7ca      	b.n	800d35a <_free_r+0x22>
 800d3c4:	bd38      	pop	{r3, r4, r5, pc}
 800d3c6:	bf00      	nop
 800d3c8:	200006c8 	.word	0x200006c8

0800d3cc <malloc>:
 800d3cc:	4b02      	ldr	r3, [pc, #8]	@ (800d3d8 <malloc+0xc>)
 800d3ce:	4601      	mov	r1, r0
 800d3d0:	6818      	ldr	r0, [r3, #0]
 800d3d2:	f000 b825 	b.w	800d420 <_malloc_r>
 800d3d6:	bf00      	nop
 800d3d8:	2000001c 	.word	0x2000001c

0800d3dc <sbrk_aligned>:
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	4e0f      	ldr	r6, [pc, #60]	@ (800d41c <sbrk_aligned+0x40>)
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	6831      	ldr	r1, [r6, #0]
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	b911      	cbnz	r1, 800d3ee <sbrk_aligned+0x12>
 800d3e8:	f000 fe92 	bl	800e110 <_sbrk_r>
 800d3ec:	6030      	str	r0, [r6, #0]
 800d3ee:	4621      	mov	r1, r4
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	f000 fe8d 	bl	800e110 <_sbrk_r>
 800d3f6:	1c43      	adds	r3, r0, #1
 800d3f8:	d103      	bne.n	800d402 <sbrk_aligned+0x26>
 800d3fa:	f04f 34ff 	mov.w	r4, #4294967295
 800d3fe:	4620      	mov	r0, r4
 800d400:	bd70      	pop	{r4, r5, r6, pc}
 800d402:	1cc4      	adds	r4, r0, #3
 800d404:	f024 0403 	bic.w	r4, r4, #3
 800d408:	42a0      	cmp	r0, r4
 800d40a:	d0f8      	beq.n	800d3fe <sbrk_aligned+0x22>
 800d40c:	1a21      	subs	r1, r4, r0
 800d40e:	4628      	mov	r0, r5
 800d410:	f000 fe7e 	bl	800e110 <_sbrk_r>
 800d414:	3001      	adds	r0, #1
 800d416:	d1f2      	bne.n	800d3fe <sbrk_aligned+0x22>
 800d418:	e7ef      	b.n	800d3fa <sbrk_aligned+0x1e>
 800d41a:	bf00      	nop
 800d41c:	200006c4 	.word	0x200006c4

0800d420 <_malloc_r>:
 800d420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d424:	1ccd      	adds	r5, r1, #3
 800d426:	f025 0503 	bic.w	r5, r5, #3
 800d42a:	3508      	adds	r5, #8
 800d42c:	2d0c      	cmp	r5, #12
 800d42e:	bf38      	it	cc
 800d430:	250c      	movcc	r5, #12
 800d432:	2d00      	cmp	r5, #0
 800d434:	4606      	mov	r6, r0
 800d436:	db01      	blt.n	800d43c <_malloc_r+0x1c>
 800d438:	42a9      	cmp	r1, r5
 800d43a:	d904      	bls.n	800d446 <_malloc_r+0x26>
 800d43c:	230c      	movs	r3, #12
 800d43e:	6033      	str	r3, [r6, #0]
 800d440:	2000      	movs	r0, #0
 800d442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d51c <_malloc_r+0xfc>
 800d44a:	f000 f869 	bl	800d520 <__malloc_lock>
 800d44e:	f8d8 3000 	ldr.w	r3, [r8]
 800d452:	461c      	mov	r4, r3
 800d454:	bb44      	cbnz	r4, 800d4a8 <_malloc_r+0x88>
 800d456:	4629      	mov	r1, r5
 800d458:	4630      	mov	r0, r6
 800d45a:	f7ff ffbf 	bl	800d3dc <sbrk_aligned>
 800d45e:	1c43      	adds	r3, r0, #1
 800d460:	4604      	mov	r4, r0
 800d462:	d158      	bne.n	800d516 <_malloc_r+0xf6>
 800d464:	f8d8 4000 	ldr.w	r4, [r8]
 800d468:	4627      	mov	r7, r4
 800d46a:	2f00      	cmp	r7, #0
 800d46c:	d143      	bne.n	800d4f6 <_malloc_r+0xd6>
 800d46e:	2c00      	cmp	r4, #0
 800d470:	d04b      	beq.n	800d50a <_malloc_r+0xea>
 800d472:	6823      	ldr	r3, [r4, #0]
 800d474:	4639      	mov	r1, r7
 800d476:	4630      	mov	r0, r6
 800d478:	eb04 0903 	add.w	r9, r4, r3
 800d47c:	f000 fe48 	bl	800e110 <_sbrk_r>
 800d480:	4581      	cmp	r9, r0
 800d482:	d142      	bne.n	800d50a <_malloc_r+0xea>
 800d484:	6821      	ldr	r1, [r4, #0]
 800d486:	1a6d      	subs	r5, r5, r1
 800d488:	4629      	mov	r1, r5
 800d48a:	4630      	mov	r0, r6
 800d48c:	f7ff ffa6 	bl	800d3dc <sbrk_aligned>
 800d490:	3001      	adds	r0, #1
 800d492:	d03a      	beq.n	800d50a <_malloc_r+0xea>
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	442b      	add	r3, r5
 800d498:	6023      	str	r3, [r4, #0]
 800d49a:	f8d8 3000 	ldr.w	r3, [r8]
 800d49e:	685a      	ldr	r2, [r3, #4]
 800d4a0:	bb62      	cbnz	r2, 800d4fc <_malloc_r+0xdc>
 800d4a2:	f8c8 7000 	str.w	r7, [r8]
 800d4a6:	e00f      	b.n	800d4c8 <_malloc_r+0xa8>
 800d4a8:	6822      	ldr	r2, [r4, #0]
 800d4aa:	1b52      	subs	r2, r2, r5
 800d4ac:	d420      	bmi.n	800d4f0 <_malloc_r+0xd0>
 800d4ae:	2a0b      	cmp	r2, #11
 800d4b0:	d917      	bls.n	800d4e2 <_malloc_r+0xc2>
 800d4b2:	1961      	adds	r1, r4, r5
 800d4b4:	42a3      	cmp	r3, r4
 800d4b6:	6025      	str	r5, [r4, #0]
 800d4b8:	bf18      	it	ne
 800d4ba:	6059      	strne	r1, [r3, #4]
 800d4bc:	6863      	ldr	r3, [r4, #4]
 800d4be:	bf08      	it	eq
 800d4c0:	f8c8 1000 	streq.w	r1, [r8]
 800d4c4:	5162      	str	r2, [r4, r5]
 800d4c6:	604b      	str	r3, [r1, #4]
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f000 f82f 	bl	800d52c <__malloc_unlock>
 800d4ce:	f104 000b 	add.w	r0, r4, #11
 800d4d2:	1d23      	adds	r3, r4, #4
 800d4d4:	f020 0007 	bic.w	r0, r0, #7
 800d4d8:	1ac2      	subs	r2, r0, r3
 800d4da:	bf1c      	itt	ne
 800d4dc:	1a1b      	subne	r3, r3, r0
 800d4de:	50a3      	strne	r3, [r4, r2]
 800d4e0:	e7af      	b.n	800d442 <_malloc_r+0x22>
 800d4e2:	6862      	ldr	r2, [r4, #4]
 800d4e4:	42a3      	cmp	r3, r4
 800d4e6:	bf0c      	ite	eq
 800d4e8:	f8c8 2000 	streq.w	r2, [r8]
 800d4ec:	605a      	strne	r2, [r3, #4]
 800d4ee:	e7eb      	b.n	800d4c8 <_malloc_r+0xa8>
 800d4f0:	4623      	mov	r3, r4
 800d4f2:	6864      	ldr	r4, [r4, #4]
 800d4f4:	e7ae      	b.n	800d454 <_malloc_r+0x34>
 800d4f6:	463c      	mov	r4, r7
 800d4f8:	687f      	ldr	r7, [r7, #4]
 800d4fa:	e7b6      	b.n	800d46a <_malloc_r+0x4a>
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	42a3      	cmp	r3, r4
 800d502:	d1fb      	bne.n	800d4fc <_malloc_r+0xdc>
 800d504:	2300      	movs	r3, #0
 800d506:	6053      	str	r3, [r2, #4]
 800d508:	e7de      	b.n	800d4c8 <_malloc_r+0xa8>
 800d50a:	230c      	movs	r3, #12
 800d50c:	6033      	str	r3, [r6, #0]
 800d50e:	4630      	mov	r0, r6
 800d510:	f000 f80c 	bl	800d52c <__malloc_unlock>
 800d514:	e794      	b.n	800d440 <_malloc_r+0x20>
 800d516:	6005      	str	r5, [r0, #0]
 800d518:	e7d6      	b.n	800d4c8 <_malloc_r+0xa8>
 800d51a:	bf00      	nop
 800d51c:	200006c8 	.word	0x200006c8

0800d520 <__malloc_lock>:
 800d520:	4801      	ldr	r0, [pc, #4]	@ (800d528 <__malloc_lock+0x8>)
 800d522:	f7ff b89e 	b.w	800c662 <__retarget_lock_acquire_recursive>
 800d526:	bf00      	nop
 800d528:	200006c0 	.word	0x200006c0

0800d52c <__malloc_unlock>:
 800d52c:	4801      	ldr	r0, [pc, #4]	@ (800d534 <__malloc_unlock+0x8>)
 800d52e:	f7ff b899 	b.w	800c664 <__retarget_lock_release_recursive>
 800d532:	bf00      	nop
 800d534:	200006c0 	.word	0x200006c0

0800d538 <_Balloc>:
 800d538:	b570      	push	{r4, r5, r6, lr}
 800d53a:	69c6      	ldr	r6, [r0, #28]
 800d53c:	4604      	mov	r4, r0
 800d53e:	460d      	mov	r5, r1
 800d540:	b976      	cbnz	r6, 800d560 <_Balloc+0x28>
 800d542:	2010      	movs	r0, #16
 800d544:	f7ff ff42 	bl	800d3cc <malloc>
 800d548:	4602      	mov	r2, r0
 800d54a:	61e0      	str	r0, [r4, #28]
 800d54c:	b920      	cbnz	r0, 800d558 <_Balloc+0x20>
 800d54e:	4b18      	ldr	r3, [pc, #96]	@ (800d5b0 <_Balloc+0x78>)
 800d550:	4818      	ldr	r0, [pc, #96]	@ (800d5b4 <_Balloc+0x7c>)
 800d552:	216b      	movs	r1, #107	@ 0x6b
 800d554:	f000 fdec 	bl	800e130 <__assert_func>
 800d558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d55c:	6006      	str	r6, [r0, #0]
 800d55e:	60c6      	str	r6, [r0, #12]
 800d560:	69e6      	ldr	r6, [r4, #28]
 800d562:	68f3      	ldr	r3, [r6, #12]
 800d564:	b183      	cbz	r3, 800d588 <_Balloc+0x50>
 800d566:	69e3      	ldr	r3, [r4, #28]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d56e:	b9b8      	cbnz	r0, 800d5a0 <_Balloc+0x68>
 800d570:	2101      	movs	r1, #1
 800d572:	fa01 f605 	lsl.w	r6, r1, r5
 800d576:	1d72      	adds	r2, r6, #5
 800d578:	0092      	lsls	r2, r2, #2
 800d57a:	4620      	mov	r0, r4
 800d57c:	f000 fdf6 	bl	800e16c <_calloc_r>
 800d580:	b160      	cbz	r0, 800d59c <_Balloc+0x64>
 800d582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d586:	e00e      	b.n	800d5a6 <_Balloc+0x6e>
 800d588:	2221      	movs	r2, #33	@ 0x21
 800d58a:	2104      	movs	r1, #4
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 fded 	bl	800e16c <_calloc_r>
 800d592:	69e3      	ldr	r3, [r4, #28]
 800d594:	60f0      	str	r0, [r6, #12]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1e4      	bne.n	800d566 <_Balloc+0x2e>
 800d59c:	2000      	movs	r0, #0
 800d59e:	bd70      	pop	{r4, r5, r6, pc}
 800d5a0:	6802      	ldr	r2, [r0, #0]
 800d5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5ac:	e7f7      	b.n	800d59e <_Balloc+0x66>
 800d5ae:	bf00      	nop
 800d5b0:	0800f3c1 	.word	0x0800f3c1
 800d5b4:	0800f441 	.word	0x0800f441

0800d5b8 <_Bfree>:
 800d5b8:	b570      	push	{r4, r5, r6, lr}
 800d5ba:	69c6      	ldr	r6, [r0, #28]
 800d5bc:	4605      	mov	r5, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	b976      	cbnz	r6, 800d5e0 <_Bfree+0x28>
 800d5c2:	2010      	movs	r0, #16
 800d5c4:	f7ff ff02 	bl	800d3cc <malloc>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	61e8      	str	r0, [r5, #28]
 800d5cc:	b920      	cbnz	r0, 800d5d8 <_Bfree+0x20>
 800d5ce:	4b09      	ldr	r3, [pc, #36]	@ (800d5f4 <_Bfree+0x3c>)
 800d5d0:	4809      	ldr	r0, [pc, #36]	@ (800d5f8 <_Bfree+0x40>)
 800d5d2:	218f      	movs	r1, #143	@ 0x8f
 800d5d4:	f000 fdac 	bl	800e130 <__assert_func>
 800d5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5dc:	6006      	str	r6, [r0, #0]
 800d5de:	60c6      	str	r6, [r0, #12]
 800d5e0:	b13c      	cbz	r4, 800d5f2 <_Bfree+0x3a>
 800d5e2:	69eb      	ldr	r3, [r5, #28]
 800d5e4:	6862      	ldr	r2, [r4, #4]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5ec:	6021      	str	r1, [r4, #0]
 800d5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	0800f3c1 	.word	0x0800f3c1
 800d5f8:	0800f441 	.word	0x0800f441

0800d5fc <__multadd>:
 800d5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d600:	690d      	ldr	r5, [r1, #16]
 800d602:	4607      	mov	r7, r0
 800d604:	460c      	mov	r4, r1
 800d606:	461e      	mov	r6, r3
 800d608:	f101 0c14 	add.w	ip, r1, #20
 800d60c:	2000      	movs	r0, #0
 800d60e:	f8dc 3000 	ldr.w	r3, [ip]
 800d612:	b299      	uxth	r1, r3
 800d614:	fb02 6101 	mla	r1, r2, r1, r6
 800d618:	0c1e      	lsrs	r6, r3, #16
 800d61a:	0c0b      	lsrs	r3, r1, #16
 800d61c:	fb02 3306 	mla	r3, r2, r6, r3
 800d620:	b289      	uxth	r1, r1
 800d622:	3001      	adds	r0, #1
 800d624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d628:	4285      	cmp	r5, r0
 800d62a:	f84c 1b04 	str.w	r1, [ip], #4
 800d62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d632:	dcec      	bgt.n	800d60e <__multadd+0x12>
 800d634:	b30e      	cbz	r6, 800d67a <__multadd+0x7e>
 800d636:	68a3      	ldr	r3, [r4, #8]
 800d638:	42ab      	cmp	r3, r5
 800d63a:	dc19      	bgt.n	800d670 <__multadd+0x74>
 800d63c:	6861      	ldr	r1, [r4, #4]
 800d63e:	4638      	mov	r0, r7
 800d640:	3101      	adds	r1, #1
 800d642:	f7ff ff79 	bl	800d538 <_Balloc>
 800d646:	4680      	mov	r8, r0
 800d648:	b928      	cbnz	r0, 800d656 <__multadd+0x5a>
 800d64a:	4602      	mov	r2, r0
 800d64c:	4b0c      	ldr	r3, [pc, #48]	@ (800d680 <__multadd+0x84>)
 800d64e:	480d      	ldr	r0, [pc, #52]	@ (800d684 <__multadd+0x88>)
 800d650:	21ba      	movs	r1, #186	@ 0xba
 800d652:	f000 fd6d 	bl	800e130 <__assert_func>
 800d656:	6922      	ldr	r2, [r4, #16]
 800d658:	3202      	adds	r2, #2
 800d65a:	f104 010c 	add.w	r1, r4, #12
 800d65e:	0092      	lsls	r2, r2, #2
 800d660:	300c      	adds	r0, #12
 800d662:	f7ff f800 	bl	800c666 <memcpy>
 800d666:	4621      	mov	r1, r4
 800d668:	4638      	mov	r0, r7
 800d66a:	f7ff ffa5 	bl	800d5b8 <_Bfree>
 800d66e:	4644      	mov	r4, r8
 800d670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d674:	3501      	adds	r5, #1
 800d676:	615e      	str	r6, [r3, #20]
 800d678:	6125      	str	r5, [r4, #16]
 800d67a:	4620      	mov	r0, r4
 800d67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d680:	0800f430 	.word	0x0800f430
 800d684:	0800f441 	.word	0x0800f441

0800d688 <__hi0bits>:
 800d688:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d68c:	4603      	mov	r3, r0
 800d68e:	bf36      	itet	cc
 800d690:	0403      	lslcc	r3, r0, #16
 800d692:	2000      	movcs	r0, #0
 800d694:	2010      	movcc	r0, #16
 800d696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d69a:	bf3c      	itt	cc
 800d69c:	021b      	lslcc	r3, r3, #8
 800d69e:	3008      	addcc	r0, #8
 800d6a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6a4:	bf3c      	itt	cc
 800d6a6:	011b      	lslcc	r3, r3, #4
 800d6a8:	3004      	addcc	r0, #4
 800d6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6ae:	bf3c      	itt	cc
 800d6b0:	009b      	lslcc	r3, r3, #2
 800d6b2:	3002      	addcc	r0, #2
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	db05      	blt.n	800d6c4 <__hi0bits+0x3c>
 800d6b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d6bc:	f100 0001 	add.w	r0, r0, #1
 800d6c0:	bf08      	it	eq
 800d6c2:	2020      	moveq	r0, #32
 800d6c4:	4770      	bx	lr

0800d6c6 <__lo0bits>:
 800d6c6:	6803      	ldr	r3, [r0, #0]
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	f013 0007 	ands.w	r0, r3, #7
 800d6ce:	d00b      	beq.n	800d6e8 <__lo0bits+0x22>
 800d6d0:	07d9      	lsls	r1, r3, #31
 800d6d2:	d421      	bmi.n	800d718 <__lo0bits+0x52>
 800d6d4:	0798      	lsls	r0, r3, #30
 800d6d6:	bf49      	itett	mi
 800d6d8:	085b      	lsrmi	r3, r3, #1
 800d6da:	089b      	lsrpl	r3, r3, #2
 800d6dc:	2001      	movmi	r0, #1
 800d6de:	6013      	strmi	r3, [r2, #0]
 800d6e0:	bf5c      	itt	pl
 800d6e2:	6013      	strpl	r3, [r2, #0]
 800d6e4:	2002      	movpl	r0, #2
 800d6e6:	4770      	bx	lr
 800d6e8:	b299      	uxth	r1, r3
 800d6ea:	b909      	cbnz	r1, 800d6f0 <__lo0bits+0x2a>
 800d6ec:	0c1b      	lsrs	r3, r3, #16
 800d6ee:	2010      	movs	r0, #16
 800d6f0:	b2d9      	uxtb	r1, r3
 800d6f2:	b909      	cbnz	r1, 800d6f8 <__lo0bits+0x32>
 800d6f4:	3008      	adds	r0, #8
 800d6f6:	0a1b      	lsrs	r3, r3, #8
 800d6f8:	0719      	lsls	r1, r3, #28
 800d6fa:	bf04      	itt	eq
 800d6fc:	091b      	lsreq	r3, r3, #4
 800d6fe:	3004      	addeq	r0, #4
 800d700:	0799      	lsls	r1, r3, #30
 800d702:	bf04      	itt	eq
 800d704:	089b      	lsreq	r3, r3, #2
 800d706:	3002      	addeq	r0, #2
 800d708:	07d9      	lsls	r1, r3, #31
 800d70a:	d403      	bmi.n	800d714 <__lo0bits+0x4e>
 800d70c:	085b      	lsrs	r3, r3, #1
 800d70e:	f100 0001 	add.w	r0, r0, #1
 800d712:	d003      	beq.n	800d71c <__lo0bits+0x56>
 800d714:	6013      	str	r3, [r2, #0]
 800d716:	4770      	bx	lr
 800d718:	2000      	movs	r0, #0
 800d71a:	4770      	bx	lr
 800d71c:	2020      	movs	r0, #32
 800d71e:	4770      	bx	lr

0800d720 <__i2b>:
 800d720:	b510      	push	{r4, lr}
 800d722:	460c      	mov	r4, r1
 800d724:	2101      	movs	r1, #1
 800d726:	f7ff ff07 	bl	800d538 <_Balloc>
 800d72a:	4602      	mov	r2, r0
 800d72c:	b928      	cbnz	r0, 800d73a <__i2b+0x1a>
 800d72e:	4b05      	ldr	r3, [pc, #20]	@ (800d744 <__i2b+0x24>)
 800d730:	4805      	ldr	r0, [pc, #20]	@ (800d748 <__i2b+0x28>)
 800d732:	f240 1145 	movw	r1, #325	@ 0x145
 800d736:	f000 fcfb 	bl	800e130 <__assert_func>
 800d73a:	2301      	movs	r3, #1
 800d73c:	6144      	str	r4, [r0, #20]
 800d73e:	6103      	str	r3, [r0, #16]
 800d740:	bd10      	pop	{r4, pc}
 800d742:	bf00      	nop
 800d744:	0800f430 	.word	0x0800f430
 800d748:	0800f441 	.word	0x0800f441

0800d74c <__multiply>:
 800d74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d750:	4617      	mov	r7, r2
 800d752:	690a      	ldr	r2, [r1, #16]
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	429a      	cmp	r2, r3
 800d758:	bfa8      	it	ge
 800d75a:	463b      	movge	r3, r7
 800d75c:	4689      	mov	r9, r1
 800d75e:	bfa4      	itt	ge
 800d760:	460f      	movge	r7, r1
 800d762:	4699      	movge	r9, r3
 800d764:	693d      	ldr	r5, [r7, #16]
 800d766:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	6879      	ldr	r1, [r7, #4]
 800d76e:	eb05 060a 	add.w	r6, r5, sl
 800d772:	42b3      	cmp	r3, r6
 800d774:	b085      	sub	sp, #20
 800d776:	bfb8      	it	lt
 800d778:	3101      	addlt	r1, #1
 800d77a:	f7ff fedd 	bl	800d538 <_Balloc>
 800d77e:	b930      	cbnz	r0, 800d78e <__multiply+0x42>
 800d780:	4602      	mov	r2, r0
 800d782:	4b41      	ldr	r3, [pc, #260]	@ (800d888 <__multiply+0x13c>)
 800d784:	4841      	ldr	r0, [pc, #260]	@ (800d88c <__multiply+0x140>)
 800d786:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d78a:	f000 fcd1 	bl	800e130 <__assert_func>
 800d78e:	f100 0414 	add.w	r4, r0, #20
 800d792:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d796:	4623      	mov	r3, r4
 800d798:	2200      	movs	r2, #0
 800d79a:	4573      	cmp	r3, lr
 800d79c:	d320      	bcc.n	800d7e0 <__multiply+0x94>
 800d79e:	f107 0814 	add.w	r8, r7, #20
 800d7a2:	f109 0114 	add.w	r1, r9, #20
 800d7a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d7aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d7ae:	9302      	str	r3, [sp, #8]
 800d7b0:	1beb      	subs	r3, r5, r7
 800d7b2:	3b15      	subs	r3, #21
 800d7b4:	f023 0303 	bic.w	r3, r3, #3
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	3715      	adds	r7, #21
 800d7bc:	42bd      	cmp	r5, r7
 800d7be:	bf38      	it	cc
 800d7c0:	2304      	movcc	r3, #4
 800d7c2:	9301      	str	r3, [sp, #4]
 800d7c4:	9b02      	ldr	r3, [sp, #8]
 800d7c6:	9103      	str	r1, [sp, #12]
 800d7c8:	428b      	cmp	r3, r1
 800d7ca:	d80c      	bhi.n	800d7e6 <__multiply+0x9a>
 800d7cc:	2e00      	cmp	r6, #0
 800d7ce:	dd03      	ble.n	800d7d8 <__multiply+0x8c>
 800d7d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d055      	beq.n	800d884 <__multiply+0x138>
 800d7d8:	6106      	str	r6, [r0, #16]
 800d7da:	b005      	add	sp, #20
 800d7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e0:	f843 2b04 	str.w	r2, [r3], #4
 800d7e4:	e7d9      	b.n	800d79a <__multiply+0x4e>
 800d7e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d7ea:	f1ba 0f00 	cmp.w	sl, #0
 800d7ee:	d01f      	beq.n	800d830 <__multiply+0xe4>
 800d7f0:	46c4      	mov	ip, r8
 800d7f2:	46a1      	mov	r9, r4
 800d7f4:	2700      	movs	r7, #0
 800d7f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d7fa:	f8d9 3000 	ldr.w	r3, [r9]
 800d7fe:	fa1f fb82 	uxth.w	fp, r2
 800d802:	b29b      	uxth	r3, r3
 800d804:	fb0a 330b 	mla	r3, sl, fp, r3
 800d808:	443b      	add	r3, r7
 800d80a:	f8d9 7000 	ldr.w	r7, [r9]
 800d80e:	0c12      	lsrs	r2, r2, #16
 800d810:	0c3f      	lsrs	r7, r7, #16
 800d812:	fb0a 7202 	mla	r2, sl, r2, r7
 800d816:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d820:	4565      	cmp	r5, ip
 800d822:	f849 3b04 	str.w	r3, [r9], #4
 800d826:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d82a:	d8e4      	bhi.n	800d7f6 <__multiply+0xaa>
 800d82c:	9b01      	ldr	r3, [sp, #4]
 800d82e:	50e7      	str	r7, [r4, r3]
 800d830:	9b03      	ldr	r3, [sp, #12]
 800d832:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d836:	3104      	adds	r1, #4
 800d838:	f1b9 0f00 	cmp.w	r9, #0
 800d83c:	d020      	beq.n	800d880 <__multiply+0x134>
 800d83e:	6823      	ldr	r3, [r4, #0]
 800d840:	4647      	mov	r7, r8
 800d842:	46a4      	mov	ip, r4
 800d844:	f04f 0a00 	mov.w	sl, #0
 800d848:	f8b7 b000 	ldrh.w	fp, [r7]
 800d84c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d850:	fb09 220b 	mla	r2, r9, fp, r2
 800d854:	4452      	add	r2, sl
 800d856:	b29b      	uxth	r3, r3
 800d858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d85c:	f84c 3b04 	str.w	r3, [ip], #4
 800d860:	f857 3b04 	ldr.w	r3, [r7], #4
 800d864:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d868:	f8bc 3000 	ldrh.w	r3, [ip]
 800d86c:	fb09 330a 	mla	r3, r9, sl, r3
 800d870:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d874:	42bd      	cmp	r5, r7
 800d876:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d87a:	d8e5      	bhi.n	800d848 <__multiply+0xfc>
 800d87c:	9a01      	ldr	r2, [sp, #4]
 800d87e:	50a3      	str	r3, [r4, r2]
 800d880:	3404      	adds	r4, #4
 800d882:	e79f      	b.n	800d7c4 <__multiply+0x78>
 800d884:	3e01      	subs	r6, #1
 800d886:	e7a1      	b.n	800d7cc <__multiply+0x80>
 800d888:	0800f430 	.word	0x0800f430
 800d88c:	0800f441 	.word	0x0800f441

0800d890 <__pow5mult>:
 800d890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d894:	4615      	mov	r5, r2
 800d896:	f012 0203 	ands.w	r2, r2, #3
 800d89a:	4607      	mov	r7, r0
 800d89c:	460e      	mov	r6, r1
 800d89e:	d007      	beq.n	800d8b0 <__pow5mult+0x20>
 800d8a0:	4c25      	ldr	r4, [pc, #148]	@ (800d938 <__pow5mult+0xa8>)
 800d8a2:	3a01      	subs	r2, #1
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8aa:	f7ff fea7 	bl	800d5fc <__multadd>
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	10ad      	asrs	r5, r5, #2
 800d8b2:	d03d      	beq.n	800d930 <__pow5mult+0xa0>
 800d8b4:	69fc      	ldr	r4, [r7, #28]
 800d8b6:	b97c      	cbnz	r4, 800d8d8 <__pow5mult+0x48>
 800d8b8:	2010      	movs	r0, #16
 800d8ba:	f7ff fd87 	bl	800d3cc <malloc>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	61f8      	str	r0, [r7, #28]
 800d8c2:	b928      	cbnz	r0, 800d8d0 <__pow5mult+0x40>
 800d8c4:	4b1d      	ldr	r3, [pc, #116]	@ (800d93c <__pow5mult+0xac>)
 800d8c6:	481e      	ldr	r0, [pc, #120]	@ (800d940 <__pow5mult+0xb0>)
 800d8c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d8cc:	f000 fc30 	bl	800e130 <__assert_func>
 800d8d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8d4:	6004      	str	r4, [r0, #0]
 800d8d6:	60c4      	str	r4, [r0, #12]
 800d8d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d8dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8e0:	b94c      	cbnz	r4, 800d8f6 <__pow5mult+0x66>
 800d8e2:	f240 2171 	movw	r1, #625	@ 0x271
 800d8e6:	4638      	mov	r0, r7
 800d8e8:	f7ff ff1a 	bl	800d720 <__i2b>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	6003      	str	r3, [r0, #0]
 800d8f6:	f04f 0900 	mov.w	r9, #0
 800d8fa:	07eb      	lsls	r3, r5, #31
 800d8fc:	d50a      	bpl.n	800d914 <__pow5mult+0x84>
 800d8fe:	4631      	mov	r1, r6
 800d900:	4622      	mov	r2, r4
 800d902:	4638      	mov	r0, r7
 800d904:	f7ff ff22 	bl	800d74c <__multiply>
 800d908:	4631      	mov	r1, r6
 800d90a:	4680      	mov	r8, r0
 800d90c:	4638      	mov	r0, r7
 800d90e:	f7ff fe53 	bl	800d5b8 <_Bfree>
 800d912:	4646      	mov	r6, r8
 800d914:	106d      	asrs	r5, r5, #1
 800d916:	d00b      	beq.n	800d930 <__pow5mult+0xa0>
 800d918:	6820      	ldr	r0, [r4, #0]
 800d91a:	b938      	cbnz	r0, 800d92c <__pow5mult+0x9c>
 800d91c:	4622      	mov	r2, r4
 800d91e:	4621      	mov	r1, r4
 800d920:	4638      	mov	r0, r7
 800d922:	f7ff ff13 	bl	800d74c <__multiply>
 800d926:	6020      	str	r0, [r4, #0]
 800d928:	f8c0 9000 	str.w	r9, [r0]
 800d92c:	4604      	mov	r4, r0
 800d92e:	e7e4      	b.n	800d8fa <__pow5mult+0x6a>
 800d930:	4630      	mov	r0, r6
 800d932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d936:	bf00      	nop
 800d938:	0800f4f4 	.word	0x0800f4f4
 800d93c:	0800f3c1 	.word	0x0800f3c1
 800d940:	0800f441 	.word	0x0800f441

0800d944 <__lshift>:
 800d944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d948:	460c      	mov	r4, r1
 800d94a:	6849      	ldr	r1, [r1, #4]
 800d94c:	6923      	ldr	r3, [r4, #16]
 800d94e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d952:	68a3      	ldr	r3, [r4, #8]
 800d954:	4607      	mov	r7, r0
 800d956:	4691      	mov	r9, r2
 800d958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d95c:	f108 0601 	add.w	r6, r8, #1
 800d960:	42b3      	cmp	r3, r6
 800d962:	db0b      	blt.n	800d97c <__lshift+0x38>
 800d964:	4638      	mov	r0, r7
 800d966:	f7ff fde7 	bl	800d538 <_Balloc>
 800d96a:	4605      	mov	r5, r0
 800d96c:	b948      	cbnz	r0, 800d982 <__lshift+0x3e>
 800d96e:	4602      	mov	r2, r0
 800d970:	4b28      	ldr	r3, [pc, #160]	@ (800da14 <__lshift+0xd0>)
 800d972:	4829      	ldr	r0, [pc, #164]	@ (800da18 <__lshift+0xd4>)
 800d974:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d978:	f000 fbda 	bl	800e130 <__assert_func>
 800d97c:	3101      	adds	r1, #1
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	e7ee      	b.n	800d960 <__lshift+0x1c>
 800d982:	2300      	movs	r3, #0
 800d984:	f100 0114 	add.w	r1, r0, #20
 800d988:	f100 0210 	add.w	r2, r0, #16
 800d98c:	4618      	mov	r0, r3
 800d98e:	4553      	cmp	r3, sl
 800d990:	db33      	blt.n	800d9fa <__lshift+0xb6>
 800d992:	6920      	ldr	r0, [r4, #16]
 800d994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d998:	f104 0314 	add.w	r3, r4, #20
 800d99c:	f019 091f 	ands.w	r9, r9, #31
 800d9a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d9a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d9a8:	d02b      	beq.n	800da02 <__lshift+0xbe>
 800d9aa:	f1c9 0e20 	rsb	lr, r9, #32
 800d9ae:	468a      	mov	sl, r1
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	6818      	ldr	r0, [r3, #0]
 800d9b4:	fa00 f009 	lsl.w	r0, r0, r9
 800d9b8:	4310      	orrs	r0, r2
 800d9ba:	f84a 0b04 	str.w	r0, [sl], #4
 800d9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9c2:	459c      	cmp	ip, r3
 800d9c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d9c8:	d8f3      	bhi.n	800d9b2 <__lshift+0x6e>
 800d9ca:	ebac 0304 	sub.w	r3, ip, r4
 800d9ce:	3b15      	subs	r3, #21
 800d9d0:	f023 0303 	bic.w	r3, r3, #3
 800d9d4:	3304      	adds	r3, #4
 800d9d6:	f104 0015 	add.w	r0, r4, #21
 800d9da:	4560      	cmp	r0, ip
 800d9dc:	bf88      	it	hi
 800d9de:	2304      	movhi	r3, #4
 800d9e0:	50ca      	str	r2, [r1, r3]
 800d9e2:	b10a      	cbz	r2, 800d9e8 <__lshift+0xa4>
 800d9e4:	f108 0602 	add.w	r6, r8, #2
 800d9e8:	3e01      	subs	r6, #1
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	612e      	str	r6, [r5, #16]
 800d9ee:	4621      	mov	r1, r4
 800d9f0:	f7ff fde2 	bl	800d5b8 <_Bfree>
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9fe:	3301      	adds	r3, #1
 800da00:	e7c5      	b.n	800d98e <__lshift+0x4a>
 800da02:	3904      	subs	r1, #4
 800da04:	f853 2b04 	ldr.w	r2, [r3], #4
 800da08:	f841 2f04 	str.w	r2, [r1, #4]!
 800da0c:	459c      	cmp	ip, r3
 800da0e:	d8f9      	bhi.n	800da04 <__lshift+0xc0>
 800da10:	e7ea      	b.n	800d9e8 <__lshift+0xa4>
 800da12:	bf00      	nop
 800da14:	0800f430 	.word	0x0800f430
 800da18:	0800f441 	.word	0x0800f441

0800da1c <__mcmp>:
 800da1c:	690a      	ldr	r2, [r1, #16]
 800da1e:	4603      	mov	r3, r0
 800da20:	6900      	ldr	r0, [r0, #16]
 800da22:	1a80      	subs	r0, r0, r2
 800da24:	b530      	push	{r4, r5, lr}
 800da26:	d10e      	bne.n	800da46 <__mcmp+0x2a>
 800da28:	3314      	adds	r3, #20
 800da2a:	3114      	adds	r1, #20
 800da2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800da30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800da34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800da38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800da3c:	4295      	cmp	r5, r2
 800da3e:	d003      	beq.n	800da48 <__mcmp+0x2c>
 800da40:	d205      	bcs.n	800da4e <__mcmp+0x32>
 800da42:	f04f 30ff 	mov.w	r0, #4294967295
 800da46:	bd30      	pop	{r4, r5, pc}
 800da48:	42a3      	cmp	r3, r4
 800da4a:	d3f3      	bcc.n	800da34 <__mcmp+0x18>
 800da4c:	e7fb      	b.n	800da46 <__mcmp+0x2a>
 800da4e:	2001      	movs	r0, #1
 800da50:	e7f9      	b.n	800da46 <__mcmp+0x2a>
	...

0800da54 <__mdiff>:
 800da54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da58:	4689      	mov	r9, r1
 800da5a:	4606      	mov	r6, r0
 800da5c:	4611      	mov	r1, r2
 800da5e:	4648      	mov	r0, r9
 800da60:	4614      	mov	r4, r2
 800da62:	f7ff ffdb 	bl	800da1c <__mcmp>
 800da66:	1e05      	subs	r5, r0, #0
 800da68:	d112      	bne.n	800da90 <__mdiff+0x3c>
 800da6a:	4629      	mov	r1, r5
 800da6c:	4630      	mov	r0, r6
 800da6e:	f7ff fd63 	bl	800d538 <_Balloc>
 800da72:	4602      	mov	r2, r0
 800da74:	b928      	cbnz	r0, 800da82 <__mdiff+0x2e>
 800da76:	4b3f      	ldr	r3, [pc, #252]	@ (800db74 <__mdiff+0x120>)
 800da78:	f240 2137 	movw	r1, #567	@ 0x237
 800da7c:	483e      	ldr	r0, [pc, #248]	@ (800db78 <__mdiff+0x124>)
 800da7e:	f000 fb57 	bl	800e130 <__assert_func>
 800da82:	2301      	movs	r3, #1
 800da84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da88:	4610      	mov	r0, r2
 800da8a:	b003      	add	sp, #12
 800da8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da90:	bfbc      	itt	lt
 800da92:	464b      	movlt	r3, r9
 800da94:	46a1      	movlt	r9, r4
 800da96:	4630      	mov	r0, r6
 800da98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800da9c:	bfba      	itte	lt
 800da9e:	461c      	movlt	r4, r3
 800daa0:	2501      	movlt	r5, #1
 800daa2:	2500      	movge	r5, #0
 800daa4:	f7ff fd48 	bl	800d538 <_Balloc>
 800daa8:	4602      	mov	r2, r0
 800daaa:	b918      	cbnz	r0, 800dab4 <__mdiff+0x60>
 800daac:	4b31      	ldr	r3, [pc, #196]	@ (800db74 <__mdiff+0x120>)
 800daae:	f240 2145 	movw	r1, #581	@ 0x245
 800dab2:	e7e3      	b.n	800da7c <__mdiff+0x28>
 800dab4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dab8:	6926      	ldr	r6, [r4, #16]
 800daba:	60c5      	str	r5, [r0, #12]
 800dabc:	f109 0310 	add.w	r3, r9, #16
 800dac0:	f109 0514 	add.w	r5, r9, #20
 800dac4:	f104 0e14 	add.w	lr, r4, #20
 800dac8:	f100 0b14 	add.w	fp, r0, #20
 800dacc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dad0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dad4:	9301      	str	r3, [sp, #4]
 800dad6:	46d9      	mov	r9, fp
 800dad8:	f04f 0c00 	mov.w	ip, #0
 800dadc:	9b01      	ldr	r3, [sp, #4]
 800dade:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dae2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dae6:	9301      	str	r3, [sp, #4]
 800dae8:	fa1f f38a 	uxth.w	r3, sl
 800daec:	4619      	mov	r1, r3
 800daee:	b283      	uxth	r3, r0
 800daf0:	1acb      	subs	r3, r1, r3
 800daf2:	0c00      	lsrs	r0, r0, #16
 800daf4:	4463      	add	r3, ip
 800daf6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dafa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dafe:	b29b      	uxth	r3, r3
 800db00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800db04:	4576      	cmp	r6, lr
 800db06:	f849 3b04 	str.w	r3, [r9], #4
 800db0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db0e:	d8e5      	bhi.n	800dadc <__mdiff+0x88>
 800db10:	1b33      	subs	r3, r6, r4
 800db12:	3b15      	subs	r3, #21
 800db14:	f023 0303 	bic.w	r3, r3, #3
 800db18:	3415      	adds	r4, #21
 800db1a:	3304      	adds	r3, #4
 800db1c:	42a6      	cmp	r6, r4
 800db1e:	bf38      	it	cc
 800db20:	2304      	movcc	r3, #4
 800db22:	441d      	add	r5, r3
 800db24:	445b      	add	r3, fp
 800db26:	461e      	mov	r6, r3
 800db28:	462c      	mov	r4, r5
 800db2a:	4544      	cmp	r4, r8
 800db2c:	d30e      	bcc.n	800db4c <__mdiff+0xf8>
 800db2e:	f108 0103 	add.w	r1, r8, #3
 800db32:	1b49      	subs	r1, r1, r5
 800db34:	f021 0103 	bic.w	r1, r1, #3
 800db38:	3d03      	subs	r5, #3
 800db3a:	45a8      	cmp	r8, r5
 800db3c:	bf38      	it	cc
 800db3e:	2100      	movcc	r1, #0
 800db40:	440b      	add	r3, r1
 800db42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db46:	b191      	cbz	r1, 800db6e <__mdiff+0x11a>
 800db48:	6117      	str	r7, [r2, #16]
 800db4a:	e79d      	b.n	800da88 <__mdiff+0x34>
 800db4c:	f854 1b04 	ldr.w	r1, [r4], #4
 800db50:	46e6      	mov	lr, ip
 800db52:	0c08      	lsrs	r0, r1, #16
 800db54:	fa1c fc81 	uxtah	ip, ip, r1
 800db58:	4471      	add	r1, lr
 800db5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800db5e:	b289      	uxth	r1, r1
 800db60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800db64:	f846 1b04 	str.w	r1, [r6], #4
 800db68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db6c:	e7dd      	b.n	800db2a <__mdiff+0xd6>
 800db6e:	3f01      	subs	r7, #1
 800db70:	e7e7      	b.n	800db42 <__mdiff+0xee>
 800db72:	bf00      	nop
 800db74:	0800f430 	.word	0x0800f430
 800db78:	0800f441 	.word	0x0800f441

0800db7c <__d2b>:
 800db7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db80:	460f      	mov	r7, r1
 800db82:	2101      	movs	r1, #1
 800db84:	ec59 8b10 	vmov	r8, r9, d0
 800db88:	4616      	mov	r6, r2
 800db8a:	f7ff fcd5 	bl	800d538 <_Balloc>
 800db8e:	4604      	mov	r4, r0
 800db90:	b930      	cbnz	r0, 800dba0 <__d2b+0x24>
 800db92:	4602      	mov	r2, r0
 800db94:	4b23      	ldr	r3, [pc, #140]	@ (800dc24 <__d2b+0xa8>)
 800db96:	4824      	ldr	r0, [pc, #144]	@ (800dc28 <__d2b+0xac>)
 800db98:	f240 310f 	movw	r1, #783	@ 0x30f
 800db9c:	f000 fac8 	bl	800e130 <__assert_func>
 800dba0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dba4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dba8:	b10d      	cbz	r5, 800dbae <__d2b+0x32>
 800dbaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dbae:	9301      	str	r3, [sp, #4]
 800dbb0:	f1b8 0300 	subs.w	r3, r8, #0
 800dbb4:	d023      	beq.n	800dbfe <__d2b+0x82>
 800dbb6:	4668      	mov	r0, sp
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	f7ff fd84 	bl	800d6c6 <__lo0bits>
 800dbbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dbc2:	b1d0      	cbz	r0, 800dbfa <__d2b+0x7e>
 800dbc4:	f1c0 0320 	rsb	r3, r0, #32
 800dbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbcc:	430b      	orrs	r3, r1
 800dbce:	40c2      	lsrs	r2, r0
 800dbd0:	6163      	str	r3, [r4, #20]
 800dbd2:	9201      	str	r2, [sp, #4]
 800dbd4:	9b01      	ldr	r3, [sp, #4]
 800dbd6:	61a3      	str	r3, [r4, #24]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	bf0c      	ite	eq
 800dbdc:	2201      	moveq	r2, #1
 800dbde:	2202      	movne	r2, #2
 800dbe0:	6122      	str	r2, [r4, #16]
 800dbe2:	b1a5      	cbz	r5, 800dc0e <__d2b+0x92>
 800dbe4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dbe8:	4405      	add	r5, r0
 800dbea:	603d      	str	r5, [r7, #0]
 800dbec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dbf0:	6030      	str	r0, [r6, #0]
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	b003      	add	sp, #12
 800dbf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbfa:	6161      	str	r1, [r4, #20]
 800dbfc:	e7ea      	b.n	800dbd4 <__d2b+0x58>
 800dbfe:	a801      	add	r0, sp, #4
 800dc00:	f7ff fd61 	bl	800d6c6 <__lo0bits>
 800dc04:	9b01      	ldr	r3, [sp, #4]
 800dc06:	6163      	str	r3, [r4, #20]
 800dc08:	3020      	adds	r0, #32
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	e7e8      	b.n	800dbe0 <__d2b+0x64>
 800dc0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dc16:	6038      	str	r0, [r7, #0]
 800dc18:	6918      	ldr	r0, [r3, #16]
 800dc1a:	f7ff fd35 	bl	800d688 <__hi0bits>
 800dc1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc22:	e7e5      	b.n	800dbf0 <__d2b+0x74>
 800dc24:	0800f430 	.word	0x0800f430
 800dc28:	0800f441 	.word	0x0800f441

0800dc2c <__sfputc_r>:
 800dc2c:	6893      	ldr	r3, [r2, #8]
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	b410      	push	{r4}
 800dc34:	6093      	str	r3, [r2, #8]
 800dc36:	da08      	bge.n	800dc4a <__sfputc_r+0x1e>
 800dc38:	6994      	ldr	r4, [r2, #24]
 800dc3a:	42a3      	cmp	r3, r4
 800dc3c:	db01      	blt.n	800dc42 <__sfputc_r+0x16>
 800dc3e:	290a      	cmp	r1, #10
 800dc40:	d103      	bne.n	800dc4a <__sfputc_r+0x1e>
 800dc42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc46:	f7fe bbfa 	b.w	800c43e <__swbuf_r>
 800dc4a:	6813      	ldr	r3, [r2, #0]
 800dc4c:	1c58      	adds	r0, r3, #1
 800dc4e:	6010      	str	r0, [r2, #0]
 800dc50:	7019      	strb	r1, [r3, #0]
 800dc52:	4608      	mov	r0, r1
 800dc54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc58:	4770      	bx	lr

0800dc5a <__sfputs_r>:
 800dc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	460f      	mov	r7, r1
 800dc60:	4614      	mov	r4, r2
 800dc62:	18d5      	adds	r5, r2, r3
 800dc64:	42ac      	cmp	r4, r5
 800dc66:	d101      	bne.n	800dc6c <__sfputs_r+0x12>
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e007      	b.n	800dc7c <__sfputs_r+0x22>
 800dc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc70:	463a      	mov	r2, r7
 800dc72:	4630      	mov	r0, r6
 800dc74:	f7ff ffda 	bl	800dc2c <__sfputc_r>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d1f3      	bne.n	800dc64 <__sfputs_r+0xa>
 800dc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc80 <_vfiprintf_r>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	460d      	mov	r5, r1
 800dc86:	b09d      	sub	sp, #116	@ 0x74
 800dc88:	4614      	mov	r4, r2
 800dc8a:	4698      	mov	r8, r3
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	b118      	cbz	r0, 800dc98 <_vfiprintf_r+0x18>
 800dc90:	6a03      	ldr	r3, [r0, #32]
 800dc92:	b90b      	cbnz	r3, 800dc98 <_vfiprintf_r+0x18>
 800dc94:	f7fe faea 	bl	800c26c <__sinit>
 800dc98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc9a:	07d9      	lsls	r1, r3, #31
 800dc9c:	d405      	bmi.n	800dcaa <_vfiprintf_r+0x2a>
 800dc9e:	89ab      	ldrh	r3, [r5, #12]
 800dca0:	059a      	lsls	r2, r3, #22
 800dca2:	d402      	bmi.n	800dcaa <_vfiprintf_r+0x2a>
 800dca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dca6:	f7fe fcdc 	bl	800c662 <__retarget_lock_acquire_recursive>
 800dcaa:	89ab      	ldrh	r3, [r5, #12]
 800dcac:	071b      	lsls	r3, r3, #28
 800dcae:	d501      	bpl.n	800dcb4 <_vfiprintf_r+0x34>
 800dcb0:	692b      	ldr	r3, [r5, #16]
 800dcb2:	b99b      	cbnz	r3, 800dcdc <_vfiprintf_r+0x5c>
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f7fe fc00 	bl	800c4bc <__swsetup_r>
 800dcbc:	b170      	cbz	r0, 800dcdc <_vfiprintf_r+0x5c>
 800dcbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcc0:	07dc      	lsls	r4, r3, #31
 800dcc2:	d504      	bpl.n	800dcce <_vfiprintf_r+0x4e>
 800dcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc8:	b01d      	add	sp, #116	@ 0x74
 800dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcce:	89ab      	ldrh	r3, [r5, #12]
 800dcd0:	0598      	lsls	r0, r3, #22
 800dcd2:	d4f7      	bmi.n	800dcc4 <_vfiprintf_r+0x44>
 800dcd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcd6:	f7fe fcc5 	bl	800c664 <__retarget_lock_release_recursive>
 800dcda:	e7f3      	b.n	800dcc4 <_vfiprintf_r+0x44>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9309      	str	r3, [sp, #36]	@ 0x24
 800dce0:	2320      	movs	r3, #32
 800dce2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dce6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcea:	2330      	movs	r3, #48	@ 0x30
 800dcec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800de9c <_vfiprintf_r+0x21c>
 800dcf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dcf4:	f04f 0901 	mov.w	r9, #1
 800dcf8:	4623      	mov	r3, r4
 800dcfa:	469a      	mov	sl, r3
 800dcfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd00:	b10a      	cbz	r2, 800dd06 <_vfiprintf_r+0x86>
 800dd02:	2a25      	cmp	r2, #37	@ 0x25
 800dd04:	d1f9      	bne.n	800dcfa <_vfiprintf_r+0x7a>
 800dd06:	ebba 0b04 	subs.w	fp, sl, r4
 800dd0a:	d00b      	beq.n	800dd24 <_vfiprintf_r+0xa4>
 800dd0c:	465b      	mov	r3, fp
 800dd0e:	4622      	mov	r2, r4
 800dd10:	4629      	mov	r1, r5
 800dd12:	4630      	mov	r0, r6
 800dd14:	f7ff ffa1 	bl	800dc5a <__sfputs_r>
 800dd18:	3001      	adds	r0, #1
 800dd1a:	f000 80a7 	beq.w	800de6c <_vfiprintf_r+0x1ec>
 800dd1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd20:	445a      	add	r2, fp
 800dd22:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd24:	f89a 3000 	ldrb.w	r3, [sl]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 809f 	beq.w	800de6c <_vfiprintf_r+0x1ec>
 800dd2e:	2300      	movs	r3, #0
 800dd30:	f04f 32ff 	mov.w	r2, #4294967295
 800dd34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd38:	f10a 0a01 	add.w	sl, sl, #1
 800dd3c:	9304      	str	r3, [sp, #16]
 800dd3e:	9307      	str	r3, [sp, #28]
 800dd40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd44:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd46:	4654      	mov	r4, sl
 800dd48:	2205      	movs	r2, #5
 800dd4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd4e:	4853      	ldr	r0, [pc, #332]	@ (800de9c <_vfiprintf_r+0x21c>)
 800dd50:	f7f2 fa3e 	bl	80001d0 <memchr>
 800dd54:	9a04      	ldr	r2, [sp, #16]
 800dd56:	b9d8      	cbnz	r0, 800dd90 <_vfiprintf_r+0x110>
 800dd58:	06d1      	lsls	r1, r2, #27
 800dd5a:	bf44      	itt	mi
 800dd5c:	2320      	movmi	r3, #32
 800dd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd62:	0713      	lsls	r3, r2, #28
 800dd64:	bf44      	itt	mi
 800dd66:	232b      	movmi	r3, #43	@ 0x2b
 800dd68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd70:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd72:	d015      	beq.n	800dda0 <_vfiprintf_r+0x120>
 800dd74:	9a07      	ldr	r2, [sp, #28]
 800dd76:	4654      	mov	r4, sl
 800dd78:	2000      	movs	r0, #0
 800dd7a:	f04f 0c0a 	mov.w	ip, #10
 800dd7e:	4621      	mov	r1, r4
 800dd80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd84:	3b30      	subs	r3, #48	@ 0x30
 800dd86:	2b09      	cmp	r3, #9
 800dd88:	d94b      	bls.n	800de22 <_vfiprintf_r+0x1a2>
 800dd8a:	b1b0      	cbz	r0, 800ddba <_vfiprintf_r+0x13a>
 800dd8c:	9207      	str	r2, [sp, #28]
 800dd8e:	e014      	b.n	800ddba <_vfiprintf_r+0x13a>
 800dd90:	eba0 0308 	sub.w	r3, r0, r8
 800dd94:	fa09 f303 	lsl.w	r3, r9, r3
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	9304      	str	r3, [sp, #16]
 800dd9c:	46a2      	mov	sl, r4
 800dd9e:	e7d2      	b.n	800dd46 <_vfiprintf_r+0xc6>
 800dda0:	9b03      	ldr	r3, [sp, #12]
 800dda2:	1d19      	adds	r1, r3, #4
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	9103      	str	r1, [sp, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	bfbb      	ittet	lt
 800ddac:	425b      	neglt	r3, r3
 800ddae:	f042 0202 	orrlt.w	r2, r2, #2
 800ddb2:	9307      	strge	r3, [sp, #28]
 800ddb4:	9307      	strlt	r3, [sp, #28]
 800ddb6:	bfb8      	it	lt
 800ddb8:	9204      	strlt	r2, [sp, #16]
 800ddba:	7823      	ldrb	r3, [r4, #0]
 800ddbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddbe:	d10a      	bne.n	800ddd6 <_vfiprintf_r+0x156>
 800ddc0:	7863      	ldrb	r3, [r4, #1]
 800ddc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddc4:	d132      	bne.n	800de2c <_vfiprintf_r+0x1ac>
 800ddc6:	9b03      	ldr	r3, [sp, #12]
 800ddc8:	1d1a      	adds	r2, r3, #4
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	9203      	str	r2, [sp, #12]
 800ddce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ddd2:	3402      	adds	r4, #2
 800ddd4:	9305      	str	r3, [sp, #20]
 800ddd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800deac <_vfiprintf_r+0x22c>
 800ddda:	7821      	ldrb	r1, [r4, #0]
 800dddc:	2203      	movs	r2, #3
 800ddde:	4650      	mov	r0, sl
 800dde0:	f7f2 f9f6 	bl	80001d0 <memchr>
 800dde4:	b138      	cbz	r0, 800ddf6 <_vfiprintf_r+0x176>
 800dde6:	9b04      	ldr	r3, [sp, #16]
 800dde8:	eba0 000a 	sub.w	r0, r0, sl
 800ddec:	2240      	movs	r2, #64	@ 0x40
 800ddee:	4082      	lsls	r2, r0
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	3401      	adds	r4, #1
 800ddf4:	9304      	str	r3, [sp, #16]
 800ddf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddfa:	4829      	ldr	r0, [pc, #164]	@ (800dea0 <_vfiprintf_r+0x220>)
 800ddfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de00:	2206      	movs	r2, #6
 800de02:	f7f2 f9e5 	bl	80001d0 <memchr>
 800de06:	2800      	cmp	r0, #0
 800de08:	d03f      	beq.n	800de8a <_vfiprintf_r+0x20a>
 800de0a:	4b26      	ldr	r3, [pc, #152]	@ (800dea4 <_vfiprintf_r+0x224>)
 800de0c:	bb1b      	cbnz	r3, 800de56 <_vfiprintf_r+0x1d6>
 800de0e:	9b03      	ldr	r3, [sp, #12]
 800de10:	3307      	adds	r3, #7
 800de12:	f023 0307 	bic.w	r3, r3, #7
 800de16:	3308      	adds	r3, #8
 800de18:	9303      	str	r3, [sp, #12]
 800de1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de1c:	443b      	add	r3, r7
 800de1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800de20:	e76a      	b.n	800dcf8 <_vfiprintf_r+0x78>
 800de22:	fb0c 3202 	mla	r2, ip, r2, r3
 800de26:	460c      	mov	r4, r1
 800de28:	2001      	movs	r0, #1
 800de2a:	e7a8      	b.n	800dd7e <_vfiprintf_r+0xfe>
 800de2c:	2300      	movs	r3, #0
 800de2e:	3401      	adds	r4, #1
 800de30:	9305      	str	r3, [sp, #20]
 800de32:	4619      	mov	r1, r3
 800de34:	f04f 0c0a 	mov.w	ip, #10
 800de38:	4620      	mov	r0, r4
 800de3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de3e:	3a30      	subs	r2, #48	@ 0x30
 800de40:	2a09      	cmp	r2, #9
 800de42:	d903      	bls.n	800de4c <_vfiprintf_r+0x1cc>
 800de44:	2b00      	cmp	r3, #0
 800de46:	d0c6      	beq.n	800ddd6 <_vfiprintf_r+0x156>
 800de48:	9105      	str	r1, [sp, #20]
 800de4a:	e7c4      	b.n	800ddd6 <_vfiprintf_r+0x156>
 800de4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800de50:	4604      	mov	r4, r0
 800de52:	2301      	movs	r3, #1
 800de54:	e7f0      	b.n	800de38 <_vfiprintf_r+0x1b8>
 800de56:	ab03      	add	r3, sp, #12
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	462a      	mov	r2, r5
 800de5c:	4b12      	ldr	r3, [pc, #72]	@ (800dea8 <_vfiprintf_r+0x228>)
 800de5e:	a904      	add	r1, sp, #16
 800de60:	4630      	mov	r0, r6
 800de62:	f7fd fdc1 	bl	800b9e8 <_printf_float>
 800de66:	4607      	mov	r7, r0
 800de68:	1c78      	adds	r0, r7, #1
 800de6a:	d1d6      	bne.n	800de1a <_vfiprintf_r+0x19a>
 800de6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de6e:	07d9      	lsls	r1, r3, #31
 800de70:	d405      	bmi.n	800de7e <_vfiprintf_r+0x1fe>
 800de72:	89ab      	ldrh	r3, [r5, #12]
 800de74:	059a      	lsls	r2, r3, #22
 800de76:	d402      	bmi.n	800de7e <_vfiprintf_r+0x1fe>
 800de78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de7a:	f7fe fbf3 	bl	800c664 <__retarget_lock_release_recursive>
 800de7e:	89ab      	ldrh	r3, [r5, #12]
 800de80:	065b      	lsls	r3, r3, #25
 800de82:	f53f af1f 	bmi.w	800dcc4 <_vfiprintf_r+0x44>
 800de86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de88:	e71e      	b.n	800dcc8 <_vfiprintf_r+0x48>
 800de8a:	ab03      	add	r3, sp, #12
 800de8c:	9300      	str	r3, [sp, #0]
 800de8e:	462a      	mov	r2, r5
 800de90:	4b05      	ldr	r3, [pc, #20]	@ (800dea8 <_vfiprintf_r+0x228>)
 800de92:	a904      	add	r1, sp, #16
 800de94:	4630      	mov	r0, r6
 800de96:	f7fe f83f 	bl	800bf18 <_printf_i>
 800de9a:	e7e4      	b.n	800de66 <_vfiprintf_r+0x1e6>
 800de9c:	0800f49a 	.word	0x0800f49a
 800dea0:	0800f4a4 	.word	0x0800f4a4
 800dea4:	0800b9e9 	.word	0x0800b9e9
 800dea8:	0800dc5b 	.word	0x0800dc5b
 800deac:	0800f4a0 	.word	0x0800f4a0

0800deb0 <__sflush_r>:
 800deb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800deb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb8:	0716      	lsls	r6, r2, #28
 800deba:	4605      	mov	r5, r0
 800debc:	460c      	mov	r4, r1
 800debe:	d454      	bmi.n	800df6a <__sflush_r+0xba>
 800dec0:	684b      	ldr	r3, [r1, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	dc02      	bgt.n	800decc <__sflush_r+0x1c>
 800dec6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dec8:	2b00      	cmp	r3, #0
 800deca:	dd48      	ble.n	800df5e <__sflush_r+0xae>
 800decc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dece:	2e00      	cmp	r6, #0
 800ded0:	d045      	beq.n	800df5e <__sflush_r+0xae>
 800ded2:	2300      	movs	r3, #0
 800ded4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ded8:	682f      	ldr	r7, [r5, #0]
 800deda:	6a21      	ldr	r1, [r4, #32]
 800dedc:	602b      	str	r3, [r5, #0]
 800dede:	d030      	beq.n	800df42 <__sflush_r+0x92>
 800dee0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dee2:	89a3      	ldrh	r3, [r4, #12]
 800dee4:	0759      	lsls	r1, r3, #29
 800dee6:	d505      	bpl.n	800def4 <__sflush_r+0x44>
 800dee8:	6863      	ldr	r3, [r4, #4]
 800deea:	1ad2      	subs	r2, r2, r3
 800deec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800deee:	b10b      	cbz	r3, 800def4 <__sflush_r+0x44>
 800def0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800def2:	1ad2      	subs	r2, r2, r3
 800def4:	2300      	movs	r3, #0
 800def6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800def8:	6a21      	ldr	r1, [r4, #32]
 800defa:	4628      	mov	r0, r5
 800defc:	47b0      	blx	r6
 800defe:	1c43      	adds	r3, r0, #1
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	d106      	bne.n	800df12 <__sflush_r+0x62>
 800df04:	6829      	ldr	r1, [r5, #0]
 800df06:	291d      	cmp	r1, #29
 800df08:	d82b      	bhi.n	800df62 <__sflush_r+0xb2>
 800df0a:	4a2a      	ldr	r2, [pc, #168]	@ (800dfb4 <__sflush_r+0x104>)
 800df0c:	40ca      	lsrs	r2, r1
 800df0e:	07d6      	lsls	r6, r2, #31
 800df10:	d527      	bpl.n	800df62 <__sflush_r+0xb2>
 800df12:	2200      	movs	r2, #0
 800df14:	6062      	str	r2, [r4, #4]
 800df16:	04d9      	lsls	r1, r3, #19
 800df18:	6922      	ldr	r2, [r4, #16]
 800df1a:	6022      	str	r2, [r4, #0]
 800df1c:	d504      	bpl.n	800df28 <__sflush_r+0x78>
 800df1e:	1c42      	adds	r2, r0, #1
 800df20:	d101      	bne.n	800df26 <__sflush_r+0x76>
 800df22:	682b      	ldr	r3, [r5, #0]
 800df24:	b903      	cbnz	r3, 800df28 <__sflush_r+0x78>
 800df26:	6560      	str	r0, [r4, #84]	@ 0x54
 800df28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df2a:	602f      	str	r7, [r5, #0]
 800df2c:	b1b9      	cbz	r1, 800df5e <__sflush_r+0xae>
 800df2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df32:	4299      	cmp	r1, r3
 800df34:	d002      	beq.n	800df3c <__sflush_r+0x8c>
 800df36:	4628      	mov	r0, r5
 800df38:	f7ff f9fe 	bl	800d338 <_free_r>
 800df3c:	2300      	movs	r3, #0
 800df3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800df40:	e00d      	b.n	800df5e <__sflush_r+0xae>
 800df42:	2301      	movs	r3, #1
 800df44:	4628      	mov	r0, r5
 800df46:	47b0      	blx	r6
 800df48:	4602      	mov	r2, r0
 800df4a:	1c50      	adds	r0, r2, #1
 800df4c:	d1c9      	bne.n	800dee2 <__sflush_r+0x32>
 800df4e:	682b      	ldr	r3, [r5, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d0c6      	beq.n	800dee2 <__sflush_r+0x32>
 800df54:	2b1d      	cmp	r3, #29
 800df56:	d001      	beq.n	800df5c <__sflush_r+0xac>
 800df58:	2b16      	cmp	r3, #22
 800df5a:	d11e      	bne.n	800df9a <__sflush_r+0xea>
 800df5c:	602f      	str	r7, [r5, #0]
 800df5e:	2000      	movs	r0, #0
 800df60:	e022      	b.n	800dfa8 <__sflush_r+0xf8>
 800df62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df66:	b21b      	sxth	r3, r3
 800df68:	e01b      	b.n	800dfa2 <__sflush_r+0xf2>
 800df6a:	690f      	ldr	r7, [r1, #16]
 800df6c:	2f00      	cmp	r7, #0
 800df6e:	d0f6      	beq.n	800df5e <__sflush_r+0xae>
 800df70:	0793      	lsls	r3, r2, #30
 800df72:	680e      	ldr	r6, [r1, #0]
 800df74:	bf08      	it	eq
 800df76:	694b      	ldreq	r3, [r1, #20]
 800df78:	600f      	str	r7, [r1, #0]
 800df7a:	bf18      	it	ne
 800df7c:	2300      	movne	r3, #0
 800df7e:	eba6 0807 	sub.w	r8, r6, r7
 800df82:	608b      	str	r3, [r1, #8]
 800df84:	f1b8 0f00 	cmp.w	r8, #0
 800df88:	dde9      	ble.n	800df5e <__sflush_r+0xae>
 800df8a:	6a21      	ldr	r1, [r4, #32]
 800df8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df8e:	4643      	mov	r3, r8
 800df90:	463a      	mov	r2, r7
 800df92:	4628      	mov	r0, r5
 800df94:	47b0      	blx	r6
 800df96:	2800      	cmp	r0, #0
 800df98:	dc08      	bgt.n	800dfac <__sflush_r+0xfc>
 800df9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfa2:	81a3      	strh	r3, [r4, #12]
 800dfa4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfac:	4407      	add	r7, r0
 800dfae:	eba8 0800 	sub.w	r8, r8, r0
 800dfb2:	e7e7      	b.n	800df84 <__sflush_r+0xd4>
 800dfb4:	20400001 	.word	0x20400001

0800dfb8 <_fflush_r>:
 800dfb8:	b538      	push	{r3, r4, r5, lr}
 800dfba:	690b      	ldr	r3, [r1, #16]
 800dfbc:	4605      	mov	r5, r0
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	b913      	cbnz	r3, 800dfc8 <_fflush_r+0x10>
 800dfc2:	2500      	movs	r5, #0
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	bd38      	pop	{r3, r4, r5, pc}
 800dfc8:	b118      	cbz	r0, 800dfd2 <_fflush_r+0x1a>
 800dfca:	6a03      	ldr	r3, [r0, #32]
 800dfcc:	b90b      	cbnz	r3, 800dfd2 <_fflush_r+0x1a>
 800dfce:	f7fe f94d 	bl	800c26c <__sinit>
 800dfd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d0f3      	beq.n	800dfc2 <_fflush_r+0xa>
 800dfda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dfdc:	07d0      	lsls	r0, r2, #31
 800dfde:	d404      	bmi.n	800dfea <_fflush_r+0x32>
 800dfe0:	0599      	lsls	r1, r3, #22
 800dfe2:	d402      	bmi.n	800dfea <_fflush_r+0x32>
 800dfe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dfe6:	f7fe fb3c 	bl	800c662 <__retarget_lock_acquire_recursive>
 800dfea:	4628      	mov	r0, r5
 800dfec:	4621      	mov	r1, r4
 800dfee:	f7ff ff5f 	bl	800deb0 <__sflush_r>
 800dff2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dff4:	07da      	lsls	r2, r3, #31
 800dff6:	4605      	mov	r5, r0
 800dff8:	d4e4      	bmi.n	800dfc4 <_fflush_r+0xc>
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	059b      	lsls	r3, r3, #22
 800dffe:	d4e1      	bmi.n	800dfc4 <_fflush_r+0xc>
 800e000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e002:	f7fe fb2f 	bl	800c664 <__retarget_lock_release_recursive>
 800e006:	e7dd      	b.n	800dfc4 <_fflush_r+0xc>

0800e008 <__swhatbuf_r>:
 800e008:	b570      	push	{r4, r5, r6, lr}
 800e00a:	460c      	mov	r4, r1
 800e00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e010:	2900      	cmp	r1, #0
 800e012:	b096      	sub	sp, #88	@ 0x58
 800e014:	4615      	mov	r5, r2
 800e016:	461e      	mov	r6, r3
 800e018:	da0d      	bge.n	800e036 <__swhatbuf_r+0x2e>
 800e01a:	89a3      	ldrh	r3, [r4, #12]
 800e01c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e020:	f04f 0100 	mov.w	r1, #0
 800e024:	bf14      	ite	ne
 800e026:	2340      	movne	r3, #64	@ 0x40
 800e028:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e02c:	2000      	movs	r0, #0
 800e02e:	6031      	str	r1, [r6, #0]
 800e030:	602b      	str	r3, [r5, #0]
 800e032:	b016      	add	sp, #88	@ 0x58
 800e034:	bd70      	pop	{r4, r5, r6, pc}
 800e036:	466a      	mov	r2, sp
 800e038:	f000 f848 	bl	800e0cc <_fstat_r>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	dbec      	blt.n	800e01a <__swhatbuf_r+0x12>
 800e040:	9901      	ldr	r1, [sp, #4]
 800e042:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e046:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e04a:	4259      	negs	r1, r3
 800e04c:	4159      	adcs	r1, r3
 800e04e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e052:	e7eb      	b.n	800e02c <__swhatbuf_r+0x24>

0800e054 <__smakebuf_r>:
 800e054:	898b      	ldrh	r3, [r1, #12]
 800e056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e058:	079d      	lsls	r5, r3, #30
 800e05a:	4606      	mov	r6, r0
 800e05c:	460c      	mov	r4, r1
 800e05e:	d507      	bpl.n	800e070 <__smakebuf_r+0x1c>
 800e060:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e064:	6023      	str	r3, [r4, #0]
 800e066:	6123      	str	r3, [r4, #16]
 800e068:	2301      	movs	r3, #1
 800e06a:	6163      	str	r3, [r4, #20]
 800e06c:	b003      	add	sp, #12
 800e06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e070:	ab01      	add	r3, sp, #4
 800e072:	466a      	mov	r2, sp
 800e074:	f7ff ffc8 	bl	800e008 <__swhatbuf_r>
 800e078:	9f00      	ldr	r7, [sp, #0]
 800e07a:	4605      	mov	r5, r0
 800e07c:	4639      	mov	r1, r7
 800e07e:	4630      	mov	r0, r6
 800e080:	f7ff f9ce 	bl	800d420 <_malloc_r>
 800e084:	b948      	cbnz	r0, 800e09a <__smakebuf_r+0x46>
 800e086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e08a:	059a      	lsls	r2, r3, #22
 800e08c:	d4ee      	bmi.n	800e06c <__smakebuf_r+0x18>
 800e08e:	f023 0303 	bic.w	r3, r3, #3
 800e092:	f043 0302 	orr.w	r3, r3, #2
 800e096:	81a3      	strh	r3, [r4, #12]
 800e098:	e7e2      	b.n	800e060 <__smakebuf_r+0xc>
 800e09a:	89a3      	ldrh	r3, [r4, #12]
 800e09c:	6020      	str	r0, [r4, #0]
 800e09e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0a2:	81a3      	strh	r3, [r4, #12]
 800e0a4:	9b01      	ldr	r3, [sp, #4]
 800e0a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e0aa:	b15b      	cbz	r3, 800e0c4 <__smakebuf_r+0x70>
 800e0ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f000 f81d 	bl	800e0f0 <_isatty_r>
 800e0b6:	b128      	cbz	r0, 800e0c4 <__smakebuf_r+0x70>
 800e0b8:	89a3      	ldrh	r3, [r4, #12]
 800e0ba:	f023 0303 	bic.w	r3, r3, #3
 800e0be:	f043 0301 	orr.w	r3, r3, #1
 800e0c2:	81a3      	strh	r3, [r4, #12]
 800e0c4:	89a3      	ldrh	r3, [r4, #12]
 800e0c6:	431d      	orrs	r5, r3
 800e0c8:	81a5      	strh	r5, [r4, #12]
 800e0ca:	e7cf      	b.n	800e06c <__smakebuf_r+0x18>

0800e0cc <_fstat_r>:
 800e0cc:	b538      	push	{r3, r4, r5, lr}
 800e0ce:	4d07      	ldr	r5, [pc, #28]	@ (800e0ec <_fstat_r+0x20>)
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	4608      	mov	r0, r1
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	602b      	str	r3, [r5, #0]
 800e0da:	f7f8 f93b 	bl	8006354 <_fstat>
 800e0de:	1c43      	adds	r3, r0, #1
 800e0e0:	d102      	bne.n	800e0e8 <_fstat_r+0x1c>
 800e0e2:	682b      	ldr	r3, [r5, #0]
 800e0e4:	b103      	cbz	r3, 800e0e8 <_fstat_r+0x1c>
 800e0e6:	6023      	str	r3, [r4, #0]
 800e0e8:	bd38      	pop	{r3, r4, r5, pc}
 800e0ea:	bf00      	nop
 800e0ec:	200006bc 	.word	0x200006bc

0800e0f0 <_isatty_r>:
 800e0f0:	b538      	push	{r3, r4, r5, lr}
 800e0f2:	4d06      	ldr	r5, [pc, #24]	@ (800e10c <_isatty_r+0x1c>)
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	4608      	mov	r0, r1
 800e0fa:	602b      	str	r3, [r5, #0]
 800e0fc:	f7f8 f93a 	bl	8006374 <_isatty>
 800e100:	1c43      	adds	r3, r0, #1
 800e102:	d102      	bne.n	800e10a <_isatty_r+0x1a>
 800e104:	682b      	ldr	r3, [r5, #0]
 800e106:	b103      	cbz	r3, 800e10a <_isatty_r+0x1a>
 800e108:	6023      	str	r3, [r4, #0]
 800e10a:	bd38      	pop	{r3, r4, r5, pc}
 800e10c:	200006bc 	.word	0x200006bc

0800e110 <_sbrk_r>:
 800e110:	b538      	push	{r3, r4, r5, lr}
 800e112:	4d06      	ldr	r5, [pc, #24]	@ (800e12c <_sbrk_r+0x1c>)
 800e114:	2300      	movs	r3, #0
 800e116:	4604      	mov	r4, r0
 800e118:	4608      	mov	r0, r1
 800e11a:	602b      	str	r3, [r5, #0]
 800e11c:	f7f8 f942 	bl	80063a4 <_sbrk>
 800e120:	1c43      	adds	r3, r0, #1
 800e122:	d102      	bne.n	800e12a <_sbrk_r+0x1a>
 800e124:	682b      	ldr	r3, [r5, #0]
 800e126:	b103      	cbz	r3, 800e12a <_sbrk_r+0x1a>
 800e128:	6023      	str	r3, [r4, #0]
 800e12a:	bd38      	pop	{r3, r4, r5, pc}
 800e12c:	200006bc 	.word	0x200006bc

0800e130 <__assert_func>:
 800e130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e132:	4614      	mov	r4, r2
 800e134:	461a      	mov	r2, r3
 800e136:	4b09      	ldr	r3, [pc, #36]	@ (800e15c <__assert_func+0x2c>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4605      	mov	r5, r0
 800e13c:	68d8      	ldr	r0, [r3, #12]
 800e13e:	b14c      	cbz	r4, 800e154 <__assert_func+0x24>
 800e140:	4b07      	ldr	r3, [pc, #28]	@ (800e160 <__assert_func+0x30>)
 800e142:	9100      	str	r1, [sp, #0]
 800e144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e148:	4906      	ldr	r1, [pc, #24]	@ (800e164 <__assert_func+0x34>)
 800e14a:	462b      	mov	r3, r5
 800e14c:	f000 f842 	bl	800e1d4 <fiprintf>
 800e150:	f000 f852 	bl	800e1f8 <abort>
 800e154:	4b04      	ldr	r3, [pc, #16]	@ (800e168 <__assert_func+0x38>)
 800e156:	461c      	mov	r4, r3
 800e158:	e7f3      	b.n	800e142 <__assert_func+0x12>
 800e15a:	bf00      	nop
 800e15c:	2000001c 	.word	0x2000001c
 800e160:	0800f4b5 	.word	0x0800f4b5
 800e164:	0800f4c2 	.word	0x0800f4c2
 800e168:	0800f4f0 	.word	0x0800f4f0

0800e16c <_calloc_r>:
 800e16c:	b570      	push	{r4, r5, r6, lr}
 800e16e:	fba1 5402 	umull	r5, r4, r1, r2
 800e172:	b934      	cbnz	r4, 800e182 <_calloc_r+0x16>
 800e174:	4629      	mov	r1, r5
 800e176:	f7ff f953 	bl	800d420 <_malloc_r>
 800e17a:	4606      	mov	r6, r0
 800e17c:	b928      	cbnz	r0, 800e18a <_calloc_r+0x1e>
 800e17e:	4630      	mov	r0, r6
 800e180:	bd70      	pop	{r4, r5, r6, pc}
 800e182:	220c      	movs	r2, #12
 800e184:	6002      	str	r2, [r0, #0]
 800e186:	2600      	movs	r6, #0
 800e188:	e7f9      	b.n	800e17e <_calloc_r+0x12>
 800e18a:	462a      	mov	r2, r5
 800e18c:	4621      	mov	r1, r4
 800e18e:	f7fe f9eb 	bl	800c568 <memset>
 800e192:	e7f4      	b.n	800e17e <_calloc_r+0x12>

0800e194 <__ascii_mbtowc>:
 800e194:	b082      	sub	sp, #8
 800e196:	b901      	cbnz	r1, 800e19a <__ascii_mbtowc+0x6>
 800e198:	a901      	add	r1, sp, #4
 800e19a:	b142      	cbz	r2, 800e1ae <__ascii_mbtowc+0x1a>
 800e19c:	b14b      	cbz	r3, 800e1b2 <__ascii_mbtowc+0x1e>
 800e19e:	7813      	ldrb	r3, [r2, #0]
 800e1a0:	600b      	str	r3, [r1, #0]
 800e1a2:	7812      	ldrb	r2, [r2, #0]
 800e1a4:	1e10      	subs	r0, r2, #0
 800e1a6:	bf18      	it	ne
 800e1a8:	2001      	movne	r0, #1
 800e1aa:	b002      	add	sp, #8
 800e1ac:	4770      	bx	lr
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	e7fb      	b.n	800e1aa <__ascii_mbtowc+0x16>
 800e1b2:	f06f 0001 	mvn.w	r0, #1
 800e1b6:	e7f8      	b.n	800e1aa <__ascii_mbtowc+0x16>

0800e1b8 <__ascii_wctomb>:
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	4608      	mov	r0, r1
 800e1bc:	b141      	cbz	r1, 800e1d0 <__ascii_wctomb+0x18>
 800e1be:	2aff      	cmp	r2, #255	@ 0xff
 800e1c0:	d904      	bls.n	800e1cc <__ascii_wctomb+0x14>
 800e1c2:	228a      	movs	r2, #138	@ 0x8a
 800e1c4:	601a      	str	r2, [r3, #0]
 800e1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ca:	4770      	bx	lr
 800e1cc:	700a      	strb	r2, [r1, #0]
 800e1ce:	2001      	movs	r0, #1
 800e1d0:	4770      	bx	lr
	...

0800e1d4 <fiprintf>:
 800e1d4:	b40e      	push	{r1, r2, r3}
 800e1d6:	b503      	push	{r0, r1, lr}
 800e1d8:	4601      	mov	r1, r0
 800e1da:	ab03      	add	r3, sp, #12
 800e1dc:	4805      	ldr	r0, [pc, #20]	@ (800e1f4 <fiprintf+0x20>)
 800e1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1e2:	6800      	ldr	r0, [r0, #0]
 800e1e4:	9301      	str	r3, [sp, #4]
 800e1e6:	f7ff fd4b 	bl	800dc80 <_vfiprintf_r>
 800e1ea:	b002      	add	sp, #8
 800e1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1f0:	b003      	add	sp, #12
 800e1f2:	4770      	bx	lr
 800e1f4:	2000001c 	.word	0x2000001c

0800e1f8 <abort>:
 800e1f8:	b508      	push	{r3, lr}
 800e1fa:	2006      	movs	r0, #6
 800e1fc:	f000 f82c 	bl	800e258 <raise>
 800e200:	2001      	movs	r0, #1
 800e202:	f7f8 f873 	bl	80062ec <_exit>

0800e206 <_raise_r>:
 800e206:	291f      	cmp	r1, #31
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4605      	mov	r5, r0
 800e20c:	460c      	mov	r4, r1
 800e20e:	d904      	bls.n	800e21a <_raise_r+0x14>
 800e210:	2316      	movs	r3, #22
 800e212:	6003      	str	r3, [r0, #0]
 800e214:	f04f 30ff 	mov.w	r0, #4294967295
 800e218:	bd38      	pop	{r3, r4, r5, pc}
 800e21a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e21c:	b112      	cbz	r2, 800e224 <_raise_r+0x1e>
 800e21e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e222:	b94b      	cbnz	r3, 800e238 <_raise_r+0x32>
 800e224:	4628      	mov	r0, r5
 800e226:	f000 f831 	bl	800e28c <_getpid_r>
 800e22a:	4622      	mov	r2, r4
 800e22c:	4601      	mov	r1, r0
 800e22e:	4628      	mov	r0, r5
 800e230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e234:	f000 b818 	b.w	800e268 <_kill_r>
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d00a      	beq.n	800e252 <_raise_r+0x4c>
 800e23c:	1c59      	adds	r1, r3, #1
 800e23e:	d103      	bne.n	800e248 <_raise_r+0x42>
 800e240:	2316      	movs	r3, #22
 800e242:	6003      	str	r3, [r0, #0]
 800e244:	2001      	movs	r0, #1
 800e246:	e7e7      	b.n	800e218 <_raise_r+0x12>
 800e248:	2100      	movs	r1, #0
 800e24a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e24e:	4620      	mov	r0, r4
 800e250:	4798      	blx	r3
 800e252:	2000      	movs	r0, #0
 800e254:	e7e0      	b.n	800e218 <_raise_r+0x12>
	...

0800e258 <raise>:
 800e258:	4b02      	ldr	r3, [pc, #8]	@ (800e264 <raise+0xc>)
 800e25a:	4601      	mov	r1, r0
 800e25c:	6818      	ldr	r0, [r3, #0]
 800e25e:	f7ff bfd2 	b.w	800e206 <_raise_r>
 800e262:	bf00      	nop
 800e264:	2000001c 	.word	0x2000001c

0800e268 <_kill_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	4d07      	ldr	r5, [pc, #28]	@ (800e288 <_kill_r+0x20>)
 800e26c:	2300      	movs	r3, #0
 800e26e:	4604      	mov	r4, r0
 800e270:	4608      	mov	r0, r1
 800e272:	4611      	mov	r1, r2
 800e274:	602b      	str	r3, [r5, #0]
 800e276:	f7f8 f829 	bl	80062cc <_kill>
 800e27a:	1c43      	adds	r3, r0, #1
 800e27c:	d102      	bne.n	800e284 <_kill_r+0x1c>
 800e27e:	682b      	ldr	r3, [r5, #0]
 800e280:	b103      	cbz	r3, 800e284 <_kill_r+0x1c>
 800e282:	6023      	str	r3, [r4, #0]
 800e284:	bd38      	pop	{r3, r4, r5, pc}
 800e286:	bf00      	nop
 800e288:	200006bc 	.word	0x200006bc

0800e28c <_getpid_r>:
 800e28c:	f7f8 b816 	b.w	80062bc <_getpid>

0800e290 <asinf>:
 800e290:	b508      	push	{r3, lr}
 800e292:	ed2d 8b02 	vpush	{d8}
 800e296:	eeb0 8a40 	vmov.f32	s16, s0
 800e29a:	f000 f895 	bl	800e3c8 <__ieee754_asinf>
 800e29e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a6:	eef0 8a40 	vmov.f32	s17, s0
 800e2aa:	d615      	bvs.n	800e2d8 <asinf+0x48>
 800e2ac:	eeb0 0a48 	vmov.f32	s0, s16
 800e2b0:	f000 f873 	bl	800e39a <fabsf>
 800e2b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e2b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c0:	dd0a      	ble.n	800e2d8 <asinf+0x48>
 800e2c2:	f7fe f9a3 	bl	800c60c <__errno>
 800e2c6:	ecbd 8b02 	vpop	{d8}
 800e2ca:	2321      	movs	r3, #33	@ 0x21
 800e2cc:	6003      	str	r3, [r0, #0]
 800e2ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e2d2:	4804      	ldr	r0, [pc, #16]	@ (800e2e4 <asinf+0x54>)
 800e2d4:	f000 b872 	b.w	800e3bc <nanf>
 800e2d8:	eeb0 0a68 	vmov.f32	s0, s17
 800e2dc:	ecbd 8b02 	vpop	{d8}
 800e2e0:	bd08      	pop	{r3, pc}
 800e2e2:	bf00      	nop
 800e2e4:	0800f4f0 	.word	0x0800f4f0

0800e2e8 <atan2f>:
 800e2e8:	f000 b952 	b.w	800e590 <__ieee754_atan2f>

0800e2ec <powf>:
 800e2ec:	b508      	push	{r3, lr}
 800e2ee:	ed2d 8b04 	vpush	{d8-d9}
 800e2f2:	eeb0 8a60 	vmov.f32	s16, s1
 800e2f6:	eeb0 9a40 	vmov.f32	s18, s0
 800e2fa:	f000 f9e9 	bl	800e6d0 <__ieee754_powf>
 800e2fe:	eeb4 8a48 	vcmp.f32	s16, s16
 800e302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e306:	eef0 8a40 	vmov.f32	s17, s0
 800e30a:	d63e      	bvs.n	800e38a <powf+0x9e>
 800e30c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e314:	d112      	bne.n	800e33c <powf+0x50>
 800e316:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31e:	d039      	beq.n	800e394 <powf+0xa8>
 800e320:	eeb0 0a48 	vmov.f32	s0, s16
 800e324:	f000 f840 	bl	800e3a8 <finitef>
 800e328:	b378      	cbz	r0, 800e38a <powf+0x9e>
 800e32a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e332:	d52a      	bpl.n	800e38a <powf+0x9e>
 800e334:	f7fe f96a 	bl	800c60c <__errno>
 800e338:	2322      	movs	r3, #34	@ 0x22
 800e33a:	e014      	b.n	800e366 <powf+0x7a>
 800e33c:	f000 f834 	bl	800e3a8 <finitef>
 800e340:	b998      	cbnz	r0, 800e36a <powf+0x7e>
 800e342:	eeb0 0a49 	vmov.f32	s0, s18
 800e346:	f000 f82f 	bl	800e3a8 <finitef>
 800e34a:	b170      	cbz	r0, 800e36a <powf+0x7e>
 800e34c:	eeb0 0a48 	vmov.f32	s0, s16
 800e350:	f000 f82a 	bl	800e3a8 <finitef>
 800e354:	b148      	cbz	r0, 800e36a <powf+0x7e>
 800e356:	eef4 8a68 	vcmp.f32	s17, s17
 800e35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e35e:	d7e9      	bvc.n	800e334 <powf+0x48>
 800e360:	f7fe f954 	bl	800c60c <__errno>
 800e364:	2321      	movs	r3, #33	@ 0x21
 800e366:	6003      	str	r3, [r0, #0]
 800e368:	e00f      	b.n	800e38a <powf+0x9e>
 800e36a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e372:	d10a      	bne.n	800e38a <powf+0x9e>
 800e374:	eeb0 0a49 	vmov.f32	s0, s18
 800e378:	f000 f816 	bl	800e3a8 <finitef>
 800e37c:	b128      	cbz	r0, 800e38a <powf+0x9e>
 800e37e:	eeb0 0a48 	vmov.f32	s0, s16
 800e382:	f000 f811 	bl	800e3a8 <finitef>
 800e386:	2800      	cmp	r0, #0
 800e388:	d1d4      	bne.n	800e334 <powf+0x48>
 800e38a:	eeb0 0a68 	vmov.f32	s0, s17
 800e38e:	ecbd 8b04 	vpop	{d8-d9}
 800e392:	bd08      	pop	{r3, pc}
 800e394:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e398:	e7f7      	b.n	800e38a <powf+0x9e>

0800e39a <fabsf>:
 800e39a:	ee10 3a10 	vmov	r3, s0
 800e39e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e3a2:	ee00 3a10 	vmov	s0, r3
 800e3a6:	4770      	bx	lr

0800e3a8 <finitef>:
 800e3a8:	ee10 3a10 	vmov	r3, s0
 800e3ac:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e3b0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e3b4:	bfac      	ite	ge
 800e3b6:	2000      	movge	r0, #0
 800e3b8:	2001      	movlt	r0, #1
 800e3ba:	4770      	bx	lr

0800e3bc <nanf>:
 800e3bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e3c4 <nanf+0x8>
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	7fc00000 	.word	0x7fc00000

0800e3c8 <__ieee754_asinf>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	ee10 5a10 	vmov	r5, s0
 800e3ce:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e3d2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800e3d6:	ed2d 8b04 	vpush	{d8-d9}
 800e3da:	d10c      	bne.n	800e3f6 <__ieee754_asinf+0x2e>
 800e3dc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e550 <__ieee754_asinf+0x188>
 800e3e0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800e554 <__ieee754_asinf+0x18c>
 800e3e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e3e8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e3ec:	eeb0 0a67 	vmov.f32	s0, s15
 800e3f0:	ecbd 8b04 	vpop	{d8-d9}
 800e3f4:	bd38      	pop	{r3, r4, r5, pc}
 800e3f6:	d904      	bls.n	800e402 <__ieee754_asinf+0x3a>
 800e3f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e3fc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e400:	e7f6      	b.n	800e3f0 <__ieee754_asinf+0x28>
 800e402:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e406:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e40a:	d20b      	bcs.n	800e424 <__ieee754_asinf+0x5c>
 800e40c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800e410:	d252      	bcs.n	800e4b8 <__ieee754_asinf+0xf0>
 800e412:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800e558 <__ieee754_asinf+0x190>
 800e416:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e41a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e422:	dce5      	bgt.n	800e3f0 <__ieee754_asinf+0x28>
 800e424:	f7ff ffb9 	bl	800e39a <fabsf>
 800e428:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800e42c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e430:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e434:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e55c <__ieee754_asinf+0x194>
 800e438:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800e560 <__ieee754_asinf+0x198>
 800e43c:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 800e564 <__ieee754_asinf+0x19c>
 800e440:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e444:	eddf 7a48 	vldr	s15, [pc, #288]	@ 800e568 <__ieee754_asinf+0x1a0>
 800e448:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e44c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800e56c <__ieee754_asinf+0x1a4>
 800e450:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e454:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800e570 <__ieee754_asinf+0x1a8>
 800e458:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e45c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800e574 <__ieee754_asinf+0x1ac>
 800e460:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e464:	eddf 7a44 	vldr	s15, [pc, #272]	@ 800e578 <__ieee754_asinf+0x1b0>
 800e468:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e46c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800e57c <__ieee754_asinf+0x1b4>
 800e470:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e474:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800e580 <__ieee754_asinf+0x1b8>
 800e478:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e47c:	eeb0 0a48 	vmov.f32	s0, s16
 800e480:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e484:	f000 fd52 	bl	800ef2c <__ieee754_sqrtf>
 800e488:	4b3e      	ldr	r3, [pc, #248]	@ (800e584 <__ieee754_asinf+0x1bc>)
 800e48a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e48e:	429c      	cmp	r4, r3
 800e490:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e494:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e498:	d93d      	bls.n	800e516 <__ieee754_asinf+0x14e>
 800e49a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e49e:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 800e588 <__ieee754_asinf+0x1c0>
 800e4a2:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e4a6:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800e554 <__ieee754_asinf+0x18c>
 800e4aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e4ae:	2d00      	cmp	r5, #0
 800e4b0:	bfd8      	it	le
 800e4b2:	eeb1 0a40 	vnegle.f32	s0, s0
 800e4b6:	e79b      	b.n	800e3f0 <__ieee754_asinf+0x28>
 800e4b8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e4bc:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800e560 <__ieee754_asinf+0x198>
 800e4c0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800e55c <__ieee754_asinf+0x194>
 800e4c4:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 800e574 <__ieee754_asinf+0x1ac>
 800e4c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e4cc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e568 <__ieee754_asinf+0x1a0>
 800e4d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e4d4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800e56c <__ieee754_asinf+0x1a4>
 800e4d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e4dc:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800e570 <__ieee754_asinf+0x1a8>
 800e4e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e4e4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800e564 <__ieee754_asinf+0x19c>
 800e4e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e4ec:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800e578 <__ieee754_asinf+0x1b0>
 800e4f0:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e4f4:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800e57c <__ieee754_asinf+0x1b4>
 800e4f8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e4fc:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800e580 <__ieee754_asinf+0x1b8>
 800e500:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e504:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e508:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e50c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e510:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e514:	e76c      	b.n	800e3f0 <__ieee754_asinf+0x28>
 800e516:	ee10 3a10 	vmov	r3, s0
 800e51a:	f36f 030b 	bfc	r3, #0, #12
 800e51e:	ee07 3a10 	vmov	s14, r3
 800e522:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e526:	ee70 5a00 	vadd.f32	s11, s0, s0
 800e52a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e52e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e550 <__ieee754_asinf+0x188>
 800e532:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800e536:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800e58c <__ieee754_asinf+0x1c4>
 800e53a:	eee5 7a66 	vfms.f32	s15, s10, s13
 800e53e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800e542:	eeb0 6a40 	vmov.f32	s12, s0
 800e546:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e54a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e54e:	e7ac      	b.n	800e4aa <__ieee754_asinf+0xe2>
 800e550:	b33bbd2e 	.word	0xb33bbd2e
 800e554:	3fc90fdb 	.word	0x3fc90fdb
 800e558:	7149f2ca 	.word	0x7149f2ca
 800e55c:	3a4f7f04 	.word	0x3a4f7f04
 800e560:	3811ef08 	.word	0x3811ef08
 800e564:	3e2aaaab 	.word	0x3e2aaaab
 800e568:	bd241146 	.word	0xbd241146
 800e56c:	3e4e0aa8 	.word	0x3e4e0aa8
 800e570:	bea6b090 	.word	0xbea6b090
 800e574:	3d9dc62e 	.word	0x3d9dc62e
 800e578:	bf303361 	.word	0xbf303361
 800e57c:	4001572d 	.word	0x4001572d
 800e580:	c019d139 	.word	0xc019d139
 800e584:	3f799999 	.word	0x3f799999
 800e588:	333bbd2e 	.word	0x333bbd2e
 800e58c:	3f490fdb 	.word	0x3f490fdb

0800e590 <__ieee754_atan2f>:
 800e590:	ee10 2a90 	vmov	r2, s1
 800e594:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e598:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e59c:	b510      	push	{r4, lr}
 800e59e:	eef0 7a40 	vmov.f32	s15, s0
 800e5a2:	d806      	bhi.n	800e5b2 <__ieee754_atan2f+0x22>
 800e5a4:	ee10 0a10 	vmov	r0, s0
 800e5a8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e5ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e5b0:	d904      	bls.n	800e5bc <__ieee754_atan2f+0x2c>
 800e5b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e5b6:	eeb0 0a67 	vmov.f32	s0, s15
 800e5ba:	bd10      	pop	{r4, pc}
 800e5bc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e5c0:	d103      	bne.n	800e5ca <__ieee754_atan2f+0x3a>
 800e5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5c6:	f000 bb51 	b.w	800ec6c <atanf>
 800e5ca:	1794      	asrs	r4, r2, #30
 800e5cc:	f004 0402 	and.w	r4, r4, #2
 800e5d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e5d4:	b943      	cbnz	r3, 800e5e8 <__ieee754_atan2f+0x58>
 800e5d6:	2c02      	cmp	r4, #2
 800e5d8:	d05e      	beq.n	800e698 <__ieee754_atan2f+0x108>
 800e5da:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e6ac <__ieee754_atan2f+0x11c>
 800e5de:	2c03      	cmp	r4, #3
 800e5e0:	bf08      	it	eq
 800e5e2:	eef0 7a47 	vmoveq.f32	s15, s14
 800e5e6:	e7e6      	b.n	800e5b6 <__ieee754_atan2f+0x26>
 800e5e8:	b941      	cbnz	r1, 800e5fc <__ieee754_atan2f+0x6c>
 800e5ea:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800e6b0 <__ieee754_atan2f+0x120>
 800e5ee:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e6b4 <__ieee754_atan2f+0x124>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	bfa8      	it	ge
 800e5f6:	eef0 7a47 	vmovge.f32	s15, s14
 800e5fa:	e7dc      	b.n	800e5b6 <__ieee754_atan2f+0x26>
 800e5fc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e600:	d110      	bne.n	800e624 <__ieee754_atan2f+0x94>
 800e602:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e606:	f104 34ff 	add.w	r4, r4, #4294967295
 800e60a:	d107      	bne.n	800e61c <__ieee754_atan2f+0x8c>
 800e60c:	2c02      	cmp	r4, #2
 800e60e:	d846      	bhi.n	800e69e <__ieee754_atan2f+0x10e>
 800e610:	4b29      	ldr	r3, [pc, #164]	@ (800e6b8 <__ieee754_atan2f+0x128>)
 800e612:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e616:	edd3 7a00 	vldr	s15, [r3]
 800e61a:	e7cc      	b.n	800e5b6 <__ieee754_atan2f+0x26>
 800e61c:	2c02      	cmp	r4, #2
 800e61e:	d841      	bhi.n	800e6a4 <__ieee754_atan2f+0x114>
 800e620:	4b26      	ldr	r3, [pc, #152]	@ (800e6bc <__ieee754_atan2f+0x12c>)
 800e622:	e7f6      	b.n	800e612 <__ieee754_atan2f+0x82>
 800e624:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e628:	d0df      	beq.n	800e5ea <__ieee754_atan2f+0x5a>
 800e62a:	1a5b      	subs	r3, r3, r1
 800e62c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e630:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e634:	da1a      	bge.n	800e66c <__ieee754_atan2f+0xdc>
 800e636:	2a00      	cmp	r2, #0
 800e638:	da01      	bge.n	800e63e <__ieee754_atan2f+0xae>
 800e63a:	313c      	adds	r1, #60	@ 0x3c
 800e63c:	db19      	blt.n	800e672 <__ieee754_atan2f+0xe2>
 800e63e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e642:	f7ff feaa 	bl	800e39a <fabsf>
 800e646:	f000 fb11 	bl	800ec6c <atanf>
 800e64a:	eef0 7a40 	vmov.f32	s15, s0
 800e64e:	2c01      	cmp	r4, #1
 800e650:	d012      	beq.n	800e678 <__ieee754_atan2f+0xe8>
 800e652:	2c02      	cmp	r4, #2
 800e654:	d017      	beq.n	800e686 <__ieee754_atan2f+0xf6>
 800e656:	2c00      	cmp	r4, #0
 800e658:	d0ad      	beq.n	800e5b6 <__ieee754_atan2f+0x26>
 800e65a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e6c0 <__ieee754_atan2f+0x130>
 800e65e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e662:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e6c4 <__ieee754_atan2f+0x134>
 800e666:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e66a:	e7a4      	b.n	800e5b6 <__ieee754_atan2f+0x26>
 800e66c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800e6b4 <__ieee754_atan2f+0x124>
 800e670:	e7ed      	b.n	800e64e <__ieee754_atan2f+0xbe>
 800e672:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e6c8 <__ieee754_atan2f+0x138>
 800e676:	e7ea      	b.n	800e64e <__ieee754_atan2f+0xbe>
 800e678:	ee17 3a90 	vmov	r3, s15
 800e67c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e680:	ee07 3a90 	vmov	s15, r3
 800e684:	e797      	b.n	800e5b6 <__ieee754_atan2f+0x26>
 800e686:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e6c0 <__ieee754_atan2f+0x130>
 800e68a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e68e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e6c4 <__ieee754_atan2f+0x134>
 800e692:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e696:	e78e      	b.n	800e5b6 <__ieee754_atan2f+0x26>
 800e698:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e6c4 <__ieee754_atan2f+0x134>
 800e69c:	e78b      	b.n	800e5b6 <__ieee754_atan2f+0x26>
 800e69e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e6cc <__ieee754_atan2f+0x13c>
 800e6a2:	e788      	b.n	800e5b6 <__ieee754_atan2f+0x26>
 800e6a4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e6c8 <__ieee754_atan2f+0x138>
 800e6a8:	e785      	b.n	800e5b6 <__ieee754_atan2f+0x26>
 800e6aa:	bf00      	nop
 800e6ac:	c0490fdb 	.word	0xc0490fdb
 800e6b0:	bfc90fdb 	.word	0xbfc90fdb
 800e6b4:	3fc90fdb 	.word	0x3fc90fdb
 800e6b8:	0800f700 	.word	0x0800f700
 800e6bc:	0800f6f4 	.word	0x0800f6f4
 800e6c0:	33bbbd2e 	.word	0x33bbbd2e
 800e6c4:	40490fdb 	.word	0x40490fdb
 800e6c8:	00000000 	.word	0x00000000
 800e6cc:	3f490fdb 	.word	0x3f490fdb

0800e6d0 <__ieee754_powf>:
 800e6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6d4:	ee10 4a90 	vmov	r4, s1
 800e6d8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800e6dc:	ed2d 8b02 	vpush	{d8}
 800e6e0:	ee10 6a10 	vmov	r6, s0
 800e6e4:	eeb0 8a40 	vmov.f32	s16, s0
 800e6e8:	eef0 8a60 	vmov.f32	s17, s1
 800e6ec:	d10c      	bne.n	800e708 <__ieee754_powf+0x38>
 800e6ee:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800e6f2:	0076      	lsls	r6, r6, #1
 800e6f4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800e6f8:	f240 8274 	bls.w	800ebe4 <__ieee754_powf+0x514>
 800e6fc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800e700:	ecbd 8b02 	vpop	{d8}
 800e704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e708:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800e70c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800e710:	d802      	bhi.n	800e718 <__ieee754_powf+0x48>
 800e712:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e716:	d908      	bls.n	800e72a <__ieee754_powf+0x5a>
 800e718:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800e71c:	d1ee      	bne.n	800e6fc <__ieee754_powf+0x2c>
 800e71e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800e722:	0064      	lsls	r4, r4, #1
 800e724:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800e728:	e7e6      	b.n	800e6f8 <__ieee754_powf+0x28>
 800e72a:	2e00      	cmp	r6, #0
 800e72c:	da1f      	bge.n	800e76e <__ieee754_powf+0x9e>
 800e72e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800e732:	f080 8260 	bcs.w	800ebf6 <__ieee754_powf+0x526>
 800e736:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e73a:	d32f      	bcc.n	800e79c <__ieee754_powf+0xcc>
 800e73c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800e740:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800e744:	fa49 f503 	asr.w	r5, r9, r3
 800e748:	fa05 f303 	lsl.w	r3, r5, r3
 800e74c:	454b      	cmp	r3, r9
 800e74e:	d123      	bne.n	800e798 <__ieee754_powf+0xc8>
 800e750:	f005 0501 	and.w	r5, r5, #1
 800e754:	f1c5 0502 	rsb	r5, r5, #2
 800e758:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800e75c:	d11f      	bne.n	800e79e <__ieee754_powf+0xce>
 800e75e:	2c00      	cmp	r4, #0
 800e760:	f280 8246 	bge.w	800ebf0 <__ieee754_powf+0x520>
 800e764:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e768:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e76c:	e7c8      	b.n	800e700 <__ieee754_powf+0x30>
 800e76e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800e772:	d111      	bne.n	800e798 <__ieee754_powf+0xc8>
 800e774:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800e778:	f000 8234 	beq.w	800ebe4 <__ieee754_powf+0x514>
 800e77c:	d906      	bls.n	800e78c <__ieee754_powf+0xbc>
 800e77e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800ea94 <__ieee754_powf+0x3c4>
 800e782:	2c00      	cmp	r4, #0
 800e784:	bfa8      	it	ge
 800e786:	eeb0 0a68 	vmovge.f32	s0, s17
 800e78a:	e7b9      	b.n	800e700 <__ieee754_powf+0x30>
 800e78c:	2c00      	cmp	r4, #0
 800e78e:	f280 822c 	bge.w	800ebea <__ieee754_powf+0x51a>
 800e792:	eeb1 0a68 	vneg.f32	s0, s17
 800e796:	e7b3      	b.n	800e700 <__ieee754_powf+0x30>
 800e798:	2500      	movs	r5, #0
 800e79a:	e7dd      	b.n	800e758 <__ieee754_powf+0x88>
 800e79c:	2500      	movs	r5, #0
 800e79e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800e7a2:	d102      	bne.n	800e7aa <__ieee754_powf+0xda>
 800e7a4:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e7a8:	e7aa      	b.n	800e700 <__ieee754_powf+0x30>
 800e7aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800e7ae:	f040 8227 	bne.w	800ec00 <__ieee754_powf+0x530>
 800e7b2:	2e00      	cmp	r6, #0
 800e7b4:	f2c0 8224 	blt.w	800ec00 <__ieee754_powf+0x530>
 800e7b8:	eeb0 0a48 	vmov.f32	s0, s16
 800e7bc:	ecbd 8b02 	vpop	{d8}
 800e7c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7c4:	f000 bbb2 	b.w	800ef2c <__ieee754_sqrtf>
 800e7c8:	2d01      	cmp	r5, #1
 800e7ca:	d199      	bne.n	800e700 <__ieee754_powf+0x30>
 800e7cc:	eeb1 0a40 	vneg.f32	s0, s0
 800e7d0:	e796      	b.n	800e700 <__ieee754_powf+0x30>
 800e7d2:	0ff0      	lsrs	r0, r6, #31
 800e7d4:	3801      	subs	r0, #1
 800e7d6:	ea55 0300 	orrs.w	r3, r5, r0
 800e7da:	d104      	bne.n	800e7e6 <__ieee754_powf+0x116>
 800e7dc:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e7e0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e7e4:	e78c      	b.n	800e700 <__ieee754_powf+0x30>
 800e7e6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800e7ea:	d96d      	bls.n	800e8c8 <__ieee754_powf+0x1f8>
 800e7ec:	4baa      	ldr	r3, [pc, #680]	@ (800ea98 <__ieee754_powf+0x3c8>)
 800e7ee:	4598      	cmp	r8, r3
 800e7f0:	d808      	bhi.n	800e804 <__ieee754_powf+0x134>
 800e7f2:	2c00      	cmp	r4, #0
 800e7f4:	da0b      	bge.n	800e80e <__ieee754_powf+0x13e>
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	ecbd 8b02 	vpop	{d8}
 800e7fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e800:	f000 bb8e 	b.w	800ef20 <__math_oflowf>
 800e804:	4ba5      	ldr	r3, [pc, #660]	@ (800ea9c <__ieee754_powf+0x3cc>)
 800e806:	4598      	cmp	r8, r3
 800e808:	d908      	bls.n	800e81c <__ieee754_powf+0x14c>
 800e80a:	2c00      	cmp	r4, #0
 800e80c:	dcf3      	bgt.n	800e7f6 <__ieee754_powf+0x126>
 800e80e:	2000      	movs	r0, #0
 800e810:	ecbd 8b02 	vpop	{d8}
 800e814:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e818:	f000 bb7c 	b.w	800ef14 <__math_uflowf>
 800e81c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e820:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e824:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800eaa0 <__ieee754_powf+0x3d0>
 800e828:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800e82c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e830:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e834:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e838:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e83c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800eaa4 <__ieee754_powf+0x3d4>
 800e840:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e844:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800eaa8 <__ieee754_powf+0x3d8>
 800e848:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800e84c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800eaac <__ieee754_powf+0x3dc>
 800e850:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e854:	eeb0 7a67 	vmov.f32	s14, s15
 800e858:	eea0 7a26 	vfma.f32	s14, s0, s13
 800e85c:	ee17 3a10 	vmov	r3, s14
 800e860:	f36f 030b 	bfc	r3, #0, #12
 800e864:	ee07 3a10 	vmov	s14, r3
 800e868:	eeb0 6a47 	vmov.f32	s12, s14
 800e86c:	eea0 6a66 	vfms.f32	s12, s0, s13
 800e870:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e874:	3d01      	subs	r5, #1
 800e876:	4305      	orrs	r5, r0
 800e878:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e87c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800e880:	f36f 040b 	bfc	r4, #0, #12
 800e884:	bf18      	it	ne
 800e886:	eeb0 8a66 	vmovne.f32	s16, s13
 800e88a:	ee06 4a90 	vmov	s13, r4
 800e88e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e892:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800e896:	ee67 7a26 	vmul.f32	s15, s14, s13
 800e89a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800e89e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e8a2:	ee17 1a10 	vmov	r1, s14
 800e8a6:	2900      	cmp	r1, #0
 800e8a8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e8ac:	f340 80dd 	ble.w	800ea6a <__ieee754_powf+0x39a>
 800e8b0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800e8b4:	f240 80ca 	bls.w	800ea4c <__ieee754_powf+0x37c>
 800e8b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c0:	bf4c      	ite	mi
 800e8c2:	2001      	movmi	r0, #1
 800e8c4:	2000      	movpl	r0, #0
 800e8c6:	e797      	b.n	800e7f8 <__ieee754_powf+0x128>
 800e8c8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800e8cc:	bf01      	itttt	eq
 800e8ce:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800eab0 <__ieee754_powf+0x3e0>
 800e8d2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e8d6:	f06f 0317 	mvneq.w	r3, #23
 800e8da:	ee17 7a90 	vmoveq	r7, s15
 800e8de:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800e8e2:	bf18      	it	ne
 800e8e4:	2300      	movne	r3, #0
 800e8e6:	3a7f      	subs	r2, #127	@ 0x7f
 800e8e8:	441a      	add	r2, r3
 800e8ea:	4b72      	ldr	r3, [pc, #456]	@ (800eab4 <__ieee754_powf+0x3e4>)
 800e8ec:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800e8f0:	429f      	cmp	r7, r3
 800e8f2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800e8f6:	dd06      	ble.n	800e906 <__ieee754_powf+0x236>
 800e8f8:	4b6f      	ldr	r3, [pc, #444]	@ (800eab8 <__ieee754_powf+0x3e8>)
 800e8fa:	429f      	cmp	r7, r3
 800e8fc:	f340 80a4 	ble.w	800ea48 <__ieee754_powf+0x378>
 800e900:	3201      	adds	r2, #1
 800e902:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800e906:	2600      	movs	r6, #0
 800e908:	4b6c      	ldr	r3, [pc, #432]	@ (800eabc <__ieee754_powf+0x3ec>)
 800e90a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800e90e:	ee07 1a10 	vmov	s14, r1
 800e912:	edd3 5a00 	vldr	s11, [r3]
 800e916:	4b6a      	ldr	r3, [pc, #424]	@ (800eac0 <__ieee754_powf+0x3f0>)
 800e918:	ee75 7a87 	vadd.f32	s15, s11, s14
 800e91c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e920:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800e924:	1049      	asrs	r1, r1, #1
 800e926:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800e92a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800e92e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800e932:	ee37 6a65 	vsub.f32	s12, s14, s11
 800e936:	ee07 1a90 	vmov	s15, r1
 800e93a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800e93e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800e942:	ee15 7a10 	vmov	r7, s10
 800e946:	401f      	ands	r7, r3
 800e948:	ee06 7a90 	vmov	s13, r7
 800e94c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800e950:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e954:	ee65 7a05 	vmul.f32	s15, s10, s10
 800e958:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e95c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800eac4 <__ieee754_powf+0x3f4>
 800e960:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800eac8 <__ieee754_powf+0x3f8>
 800e964:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e968:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800eacc <__ieee754_powf+0x3fc>
 800e96c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e970:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800eaa0 <__ieee754_powf+0x3d0>
 800e974:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e978:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ead0 <__ieee754_powf+0x400>
 800e97c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e980:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800ead4 <__ieee754_powf+0x404>
 800e984:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e988:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e98c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800e990:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800e994:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e998:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800e99c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800e9a0:	eef0 5a67 	vmov.f32	s11, s15
 800e9a4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800e9a8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e9ac:	ee15 1a90 	vmov	r1, s11
 800e9b0:	4019      	ands	r1, r3
 800e9b2:	ee05 1a90 	vmov	s11, r1
 800e9b6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e9ba:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800e9be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9c2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e9c6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e9ca:	eeb0 6a67 	vmov.f32	s12, s15
 800e9ce:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800e9d2:	ee16 1a10 	vmov	r1, s12
 800e9d6:	4019      	ands	r1, r3
 800e9d8:	ee06 1a10 	vmov	s12, r1
 800e9dc:	eeb0 7a46 	vmov.f32	s14, s12
 800e9e0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800e9e4:	493c      	ldr	r1, [pc, #240]	@ (800ead8 <__ieee754_powf+0x408>)
 800e9e6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800e9ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9ee:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800eadc <__ieee754_powf+0x40c>
 800e9f2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800eae0 <__ieee754_powf+0x410>
 800e9f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9fa:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800eae4 <__ieee754_powf+0x414>
 800e9fe:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ea02:	ed91 7a00 	vldr	s14, [r1]
 800ea06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea0a:	ee07 2a10 	vmov	s14, r2
 800ea0e:	4a36      	ldr	r2, [pc, #216]	@ (800eae8 <__ieee754_powf+0x418>)
 800ea10:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800ea14:	eeb0 7a67 	vmov.f32	s14, s15
 800ea18:	eea6 7a25 	vfma.f32	s14, s12, s11
 800ea1c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800ea20:	ed92 5a00 	vldr	s10, [r2]
 800ea24:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ea28:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ea2c:	ee17 2a10 	vmov	r2, s14
 800ea30:	401a      	ands	r2, r3
 800ea32:	ee07 2a10 	vmov	s14, r2
 800ea36:	ee77 6a66 	vsub.f32	s13, s14, s13
 800ea3a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800ea3e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800ea42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ea46:	e715      	b.n	800e874 <__ieee754_powf+0x1a4>
 800ea48:	2601      	movs	r6, #1
 800ea4a:	e75d      	b.n	800e908 <__ieee754_powf+0x238>
 800ea4c:	d152      	bne.n	800eaf4 <__ieee754_powf+0x424>
 800ea4e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800eaec <__ieee754_powf+0x41c>
 800ea52:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea56:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ea5a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ea5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea62:	f73f af29 	bgt.w	800e8b8 <__ieee754_powf+0x1e8>
 800ea66:	2386      	movs	r3, #134	@ 0x86
 800ea68:	e048      	b.n	800eafc <__ieee754_powf+0x42c>
 800ea6a:	4a21      	ldr	r2, [pc, #132]	@ (800eaf0 <__ieee754_powf+0x420>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d907      	bls.n	800ea80 <__ieee754_powf+0x3b0>
 800ea70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ea74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea78:	bf4c      	ite	mi
 800ea7a:	2001      	movmi	r0, #1
 800ea7c:	2000      	movpl	r0, #0
 800ea7e:	e6c7      	b.n	800e810 <__ieee754_powf+0x140>
 800ea80:	d138      	bne.n	800eaf4 <__ieee754_powf+0x424>
 800ea82:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea86:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ea8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea8e:	dbea      	blt.n	800ea66 <__ieee754_powf+0x396>
 800ea90:	e7ee      	b.n	800ea70 <__ieee754_powf+0x3a0>
 800ea92:	bf00      	nop
 800ea94:	00000000 	.word	0x00000000
 800ea98:	3f7ffff3 	.word	0x3f7ffff3
 800ea9c:	3f800007 	.word	0x3f800007
 800eaa0:	3eaaaaab 	.word	0x3eaaaaab
 800eaa4:	3fb8aa00 	.word	0x3fb8aa00
 800eaa8:	3fb8aa3b 	.word	0x3fb8aa3b
 800eaac:	36eca570 	.word	0x36eca570
 800eab0:	4b800000 	.word	0x4b800000
 800eab4:	001cc471 	.word	0x001cc471
 800eab8:	005db3d6 	.word	0x005db3d6
 800eabc:	0800f71c 	.word	0x0800f71c
 800eac0:	fffff000 	.word	0xfffff000
 800eac4:	3e6c3255 	.word	0x3e6c3255
 800eac8:	3e53f142 	.word	0x3e53f142
 800eacc:	3e8ba305 	.word	0x3e8ba305
 800ead0:	3edb6db7 	.word	0x3edb6db7
 800ead4:	3f19999a 	.word	0x3f19999a
 800ead8:	0800f70c 	.word	0x0800f70c
 800eadc:	3f76384f 	.word	0x3f76384f
 800eae0:	3f763800 	.word	0x3f763800
 800eae4:	369dc3a0 	.word	0x369dc3a0
 800eae8:	0800f714 	.word	0x0800f714
 800eaec:	3338aa3c 	.word	0x3338aa3c
 800eaf0:	43160000 	.word	0x43160000
 800eaf4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800eaf8:	d96f      	bls.n	800ebda <__ieee754_powf+0x50a>
 800eafa:	15db      	asrs	r3, r3, #23
 800eafc:	3b7e      	subs	r3, #126	@ 0x7e
 800eafe:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800eb02:	4118      	asrs	r0, r3
 800eb04:	4408      	add	r0, r1
 800eb06:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800eb0a:	4a4e      	ldr	r2, [pc, #312]	@ (800ec44 <__ieee754_powf+0x574>)
 800eb0c:	3b7f      	subs	r3, #127	@ 0x7f
 800eb0e:	411a      	asrs	r2, r3
 800eb10:	4002      	ands	r2, r0
 800eb12:	ee07 2a10 	vmov	s14, r2
 800eb16:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800eb1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800eb1e:	f1c3 0317 	rsb	r3, r3, #23
 800eb22:	4118      	asrs	r0, r3
 800eb24:	2900      	cmp	r1, #0
 800eb26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb2a:	bfb8      	it	lt
 800eb2c:	4240      	neglt	r0, r0
 800eb2e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800eb32:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800ec48 <__ieee754_powf+0x578>
 800eb36:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800ec4c <__ieee754_powf+0x57c>
 800eb3a:	ee16 3a90 	vmov	r3, s13
 800eb3e:	f36f 030b 	bfc	r3, #0, #12
 800eb42:	ee06 3a90 	vmov	s13, r3
 800eb46:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800eb4a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800eb4e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800eb52:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800ec50 <__ieee754_powf+0x580>
 800eb56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb5a:	eee0 7a87 	vfma.f32	s15, s1, s14
 800eb5e:	eeb0 7a67 	vmov.f32	s14, s15
 800eb62:	eea6 7a86 	vfma.f32	s14, s13, s12
 800eb66:	eef0 5a47 	vmov.f32	s11, s14
 800eb6a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800eb6e:	ee67 6a07 	vmul.f32	s13, s14, s14
 800eb72:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800eb76:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800ec54 <__ieee754_powf+0x584>
 800eb7a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800ec58 <__ieee754_powf+0x588>
 800eb7e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800eb82:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800ec5c <__ieee754_powf+0x58c>
 800eb86:	eee6 5a26 	vfma.f32	s11, s12, s13
 800eb8a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800ec60 <__ieee754_powf+0x590>
 800eb8e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800eb92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ec64 <__ieee754_powf+0x594>
 800eb96:	eee6 5a26 	vfma.f32	s11, s12, s13
 800eb9a:	eeb0 6a47 	vmov.f32	s12, s14
 800eb9e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800eba2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800eba6:	ee67 5a06 	vmul.f32	s11, s14, s12
 800ebaa:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ebae:	eee7 7a27 	vfma.f32	s15, s14, s15
 800ebb2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800ebb6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ebba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebbe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ebc2:	ee10 3a10 	vmov	r3, s0
 800ebc6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ebca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ebce:	da06      	bge.n	800ebde <__ieee754_powf+0x50e>
 800ebd0:	f000 f920 	bl	800ee14 <scalbnf>
 800ebd4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ebd8:	e592      	b.n	800e700 <__ieee754_powf+0x30>
 800ebda:	2000      	movs	r0, #0
 800ebdc:	e7a7      	b.n	800eb2e <__ieee754_powf+0x45e>
 800ebde:	ee00 3a10 	vmov	s0, r3
 800ebe2:	e7f7      	b.n	800ebd4 <__ieee754_powf+0x504>
 800ebe4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ebe8:	e58a      	b.n	800e700 <__ieee754_powf+0x30>
 800ebea:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800ec68 <__ieee754_powf+0x598>
 800ebee:	e587      	b.n	800e700 <__ieee754_powf+0x30>
 800ebf0:	eeb0 0a48 	vmov.f32	s0, s16
 800ebf4:	e584      	b.n	800e700 <__ieee754_powf+0x30>
 800ebf6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ebfa:	f43f adbb 	beq.w	800e774 <__ieee754_powf+0xa4>
 800ebfe:	2502      	movs	r5, #2
 800ec00:	eeb0 0a48 	vmov.f32	s0, s16
 800ec04:	f7ff fbc9 	bl	800e39a <fabsf>
 800ec08:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800ec0c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800ec10:	4647      	mov	r7, r8
 800ec12:	d003      	beq.n	800ec1c <__ieee754_powf+0x54c>
 800ec14:	f1b8 0f00 	cmp.w	r8, #0
 800ec18:	f47f addb 	bne.w	800e7d2 <__ieee754_powf+0x102>
 800ec1c:	2c00      	cmp	r4, #0
 800ec1e:	bfbc      	itt	lt
 800ec20:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800ec24:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800ec28:	2e00      	cmp	r6, #0
 800ec2a:	f6bf ad69 	bge.w	800e700 <__ieee754_powf+0x30>
 800ec2e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800ec32:	ea58 0805 	orrs.w	r8, r8, r5
 800ec36:	f47f adc7 	bne.w	800e7c8 <__ieee754_powf+0xf8>
 800ec3a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ec3e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ec42:	e55d      	b.n	800e700 <__ieee754_powf+0x30>
 800ec44:	ff800000 	.word	0xff800000
 800ec48:	3f317218 	.word	0x3f317218
 800ec4c:	3f317200 	.word	0x3f317200
 800ec50:	35bfbe8c 	.word	0x35bfbe8c
 800ec54:	b5ddea0e 	.word	0xb5ddea0e
 800ec58:	3331bb4c 	.word	0x3331bb4c
 800ec5c:	388ab355 	.word	0x388ab355
 800ec60:	bb360b61 	.word	0xbb360b61
 800ec64:	3e2aaaab 	.word	0x3e2aaaab
 800ec68:	00000000 	.word	0x00000000

0800ec6c <atanf>:
 800ec6c:	b538      	push	{r3, r4, r5, lr}
 800ec6e:	ee10 5a10 	vmov	r5, s0
 800ec72:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ec76:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ec7a:	eef0 7a40 	vmov.f32	s15, s0
 800ec7e:	d310      	bcc.n	800eca2 <atanf+0x36>
 800ec80:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ec84:	d904      	bls.n	800ec90 <atanf+0x24>
 800ec86:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ec8a:	eeb0 0a67 	vmov.f32	s0, s15
 800ec8e:	bd38      	pop	{r3, r4, r5, pc}
 800ec90:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800edc8 <atanf+0x15c>
 800ec94:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800edcc <atanf+0x160>
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	bfc8      	it	gt
 800ec9c:	eef0 7a47 	vmovgt.f32	s15, s14
 800eca0:	e7f3      	b.n	800ec8a <atanf+0x1e>
 800eca2:	4b4b      	ldr	r3, [pc, #300]	@ (800edd0 <atanf+0x164>)
 800eca4:	429c      	cmp	r4, r3
 800eca6:	d810      	bhi.n	800ecca <atanf+0x5e>
 800eca8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ecac:	d20a      	bcs.n	800ecc4 <atanf+0x58>
 800ecae:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800edd4 <atanf+0x168>
 800ecb2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ecb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ecba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ecbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc2:	dce2      	bgt.n	800ec8a <atanf+0x1e>
 800ecc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc8:	e013      	b.n	800ecf2 <atanf+0x86>
 800ecca:	f7ff fb66 	bl	800e39a <fabsf>
 800ecce:	4b42      	ldr	r3, [pc, #264]	@ (800edd8 <atanf+0x16c>)
 800ecd0:	429c      	cmp	r4, r3
 800ecd2:	d84f      	bhi.n	800ed74 <atanf+0x108>
 800ecd4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ecd8:	429c      	cmp	r4, r3
 800ecda:	d841      	bhi.n	800ed60 <atanf+0xf4>
 800ecdc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ece0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ece4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ece8:	2300      	movs	r3, #0
 800ecea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ecee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ecf2:	1c5a      	adds	r2, r3, #1
 800ecf4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ecf8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800eddc <atanf+0x170>
 800ecfc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ede0 <atanf+0x174>
 800ed00:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ede4 <atanf+0x178>
 800ed04:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ed08:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ed0c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ede8 <atanf+0x17c>
 800ed10:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ed14:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800edec <atanf+0x180>
 800ed18:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ed1c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800edf0 <atanf+0x184>
 800ed20:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ed24:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800edf4 <atanf+0x188>
 800ed28:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ed2c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800edf8 <atanf+0x18c>
 800ed30:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ed34:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800edfc <atanf+0x190>
 800ed38:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ed3c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ee00 <atanf+0x194>
 800ed40:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ed44:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ee04 <atanf+0x198>
 800ed48:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ed4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ed50:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ed54:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ed58:	d121      	bne.n	800ed9e <atanf+0x132>
 800ed5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed5e:	e794      	b.n	800ec8a <atanf+0x1e>
 800ed60:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ed64:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ed68:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ed72:	e7be      	b.n	800ecf2 <atanf+0x86>
 800ed74:	4b24      	ldr	r3, [pc, #144]	@ (800ee08 <atanf+0x19c>)
 800ed76:	429c      	cmp	r4, r3
 800ed78:	d80b      	bhi.n	800ed92 <atanf+0x126>
 800ed7a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ed7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed82:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ed86:	2302      	movs	r3, #2
 800ed88:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ed8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed90:	e7af      	b.n	800ecf2 <atanf+0x86>
 800ed92:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ed96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ed9a:	2303      	movs	r3, #3
 800ed9c:	e7a9      	b.n	800ecf2 <atanf+0x86>
 800ed9e:	4a1b      	ldr	r2, [pc, #108]	@ (800ee0c <atanf+0x1a0>)
 800eda0:	491b      	ldr	r1, [pc, #108]	@ (800ee10 <atanf+0x1a4>)
 800eda2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eda6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800edaa:	edd3 6a00 	vldr	s13, [r3]
 800edae:	ee37 7a66 	vsub.f32	s14, s14, s13
 800edb2:	2d00      	cmp	r5, #0
 800edb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800edb8:	edd2 7a00 	vldr	s15, [r2]
 800edbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800edc0:	bfb8      	it	lt
 800edc2:	eef1 7a67 	vneglt.f32	s15, s15
 800edc6:	e760      	b.n	800ec8a <atanf+0x1e>
 800edc8:	bfc90fdb 	.word	0xbfc90fdb
 800edcc:	3fc90fdb 	.word	0x3fc90fdb
 800edd0:	3edfffff 	.word	0x3edfffff
 800edd4:	7149f2ca 	.word	0x7149f2ca
 800edd8:	3f97ffff 	.word	0x3f97ffff
 800eddc:	3c8569d7 	.word	0x3c8569d7
 800ede0:	3d4bda59 	.word	0x3d4bda59
 800ede4:	bd6ef16b 	.word	0xbd6ef16b
 800ede8:	3d886b35 	.word	0x3d886b35
 800edec:	3dba2e6e 	.word	0x3dba2e6e
 800edf0:	3e124925 	.word	0x3e124925
 800edf4:	3eaaaaab 	.word	0x3eaaaaab
 800edf8:	bd15a221 	.word	0xbd15a221
 800edfc:	bd9d8795 	.word	0xbd9d8795
 800ee00:	bde38e38 	.word	0xbde38e38
 800ee04:	be4ccccd 	.word	0xbe4ccccd
 800ee08:	401bffff 	.word	0x401bffff
 800ee0c:	0800f734 	.word	0x0800f734
 800ee10:	0800f724 	.word	0x0800f724

0800ee14 <scalbnf>:
 800ee14:	ee10 3a10 	vmov	r3, s0
 800ee18:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ee1c:	d02b      	beq.n	800ee76 <scalbnf+0x62>
 800ee1e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ee22:	d302      	bcc.n	800ee2a <scalbnf+0x16>
 800ee24:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ee28:	4770      	bx	lr
 800ee2a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ee2e:	d123      	bne.n	800ee78 <scalbnf+0x64>
 800ee30:	4b24      	ldr	r3, [pc, #144]	@ (800eec4 <scalbnf+0xb0>)
 800ee32:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800eec8 <scalbnf+0xb4>
 800ee36:	4298      	cmp	r0, r3
 800ee38:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ee3c:	db17      	blt.n	800ee6e <scalbnf+0x5a>
 800ee3e:	ee10 3a10 	vmov	r3, s0
 800ee42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ee46:	3a19      	subs	r2, #25
 800ee48:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ee4c:	4288      	cmp	r0, r1
 800ee4e:	dd15      	ble.n	800ee7c <scalbnf+0x68>
 800ee50:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800eecc <scalbnf+0xb8>
 800ee54:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800eed0 <scalbnf+0xbc>
 800ee58:	ee10 3a10 	vmov	r3, s0
 800ee5c:	eeb0 7a67 	vmov.f32	s14, s15
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	bfb8      	it	lt
 800ee64:	eef0 7a66 	vmovlt.f32	s15, s13
 800ee68:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ee6c:	4770      	bx	lr
 800ee6e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800eed4 <scalbnf+0xc0>
 800ee72:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ee76:	4770      	bx	lr
 800ee78:	0dd2      	lsrs	r2, r2, #23
 800ee7a:	e7e5      	b.n	800ee48 <scalbnf+0x34>
 800ee7c:	4410      	add	r0, r2
 800ee7e:	28fe      	cmp	r0, #254	@ 0xfe
 800ee80:	dce6      	bgt.n	800ee50 <scalbnf+0x3c>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	dd06      	ble.n	800ee94 <scalbnf+0x80>
 800ee86:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee8a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ee8e:	ee00 3a10 	vmov	s0, r3
 800ee92:	4770      	bx	lr
 800ee94:	f110 0f16 	cmn.w	r0, #22
 800ee98:	da09      	bge.n	800eeae <scalbnf+0x9a>
 800ee9a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800eed4 <scalbnf+0xc0>
 800ee9e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800eed8 <scalbnf+0xc4>
 800eea2:	ee10 3a10 	vmov	r3, s0
 800eea6:	eeb0 7a67 	vmov.f32	s14, s15
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	e7d9      	b.n	800ee62 <scalbnf+0x4e>
 800eeae:	3019      	adds	r0, #25
 800eeb0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800eeb4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800eeb8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800eedc <scalbnf+0xc8>
 800eebc:	ee07 3a90 	vmov	s15, r3
 800eec0:	e7d7      	b.n	800ee72 <scalbnf+0x5e>
 800eec2:	bf00      	nop
 800eec4:	ffff3cb0 	.word	0xffff3cb0
 800eec8:	4c000000 	.word	0x4c000000
 800eecc:	7149f2ca 	.word	0x7149f2ca
 800eed0:	f149f2ca 	.word	0xf149f2ca
 800eed4:	0da24260 	.word	0x0da24260
 800eed8:	8da24260 	.word	0x8da24260
 800eedc:	33000000 	.word	0x33000000

0800eee0 <with_errnof>:
 800eee0:	b510      	push	{r4, lr}
 800eee2:	ed2d 8b02 	vpush	{d8}
 800eee6:	eeb0 8a40 	vmov.f32	s16, s0
 800eeea:	4604      	mov	r4, r0
 800eeec:	f7fd fb8e 	bl	800c60c <__errno>
 800eef0:	eeb0 0a48 	vmov.f32	s0, s16
 800eef4:	ecbd 8b02 	vpop	{d8}
 800eef8:	6004      	str	r4, [r0, #0]
 800eefa:	bd10      	pop	{r4, pc}

0800eefc <xflowf>:
 800eefc:	b130      	cbz	r0, 800ef0c <xflowf+0x10>
 800eefe:	eef1 7a40 	vneg.f32	s15, s0
 800ef02:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ef06:	2022      	movs	r0, #34	@ 0x22
 800ef08:	f7ff bfea 	b.w	800eee0 <with_errnof>
 800ef0c:	eef0 7a40 	vmov.f32	s15, s0
 800ef10:	e7f7      	b.n	800ef02 <xflowf+0x6>
	...

0800ef14 <__math_uflowf>:
 800ef14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ef1c <__math_uflowf+0x8>
 800ef18:	f7ff bff0 	b.w	800eefc <xflowf>
 800ef1c:	10000000 	.word	0x10000000

0800ef20 <__math_oflowf>:
 800ef20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ef28 <__math_oflowf+0x8>
 800ef24:	f7ff bfea 	b.w	800eefc <xflowf>
 800ef28:	70000000 	.word	0x70000000

0800ef2c <__ieee754_sqrtf>:
 800ef2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ef30:	4770      	bx	lr
	...

0800ef34 <_init>:
 800ef34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef36:	bf00      	nop
 800ef38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef3a:	bc08      	pop	{r3}
 800ef3c:	469e      	mov	lr, r3
 800ef3e:	4770      	bx	lr

0800ef40 <_fini>:
 800ef40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef42:	bf00      	nop
 800ef44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef46:	bc08      	pop	{r3}
 800ef48:	469e      	mov	lr, r3
 800ef4a:	4770      	bx	lr
